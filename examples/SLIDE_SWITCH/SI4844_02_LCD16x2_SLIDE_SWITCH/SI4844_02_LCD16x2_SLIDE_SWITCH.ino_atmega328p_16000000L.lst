
/Users/rcaratti/Library/Caches/arduino/sketches/13AFFA734C235960AEDBAAF6F459BC8B/SI4844_02_LCD16x2_SLIDE_SWITCH.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__dtors_end>
       4:	0c 94 f9 09 	jmp	0x13f2	; 0x13f2 <__vector_1>
       8:	0c 94 d2 09 	jmp	0x13a4	; 0x13a4 <__vector_2>
       c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      40:	0c 94 88 09 	jmp	0x1310	; 0x1310 <__vector_16>
      44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      48:	0c 94 46 0a 	jmp	0x148c	; 0x148c <__vector_18>
      4c:	0c 94 20 0a 	jmp	0x1440	; 0x1440 <__vector_19>
      50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      60:	0c 94 78 0a 	jmp	0x14f0	; 0x14f0 <__vector_24>
      64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

00000068 <__trampolines_end>:
__trampolines_start():
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	24 00       	.word	0x0024	; ????
      6e:	27 00       	.word	0x0027	; ????
      70:	2a 00       	.word	0x002a	; ????

00000072 <port_to_output_PGM>:
      72:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000007c <digital_pin_to_port_PGM>:
      7c:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      8c:	03 03 03 03 02 02 03                                .......

00000093 <digital_pin_to_bit_mask_PGM>:
      93:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      a3:	04 08 10 20 40 80 40                                ... @.@

000000aa <digital_pin_to_timer_PGM>:
      aa:	00 00 00 09 00 03 02 00 00 04 05 08 00 00 00 00     ................
	...

000000c2 <__ctors_start>:
__ctors_start():
      c2:	9f 0b       	sbc	r25, r31

000000c4 <__ctors_end>:
__dtors_start():
      c4:	13 0e       	add	r1, r19

000000c6 <__dtors_end>:
__dtors_end():
      c6:	11 24       	eor	r1, r1
      c8:	1f be       	out	0x3f, r1	; 63
      ca:	cf ef       	ldi	r28, 0xFF	; 255
      cc:	d8 e0       	ldi	r29, 0x08	; 8
      ce:	de bf       	out	0x3e, r29	; 62
      d0:	cd bf       	out	0x3d, r28	; 61

000000d2 <__do_clear_bss>:
__do_clear_bss():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
      d2:	24 e0       	ldi	r18, 0x04	; 4
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
      d4:	aa e3       	ldi	r26, 0x3A	; 58
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
      d6:	b2 e0       	ldi	r27, 0x02	; 2
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
      d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
      da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
      dc:	ac 3c       	cpi	r26, 0xCC	; 204
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
      de:	b2 07       	cpc	r27, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
      e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>

000000e2 <__do_copy_data>:
__do_copy_data():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
      e2:	12 e0       	ldi	r17, 0x02	; 2
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
      e4:	a0 e0       	ldi	r26, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
      e6:	b1 e0       	ldi	r27, 0x01	; 1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
      e8:	e4 e4       	ldi	r30, 0x44	; 68
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
      ea:	f1 e2       	ldi	r31, 0x21	; 33
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
      ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x10>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
      ee:	05 90       	lpm	r0, Z+
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
      f0:	0d 92       	st	X+, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
      f2:	aa 33       	cpi	r26, 0x3A	; 58
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
      f4:	b1 07       	cpc	r27, r17
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
      f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0xc>

000000f8 <__do_global_ctors>:
__do_global_ctors():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
      f8:	10 e0       	ldi	r17, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
      fa:	c2 e6       	ldi	r28, 0x62	; 98
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
      fc:	d0 e0       	ldi	r29, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__do_global_ctors+0x10>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     100:	21 97       	sbiw	r28, 0x01	; 1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     102:	fe 01       	movw	r30, r28
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     104:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <__tablejump2__>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     108:	c1 36       	cpi	r28, 0x61	; 97
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     10a:	d1 07       	cpc	r29, r17
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     10c:	c9 f7       	brne	.-14     	; 0x100 <__do_global_ctors+0x8>
     10e:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <main>
     112:	0c 94 95 10 	jmp	0x212a	; 0x212a <__do_global_dtors>

00000116 <__bad_interrupt>:
__vector_22():
     116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <SI4844::convertToChar(unsigned long, char*, unsigned char, unsigned char, unsigned char, bool) [clone .constprop.39]>:
convertToChar():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1429
 * @param len final string size (in bytes)
 * @param dot the decimal or thousand separator position
 * @param separator symbol "." or ","
 * @param remove_leading_zeros if true removes up to two leading zeros (default is true)
 */
void SI4844::convertToChar(uint32_t value, char *strValue, uint8_t len, uint8_t dot, uint8_t separator, bool remove_leading_zeros)
     11a:	4f 92       	push	r4
     11c:	5f 92       	push	r5
     11e:	6f 92       	push	r6
     120:	7f 92       	push	r7
     122:	af 92       	push	r10
     124:	bf 92       	push	r11
     126:	cf 92       	push	r12
     128:	df 92       	push	r13
     12a:	ef 92       	push	r14
     12c:	ff 92       	push	r15
     12e:	0f 93       	push	r16
     130:	1f 93       	push	r17
     132:	cf 93       	push	r28
     134:	df 93       	push	r29
     136:	dc 01       	movw	r26, r24
     138:	cb 01       	movw	r24, r22
     13a:	ea 01       	movw	r28, r20
     13c:	e2 2e       	mov	r14, r18
     13e:	f1 2c       	mov	r15, r1
     140:	e4 0e       	add	r14, r20
     142:	f5 1e       	adc	r15, r21
     144:	67 01       	movw	r12, r14
     146:	57 01       	movw	r10, r14
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1434
{
    char d;
    for (int i = (len - 1); i >= 0; i--)
    {
        d = value % 10;
     148:	2a e0       	ldi	r18, 0x0A	; 10
     14a:	42 2e       	mov	r4, r18
     14c:	51 2c       	mov	r5, r1
     14e:	61 2c       	mov	r6, r1
     150:	71 2c       	mov	r7, r1
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1435
        value = value / 10;
     152:	bc 01       	movw	r22, r24
     154:	cd 01       	movw	r24, r26
     156:	a3 01       	movw	r20, r6
     158:	92 01       	movw	r18, r4
     15a:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__udivmodsi4>
     15e:	da 01       	movw	r26, r20
     160:	c9 01       	movw	r24, r18
     162:	f5 01       	movw	r30, r10
     164:	31 97       	sbiw	r30, 0x01	; 1
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1436
        strValue[i] = d + 48;
     166:	60 5d       	subi	r22, 0xD0	; 208
     168:	60 83       	st	Z, r22
     16a:	22 e0       	ldi	r18, 0x02	; 2
     16c:	a2 1a       	sub	r10, r18
     16e:	b1 08       	sbc	r11, r1
     170:	95 01       	movw	r18, r10
     172:	2c 1b       	sub	r18, r28
     174:	3d 0b       	sbc	r19, r29
     176:	5f 01       	movw	r10, r30
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1432
 * @param remove_leading_zeros if true removes up to two leading zeros (default is true)
 */
void SI4844::convertToChar(uint32_t value, char *strValue, uint8_t len, uint8_t dot, uint8_t separator, bool remove_leading_zeros)
{
    char d;
    for (int i = (len - 1); i >= 0; i--)
     178:	37 ff       	sbrs	r19, 7
     17a:	eb cf       	rjmp	.-42     	; 0x152 <SI4844::convertToChar(unsigned long, char*, unsigned char, unsigned char, unsigned char, bool) [clone .constprop.39]+0x38>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1438
    {
        d = value % 10;
        value = value / 10;
        strValue[i] = d + 48;
    }
    strValue[len] = '\0';
     17c:	f7 01       	movw	r30, r14
     17e:	10 82       	st	Z, r1
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1439
    if (dot > 0)
     180:	00 23       	and	r16, r16
     182:	99 f0       	breq	.+38     	; 0x1aa <SI4844::convertToChar(unsigned long, char*, unsigned char, unsigned char, unsigned char, bool) [clone .constprop.39]+0x90>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1441
    {
        for (int i = len; i >= dot; i--)
     184:	10 e0       	ldi	r17, 0x00	; 0
     186:	c6 01       	movw	r24, r12
     188:	8c 1b       	sub	r24, r28
     18a:	9d 0b       	sbc	r25, r29
     18c:	80 17       	cp	r24, r16
     18e:	91 07       	cpc	r25, r17
     190:	3c f0       	brlt	.+14     	; 0x1a0 <SI4844::convertToChar(unsigned long, char*, unsigned char, unsigned char, unsigned char, bool) [clone .constprop.39]+0x86>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1443
        {
            strValue[i + 1] = strValue[i];
     192:	f6 01       	movw	r30, r12
     194:	80 81       	ld	r24, Z
     196:	81 83       	std	Z+1, r24	; 0x01
     198:	f1 e0       	ldi	r31, 0x01	; 1
     19a:	cf 1a       	sub	r12, r31
     19c:	d1 08       	sbc	r13, r1
     19e:	f3 cf       	rjmp	.-26     	; 0x186 <SI4844::convertToChar(unsigned long, char*, unsigned char, unsigned char, unsigned char, bool) [clone .constprop.39]+0x6c>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1445
        }
        strValue[dot] = separator;
     1a0:	0c 0f       	add	r16, r28
     1a2:	1d 1f       	adc	r17, r29
     1a4:	8e e2       	ldi	r24, 0x2E	; 46
     1a6:	f8 01       	movw	r30, r16
     1a8:	80 83       	st	Z, r24
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1450
    }

    if (remove_leading_zeros)
    {
        if (strValue[0] == '0')
     1aa:	88 81       	ld	r24, Y
     1ac:	80 33       	cpi	r24, 0x30	; 48
     1ae:	31 f4       	brne	.+12     	; 0x1bc <SI4844::convertToChar(unsigned long, char*, unsigned char, unsigned char, unsigned char, bool) [clone .constprop.39]+0xa2>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1452
        {
            strValue[0] = ' ';
     1b0:	80 e2       	ldi	r24, 0x20	; 32
     1b2:	88 83       	st	Y, r24
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1453
            if (strValue[1] == '0')
     1b4:	99 81       	ldd	r25, Y+1	; 0x01
     1b6:	90 33       	cpi	r25, 0x30	; 48
     1b8:	09 f4       	brne	.+2      	; 0x1bc <SI4844::convertToChar(unsigned long, char*, unsigned char, unsigned char, unsigned char, bool) [clone .constprop.39]+0xa2>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1454
                strValue[1] = ' ';
     1ba:	89 83       	std	Y+1, r24	; 0x01
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1457
        }
    }
}
     1bc:	df 91       	pop	r29
     1be:	cf 91       	pop	r28
     1c0:	1f 91       	pop	r17
     1c2:	0f 91       	pop	r16
     1c4:	ff 90       	pop	r15
     1c6:	ef 90       	pop	r14
     1c8:	df 90       	pop	r13
     1ca:	cf 90       	pop	r12
     1cc:	bf 90       	pop	r11
     1ce:	af 90       	pop	r10
     1d0:	7f 90       	pop	r7
     1d2:	6f 90       	pop	r6
     1d4:	5f 90       	pop	r5
     1d6:	4f 90       	pop	r4
     1d8:	08 95       	ret

000001da <twi_readFrom.part.0.constprop.38>:
twi_readFrom.part.0():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:160
 *          data: pointer to byte array
 *          length: number of bytes to read into array
 *          sendStop: Boolean indicating whether to send a stop at the end
 * Output   number of bytes read
 */
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
     1da:	98 2f       	mov	r25, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:177
        twi_handleTimeout(twi_do_reset_on_timeout);
        return 0;
      }
    }
  #else
    while(TWI_READY != twi_state){
     1dc:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <twi_state>
     1e0:	81 11       	cpse	r24, r1
     1e2:	fc cf       	rjmp	.-8      	; 0x1dc <twi_readFrom.part.0.constprop.38+0x2>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:181
      continue;
    }
  #endif
  twi_state = TWI_MRX;
     1e4:	81 e0       	ldi	r24, 0x01	; 1
     1e6:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <twi_state>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:182
  twi_sendStop = sendStop;
     1ea:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <twi_sendStop>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:184
  // reset error state (0xFF.. no error occurred)
  twi_error = 0xFF;
     1ee:	2f ef       	ldi	r18, 0xFF	; 255
     1f0:	20 93 da 02 	sts	0x02DA, r18	; 0x8002da <twi_error>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:187

  // initialize buffer iteration vars
  twi_masterBuffer = data;
     1f4:	24 eb       	ldi	r18, 0xB4	; 180
     1f6:	32 e0       	ldi	r19, 0x02	; 2
     1f8:	30 93 d9 02 	sts	0x02D9, r19	; 0x8002d9 <twi_masterBuffer+0x1>
     1fc:	20 93 d8 02 	sts	0x02D8, r18	; 0x8002d8 <twi_masterBuffer>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:188
  twi_masterBufferIndex = 0;
     200:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <twi_masterBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:189
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
     204:	2f ef       	ldi	r18, 0xFF	; 255
     206:	26 0f       	add	r18, r22
     208:	20 93 d6 02 	sts	0x02D6, r18	; 0x8002d6 <twi_masterBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:197
  // Therefore we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
     20c:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <twi_slarw>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:198
  twi_slarw |= address << 1;
     210:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <twi_slarw>
     214:	99 0f       	add	r25, r25
     216:	98 2b       	or	r25, r24
     218:	90 93 d5 02 	sts	0x02D5, r25	; 0x8002d5 <twi_slarw>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:200

  if (true == twi_inRepStart) {
     21c:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <twi_inRepStart>
     220:	81 30       	cpi	r24, 0x01	; 1
     222:	c9 f4       	brne	.+50     	; 0x256 <twi_readFrom.part.0.constprop.38+0x7c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:207
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // Remember, we're dealing with an ASYNC ISR
     224:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <twi_inRepStart>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:219
          return 0;
        }
      } while(TWCR & _BV(TWWC));
    #else
      do {
        TWDR = twi_slarw;
     228:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <twi_slarw>
     22c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:220
      } while(TWCR & _BV(TWWC));
     230:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     234:	83 fd       	sbrc	r24, 3
     236:	f8 cf       	rjmp	.-16     	; 0x228 <twi_readFrom.part.0.constprop.38+0x4e>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:222
    #endif
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
     238:	85 ec       	ldi	r24, 0xC5	; 197
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:226
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
     23a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:238
        twi_handleTimeout(twi_do_reset_on_timeout);
        return 0;
      }
    }
  #else
    while(TWI_MRX == twi_state){
     23e:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <twi_state>
     242:	81 30       	cpi	r24, 0x01	; 1
     244:	e1 f3       	breq	.-8      	; 0x23e <twi_readFrom.part.0.constprop.38+0x64>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:243
      continue;
    }
  #endif

  if (twi_masterBufferIndex < length)
     246:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <twi_masterBufferIndex>
     24a:	86 17       	cp	r24, r22
     24c:	10 f4       	brcc	.+4      	; 0x252 <twi_readFrom.part.0.constprop.38+0x78>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:244
    length = twi_masterBufferIndex;
     24e:	60 91 d7 02 	lds	r22, 0x02D7	; 0x8002d7 <twi_masterBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:247

  return length;
}
     252:	86 2f       	mov	r24, r22
     254:	08 95       	ret
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:226
    #endif
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
     256:	85 ee       	ldi	r24, 0xE5	; 229
     258:	f0 cf       	rjmp	.-32     	; 0x23a <twi_readFrom.part.0.constprop.38+0x60>

0000025a <TwoWire::endTransmission() [clone .constprop.30]>:
endTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:225
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
  // transmit buffer (blocking)
  uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
     25a:	90 91 b3 02 	lds	r25, 0x02B3	; 0x8002b3 <TwoWire::txBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:269
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    return 1;
     25e:	81 e0       	ldi	r24, 0x01	; 1
twi_writeTo():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:268
 *          5 .. timeout
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
     260:	91 32       	cpi	r25, 0x21	; 33
     262:	08 f0       	brcs	.+2      	; 0x266 <TwoWire::endTransmission() [clone .constprop.30]+0xc>
     264:	43 c0       	rjmp	.+134    	; 0x2ec <TwoWire::endTransmission() [clone .constprop.30]+0x92>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:282
        twi_handleTimeout(twi_do_reset_on_timeout);
        return (5);
      }
    }
  #else
    while(TWI_READY != twi_state){
     266:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <twi_state>
     26a:	81 11       	cpse	r24, r1
     26c:	fc cf       	rjmp	.-8      	; 0x266 <TwoWire::endTransmission() [clone .constprop.30]+0xc>
endTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:225
     26e:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <TwoWire::txAddress>
twi_writeTo():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:287
      continue;
    }
  #endif

  twi_state = TWI_MTX;
     272:	22 e0       	ldi	r18, 0x02	; 2
     274:	20 93 dc 02 	sts	0x02DC, r18	; 0x8002dc <twi_state>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:288
  twi_sendStop = sendStop;
     278:	21 e0       	ldi	r18, 0x01	; 1
     27a:	20 93 db 02 	sts	0x02DB, r18	; 0x8002db <twi_sendStop>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:290
  // reset error state (0xFF.. no error occurred)
  twi_error = 0xFF;
     27e:	2f ef       	ldi	r18, 0xFF	; 255
     280:	20 93 da 02 	sts	0x02DA, r18	; 0x8002da <twi_error>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:293

  // initialize buffer iteration vars
  twi_masterBuffer = data;
     284:	22 e9       	ldi	r18, 0x92	; 146
     286:	32 e0       	ldi	r19, 0x02	; 2
     288:	30 93 d9 02 	sts	0x02D9, r19	; 0x8002d9 <twi_masterBuffer+0x1>
     28c:	20 93 d8 02 	sts	0x02D8, r18	; 0x8002d8 <twi_masterBuffer>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:294
  twi_masterBufferIndex = 0;
     290:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <twi_masterBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:295
  twi_masterBufferLength = length;
     294:	90 93 d6 02 	sts	0x02D6, r25	; 0x8002d6 <twi_masterBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:298

  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
     298:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <twi_slarw>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:299
  twi_slarw |= address << 1;
     29c:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <twi_slarw>
     2a0:	88 0f       	add	r24, r24
     2a2:	89 2b       	or	r24, r25
     2a4:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <twi_slarw>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:304

  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
     2a8:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <twi_inRepStart>
     2ac:	81 30       	cpi	r24, 0x01	; 1
     2ae:	29 f5       	brne	.+74     	; 0x2fa <TwoWire::endTransmission() [clone .constprop.30]+0xa0>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:311
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // Remember, we're dealing with an ASYNC ISR
     2b0:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <twi_inRepStart>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:322
          return (5);
        }
      } while(TWCR & _BV(TWWC));
    #else
      do {
        TWDR = twi_slarw;
     2b4:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <twi_slarw>
     2b8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:323
      } while(TWCR & _BV(TWWC));
     2bc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     2c0:	83 fd       	sbrc	r24, 3
     2c2:	f8 cf       	rjmp	.-16     	; 0x2b4 <TwoWire::endTransmission() [clone .constprop.30]+0x5a>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:325
    #endif
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
     2c4:	85 ec       	ldi	r24, 0xC5	; 197
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:329
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
     2c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:341
        twi_handleTimeout(twi_do_reset_on_timeout);
        return (5);
      }
    }
  #else
    while(wait && (TWI_MTX == twi_state)){
     2ca:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <twi_state>
     2ce:	82 30       	cpi	r24, 0x02	; 2
     2d0:	e1 f3       	breq	.-8      	; 0x2ca <TwoWire::endTransmission() [clone .constprop.30]+0x70>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:346
      continue;
    }
  #endif

  if (twi_error == 0xFF)
     2d2:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <twi_error>
     2d6:	8f 3f       	cpi	r24, 0xFF	; 255
     2d8:	91 f0       	breq	.+36     	; 0x2fe <TwoWire::endTransmission() [clone .constprop.30]+0xa4>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:348
    return 0; // success
  else if (twi_error == TW_MT_SLA_NACK)
     2da:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <twi_error>
     2de:	80 32       	cpi	r24, 0x20	; 32
     2e0:	81 f0       	breq	.+32     	; 0x302 <TwoWire::endTransmission() [clone .constprop.30]+0xa8>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:350
    return 2; // error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
     2e2:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <twi_error>
     2e6:	80 33       	cpi	r24, 0x30	; 48
     2e8:	71 f0       	breq	.+28     	; 0x306 <TwoWire::endTransmission() [clone .constprop.30]+0xac>
endTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:353
    return 3; // error: data send, nack received
  else
    return 4; // other twi error
     2ea:	84 e0       	ldi	r24, 0x04	; 4
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:227
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     2ec:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <TwoWire::txBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:228
  txBufferLength = 0;
     2f0:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <TwoWire::txBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:230
  // indicate that we are done transmitting
  transmitting = 0;
     2f4:	10 92 90 02 	sts	0x0290, r1	; 0x800290 <TwoWire::transmitting>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:240
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
}
     2f8:	08 95       	ret
twi_writeTo():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:329
    #endif
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
     2fa:	85 ee       	ldi	r24, 0xE5	; 229
     2fc:	e4 cf       	rjmp	.-56     	; 0x2c6 <TwoWire::endTransmission() [clone .constprop.30]+0x6c>
endTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:347
      continue;
    }
  #endif

  if (twi_error == 0xFF)
    return 0; // success
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	f5 cf       	rjmp	.-22     	; 0x2ec <TwoWire::endTransmission() [clone .constprop.30]+0x92>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:349
  else if (twi_error == TW_MT_SLA_NACK)
    return 2; // error: address send, nack received
     302:	82 e0       	ldi	r24, 0x02	; 2
     304:	f3 cf       	rjmp	.-26     	; 0x2ec <TwoWire::endTransmission() [clone .constprop.30]+0x92>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:351
  else if (twi_error == TW_MT_DATA_NACK)
    return 3; // error: data send, nack received
     306:	83 e0       	ldi	r24, 0x03	; 3
     308:	f1 cf       	rjmp	.-30     	; 0x2ec <TwoWire::endTransmission() [clone .constprop.30]+0x92>

0000030a <HardwareSerial::availableForWrite()>:
availableForWrite():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:195
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     30a:	fc 01       	movw	r30, r24
     30c:	53 8d       	ldd	r21, Z+27	; 0x1b
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:196
    tail = _tx_buffer_tail;
     30e:	44 8d       	ldd	r20, Z+28	; 0x1c
     310:	25 2f       	mov	r18, r21
     312:	30 e0       	ldi	r19, 0x00	; 0
     314:	84 2f       	mov	r24, r20
     316:	90 e0       	ldi	r25, 0x00	; 0
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:198
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     318:	82 1b       	sub	r24, r18
     31a:	93 0b       	sbc	r25, r19
     31c:	54 17       	cp	r21, r20
     31e:	10 f0       	brcs	.+4      	; 0x324 <HardwareSerial::availableForWrite()+0x1a>
     320:	cf 96       	adiw	r24, 0x3f	; 63
     322:	08 95       	ret
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:199
  return tail - head - 1;
     324:	01 97       	sbiw	r24, 0x01	; 1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:200
}
     326:	08 95       	ret

00000328 <HardwareSerial::read()>:
read():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:178
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
     328:	fc 01       	movw	r30, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:180
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     32a:	91 8d       	ldd	r25, Z+25	; 0x19
     32c:	82 8d       	ldd	r24, Z+26	; 0x1a
     32e:	98 17       	cp	r25, r24
     330:	61 f0       	breq	.+24     	; 0x34a <HardwareSerial::read()+0x22>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:183
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     332:	a2 8d       	ldd	r26, Z+26	; 0x1a
     334:	ae 0f       	add	r26, r30
     336:	bf 2f       	mov	r27, r31
     338:	b1 1d       	adc	r27, r1
     33a:	5d 96       	adiw	r26, 0x1d	; 29
     33c:	8c 91       	ld	r24, X
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:184
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     33e:	92 8d       	ldd	r25, Z+26	; 0x1a
     340:	9f 5f       	subi	r25, 0xFF	; 255
     342:	9f 73       	andi	r25, 0x3F	; 63
     344:	92 8f       	std	Z+26, r25	; 0x1a
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:185
    return c;
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	08 95       	ret
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:181

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     34a:	8f ef       	ldi	r24, 0xFF	; 255
     34c:	9f ef       	ldi	r25, 0xFF	; 255
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:187
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     34e:	08 95       	ret

00000350 <HardwareSerial::peek()>:
peek():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:169
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
     350:	fc 01       	movw	r30, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:170
  if (_rx_buffer_head == _rx_buffer_tail) {
     352:	91 8d       	ldd	r25, Z+25	; 0x19
     354:	82 8d       	ldd	r24, Z+26	; 0x1a
     356:	98 17       	cp	r25, r24
     358:	31 f0       	breq	.+12     	; 0x366 <HardwareSerial::peek()+0x16>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:173
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     35a:	82 8d       	ldd	r24, Z+26	; 0x1a
     35c:	e8 0f       	add	r30, r24
     35e:	f1 1d       	adc	r31, r1
     360:	85 8d       	ldd	r24, Z+29	; 0x1d
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	08 95       	ret
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:171
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     366:	8f ef       	ldi	r24, 0xFF	; 255
     368:	9f ef       	ldi	r25, 0xFF	; 255
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:175
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     36a:	08 95       	ret

0000036c <HardwareSerial::available()>:
available():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:164
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     36c:	fc 01       	movw	r30, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:165
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     36e:	91 8d       	ldd	r25, Z+25	; 0x19
     370:	22 8d       	ldd	r18, Z+26	; 0x1a
     372:	89 2f       	mov	r24, r25
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	80 5c       	subi	r24, 0xC0	; 192
     378:	9f 4f       	sbci	r25, 0xFF	; 255
     37a:	82 1b       	sub	r24, r18
     37c:	91 09       	sbc	r25, r1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:166
}
     37e:	8f 73       	andi	r24, 0x3F	; 63
     380:	99 27       	eor	r25, r25
     382:	08 95       	ret

00000384 <HardwareSerial::_tx_udr_empty_irq()>:
_tx_udr_empty_irq():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     384:	fc 01       	movw	r30, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     386:	a4 8d       	ldd	r26, Z+28	; 0x1c
     388:	a8 0f       	add	r26, r24
     38a:	b9 2f       	mov	r27, r25
     38c:	b1 1d       	adc	r27, r1
     38e:	a3 5a       	subi	r26, 0xA3	; 163
     390:	bf 4f       	sbci	r27, 0xFF	; 255
     392:	2c 91       	ld	r18, X
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     394:	84 8d       	ldd	r24, Z+28	; 0x1c
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	01 96       	adiw	r24, 0x01	; 1
     39a:	8f 73       	andi	r24, 0x3F	; 63
     39c:	99 27       	eor	r25, r25
     39e:	84 8f       	std	Z+28, r24	; 0x1c
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:96

  *_udr = c;
     3a0:	a6 89       	ldd	r26, Z+22	; 0x16
     3a2:	b7 89       	ldd	r27, Z+23	; 0x17
     3a4:	2c 93       	st	X, r18
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:104
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

  #ifdef MPCM0
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     3a6:	a0 89       	ldd	r26, Z+16	; 0x10
     3a8:	b1 89       	ldd	r27, Z+17	; 0x11
     3aa:	8c 91       	ld	r24, X
     3ac:	83 70       	andi	r24, 0x03	; 3
     3ae:	80 64       	ori	r24, 0x40	; 64
     3b0:	8c 93       	st	X, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:109
  #else
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
  #endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     3b2:	93 8d       	ldd	r25, Z+27	; 0x1b
     3b4:	84 8d       	ldd	r24, Z+28	; 0x1c
     3b6:	98 13       	cpse	r25, r24
     3b8:	06 c0       	rjmp	.+12     	; 0x3c6 <HardwareSerial::_tx_udr_empty_irq()+0x42>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
     3ba:	02 88       	ldd	r0, Z+18	; 0x12
     3bc:	f3 89       	ldd	r31, Z+19	; 0x13
     3be:	e0 2d       	mov	r30, r0
     3c0:	80 81       	ld	r24, Z
     3c2:	8f 7d       	andi	r24, 0xDF	; 223
     3c4:	80 83       	st	Z, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:113
  }
}
     3c6:	08 95       	ret

000003c8 <HardwareSerial::write(unsigned char)>:
write():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:223
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     3c8:	ef 92       	push	r14
     3ca:	ff 92       	push	r15
     3cc:	0f 93       	push	r16
     3ce:	1f 93       	push	r17
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
     3d4:	ec 01       	movw	r28, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:224
  _written = true;
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	88 8f       	std	Y+24, r24	; 0x18
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:229
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     3da:	9b 8d       	ldd	r25, Y+27	; 0x1b
     3dc:	8c 8d       	ldd	r24, Y+28	; 0x1c
     3de:	98 13       	cpse	r25, r24
     3e0:	1a c0       	rjmp	.+52     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     3e2:	e8 89       	ldd	r30, Y+16	; 0x10
     3e4:	f9 89       	ldd	r31, Y+17	; 0x11
     3e6:	80 81       	ld	r24, Z
     3e8:	85 ff       	sbrs	r24, 5
     3ea:	15 c0       	rjmp	.+42     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:238
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     3ec:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
/Users/rcaratti/Library/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3ee:	f8 94       	cli
write():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:239
      *_udr = c;
     3f0:	ee 89       	ldd	r30, Y+22	; 0x16
     3f2:	ff 89       	ldd	r31, Y+23	; 0x17
     3f4:	60 83       	st	Z, r22
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:241
      #ifdef MPCM0
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     3f6:	e8 89       	ldd	r30, Y+16	; 0x10
     3f8:	f9 89       	ldd	r31, Y+17	; 0x11
     3fa:	80 81       	ld	r24, Z
     3fc:	83 70       	andi	r24, 0x03	; 3
     3fe:	80 64       	ori	r24, 0x40	; 64
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:271
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    *_ucsrb |= _BV(UDRIE0);
     400:	80 83       	st	Z, r24
__iRestore():
/Users/rcaratti/Library/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     402:	9f bf       	out	0x3f, r25	; 63
write():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:275
  }
  
  return 1;
}
     404:	81 e0       	ldi	r24, 0x01	; 1
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	df 91       	pop	r29
     40a:	cf 91       	pop	r28
     40c:	1f 91       	pop	r17
     40e:	0f 91       	pop	r16
     410:	ff 90       	pop	r15
     412:	ef 90       	pop	r14
     414:	08 95       	ret
     416:	f6 2e       	mov	r15, r22
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:248
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
      #endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     418:	0b 8d       	ldd	r16, Y+27	; 0x1b
     41a:	10 e0       	ldi	r17, 0x00	; 0
     41c:	0f 5f       	subi	r16, 0xFF	; 255
     41e:	1f 4f       	sbci	r17, 0xFF	; 255
     420:	0f 73       	andi	r16, 0x3F	; 63
     422:	11 27       	eor	r17, r17
     424:	e0 2e       	mov	r14, r16
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:252

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     426:	8c 8d       	ldd	r24, Y+28	; 0x1c
     428:	8e 11       	cpse	r24, r14
     42a:	0c c0       	rjmp	.+24     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:253
    if (bit_is_clear(SREG, SREG_I)) {
     42c:	0f b6       	in	r0, 0x3f	; 63
     42e:	07 fc       	sbrc	r0, 7
     430:	fa cf       	rjmp	.-12     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:258
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     432:	e8 89       	ldd	r30, Y+16	; 0x10
     434:	f9 89       	ldd	r31, Y+17	; 0x11
     436:	80 81       	ld	r24, Z
     438:	85 ff       	sbrs	r24, 5
     43a:	f5 cf       	rjmp	.-22     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:259
        _tx_udr_empty_irq();
     43c:	ce 01       	movw	r24, r28
     43e:	0e 94 c2 01 	call	0x384	; 0x384 <HardwareSerial::_tx_udr_empty_irq()>
     442:	f1 cf       	rjmp	.-30     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:265
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     444:	eb 8d       	ldd	r30, Y+27	; 0x1b
     446:	ec 0f       	add	r30, r28
     448:	fd 2f       	mov	r31, r29
     44a:	f1 1d       	adc	r31, r1
     44c:	e3 5a       	subi	r30, 0xA3	; 163
     44e:	ff 4f       	sbci	r31, 0xFF	; 255
     450:	f0 82       	st	Z, r15
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:269
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     452:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
/Users/rcaratti/Library/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     454:	f8 94       	cli
write():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:270
    _tx_buffer_head = i;
     456:	0b 8f       	std	Y+27, r16	; 0x1b
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:271
    *_ucsrb |= _BV(UDRIE0);
     458:	ea 89       	ldd	r30, Y+18	; 0x12
     45a:	fb 89       	ldd	r31, Y+19	; 0x13
     45c:	80 81       	ld	r24, Z
     45e:	80 62       	ori	r24, 0x20	; 32
     460:	cf cf       	rjmp	.-98     	; 0x400 <__LOCK_REGION_LENGTH__>

00000462 <HardwareSerial::flush()>:
flush():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:203
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     462:	cf 93       	push	r28
     464:	df 93       	push	r29
     466:	ec 01       	movw	r28, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:207
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     468:	88 8d       	ldd	r24, Y+24	; 0x18
     46a:	88 23       	and	r24, r24
     46c:	b9 f0       	breq	.+46     	; 0x49c <HardwareSerial::flush()+0x3a>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:210
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     46e:	aa 89       	ldd	r26, Y+18	; 0x12
     470:	bb 89       	ldd	r27, Y+19	; 0x13
     472:	e8 89       	ldd	r30, Y+16	; 0x10
     474:	f9 89       	ldd	r31, Y+17	; 0x11
     476:	8c 91       	ld	r24, X
     478:	85 fd       	sbrc	r24, 5
     47a:	03 c0       	rjmp	.+6      	; 0x482 <HardwareSerial::flush()+0x20>
     47c:	80 81       	ld	r24, Z
     47e:	86 fd       	sbrc	r24, 6
     480:	0d c0       	rjmp	.+26     	; 0x49c <HardwareSerial::flush()+0x3a>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:211
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     482:	0f b6       	in	r0, 0x3f	; 63
     484:	07 fc       	sbrc	r0, 7
     486:	f7 cf       	rjmp	.-18     	; 0x476 <HardwareSerial::flush()+0x14>
     488:	8c 91       	ld	r24, X
     48a:	85 ff       	sbrs	r24, 5
     48c:	f2 cf       	rjmp	.-28     	; 0x472 <HardwareSerial::flush()+0x10>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:215
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
     48e:	80 81       	ld	r24, Z
     490:	85 ff       	sbrs	r24, 5
     492:	ed cf       	rjmp	.-38     	; 0x46e <HardwareSerial::flush()+0xc>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:216
        _tx_udr_empty_irq();
     494:	ce 01       	movw	r24, r28
     496:	0e 94 c2 01 	call	0x384	; 0x384 <HardwareSerial::_tx_udr_empty_irq()>
     49a:	e9 cf       	rjmp	.-46     	; 0x46e <HardwareSerial::flush()+0xc>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:220
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     49c:	df 91       	pop	r29
     49e:	cf 91       	pop	r28
     4a0:	08 95       	ret

000004a2 <Serial0_available()>:
Serial0_available():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     4a2:	8d ed       	ldi	r24, 0xDD	; 221
     4a4:	92 e0       	ldi	r25, 0x02	; 2
     4a6:	0e 94 b6 01 	call	0x36c	; 0x36c <HardwareSerial::available()>
     4aa:	21 e0       	ldi	r18, 0x01	; 1
     4ac:	89 2b       	or	r24, r25
     4ae:	09 f4       	brne	.+2      	; 0x4b2 <Serial0_available()+0x10>
     4b0:	20 e0       	ldi	r18, 0x00	; 0
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
}
     4b2:	82 2f       	mov	r24, r18
     4b4:	08 95       	ret

000004b6 <serialEventRun()>:
serialEventRun():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	89 2b       	or	r24, r25
     4bc:	29 f0       	breq	.+10     	; 0x4c8 <serialEventRun()+0x12>
     4be:	0e 94 51 02 	call	0x4a2	; 0x4a2 <Serial0_available()>
     4c2:	81 11       	cpse	r24, r1
     4c4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:78
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
     4c8:	08 95       	ret

000004ca <digitalWrite>:
digitalWrite():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:189
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
  uint8_t timer = digitalPinToTimer(pin);
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	fc 01       	movw	r30, r24
     4ce:	e6 55       	subi	r30, 0x56	; 86
     4d0:	ff 4f       	sbci	r31, 0xFF	; 255
     4d2:	24 91       	lpm	r18, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
     4d4:	fc 01       	movw	r30, r24
     4d6:	ed 56       	subi	r30, 0x6D	; 109
     4d8:	ff 4f       	sbci	r31, 0xFF	; 255
     4da:	34 91       	lpm	r19, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
     4dc:	fc 01       	movw	r30, r24
     4de:	e4 58       	subi	r30, 0x84	; 132
     4e0:	ff 4f       	sbci	r31, 0xFF	; 255
     4e2:	e4 91       	lpm	r30, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     4e4:	ee 23       	and	r30, r30
     4e6:	c9 f0       	breq	.+50     	; 0x51a <digitalWrite+0x50>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     4e8:	22 23       	and	r18, r18
     4ea:	39 f0       	breq	.+14     	; 0x4fa <digitalWrite+0x30>
turnOffPWM():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
     4ec:	24 30       	cpi	r18, 0x04	; 4
     4ee:	01 f1       	breq	.+64     	; 0x530 <digitalWrite+0x66>
     4f0:	a8 f4       	brcc	.+42     	; 0x51c <digitalWrite+0x52>
     4f2:	22 30       	cpi	r18, 0x02	; 2
     4f4:	69 f1       	breq	.+90     	; 0x550 <digitalWrite+0x86>
     4f6:	23 30       	cpi	r18, 0x03	; 3
     4f8:	79 f1       	breq	.+94     	; 0x558 <digitalWrite+0x8e>
digitalWrite():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:200

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);

  out = portOutputRegister(port);
     4fa:	f0 e0       	ldi	r31, 0x00	; 0
     4fc:	ee 0f       	add	r30, r30
     4fe:	ff 1f       	adc	r31, r31
     500:	ee 58       	subi	r30, 0x8E	; 142
     502:	ff 4f       	sbci	r31, 0xFF	; 255
     504:	a5 91       	lpm	r26, Z+
     506:	b4 91       	lpm	r27, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
     508:	8f b7       	in	r24, 0x3f	; 63
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:203
  cli();
     50a:	f8 94       	cli
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
     50c:	ec 91       	ld	r30, X
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
     50e:	61 11       	cpse	r22, r1
     510:	26 c0       	rjmp	.+76     	; 0x55e <digitalWrite+0x94>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
     512:	30 95       	com	r19
     514:	3e 23       	and	r19, r30
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
     516:	3c 93       	st	X, r19
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
     518:	8f bf       	out	0x3f, r24	; 63
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:212
}
     51a:	08 95       	ret
turnOffPWM():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
     51c:	28 30       	cpi	r18, 0x08	; 8
     51e:	71 f0       	breq	.+28     	; 0x53c <digitalWrite+0x72>
     520:	29 30       	cpi	r18, 0x09	; 9
     522:	91 f0       	breq	.+36     	; 0x548 <digitalWrite+0x7e>
     524:	25 30       	cpi	r18, 0x05	; 5
     526:	49 f7       	brne	.-46     	; 0x4fa <digitalWrite+0x30>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     528:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     52c:	8f 7d       	andi	r24, 0xDF	; 223
     52e:	03 c0       	rjmp	.+6      	; 0x536 <digitalWrite+0x6c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:82
  switch (timer)
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
     530:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     534:	8f 77       	andi	r24, 0x7F	; 127
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     536:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     53a:	df cf       	rjmp	.-66     	; 0x4fa <digitalWrite+0x30>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
     53c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     540:	8f 77       	andi	r24, 0x7F	; 127
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
     542:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     546:	d9 cf       	rjmp	.-78     	; 0x4fa <digitalWrite+0x30>
     548:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     54c:	8f 7d       	andi	r24, 0xDF	; 223
     54e:	f9 cf       	rjmp	.-14     	; 0x542 <digitalWrite+0x78>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
     550:	84 b5       	in	r24, 0x24	; 36
     552:	8f 77       	andi	r24, 0x7F	; 127
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     554:	84 bd       	out	0x24, r24	; 36
     556:	d1 cf       	rjmp	.-94     	; 0x4fa <digitalWrite+0x30>
     558:	84 b5       	in	r24, 0x24	; 36
     55a:	8f 7d       	andi	r24, 0xDF	; 223
     55c:	fb cf       	rjmp	.-10     	; 0x554 <digitalWrite+0x8a>
digitalWrite():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
     55e:	3e 2b       	or	r19, r30
     560:	da cf       	rjmp	.-76     	; 0x516 <digitalWrite+0x4c>

00000562 <pinMode>:
pinMode():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     562:	cf 93       	push	r28
     564:	df 93       	push	r29
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	fc 01       	movw	r30, r24
     56a:	ed 56       	subi	r30, 0x6D	; 109
     56c:	ff 4f       	sbci	r31, 0xFF	; 255
     56e:	24 91       	lpm	r18, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
     570:	84 58       	subi	r24, 0x84	; 132
     572:	9f 4f       	sbci	r25, 0xFF	; 255
     574:	fc 01       	movw	r30, r24
     576:	84 91       	lpm	r24, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     578:	88 23       	and	r24, r24
     57a:	d1 f0       	breq	.+52     	; 0x5b0 <pinMode+0x4e>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	88 0f       	add	r24, r24
     580:	99 1f       	adc	r25, r25
     582:	fc 01       	movw	r30, r24
     584:	e8 59       	subi	r30, 0x98	; 152
     586:	ff 4f       	sbci	r31, 0xFF	; 255
     588:	a5 91       	lpm	r26, Z+
     58a:	b4 91       	lpm	r27, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
     58c:	fc 01       	movw	r30, r24
     58e:	ee 58       	subi	r30, 0x8E	; 142
     590:	ff 4f       	sbci	r31, 0xFF	; 255
     592:	c5 91       	lpm	r28, Z+
     594:	d4 91       	lpm	r29, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
     596:	61 11       	cpse	r22, r1
     598:	0e c0       	rjmp	.+28     	; 0x5b6 <pinMode+0x54>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
     59a:	9f b7       	in	r25, 0x3f	; 63
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:43
    cli();
     59c:	f8 94       	cli
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
     59e:	8c 91       	ld	r24, X
     5a0:	e2 2f       	mov	r30, r18
     5a2:	e0 95       	com	r30
     5a4:	8e 23       	and	r24, r30
     5a6:	8c 93       	st	X, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
     5a8:	28 81       	ld	r18, Y
     5aa:	e2 23       	and	r30, r18
     5ac:	e8 83       	st	Y, r30
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:46
    SREG = oldSREG;
     5ae:	9f bf       	out	0x3f, r25	; 63
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
     5b0:	df 91       	pop	r29
     5b2:	cf 91       	pop	r28
     5b4:	08 95       	ret
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:54
    cli();
    *reg &= ~bit;
    *out |= bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     5b6:	8f b7       	in	r24, 0x3f	; 63
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:55
    cli();
     5b8:	f8 94       	cli
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
     5ba:	ec 91       	ld	r30, X
     5bc:	e2 2b       	or	r30, r18
     5be:	ec 93       	st	X, r30
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
     5c0:	8f bf       	out	0x3f, r24	; 63
     5c2:	f6 cf       	rjmp	.-20     	; 0x5b0 <pinMode+0x4e>

000005c4 <delayMicroseconds>:
delayMicroseconds():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:619
  us -= 7; // = 2 cycles

#elif F_CPU >= 16000000L
  // for a one-microsecond delay, simply return.  the overhead
  // of the function call takes 14 (16) cycles, which is 1 us
  if (us <= 1) return; //  = 3 cycles, (4 when true)
     5c4:	81 30       	cpi	r24, 0x01	; 1
     5c6:	91 05       	cpc	r25, r1
     5c8:	39 f0       	breq	.+14     	; 0x5d8 <delayMicroseconds+0x14>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:624

  // the following loop takes 1/4 of a microsecond (4 cycles)
  // per iteration, so execute it four times for each microsecond of
  // delay requested.
  us <<= 2; // x4 us, = 4 cycles
     5ca:	88 0f       	add	r24, r24
     5cc:	99 1f       	adc	r25, r25
     5ce:	88 0f       	add	r24, r24
     5d0:	99 1f       	adc	r25, r25
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:629

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // to 2nd us is at least 8 so we can substract 5
  us -= 5; // = 2 cycles,
     5d2:	05 97       	sbiw	r24, 0x05	; 5
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
     5d4:	01 97       	sbiw	r24, 0x01	; 1
     5d6:	f1 f7       	brne	.-4      	; 0x5d4 <delayMicroseconds+0x10>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
     5d8:	08 95       	ret

000005da <SI4844::reset() [clone .constprop.12]>:
twi_setFrequency():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:142
 * Input    Clock frequency
 * Output   none
 */
void twi_setFrequency(uint32_t frequency)
{
  TWBR = ((F_CPU / frequency) - 16) / 2;
     5da:	88 e1       	ldi	r24, 0x18	; 24
     5dc:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
reset():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:368
void SI4844::reset()
{
    // waitToSend();

    setClockLow(); // See *Note on page 5
    data_from_device = false;
     5e0:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <_ZL16data_from_device.lto_priv.54>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:369
    digitalWrite(resetPin, LOW);
     5e4:	60 e0       	ldi	r22, 0x00	; 0
     5e6:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <rx+0xe>
     5ea:	0e 94 65 02 	call	0x4ca	; 0x4ca <digitalWrite>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:370
    delayMicroseconds(200);
     5ee:	88 ec       	ldi	r24, 0xC8	; 200
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <delayMicroseconds>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:371
    digitalWrite(resetPin, HIGH);
     5f6:	61 e0       	ldi	r22, 0x01	; 1
     5f8:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <rx+0xe>
     5fc:	0e 94 65 02 	call	0x4ca	; 0x4ca <digitalWrite>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:372
    delayMicroseconds(200);
     600:	88 ec       	ldi	r24, 0xC8	; 200
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <delayMicroseconds>
_ZN6SI484413waitInterruptEv.isra.2():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:166
 * @details It can occur, for example, when you use the analog tuner.  
 */
void SI4844::waitInterrupt(void)
{
    
    while (!data_from_device)
     608:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <_ZL16data_from_device.lto_priv.54>
     60c:	88 23       	and	r24, r24
     60e:	e1 f3       	breq	.-8      	; 0x608 <SI4844::reset() [clone .constprop.12]+0x2e>
reset():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:374
    digitalWrite(resetPin, LOW);
    delayMicroseconds(200);
    digitalWrite(resetPin, HIGH);
    delayMicroseconds(200);
    waitInterrupt();
    delayMicroseconds(2500);
     610:	84 ec       	ldi	r24, 0xC4	; 196
     612:	99 e0       	ldi	r25, 0x09	; 9
     614:	0c 94 e2 02 	jmp	0x5c4	; 0x5c4 <delayMicroseconds>

00000618 <micros>:
micros():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
     618:	3f b7       	in	r19, 0x3f	; 63
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
     61a:	f8 94       	cli
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
     61c:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <timer0_overflow_count>
     620:	90 91 8a 02 	lds	r25, 0x028A	; 0x80028a <timer0_overflow_count+0x1>
     624:	a0 91 8b 02 	lds	r26, 0x028B	; 0x80028b <timer0_overflow_count+0x2>
     628:	b0 91 8c 02 	lds	r27, 0x028C	; 0x80028c <timer0_overflow_count+0x3>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
     62c:	26 b5       	in	r18, 0x26	; 38
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
     62e:	a8 9b       	sbis	0x15, 0	; 21
     630:	05 c0       	rjmp	.+10     	; 0x63c <micros+0x24>
     632:	2f 3f       	cpi	r18, 0xFF	; 255
     634:	19 f0       	breq	.+6      	; 0x63c <micros+0x24>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
     636:	01 96       	adiw	r24, 0x01	; 1
     638:	a1 1d       	adc	r26, r1
     63a:	b1 1d       	adc	r27, r1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
     63c:	3f bf       	out	0x3f, r19	; 63
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
     63e:	ba 2f       	mov	r27, r26
     640:	a9 2f       	mov	r26, r25
     642:	98 2f       	mov	r25, r24
     644:	88 27       	eor	r24, r24
     646:	bc 01       	movw	r22, r24
     648:	cd 01       	movw	r24, r26
     64a:	62 0f       	add	r22, r18
     64c:	71 1d       	adc	r23, r1
     64e:	81 1d       	adc	r24, r1
     650:	91 1d       	adc	r25, r1
     652:	42 e0       	ldi	r20, 0x02	; 2
     654:	66 0f       	add	r22, r22
     656:	77 1f       	adc	r23, r23
     658:	88 1f       	adc	r24, r24
     65a:	99 1f       	adc	r25, r25
     65c:	4a 95       	dec	r20
     65e:	d1 f7       	brne	.-12     	; 0x654 <micros+0x3c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
     660:	08 95       	ret

00000662 <delay>:
delay():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
     662:	8f 92       	push	r8
     664:	9f 92       	push	r9
     666:	af 92       	push	r10
     668:	bf 92       	push	r11
     66a:	cf 92       	push	r12
     66c:	df 92       	push	r13
     66e:	ef 92       	push	r14
     670:	ff 92       	push	r15
     672:	4b 01       	movw	r8, r22
     674:	5c 01       	movw	r10, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
     676:	0e 94 0c 03 	call	0x618	; 0x618 <micros>
     67a:	6b 01       	movw	r12, r22
     67c:	7c 01       	movw	r14, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:401

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     67e:	0e 94 0c 03 	call	0x618	; 0x618 <micros>
     682:	6c 19       	sub	r22, r12
     684:	7d 09       	sbc	r23, r13
     686:	8e 09       	sbc	r24, r14
     688:	9f 09       	sbc	r25, r15
     68a:	68 3e       	cpi	r22, 0xE8	; 232
     68c:	73 40       	sbci	r23, 0x03	; 3
     68e:	81 05       	cpc	r24, r1
     690:	91 05       	cpc	r25, r1
     692:	a8 f3       	brcs	.-22     	; 0x67e <delay+0x1c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:402
      ms--;
     694:	21 e0       	ldi	r18, 0x01	; 1
     696:	82 1a       	sub	r8, r18
     698:	91 08       	sbc	r9, r1
     69a:	a1 08       	sbc	r10, r1
     69c:	b1 08       	sbc	r11, r1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:403
      start += 1000UL;
     69e:	88 ee       	ldi	r24, 0xE8	; 232
     6a0:	c8 0e       	add	r12, r24
     6a2:	83 e0       	ldi	r24, 0x03	; 3
     6a4:	d8 1e       	adc	r13, r24
     6a6:	e1 1c       	adc	r14, r1
     6a8:	f1 1c       	adc	r15, r1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     6aa:	81 14       	cp	r8, r1
     6ac:	91 04       	cpc	r9, r1
     6ae:	a1 04       	cpc	r10, r1
     6b0:	b1 04       	cpc	r11, r1
     6b2:	29 f7       	brne	.-54     	; 0x67e <delay+0x1c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
     6b4:	ff 90       	pop	r15
     6b6:	ef 90       	pop	r14
     6b8:	df 90       	pop	r13
     6ba:	cf 90       	pop	r12
     6bc:	bf 90       	pop	r11
     6be:	af 90       	pop	r10
     6c0:	9f 90       	pop	r9
     6c2:	8f 90       	pop	r8
     6c4:	08 95       	ret

000006c6 <interrupt_hundler()>:
interrupt_hundler():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:41
#ifdef ESP8266    // if the controller is ESP8266, add IRAM_ATTR.
  IRAM_ATTR 
#endif
void interrupt_hundler()
{
   data_from_device = true;
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <_ZL16data_from_device.lto_priv.54>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:42
}
     6cc:	08 95       	ret

000006ce <nothing>:
nothing():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WInterrupts.c:36

#include "wiring_private.h"

static void nothing(void)
{
}
     6ce:	08 95       	ret

000006d0 <Print::write(unsigned char const*, unsigned int)>:
write():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     6d0:	af 92       	push	r10
     6d2:	bf 92       	push	r11
     6d4:	cf 92       	push	r12
     6d6:	df 92       	push	r13
     6d8:	ef 92       	push	r14
     6da:	ff 92       	push	r15
     6dc:	0f 93       	push	r16
     6de:	1f 93       	push	r17
     6e0:	cf 93       	push	r28
     6e2:	df 93       	push	r29
     6e4:	6c 01       	movw	r12, r24
     6e6:	7b 01       	movw	r14, r22
     6e8:	8b 01       	movw	r16, r22
     6ea:	04 0f       	add	r16, r20
     6ec:	15 1f       	adc	r17, r21
     6ee:	eb 01       	movw	r28, r22
     6f0:	5e 01       	movw	r10, r28
     6f2:	ae 18       	sub	r10, r14
     6f4:	bf 08       	sbc	r11, r15
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
     6f6:	c0 17       	cp	r28, r16
     6f8:	d1 07       	cpc	r29, r17
     6fa:	59 f0       	breq	.+22     	; 0x712 <Print::write(unsigned char const*, unsigned int)+0x42>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
     6fc:	69 91       	ld	r22, Y+
     6fe:	d6 01       	movw	r26, r12
     700:	ed 91       	ld	r30, X+
     702:	fc 91       	ld	r31, X
     704:	01 90       	ld	r0, Z+
     706:	f0 81       	ld	r31, Z
     708:	e0 2d       	mov	r30, r0
     70a:	c6 01       	movw	r24, r12
     70c:	09 95       	icall
     70e:	89 2b       	or	r24, r25
     710:	79 f7       	brne	.-34     	; 0x6f0 <Print::write(unsigned char const*, unsigned int)+0x20>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
     712:	c5 01       	movw	r24, r10
     714:	df 91       	pop	r29
     716:	cf 91       	pop	r28
     718:	1f 91       	pop	r17
     71a:	0f 91       	pop	r16
     71c:	ff 90       	pop	r15
     71e:	ef 90       	pop	r14
     720:	df 90       	pop	r13
     722:	cf 90       	pop	r12
     724:	bf 90       	pop	r11
     726:	af 90       	pop	r10
     728:	08 95       	ret

0000072a <LiquidCrystal::pulseEnable()>:
pulseEnable():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:303
    write4bits(value>>4);
    write4bits(value);
  }
}

void LiquidCrystal::pulseEnable(void) {
     72a:	cf 93       	push	r28
     72c:	df 93       	push	r29
     72e:	ec 01       	movw	r28, r24
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:304
  digitalWrite(_enable_pin, LOW);
     730:	60 e0       	ldi	r22, 0x00	; 0
     732:	8e 81       	ldd	r24, Y+6	; 0x06
     734:	0e 94 65 02 	call	0x4ca	; 0x4ca <digitalWrite>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:305
  delayMicroseconds(1);    
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <delayMicroseconds>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:306
  digitalWrite(_enable_pin, HIGH);
     740:	61 e0       	ldi	r22, 0x01	; 1
     742:	8e 81       	ldd	r24, Y+6	; 0x06
     744:	0e 94 65 02 	call	0x4ca	; 0x4ca <digitalWrite>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:307
  delayMicroseconds(1);    // enable pulse must be >450ns
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <delayMicroseconds>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:308
  digitalWrite(_enable_pin, LOW);
     750:	60 e0       	ldi	r22, 0x00	; 0
     752:	8e 81       	ldd	r24, Y+6	; 0x06
     754:	0e 94 65 02 	call	0x4ca	; 0x4ca <digitalWrite>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:309
  delayMicroseconds(100);   // commands need > 37us to settle
     758:	84 e6       	ldi	r24, 0x64	; 100
     75a:	90 e0       	ldi	r25, 0x00	; 0
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:310
}
     75c:	df 91       	pop	r29
     75e:	cf 91       	pop	r28
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:309
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(1);    
  digitalWrite(_enable_pin, HIGH);
  delayMicroseconds(1);    // enable pulse must be >450ns
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(100);   // commands need > 37us to settle
     760:	0c 94 e2 02 	jmp	0x5c4	; 0x5c4 <delayMicroseconds>

00000764 <LiquidCrystal::write4bits(unsigned char)>:
write4bits():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:312
}

void LiquidCrystal::write4bits(uint8_t value) {
     764:	cf 92       	push	r12
     766:	df 92       	push	r13
     768:	ef 92       	push	r14
     76a:	ff 92       	push	r15
     76c:	0f 93       	push	r16
     76e:	1f 93       	push	r17
     770:	cf 93       	push	r28
     772:	df 93       	push	r29
     774:	6c 01       	movw	r12, r24
     776:	7c 01       	movw	r14, r24
     778:	87 e0       	ldi	r24, 0x07	; 7
     77a:	e8 0e       	add	r14, r24
     77c:	f1 1c       	adc	r15, r1
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:313
  for (int i = 0; i < 4; i++) {
     77e:	d0 e0       	ldi	r29, 0x00	; 0
     780:	c0 e0       	ldi	r28, 0x00	; 0
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:314
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
     782:	06 2f       	mov	r16, r22
     784:	10 e0       	ldi	r17, 0x00	; 0
     786:	b8 01       	movw	r22, r16
     788:	0c 2e       	mov	r0, r28
     78a:	02 c0       	rjmp	.+4      	; 0x790 <LiquidCrystal::write4bits(unsigned char)+0x2c>
     78c:	75 95       	asr	r23
     78e:	67 95       	ror	r22
     790:	0a 94       	dec	r0
     792:	e2 f7       	brpl	.-8      	; 0x78c <LiquidCrystal::write4bits(unsigned char)+0x28>
     794:	61 70       	andi	r22, 0x01	; 1
     796:	f7 01       	movw	r30, r14
     798:	81 91       	ld	r24, Z+
     79a:	7f 01       	movw	r14, r30
     79c:	0e 94 65 02 	call	0x4ca	; 0x4ca <digitalWrite>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:313
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(100);   // commands need > 37us to settle
}

void LiquidCrystal::write4bits(uint8_t value) {
  for (int i = 0; i < 4; i++) {
     7a0:	21 96       	adiw	r28, 0x01	; 1
     7a2:	c4 30       	cpi	r28, 0x04	; 4
     7a4:	d1 05       	cpc	r29, r1
     7a6:	79 f7       	brne	.-34     	; 0x786 <LiquidCrystal::write4bits(unsigned char)+0x22>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:317
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }

  pulseEnable();
     7a8:	c6 01       	movw	r24, r12
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:318
}
     7aa:	df 91       	pop	r29
     7ac:	cf 91       	pop	r28
     7ae:	1f 91       	pop	r17
     7b0:	0f 91       	pop	r16
     7b2:	ff 90       	pop	r15
     7b4:	ef 90       	pop	r14
     7b6:	df 90       	pop	r13
     7b8:	cf 90       	pop	r12
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:317
void LiquidCrystal::write4bits(uint8_t value) {
  for (int i = 0; i < 4; i++) {
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }

  pulseEnable();
     7ba:	0c 94 95 03 	jmp	0x72a	; 0x72a <LiquidCrystal::pulseEnable()>

000007be <LiquidCrystal::send(unsigned char, unsigned char)>:
send():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:287
}

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void LiquidCrystal::send(uint8_t value, uint8_t mode) {
     7be:	cf 92       	push	r12
     7c0:	df 92       	push	r13
     7c2:	ef 92       	push	r14
     7c4:	ff 92       	push	r15
     7c6:	0f 93       	push	r16
     7c8:	1f 93       	push	r17
     7ca:	cf 93       	push	r28
     7cc:	df 93       	push	r29
     7ce:	ec 01       	movw	r28, r24
     7d0:	f6 2e       	mov	r15, r22
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:288
  digitalWrite(_rs_pin, mode);
     7d2:	64 2f       	mov	r22, r20
     7d4:	8c 81       	ldd	r24, Y+4	; 0x04
     7d6:	0e 94 65 02 	call	0x4ca	; 0x4ca <digitalWrite>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:291

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
     7da:	8d 81       	ldd	r24, Y+5	; 0x05
     7dc:	8f 3f       	cpi	r24, 0xFF	; 255
     7de:	19 f0       	breq	.+6      	; 0x7e6 <LiquidCrystal::send(unsigned char, unsigned char)+0x28>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:292
    digitalWrite(_rw_pin, LOW);
     7e0:	60 e0       	ldi	r22, 0x00	; 0
     7e2:	0e 94 65 02 	call	0x4ca	; 0x4ca <digitalWrite>
     7e6:	0f 2d       	mov	r16, r15
     7e8:	10 e0       	ldi	r17, 0x00	; 0
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:295
  }
  
  if (_displayfunction & LCD_8BITMODE) {
     7ea:	8f 85       	ldd	r24, Y+15	; 0x0f
     7ec:	84 ff       	sbrs	r24, 4
     7ee:	25 c0       	rjmp	.+74     	; 0x83a <LiquidCrystal::send(unsigned char, unsigned char)+0x7c>
     7f0:	6e 01       	movw	r12, r28
     7f2:	87 e0       	ldi	r24, 0x07	; 7
     7f4:	c8 0e       	add	r12, r24
     7f6:	d1 1c       	adc	r13, r1
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:321

  pulseEnable();
}

void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
     7f8:	f1 2c       	mov	r15, r1
     7fa:	e1 2c       	mov	r14, r1
write8bits():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:322
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
     7fc:	b8 01       	movw	r22, r16
     7fe:	0e 2c       	mov	r0, r14
     800:	02 c0       	rjmp	.+4      	; 0x806 <LiquidCrystal::send(unsigned char, unsigned char)+0x48>
     802:	75 95       	asr	r23
     804:	67 95       	ror	r22
     806:	0a 94       	dec	r0
     808:	e2 f7       	brpl	.-8      	; 0x802 <LiquidCrystal::send(unsigned char, unsigned char)+0x44>
     80a:	61 70       	andi	r22, 0x01	; 1
     80c:	f6 01       	movw	r30, r12
     80e:	81 91       	ld	r24, Z+
     810:	6f 01       	movw	r12, r30
     812:	0e 94 65 02 	call	0x4ca	; 0x4ca <digitalWrite>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:321

  pulseEnable();
}

void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
     816:	ff ef       	ldi	r31, 0xFF	; 255
     818:	ef 1a       	sub	r14, r31
     81a:	ff 0a       	sbc	r15, r31
     81c:	88 e0       	ldi	r24, 0x08	; 8
     81e:	e8 16       	cp	r14, r24
     820:	f1 04       	cpc	r15, r1
     822:	61 f7       	brne	.-40     	; 0x7fc <LiquidCrystal::send(unsigned char, unsigned char)+0x3e>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:325
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }
  
  pulseEnable();
     824:	ce 01       	movw	r24, r28
send():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:301
    write8bits(value); 
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
     826:	df 91       	pop	r29
     828:	cf 91       	pop	r28
     82a:	1f 91       	pop	r17
     82c:	0f 91       	pop	r16
     82e:	ff 90       	pop	r15
     830:	ef 90       	pop	r14
     832:	df 90       	pop	r13
     834:	cf 90       	pop	r12
write8bits():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:325
void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }
  
  pulseEnable();
     836:	0c 94 95 03 	jmp	0x72a	; 0x72a <LiquidCrystal::pulseEnable()>
send():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:298
  }
  
  if (_displayfunction & LCD_8BITMODE) {
    write8bits(value); 
  } else {
    write4bits(value>>4);
     83a:	b8 01       	movw	r22, r16
     83c:	84 e0       	ldi	r24, 0x04	; 4
     83e:	75 95       	asr	r23
     840:	67 95       	ror	r22
     842:	8a 95       	dec	r24
     844:	e1 f7       	brne	.-8      	; 0x83e <LiquidCrystal::send(unsigned char, unsigned char)+0x80>
     846:	ce 01       	movw	r24, r28
     848:	0e 94 b2 03 	call	0x764	; 0x764 <LiquidCrystal::write4bits(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:299
    write4bits(value);
     84c:	6f 2d       	mov	r22, r15
     84e:	ce 01       	movw	r24, r28
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:301
  }
}
     850:	df 91       	pop	r29
     852:	cf 91       	pop	r28
     854:	1f 91       	pop	r17
     856:	0f 91       	pop	r16
     858:	ff 90       	pop	r15
     85a:	ef 90       	pop	r14
     85c:	df 90       	pop	r13
     85e:	cf 90       	pop	r12
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:299
  
  if (_displayfunction & LCD_8BITMODE) {
    write8bits(value); 
  } else {
    write4bits(value>>4);
    write4bits(value);
     860:	0c 94 b2 03 	jmp	0x764	; 0x764 <LiquidCrystal::write4bits(unsigned char)>

00000864 <LiquidCrystal::command(unsigned char) [clone .constprop.48]>:
command():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:276
}

/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
     864:	40 e0       	ldi	r20, 0x00	; 0
     866:	68 2f       	mov	r22, r24
     868:	8a eb       	ldi	r24, 0xBA	; 186
     86a:	93 e0       	ldi	r25, 0x03	; 3
     86c:	0c 94 df 03 	jmp	0x7be	; 0x7be <LiquidCrystal::send(unsigned char, unsigned char)>

00000870 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.45]>:
begin():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:78
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
  
  begin(16, 1);  
}

void LiquidCrystal::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
     870:	cf 93       	push	r28
     872:	df 93       	push	r29
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:79
  if (lines > 1) {
     874:	82 30       	cpi	r24, 0x02	; 2
     876:	29 f4       	brne	.+10     	; 0x882 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.45]+0x12>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:80
    _displayfunction |= LCD_2LINE;
     878:	90 91 c9 03 	lds	r25, 0x03C9	; 0x8003c9 <display+0xf>
     87c:	98 60       	ori	r25, 0x08	; 8
     87e:	90 93 c9 03 	sts	0x03C9, r25	; 0x8003c9 <display+0xf>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:82
  }
  _numlines = lines;
     882:	80 93 cd 03 	sts	0x03CD, r24	; 0x8003cd <display+0x13>
setRowOffsets():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:169

}

void LiquidCrystal::setRowOffsets(int row0, int row1, int row2, int row3)
{
  _row_offsets[0] = row0;
     886:	10 92 ce 03 	sts	0x03CE, r1	; 0x8003ce <display+0x14>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:170
  _row_offsets[1] = row1;
     88a:	80 e4       	ldi	r24, 0x40	; 64
     88c:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <display+0x15>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:171
  _row_offsets[2] = row2;
     890:	80 e1       	ldi	r24, 0x10	; 16
     892:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <display+0x16>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:172
  _row_offsets[3] = row3;
     896:	80 e5       	ldi	r24, 0x50	; 80
     898:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <display+0x17>
begin():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:91
  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
    _displayfunction |= LCD_5x10DOTS;
  }

  pinMode(_rs_pin, OUTPUT);
     89c:	61 e0       	ldi	r22, 0x01	; 1
     89e:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <display+0x4>
     8a2:	0e 94 b1 02 	call	0x562	; 0x562 <pinMode>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:93
  // we can save 1 pin by not using RW. Indicate by passing 255 instead of pin#
  if (_rw_pin != 255) { 
     8a6:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <display+0x5>
     8aa:	8f 3f       	cpi	r24, 0xFF	; 255
     8ac:	19 f0       	breq	.+6      	; 0x8b4 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.45]+0x44>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:94
    pinMode(_rw_pin, OUTPUT);
     8ae:	61 e0       	ldi	r22, 0x01	; 1
     8b0:	0e 94 b1 02 	call	0x562	; 0x562 <pinMode>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:96
  }
  pinMode(_enable_pin, OUTPUT);
     8b4:	61 e0       	ldi	r22, 0x01	; 1
     8b6:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <display+0x6>
     8ba:	0e 94 b1 02 	call	0x562	; 0x562 <pinMode>
     8be:	ca eb       	ldi	r28, 0xBA	; 186
     8c0:	d3 e0       	ldi	r29, 0x03	; 3
     8c2:	9e 01       	movw	r18, r28
     8c4:	2a 5b       	subi	r18, 0xBA	; 186
     8c6:	33 40       	sbci	r19, 0x03	; 3
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:99
  
  // Do these once, instead of every time a character is drawn for speed reasons.
  for (int i=0; i<((_displayfunction & LCD_8BITMODE) ? 8 : 4); ++i)
     8c8:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <display+0xf>
     8cc:	84 fd       	sbrc	r24, 4
     8ce:	0b c0       	rjmp	.+22     	; 0x8e6 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.45]+0x76>
     8d0:	84 e0       	ldi	r24, 0x04	; 4
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	21 96       	adiw	r28, 0x01	; 1
     8d6:	28 17       	cp	r18, r24
     8d8:	39 07       	cpc	r19, r25
     8da:	44 f4       	brge	.+16     	; 0x8ec <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.45]+0x7c>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:101
  {
    pinMode(_data_pins[i], OUTPUT);
     8dc:	61 e0       	ldi	r22, 0x01	; 1
     8de:	8e 81       	ldd	r24, Y+6	; 0x06
     8e0:	0e 94 b1 02 	call	0x562	; 0x562 <pinMode>
     8e4:	ee cf       	rjmp	.-36     	; 0x8c2 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.45]+0x52>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:99
    pinMode(_rw_pin, OUTPUT);
  }
  pinMode(_enable_pin, OUTPUT);
  
  // Do these once, instead of every time a character is drawn for speed reasons.
  for (int i=0; i<((_displayfunction & LCD_8BITMODE) ? 8 : 4); ++i)
     8e6:	88 e0       	ldi	r24, 0x08	; 8
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	f4 cf       	rjmp	.-24     	; 0x8d4 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.45]+0x64>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:107
   } 

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // before sending commands. Arduino can turn on way before 4.5V so we'll wait 50
  delayMicroseconds(50000); 
     8ec:	80 e5       	ldi	r24, 0x50	; 80
     8ee:	93 ec       	ldi	r25, 0xC3	; 195
     8f0:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <delayMicroseconds>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:109
  // Now we pull both RS and R/W low to begin commands
  digitalWrite(_rs_pin, LOW);
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <display+0x4>
     8fa:	0e 94 65 02 	call	0x4ca	; 0x4ca <digitalWrite>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:110
  digitalWrite(_enable_pin, LOW);
     8fe:	60 e0       	ldi	r22, 0x00	; 0
     900:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <display+0x6>
     904:	0e 94 65 02 	call	0x4ca	; 0x4ca <digitalWrite>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:111
  if (_rw_pin != 255) { 
     908:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <display+0x5>
     90c:	8f 3f       	cpi	r24, 0xFF	; 255
     90e:	19 f0       	breq	.+6      	; 0x916 <__stack+0x17>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:112
    digitalWrite(_rw_pin, LOW);
     910:	60 e0       	ldi	r22, 0x00	; 0
     912:	0e 94 65 02 	call	0x4ca	; 0x4ca <digitalWrite>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:116
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
     916:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <display+0xf>
     91a:	84 fd       	sbrc	r24, 4
     91c:	3a c0       	rjmp	.+116    	; 0x992 <__stack+0x93>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:121
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
     91e:	63 e0       	ldi	r22, 0x03	; 3
     920:	8a eb       	ldi	r24, 0xBA	; 186
     922:	93 e0       	ldi	r25, 0x03	; 3
     924:	0e 94 b2 03 	call	0x764	; 0x764 <LiquidCrystal::write4bits(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:122
    delayMicroseconds(4500); // wait min 4.1ms
     928:	84 e9       	ldi	r24, 0x94	; 148
     92a:	91 e1       	ldi	r25, 0x11	; 17
     92c:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <delayMicroseconds>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:125

    // second try
    write4bits(0x03);
     930:	63 e0       	ldi	r22, 0x03	; 3
     932:	8a eb       	ldi	r24, 0xBA	; 186
     934:	93 e0       	ldi	r25, 0x03	; 3
     936:	0e 94 b2 03 	call	0x764	; 0x764 <LiquidCrystal::write4bits(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:126
    delayMicroseconds(4500); // wait min 4.1ms
     93a:	84 e9       	ldi	r24, 0x94	; 148
     93c:	91 e1       	ldi	r25, 0x11	; 17
     93e:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <delayMicroseconds>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:129
    
    // third go!
    write4bits(0x03); 
     942:	63 e0       	ldi	r22, 0x03	; 3
     944:	8a eb       	ldi	r24, 0xBA	; 186
     946:	93 e0       	ldi	r25, 0x03	; 3
     948:	0e 94 b2 03 	call	0x764	; 0x764 <LiquidCrystal::write4bits(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:130
    delayMicroseconds(150);
     94c:	86 e9       	ldi	r24, 0x96	; 150
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <delayMicroseconds>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:133

    // finally, set to 4-bit interface
    write4bits(0x02); 
     954:	62 e0       	ldi	r22, 0x02	; 2
     956:	8a eb       	ldi	r24, 0xBA	; 186
     958:	93 e0       	ldi	r25, 0x03	; 3
     95a:	0e 94 b2 03 	call	0x764	; 0x764 <LiquidCrystal::write4bits(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:151
    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
     95e:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <display+0xf>
     962:	80 62       	ori	r24, 0x20	; 32
     964:	0e 94 32 04 	call	0x864	; 0x864 <LiquidCrystal::command(unsigned char) [clone .constprop.48]>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:154

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
     968:	84 e0       	ldi	r24, 0x04	; 4
     96a:	80 93 ca 03 	sts	0x03CA, r24	; 0x8003ca <display+0x10>
display():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:208
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void LiquidCrystal::display() {
  _displaycontrol |= LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
     96e:	8c e0       	ldi	r24, 0x0C	; 12
     970:	0e 94 32 04 	call	0x864	; 0x864 <LiquidCrystal::command(unsigned char) [clone .constprop.48]>
clear():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:178
}

/********** high level commands, for the user! */
void LiquidCrystal::clear()
{
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	0e 94 32 04 	call	0x864	; 0x864 <LiquidCrystal::command(unsigned char) [clone .constprop.48]>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:179
  delayMicroseconds(2000);  // this command takes a long time!
     97a:	80 ed       	ldi	r24, 0xD0	; 208
     97c:	97 e0       	ldi	r25, 0x07	; 7
     97e:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <delayMicroseconds>
begin():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:161

  // clear it off
  clear();

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
     982:	82 e0       	ldi	r24, 0x02	; 2
     984:	80 93 cb 03 	sts	0x03CB, r24	; 0x8003cb <display+0x11>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:163
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
     988:	86 e0       	ldi	r24, 0x06	; 6
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:165

}
     98a:	df 91       	pop	r29
     98c:	cf 91       	pop	r28
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:163
  clear();

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
     98e:	0c 94 32 04 	jmp	0x864	; 0x864 <LiquidCrystal::command(unsigned char) [clone .constprop.48]>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:139
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
     992:	80 62       	ori	r24, 0x20	; 32
     994:	0e 94 32 04 	call	0x864	; 0x864 <LiquidCrystal::command(unsigned char) [clone .constprop.48]>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:140
    delayMicroseconds(4500);  // wait more than 4.1ms
     998:	84 e9       	ldi	r24, 0x94	; 148
     99a:	91 e1       	ldi	r25, 0x11	; 17
     99c:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <delayMicroseconds>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:143

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
     9a0:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <display+0xf>
     9a4:	80 62       	ori	r24, 0x20	; 32
     9a6:	0e 94 32 04 	call	0x864	; 0x864 <LiquidCrystal::command(unsigned char) [clone .constprop.48]>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:144
    delayMicroseconds(150);
     9aa:	86 e9       	ldi	r24, 0x96	; 150
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <delayMicroseconds>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:147

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
     9b2:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <display+0xf>
     9b6:	80 62       	ori	r24, 0x20	; 32
     9b8:	0e 94 32 04 	call	0x864	; 0x864 <LiquidCrystal::command(unsigned char) [clone .constprop.48]>
     9bc:	d0 cf       	rjmp	.-96     	; 0x95e <__stack+0x5f>

000009be <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.22]>:
setCursor():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:194
{
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
  if ( row >= max_lines ) {
    row = max_lines - 1;    // we count rows starting w/0
  }
  if ( row >= _numlines ) {
     9be:	90 91 cd 03 	lds	r25, 0x03CD	; 0x8003cd <display+0x13>
     9c2:	69 17       	cp	r22, r25
     9c4:	10 f0       	brcs	.+4      	; 0x9ca <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.22]+0xc>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:195
    row = _numlines - 1;    // we count rows starting w/0
     9c6:	6f ef       	ldi	r22, 0xFF	; 255
     9c8:	69 0f       	add	r22, r25
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:198
  }
  
  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
     9ca:	e6 2f       	mov	r30, r22
     9cc:	f0 e0       	ldi	r31, 0x00	; 0
     9ce:	e6 54       	subi	r30, 0x46	; 70
     9d0:	fc 4f       	sbci	r31, 0xFC	; 252
     9d2:	94 89       	ldd	r25, Z+20	; 0x14
     9d4:	89 0f       	add	r24, r25
     9d6:	80 68       	ori	r24, 0x80	; 128
     9d8:	0c 94 32 04 	jmp	0x864	; 0x864 <LiquidCrystal::command(unsigned char) [clone .constprop.48]>

000009dc <LiquidCrystal::write(unsigned char)>:
write():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:280
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
     9dc:	41 e0       	ldi	r20, 0x01	; 1
     9de:	0e 94 df 03 	call	0x7be	; 0x7be <LiquidCrystal::send(unsigned char, unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:282
  return 1; // assume sucess
}
     9e2:	81 e0       	ldi	r24, 0x01	; 1
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	08 95       	ret

000009e8 <Print::flush()>:
flush():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.h:65

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     9e8:	08 95       	ret

000009ea <twi_stop>:
twi_stop():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:436
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     9ea:	85 ed       	ldi	r24, 0xD5	; 213
     9ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:456
          return;
        }
      }
    }
  #else
    while(TWCR & _BV(TWSTO)){
     9f0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     9f4:	84 fd       	sbrc	r24, 4
     9f6:	fc cf       	rjmp	.-8      	; 0x9f0 <twi_stop+0x6>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:462
      continue;
    }
  #endif

  // update twi state
  twi_state = TWI_READY;
     9f8:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <twi_state>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:463
}
     9fc:	08 95       	ret

000009fe <twi_transmit>:
twi_transmit():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:371
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
     9fe:	20 91 61 02 	lds	r18, 0x0261	; 0x800261 <twi_txBufferLength>
     a02:	26 0f       	add	r18, r22
     a04:	33 27       	eor	r19, r19
     a06:	33 1f       	adc	r19, r19
     a08:	21 32       	cpi	r18, 0x21	; 33
     a0a:	31 05       	cpc	r19, r1
     a0c:	ec f4       	brge	.+58     	; 0xa48 <twi_transmit+0x4a>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:376
    return 1;
  }

  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
     a0e:	20 91 dc 02 	lds	r18, 0x02DC	; 0x8002dc <twi_state>
     a12:	fc 01       	movw	r30, r24
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	24 30       	cpi	r18, 0x04	; 4
     a1a:	69 f0       	breq	.+26     	; 0xa36 <twi_transmit+0x38>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:377
    return 2;
     a1c:	82 e0       	ldi	r24, 0x02	; 2
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:387
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;

  return 0;
}
     a1e:	08 95       	ret
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:382
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    twi_txBuffer[twi_txBufferLength+i] = data[i];
     a20:	a0 91 61 02 	lds	r26, 0x0261	; 0x800261 <twi_txBufferLength>
     a24:	21 91       	ld	r18, Z+
     a26:	ac 01       	movw	r20, r24
     a28:	4f 5b       	subi	r20, 0xBF	; 191
     a2a:	5d 4f       	sbci	r21, 0xFD	; 253
     a2c:	a4 0f       	add	r26, r20
     a2e:	b5 2f       	mov	r27, r21
     a30:	b1 1d       	adc	r27, r1
     a32:	2c 93       	st	X, r18
     a34:	01 96       	adiw	r24, 0x01	; 1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:381
  if(TWI_STX != twi_state){
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
     a36:	86 17       	cp	r24, r22
     a38:	98 f3       	brcs	.-26     	; 0xa20 <twi_transmit+0x22>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:384
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
     a3a:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <twi_txBufferLength>
     a3e:	68 0f       	add	r22, r24
     a40:	60 93 61 02 	sts	0x0261, r22	; 0x800261 <twi_txBufferLength>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	08 95       	ret
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:372
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    return 1;
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 95       	ret

00000a4c <TwoWire::flush()>:
flush():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:326
}

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
     a4c:	08 95       	ret

00000a4e <TwoWire::peek()>:
peek():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:316
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;

  if(rxBufferIndex < rxBufferLength){
     a4e:	e0 91 8f 02 	lds	r30, 0x028F	; 0x80028f <TwoWire::rxBufferIndex>
     a52:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <TwoWire::rxBufferLength>
     a56:	e8 17       	cp	r30, r24
     a58:	30 f4       	brcc	.+12     	; 0xa66 <TwoWire::peek()+0x18>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:317
    value = rxBuffer[rxBufferIndex];
     a5a:	f0 e0       	ldi	r31, 0x00	; 0
     a5c:	ec 54       	subi	r30, 0x4C	; 76
     a5e:	fd 4f       	sbci	r31, 0xFD	; 253
     a60:	80 81       	ld	r24, Z
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	08 95       	ret
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:314
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
     a66:	8f ef       	ldi	r24, 0xFF	; 255
     a68:	9f ef       	ldi	r25, 0xFF	; 255
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:321
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
     a6a:	08 95       	ret

00000a6c <TwoWire::read()>:
read():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:301
int TwoWire::read(void)
{
  int value = -1;

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     a6c:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <TwoWire::rxBufferIndex>
     a70:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <TwoWire::rxBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:298
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
     a74:	2f ef       	ldi	r18, 0xFF	; 255
     a76:	3f ef       	ldi	r19, 0xFF	; 255
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:301

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     a78:	98 17       	cp	r25, r24
     a7a:	48 f4       	brcc	.+18     	; 0xa8e <TwoWire::read()+0x22>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:302
    value = rxBuffer[rxBufferIndex];
     a7c:	e9 2f       	mov	r30, r25
     a7e:	f0 e0       	ldi	r31, 0x00	; 0
     a80:	ec 54       	subi	r30, 0x4C	; 76
     a82:	fd 4f       	sbci	r31, 0xFD	; 253
     a84:	20 81       	ld	r18, Z
     a86:	30 e0       	ldi	r19, 0x00	; 0
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:303
    ++rxBufferIndex;
     a88:	9f 5f       	subi	r25, 0xFF	; 255
     a8a:	90 93 8f 02 	sts	0x028F, r25	; 0x80028f <TwoWire::rxBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:307
  }

  return value;
}
     a8e:	c9 01       	movw	r24, r18
     a90:	08 95       	ret

00000a92 <TwoWire::available()>:
available():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:290
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
     a92:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <TwoWire::rxBufferLength>
     a96:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <TwoWire::rxBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:291
}
     a9a:	89 1b       	sub	r24, r25
     a9c:	99 0b       	sbc	r25, r25
     a9e:	08 95       	ret

00000aa0 <TwoWire::write(unsigned char const*, unsigned int)>:
write():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:271

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
     aa0:	cf 92       	push	r12
     aa2:	df 92       	push	r13
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	cf 93       	push	r28
     aae:	df 93       	push	r29
     ab0:	7c 01       	movw	r14, r24
     ab2:	cb 01       	movw	r24, r22
     ab4:	8a 01       	movw	r16, r20
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:272
  if(transmitting){
     ab6:	20 91 90 02 	lds	r18, 0x0290	; 0x800290 <TwoWire::transmitting>
     aba:	22 23       	and	r18, r18
     abc:	89 f0       	breq	.+34     	; 0xae0 <TwoWire::write(unsigned char const*, unsigned int)+0x40>
     abe:	eb 01       	movw	r28, r22
     ac0:	6b 01       	movw	r12, r22
     ac2:	c4 0e       	add	r12, r20
     ac4:	d5 1e       	adc	r13, r21
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:274
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
     ac6:	cc 15       	cp	r28, r12
     ac8:	dd 05       	cpc	r29, r13
     aca:	69 f0       	breq	.+26     	; 0xae6 <TwoWire::write(unsigned char const*, unsigned int)+0x46>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:275
      write(data[i]);
     acc:	69 91       	ld	r22, Y+
     ace:	d7 01       	movw	r26, r14
     ad0:	ed 91       	ld	r30, X+
     ad2:	fc 91       	ld	r31, X
     ad4:	01 90       	ld	r0, Z+
     ad6:	f0 81       	ld	r31, Z
     ad8:	e0 2d       	mov	r30, r0
     ada:	c7 01       	movw	r24, r14
     adc:	09 95       	icall
     ade:	f3 cf       	rjmp	.-26     	; 0xac6 <TwoWire::write(unsigned char const*, unsigned int)+0x26>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:280
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
     ae0:	64 2f       	mov	r22, r20
     ae2:	0e 94 ff 04 	call	0x9fe	; 0x9fe <twi_transmit>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:283
  }
  return quantity;
}
     ae6:	c8 01       	movw	r24, r16
     ae8:	df 91       	pop	r29
     aea:	cf 91       	pop	r28
     aec:	1f 91       	pop	r17
     aee:	0f 91       	pop	r16
     af0:	ff 90       	pop	r15
     af2:	ef 90       	pop	r14
     af4:	df 90       	pop	r13
     af6:	cf 90       	pop	r12
     af8:	08 95       	ret

00000afa <TwoWire::write(unsigned char)>:
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:246

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
     afa:	cf 93       	push	r28
     afc:	df 93       	push	r29
     afe:	1f 92       	push	r1
     b00:	cd b7       	in	r28, 0x3d	; 61
     b02:	de b7       	in	r29, 0x3e	; 62
     b04:	69 83       	std	Y+1, r22	; 0x01
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:247
  if(transmitting){
     b06:	20 91 90 02 	lds	r18, 0x0290	; 0x800290 <TwoWire::transmitting>
     b0a:	22 23       	and	r18, r18
     b0c:	f9 f0       	breq	.+62     	; 0xb4c <TwoWire::write(unsigned char)+0x52>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:250
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= TWI_BUFFER_SIZE){
     b0e:	20 91 b3 02 	lds	r18, 0x02B3	; 0x8002b3 <TwoWire::txBufferLength>
     b12:	20 32       	cpi	r18, 0x20	; 32
     b14:	58 f0       	brcs	.+22     	; 0xb2c <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.h:44
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
     b16:	21 e0       	ldi	r18, 0x01	; 1
     b18:	30 e0       	ldi	r19, 0x00	; 0
     b1a:	fc 01       	movw	r30, r24
     b1c:	33 83       	std	Z+3, r19	; 0x03
     b1e:	22 83       	std	Z+2, r18	; 0x02
write():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:252
      setWriteError();
      return 0;
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	80 e0       	ldi	r24, 0x00	; 0
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:265
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
}
     b24:	0f 90       	pop	r0
     b26:	df 91       	pop	r29
     b28:	cf 91       	pop	r28
     b2a:	08 95       	ret
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:255
    if(txBufferLength >= TWI_BUFFER_SIZE){
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
     b2c:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <TwoWire::txBufferIndex>
     b30:	e8 2f       	mov	r30, r24
     b32:	f0 e0       	ldi	r31, 0x00	; 0
     b34:	ee 56       	subi	r30, 0x6E	; 110
     b36:	fd 4f       	sbci	r31, 0xFD	; 253
     b38:	99 81       	ldd	r25, Y+1	; 0x01
     b3a:	90 83       	st	Z, r25
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:256
    ++txBufferIndex;
     b3c:	8f 5f       	subi	r24, 0xFF	; 255
     b3e:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <TwoWire::txBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:258
    // update amount in buffer
    txBufferLength = txBufferIndex;
     b42:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <TwoWire::txBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:264
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	ec cf       	rjmp	.-40     	; 0xb24 <TwoWire::write(unsigned char)+0x2a>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:262
    // update amount in buffer
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
     b4c:	61 e0       	ldi	r22, 0x01	; 1
     b4e:	ce 01       	movw	r24, r28
     b50:	01 96       	adiw	r24, 0x01	; 1
     b52:	0e 94 ff 04 	call	0x9fe	; 0x9fe <twi_transmit>
     b56:	f7 cf       	rjmp	.-18     	; 0xb46 <TwoWire::write(unsigned char)+0x4c>

00000b58 <TwoWire::write(int) [clone .constprop.29]>:
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.h:87
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     b58:	68 2f       	mov	r22, r24
     b5a:	8a e7       	ldi	r24, 0x7A	; 122
     b5c:	93 e0       	ldi	r25, 0x03	; 3
     b5e:	0c 94 7d 05 	jmp	0xafa	; 0xafa <TwoWire::write(unsigned char)>

00000b62 <Print::availableForWrite()>:
availableForWrite():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.h:63
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	08 95       	ret

00000b68 <SI4844::getStatus() [clone .constprop.10]>:
beginTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:196
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <TwoWire::transmitting>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:198
  // set address of targeted slave
  txAddress = address;
     b6e:	81 e1       	ldi	r24, 0x11	; 17
     b70:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <TwoWire::txAddress>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:200
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     b74:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <TwoWire::txBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:201
  txBufferLength = 0;
     b78:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <TwoWire::txBufferLength>
getStatus():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:981
 * @details this method updates the first byte of all_receiver_status member variable
 * @return  pointer to a structure type si4844_device_status
 */
 si4844_device_status *SI4844::getStatus() {
    Wire.beginTransmission(SI4844_ADDRESS);
    Wire.write(ATDD_GET_STATUS);
     b7c:	80 ee       	ldi	r24, 0xE0	; 224
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	0e 94 ac 05 	call	0xb58	; 0xb58 <TwoWire::write(int) [clone .constprop.29]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:982
    Wire.endTransmission();
     b84:	0e 94 2d 01 	call	0x25a	; 0x25a <TwoWire::endTransmission() [clone .constprop.30]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:983
    delayMicroseconds(2000);
     b88:	80 ed       	ldi	r24, 0xD0	; 208
     b8a:	97 e0       	ldi	r25, 0x07	; 7
     b8c:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <delayMicroseconds>
twi_readFrom():
     b90:	61 e0       	ldi	r22, 0x01	; 1
     b92:	81 e1       	ldi	r24, 0x11	; 17
     b94:	0e 94 ed 00 	call	0x1da	; 0x1da <twi_readFrom.part.0.constprop.38>
requestFrom():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:120
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
     b98:	10 92 8f 02 	sts	0x028F, r1	; 0x80028f <TwoWire::rxBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:121
  rxBufferLength = read;
     b9c:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <TwoWire::rxBufferLength>
getStatus():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:985
    Wire.requestFrom(SI4844_ADDRESS, 1);
    all_receiver_status.raw[0] = Wire.read();
     ba0:	8a e7       	ldi	r24, 0x7A	; 122
     ba2:	93 e0       	ldi	r25, 0x03	; 3
     ba4:	0e 94 36 05 	call	0xa6c	; 0xa6c <TwoWire::read()>
     ba8:	ea e8       	ldi	r30, 0x8A	; 138
     baa:	f3 e0       	ldi	r31, 0x03	; 3
     bac:	81 83       	std	Z+1, r24	; 0x01
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:986
    device_status.raw = all_receiver_status.raw[0];
     bae:	80 83       	st	Z, r24
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:988
    return &device_status; 
 }
     bb0:	cf 01       	movw	r24, r30
     bb2:	08 95       	ret

00000bb4 <SI4844::getAllReceiverInfo() [clone .constprop.25]>:
getAllReceiverInfo():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:998
 * @details Use this method only if you want to deal with that information by yourself. 
 * @details all data of the receiver is storted in "all_receiver_status" member variable 
 * @details This library has other methods to get that information easier. 
 * @return pointer to a structure type si4844_status_response
 */
si4844_status_response *SI4844::getAllReceiverInfo()
     bb4:	0f 93       	push	r16
     bb6:	1f 93       	push	r17
     bb8:	cf 93       	push	r28
     bba:	df 93       	push	r29
twi_setFrequency():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:142
 * Input    Clock frequency
 * Output   none
 */
void twi_setFrequency(uint32_t frequency)
{
  TWBR = ((F_CPU / frequency) - 16) / 2;
     bbc:	20 91 9f 03 	lds	r18, 0x039F	; 0x80039f <rx+0x15>
     bc0:	30 91 a0 03 	lds	r19, 0x03A0	; 0x8003a0 <rx+0x16>
     bc4:	40 91 a1 03 	lds	r20, 0x03A1	; 0x8003a1 <rx+0x17>
     bc8:	50 91 a2 03 	lds	r21, 0x03A2	; 0x8003a2 <rx+0x18>
     bcc:	60 e0       	ldi	r22, 0x00	; 0
     bce:	74 e2       	ldi	r23, 0x24	; 36
     bd0:	84 ef       	ldi	r24, 0xF4	; 244
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__udivmodsi4>
     bd8:	20 51       	subi	r18, 0x10	; 16
     bda:	31 09       	sbc	r19, r1
     bdc:	41 09       	sbc	r20, r1
     bde:	51 09       	sbc	r21, r1
     be0:	56 95       	lsr	r21
     be2:	47 95       	ror	r20
     be4:	37 95       	ror	r19
     be6:	27 95       	ror	r18
     be8:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
beginTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:196
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
     bec:	11 e0       	ldi	r17, 0x01	; 1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:198
  // set address of targeted slave
  txAddress = address;
     bee:	01 e1       	ldi	r16, 0x11	; 17
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:196
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
     bf0:	10 93 90 02 	sts	0x0290, r17	; 0x800290 <TwoWire::transmitting>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:198
  // set address of targeted slave
  txAddress = address;
     bf4:	00 93 b2 02 	sts	0x02B2, r16	; 0x8002b2 <TwoWire::txAddress>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:200
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     bf8:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <TwoWire::txBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:201
  txBufferLength = 0;
     bfc:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <TwoWire::txBufferLength>
getAllReceiverInfo():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1004
{
    setClockHigh();
    do
    {
        Wire.beginTransmission(SI4844_ADDRESS);
        Wire.write(ATDD_GET_STATUS);
     c00:	80 ee       	ldi	r24, 0xE0	; 224
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	0e 94 ac 05 	call	0xb58	; 0xb58 <TwoWire::write(int) [clone .constprop.29]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1005
        Wire.endTransmission();
     c08:	0e 94 2d 01 	call	0x25a	; 0x25a <TwoWire::endTransmission() [clone .constprop.30]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1006
        delayMicroseconds(2500);
     c0c:	84 ec       	ldi	r24, 0xC4	; 196
     c0e:	99 e0       	ldi	r25, 0x09	; 9
     c10:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <delayMicroseconds>
twi_readFrom():
     c14:	64 e0       	ldi	r22, 0x04	; 4
     c16:	81 e1       	ldi	r24, 0x11	; 17
     c18:	0e 94 ed 00 	call	0x1da	; 0x1da <twi_readFrom.part.0.constprop.38>
requestFrom():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:120
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
     c1c:	10 92 8f 02 	sts	0x028F, r1	; 0x80028f <TwoWire::rxBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:121
  rxBufferLength = read;
     c20:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <TwoWire::rxBufferLength>
     c24:	cb e8       	ldi	r28, 0x8B	; 139
     c26:	d3 e0       	ldi	r29, 0x03	; 3
getAllReceiverInfo():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1010
        // request 4 bytes response from atdd (si4844)
        Wire.requestFrom(SI4844_ADDRESS, 0x04);
        for (int i = 0; i < 4; i++)
            all_receiver_status.raw[i] = Wire.read();
     c28:	8a e7       	ldi	r24, 0x7A	; 122
     c2a:	93 e0       	ldi	r25, 0x03	; 3
     c2c:	0e 94 36 05 	call	0xa6c	; 0xa6c <TwoWire::read()>
     c30:	89 93       	st	Y+, r24
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1009
        Wire.write(ATDD_GET_STATUS);
        Wire.endTransmission();
        delayMicroseconds(2500);
        // request 4 bytes response from atdd (si4844)
        Wire.requestFrom(SI4844_ADDRESS, 0x04);
        for (int i = 0; i < 4; i++)
     c32:	83 e0       	ldi	r24, 0x03	; 3
     c34:	cf 38       	cpi	r28, 0x8F	; 143
     c36:	d8 07       	cpc	r29, r24
     c38:	b9 f7       	brne	.-18     	; 0xc28 <SI4844::getAllReceiverInfo() [clone .constprop.25]+0x74>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1013
            all_receiver_status.raw[i] = Wire.read();
        // check response error. Exit when no error found. See page 7.
        // if INFORDY is 0, the system is not ready yet. You may need to check if CHFREQ is 0 too.
    } while ( all_receiver_status.refined.INFORDY == 0 );
     c3a:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <rx+0x1>
     c3e:	84 ff       	sbrs	r24, 4
     c40:	d7 cf       	rjmp	.-82     	; 0xbf0 <SI4844::getAllReceiverInfo() [clone .constprop.25]+0x3c>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1015

    device_status.raw = all_receiver_status.raw[0];
     c42:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <rx>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1017
    return &all_receiver_status;
}
     c46:	8b e8       	ldi	r24, 0x8B	; 139
     c48:	93 e0       	ldi	r25, 0x03	; 3
     c4a:	df 91       	pop	r29
     c4c:	cf 91       	pop	r28
     c4e:	1f 91       	pop	r17
     c50:	0f 91       	pop	r16
     c52:	08 95       	ret

00000c54 <SI4844::getFrequencyInteger() [clone .constprop.24]>:
getFrequencyInteger():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1143
 * @details For example: FM, 103900 KHz (103.9 MHz); SW, 7335 KHz (7.34 MHz, 41m)   
 * @details It is useful to save memory
 * 
 * @return uint32_t current frequency in KHz.  
 */
uint32_t SI4844::getFrequencyInteger(void)
     c54:	cf 92       	push	r12
     c56:	df 92       	push	r13
     c58:	ef 92       	push	r14
     c5a:	ff 92       	push	r15
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1145
{
    this->getAllReceiverInfo();
     c5c:	0e 94 da 05 	call	0xbb4	; 0xbb4 <SI4844::getAllReceiverInfo() [clone .constprop.25]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1150
    int addFactor = 0;
    int multFactor = 1;
    // Check CHFREQ bit[15] MSB = 1
    // See Page 15 of Si48XX ATDD PROGRAMMING GUIDE
    if (all_receiver_status.refined.BANDMODE == 0)
     c60:	90 91 8c 03 	lds	r25, 0x038C	; 0x80038c <rx+0x2>
     c64:	90 7c       	andi	r25, 0xC0	; 192
     c66:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <rx+0x3>
     c6a:	91 11       	cpse	r25, r1
     c6c:	54 c0       	rjmp	.+168    	; 0xd16 <SI4844::getFrequencyInteger() [clone .constprop.24]+0xc2>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1153
    {
        multFactor = 100;
        if (all_receiver_status.refined.d1 & 0b00001000)
     c6e:	98 2f       	mov	r25, r24
     c70:	92 95       	swap	r25
     c72:	9f 70       	andi	r25, 0x0F	; 15
     c74:	87 ff       	sbrs	r24, 7
     c76:	64 c0       	rjmp	.+200    	; 0xd40 <SI4844::getFrequencyInteger() [clone .constprop.24]+0xec>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1155
        {
            all_receiver_status.refined.d1 &= 0b11110111;
     c78:	97 70       	andi	r25, 0x07	; 7
     c7a:	92 95       	swap	r25
     c7c:	90 7f       	andi	r25, 0xF0	; 240
     c7e:	8f 70       	andi	r24, 0x0F	; 15
     c80:	89 2b       	or	r24, r25
     c82:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <rx+0x3>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1152
    int multFactor = 1;
    // Check CHFREQ bit[15] MSB = 1
    // See Page 15 of Si48XX ATDD PROGRAMMING GUIDE
    if (all_receiver_status.refined.BANDMODE == 0)
    {
        multFactor = 100;
     c86:	a4 e6       	ldi	r26, 0x64	; 100
     c88:	b0 e0       	ldi	r27, 0x00	; 0
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1156
        if (all_receiver_status.refined.d1 & 0b00001000)
        {
            all_receiver_status.refined.d1 &= 0b11110111;
            addFactor = 50;
     c8a:	e2 e3       	ldi	r30, 0x32	; 50
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1171
        }
    }

    uint32_t f;

    f = (all_receiver_status.refined.d4);
     c8e:	20 91 8e 03 	lds	r18, 0x038E	; 0x80038e <rx+0x4>
     c92:	62 2f       	mov	r22, r18
     c94:	6f 70       	andi	r22, 0x0F	; 15
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1172
    f += (all_receiver_status.refined.d3) * 10;
     c96:	22 95       	swap	r18
     c98:	2f 70       	andi	r18, 0x0F	; 15
     c9a:	7a e0       	ldi	r23, 0x0A	; 10
     c9c:	27 9f       	mul	r18, r23
     c9e:	90 01       	movw	r18, r0
     ca0:	11 24       	eor	r1, r1
     ca2:	03 2e       	mov	r0, r19
     ca4:	00 0c       	add	r0, r0
     ca6:	44 0b       	sbc	r20, r20
     ca8:	55 0b       	sbc	r21, r21
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1173
    f += (all_receiver_status.refined.d2) * 100;
     caa:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <rx+0x3>
     cae:	89 2f       	mov	r24, r25
     cb0:	8f 70       	andi	r24, 0x0F	; 15
     cb2:	74 e6       	ldi	r23, 0x64	; 100
     cb4:	87 9f       	mul	r24, r23
     cb6:	60 01       	movw	r12, r0
     cb8:	11 24       	eor	r1, r1
     cba:	0d 2c       	mov	r0, r13
     cbc:	00 0c       	add	r0, r0
     cbe:	ee 08       	sbc	r14, r14
     cc0:	ff 08       	sbc	r15, r15
     cc2:	2c 0d       	add	r18, r12
     cc4:	3d 1d       	adc	r19, r13
     cc6:	4e 1d       	adc	r20, r14
     cc8:	5f 1d       	adc	r21, r15
     cca:	26 0f       	add	r18, r22
     ccc:	31 1d       	adc	r19, r1
     cce:	41 1d       	adc	r20, r1
     cd0:	51 1d       	adc	r21, r1
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1174
    f += (all_receiver_status.refined.d1) * 1000;
     cd2:	92 95       	swap	r25
     cd4:	9f 70       	andi	r25, 0x0F	; 15
     cd6:	68 ee       	ldi	r22, 0xE8	; 232
     cd8:	73 e0       	ldi	r23, 0x03	; 3
     cda:	96 9f       	mul	r25, r22
     cdc:	60 01       	movw	r12, r0
     cde:	97 9f       	mul	r25, r23
     ce0:	d0 0c       	add	r13, r0
     ce2:	11 24       	eor	r1, r1
     ce4:	0d 2c       	mov	r0, r13
     ce6:	00 0c       	add	r0, r0
     ce8:	ee 08       	sbc	r14, r14
     cea:	ff 08       	sbc	r15, r15
     cec:	2c 0d       	add	r18, r12
     cee:	3d 1d       	adc	r19, r13
     cf0:	4e 1d       	adc	r20, r14
     cf2:	5f 1d       	adc	r21, r15
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1176

    data_from_device = false;
     cf4:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <_ZL16data_from_device.lto_priv.54>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1178

    return (f * multFactor + addFactor);
     cf8:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <__mulshisi3>
     cfc:	6f 01       	movw	r12, r30
     cfe:	ff 0f       	add	r31, r31
     d00:	ee 08       	sbc	r14, r14
     d02:	ff 08       	sbc	r15, r15
     d04:	6c 0d       	add	r22, r12
     d06:	7d 1d       	adc	r23, r13
     d08:	8e 1d       	adc	r24, r14
     d0a:	9f 1d       	adc	r25, r15
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1179
}
     d0c:	ff 90       	pop	r15
     d0e:	ef 90       	pop	r14
     d10:	df 90       	pop	r13
     d12:	cf 90       	pop	r12
     d14:	08 95       	ret
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1147
 */
uint32_t SI4844::getFrequencyInteger(void)
{
    this->getAllReceiverInfo();
    int addFactor = 0;
    int multFactor = 1;
     d16:	a1 e0       	ldi	r26, 0x01	; 1
     d18:	b0 e0       	ldi	r27, 0x00	; 0
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1159
        {
            all_receiver_status.refined.d1 &= 0b11110111;
            addFactor = 50;
        }
    }
    else if (all_receiver_status.refined.BANDMODE == 2)
     d1a:	90 38       	cpi	r25, 0x80	; 128
     d1c:	99 f4       	brne	.+38     	; 0xd44 <SI4844::getFrequencyInteger() [clone .constprop.24]+0xf0>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1162
    {
        multFactor = 10;
        if (all_receiver_status.refined.d1 & 0b00001000)
     d1e:	98 2f       	mov	r25, r24
     d20:	92 95       	swap	r25
     d22:	9f 70       	andi	r25, 0x0F	; 15
     d24:	87 ff       	sbrs	r24, 7
     d26:	11 c0       	rjmp	.+34     	; 0xd4a <SI4844::getFrequencyInteger() [clone .constprop.24]+0xf6>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1164
        {
            all_receiver_status.refined.d1 &= 0b11110111;   
     d28:	97 70       	andi	r25, 0x07	; 7
     d2a:	92 95       	swap	r25
     d2c:	90 7f       	andi	r25, 0xF0	; 240
     d2e:	8f 70       	andi	r24, 0x0F	; 15
     d30:	89 2b       	or	r24, r25
     d32:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <rx+0x3>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1161
            addFactor = 50;
        }
    }
    else if (all_receiver_status.refined.BANDMODE == 2)
    {
        multFactor = 10;
     d36:	aa e0       	ldi	r26, 0x0A	; 10
     d38:	b0 e0       	ldi	r27, 0x00	; 0
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1165
        if (all_receiver_status.refined.d1 & 0b00001000)
        {
            all_receiver_status.refined.d1 &= 0b11110111;   
            addFactor = 5;
     d3a:	e5 e0       	ldi	r30, 0x05	; 5
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	a7 cf       	rjmp	.-178    	; 0xc8e <SI4844::getFrequencyInteger() [clone .constprop.24]+0x3a>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1152
    int multFactor = 1;
    // Check CHFREQ bit[15] MSB = 1
    // See Page 15 of Si48XX ATDD PROGRAMMING GUIDE
    if (all_receiver_status.refined.BANDMODE == 0)
    {
        multFactor = 100;
     d40:	a4 e6       	ldi	r26, 0x64	; 100
     d42:	b0 e0       	ldi	r27, 0x00	; 0
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1146
 * @return uint32_t current frequency in KHz.  
 */
uint32_t SI4844::getFrequencyInteger(void)
{
    this->getAllReceiverInfo();
    int addFactor = 0;
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	e0 e0       	ldi	r30, 0x00	; 0
     d48:	a2 cf       	rjmp	.-188    	; 0xc8e <SI4844::getFrequencyInteger() [clone .constprop.24]+0x3a>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1161
            addFactor = 50;
        }
    }
    else if (all_receiver_status.refined.BANDMODE == 2)
    {
        multFactor = 10;
     d4a:	aa e0       	ldi	r26, 0x0A	; 10
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	fa cf       	rjmp	.-12     	; 0xd44 <SI4844::getFrequencyInteger() [clone .constprop.24]+0xf0>

00000d50 <SI4844::waitToSend() [clone .constprop.19]>:
waitToSend():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:745
/**
 * @ingroup BF
 * @brief Wait for the ATDD become Clear to Send. 
 * @details Waits for CTS status
 */
inline void SI4844::waitToSend()
     d50:	cf 93       	push	r28
     d52:	df 93       	push	r29
beginTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:196
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
     d54:	d1 e0       	ldi	r29, 0x01	; 1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:198
  // set address of targeted slave
  txAddress = address;
     d56:	c1 e1       	ldi	r28, 0x11	; 17
_ZN6SI484413isClearToSendEv.isra.4():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:730
 * @return true 
 * @return false 
 */
bool SI4844::isClearToSend(void)
{
    delayMicroseconds(2000);
     d58:	80 ed       	ldi	r24, 0xD0	; 208
     d5a:	97 e0       	ldi	r25, 0x07	; 7
     d5c:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <delayMicroseconds>
beginTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:196
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
     d60:	d0 93 90 02 	sts	0x0290, r29	; 0x800290 <TwoWire::transmitting>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:198
  // set address of targeted slave
  txAddress = address;
     d64:	c0 93 b2 02 	sts	0x02B2, r28	; 0x8002b2 <TwoWire::txAddress>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:200
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     d68:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <TwoWire::txBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:201
  txBufferLength = 0;
     d6c:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <TwoWire::txBufferLength>
_ZN6SI484413isClearToSendEv.isra.4():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:732
    Wire.beginTransmission(SI4844_ADDRESS);
    Wire.write(ATDD_GET_STATUS);
     d70:	80 ee       	ldi	r24, 0xE0	; 224
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	0e 94 ac 05 	call	0xb58	; 0xb58 <TwoWire::write(int) [clone .constprop.29]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:733
    Wire.endTransmission();
     d78:	0e 94 2d 01 	call	0x25a	; 0x25a <TwoWire::endTransmission() [clone .constprop.30]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:734
    delayMicroseconds(2000);
     d7c:	80 ed       	ldi	r24, 0xD0	; 208
     d7e:	97 e0       	ldi	r25, 0x07	; 7
     d80:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <delayMicroseconds>
twi_readFrom():
     d84:	61 e0       	ldi	r22, 0x01	; 1
     d86:	81 e1       	ldi	r24, 0x11	; 17
     d88:	0e 94 ed 00 	call	0x1da	; 0x1da <twi_readFrom.part.0.constprop.38>
requestFrom():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:120
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
     d8c:	10 92 8f 02 	sts	0x028F, r1	; 0x80028f <TwoWire::rxBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:121
  rxBufferLength = read;
     d90:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <TwoWire::rxBufferLength>
_ZN6SI484413isClearToSendEv.isra.4():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:736
    Wire.requestFrom(SI4844_ADDRESS, 1);
    all_receiver_status.raw[0] = Wire.read();
     d94:	8a e7       	ldi	r24, 0x7A	; 122
     d96:	93 e0       	ldi	r25, 0x03	; 3
     d98:	0e 94 36 05 	call	0xa6c	; 0xa6c <TwoWire::read()>
     d9c:	80 93 8b 03 	sts	0x038B, r24	; 0x80038b <rx+0x1>
waitToSend():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:748
 * @details Waits for CTS status
 */
inline void SI4844::waitToSend()
{

    while (!isClearToSend())
     da0:	87 ff       	sbrs	r24, 7
     da2:	da cf       	rjmp	.-76     	; 0xd58 <SI4844::waitToSend() [clone .constprop.19]+0x8>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:750
        ;
}
     da4:	df 91       	pop	r29
     da6:	cf 91       	pop	r28
     da8:	08 95       	ret

00000daa <SI4844::setVolume(unsigned char) [clone .part.5] [clone .constprop.17]>:
_ZN6SI48449setVolumeEh.part.5():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:821
 * @brief Sets the volume level. 
 * @details Sets a value to the audio volume.
 * @see Table 4, Si48XX ATDD PROGRAMMING GUIDE; AN610; page 11
 * @param byte volumeLevel (domain: 0 to 63) 
 */
void SI4844::setVolume(byte volumeLavel)
     daa:	cf 93       	push	r28
     dac:	c8 2f       	mov	r28, r24
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:826
{
    if (volumeLavel > 63)
        return;

    waitToSend();
     dae:	0e 94 a8 06 	call	0xd50	; 0xd50 <SI4844::waitToSend() [clone .constprop.19]>
setProperty():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:62
    si4844_property property;
    si4844_property param;

    property.value = propertyNumber;
    param.value = parameter;
    waitToSend();
     db2:	0e 94 a8 06 	call	0xd50	; 0xd50 <SI4844::waitToSend() [clone .constprop.19]>
beginTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:196
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <TwoWire::transmitting>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:198
  // set address of targeted slave
  txAddress = address;
     dbc:	81 e1       	ldi	r24, 0x11	; 17
     dbe:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <TwoWire::txAddress>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:200
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     dc2:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <TwoWire::txBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:201
  txBufferLength = 0;
     dc6:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <TwoWire::txBufferLength>
setProperty():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:64
    Wire.beginTransmission(SI4844_ADDRESS);
    Wire.write(SET_PROPERTY);
     dca:	82 e1       	ldi	r24, 0x12	; 18
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	0e 94 ac 05 	call	0xb58	; 0xb58 <TwoWire::write(int) [clone .constprop.29]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:65
    Wire.write(0x00);
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	0e 94 ac 05 	call	0xb58	; 0xb58 <TwoWire::write(int) [clone .constprop.29]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:66
    Wire.write(property.raw.byteHigh); // Send property - High byte - most significant first
     dda:	60 e4       	ldi	r22, 0x40	; 64
     ddc:	8a e7       	ldi	r24, 0x7A	; 122
     dde:	93 e0       	ldi	r25, 0x03	; 3
     de0:	0e 94 7d 05 	call	0xafa	; 0xafa <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:67
    Wire.write(property.raw.byteLow);  // Send property - Low byte - less significant after
     de4:	60 e0       	ldi	r22, 0x00	; 0
     de6:	8a e7       	ldi	r24, 0x7A	; 122
     de8:	93 e0       	ldi	r25, 0x03	; 3
     dea:	0e 94 7d 05 	call	0xafa	; 0xafa <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:68
    Wire.write(param.raw.byteHigh);    // Send the argments. High Byte - Most significant first
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	8a e7       	ldi	r24, 0x7A	; 122
     df2:	93 e0       	ldi	r25, 0x03	; 3
     df4:	0e 94 7d 05 	call	0xafa	; 0xafa <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:69
    Wire.write(param.raw.byteLow);     // Send the argments. Low Byte - Less significant after
     df8:	6c 2f       	mov	r22, r28
     dfa:	8a e7       	ldi	r24, 0x7A	; 122
     dfc:	93 e0       	ldi	r25, 0x03	; 3
     dfe:	0e 94 7d 05 	call	0xafa	; 0xafa <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:70
    Wire.endTransmission();
     e02:	0e 94 2d 01 	call	0x25a	; 0x25a <TwoWire::endTransmission() [clone .constprop.30]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:71
    delayMicroseconds(550);
     e06:	86 e2       	ldi	r24, 0x26	; 38
     e08:	92 e0       	ldi	r25, 0x02	; 2
     e0a:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <delayMicroseconds>
_ZN6SI48449setVolumeEh.part.5():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:829
        return;

    waitToSend();
    setProperty(RX_VOLUME, volumeLavel);

    this->volume = volumeLavel;
     e0e:	c0 93 b8 03 	sts	0x03B8, r28	; 0x8003b8 <rx+0x2e>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:830
}
     e12:	cf 91       	pop	r28
     e14:	08 95       	ret

00000e16 <SI4844::setBandSlideSwitch() [clone .constprop.11]>:
setBandSlideSwitch():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:624
 * @see See Table 8. Pre-defined Band Table in Si48XX ATDD PROGRAMMING GUIDE; AN610; pages 17 and 18  
 * @param band  band index number. 
 * @see Si4822/26/27/40/44 A NTENNA , SCHEMATIC , LAYOUT, AND DESIGN GUIDELINES 
 * @todo The functions setBand and setBandSlideSwitch will be rewritten with the goal of improving the final code.
 */
void SI4844::setBandSlideSwitch()
     e16:	8f 92       	push	r8
     e18:	9f 92       	push	r9
     e1a:	af 92       	push	r10
     e1c:	bf 92       	push	r11
     e1e:	cf 92       	push	r12
     e20:	df 92       	push	r13
     e22:	ef 92       	push	r14
     e24:	ff 92       	push	r15
     e26:	0f 93       	push	r16
     e28:	1f 93       	push	r17
     e2a:	cf 93       	push	r28
     e2c:	df 93       	push	r29
     e2e:	00 d0       	rcall	.+0      	; 0xe30 <SI4844::setBandSlideSwitch() [clone .constprop.11]+0x1a>
     e30:	00 d0       	rcall	.+0      	; 0xe32 <SI4844::setBandSlideSwitch() [clone .constprop.11]+0x1c>
     e32:	00 d0       	rcall	.+0      	; 0xe34 <SI4844::setBandSlideSwitch() [clone .constprop.11]+0x1e>
     e34:	1f 92       	push	r1
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:627
{
    
    this->getAllReceiverInfo();
     e3a:	0e 94 da 05 	call	0xbb4	; 0xbb4 <SI4844::getAllReceiverInfo() [clone .constprop.25]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:628
    uint8_t bandIndex = this->all_receiver_status.refined.BANDIDX;
     e3e:	10 91 8c 03 	lds	r17, 0x038C	; 0x80038c <rx+0x2>
     e42:	1f 73       	andi	r17, 0x3F	; 63
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:631

   // If band mode changed, reset the device. 
   if (all_receiver_status.refined.HOSTRST == 1) {
     e44:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <rx+0x1>
     e48:	86 fd       	sbrc	r24, 6
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:632
       this->reset();
     e4a:	0e 94 ed 02 	call	0x5da	; 0x5da <SI4844::reset() [clone .constprop.12]>
findBand():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/BandList.h:77
      }
    }

    // Find a custom band by its bandIdx and return its pointer
    BandNode* findBand(int8_t bandIdx) {
      BandNode* current = head;
     e4e:	e0 91 a4 03 	lds	r30, 0x03A4	; 0x8003a4 <rx+0x1a>
     e52:	f0 91 a5 03 	lds	r31, 0x03A5	; 0x8003a5 <rx+0x1b>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/BandList.h:78
      while (current) {
     e56:	30 97       	sbiw	r30, 0x00	; 0
     e58:	39 f0       	breq	.+14     	; 0xe68 <SI4844::setBandSlideSwitch() [clone .constprop.11]+0x52>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/BandList.h:79
        if (current->bandIdx == bandIdx) return current; // Return the pointer if found
     e5a:	80 81       	ld	r24, Z
     e5c:	18 17       	cp	r17, r24
     e5e:	39 f0       	breq	.+14     	; 0xe6e <SI4844::setBandSlideSwitch() [clone .constprop.11]+0x58>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/BandList.h:80
        current = current->next; // Move to the next node
     e60:	02 84       	ldd	r0, Z+10	; 0x0a
     e62:	f3 85       	ldd	r31, Z+11	; 0x0b
     e64:	e0 2d       	mov	r30, r0
     e66:	f7 cf       	rjmp	.-18     	; 0xe56 <SI4844::setBandSlideSwitch() [clone .constprop.11]+0x40>
setDefaultBandIndx():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:396
    Wire.endTransmission();
    delayMicroseconds(2500);
}

void SI4844::setDefaultBandIndx( uint8_t bandidx) {
    this->currentBand = bandidx;
     e68:	10 93 9c 03 	sts	0x039C, r17	; 0x80039c <rx+0x12>
     e6c:	61 c0       	rjmp	.+194    	; 0xf30 <SI4844::setBandSlideSwitch() [clone .constprop.11]+0x11a>
setBandSlideSwitch():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:641
    BandNode *bandNode = this->findCustomBand(bandIndex);
    if ( bandNode  == nullptr )  {   
        this->setDefaultBandIndx(bandIndex);
    } else {
        // if the current band is a custom band, sets the new parameters for the band.
        this->setUserDefinedBand(bandIndex, bandNode->bottomFrequency, bandNode->topFrequency, bandNode->space);
     e6e:	01 85       	ldd	r16, Z+9	; 0x09
     e70:	c5 80       	ldd	r12, Z+5	; 0x05
     e72:	d6 80       	ldd	r13, Z+6	; 0x06
     e74:	e7 80       	ldd	r14, Z+7	; 0x07
     e76:	f0 84       	ldd	r15, Z+8	; 0x08
     e78:	81 80       	ldd	r8, Z+1	; 0x01
     e7a:	92 80       	ldd	r9, Z+2	; 0x02
     e7c:	a3 80       	ldd	r10, Z+3	; 0x03
     e7e:	b4 80       	ldd	r11, Z+4	; 0x04
setUserDefinedBand():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:542
 */
void SI4844::setUserDefinedBand(int8_t bandIdx, uint32_t bottomFrequency, uint32_t topFrequency, uint8_t space ) {

    SI4844_arg_band customband;

    this->currentBand = bandIdx;
     e80:	10 93 9c 03 	sts	0x039C, r17	; 0x80039c <rx+0x12>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:545

    // Now we can customize the band.
    data_from_device = false;
     e84:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <_ZL16data_from_device.lto_priv.54>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:546
    customband.refined.BANDIDX = bandIdx;
     e88:	89 81       	ldd	r24, Y+1	; 0x01
     e8a:	80 7c       	andi	r24, 0xC0	; 192
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:547
    customband.refined.XOSCEN = this->xoscen;
     e8c:	81 2b       	or	r24, r17
     e8e:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <rx+0x13>
     e92:	90 fb       	bst	r25, 0
     e94:	87 f9       	bld	r24, 7
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:548
    customband.refined.XOWAIT = this->xowait;
     e96:	90 91 9e 03 	lds	r25, 0x039E	; 0x80039e <rx+0x14>
     e9a:	90 fb       	bst	r25, 0
     e9c:	86 f9       	bld	r24, 6
     e9e:	89 83       	std	Y+1, r24	; 0x01
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:557
    customband.refined.BANDTOP_LOW = lowByte(topFrequency);
    customband.refined.CHSPC = space;
    customband.refined.DFBAND = 0; 
    customband.refined.UNI_AM = 0;
    customband.refined.TVFREQ = 0;
    customband.refined.DUMMY = 0;
     ea0:	1f 82       	std	Y+7, r1	; 0x07
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:560

    // Wait until rady to send a command
    waitToSend();
     ea2:	0e 94 a8 06 	call	0xd50	; 0xd50 <SI4844::waitToSend() [clone .constprop.19]>
beginTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:196
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <TwoWire::transmitting>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:198
  // set address of targeted slave
  txAddress = address;
     eac:	81 e1       	ldi	r24, 0x11	; 17
     eae:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <TwoWire::txAddress>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:200
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     eb2:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <TwoWire::txBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:201
  txBufferLength = 0;
     eb6:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <TwoWire::txBufferLength>
setUserDefinedBand():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:563

    Wire.beginTransmission(SI4844_ADDRESS);
    Wire.write(ATDD_POWER_UP);
     eba:	81 ee       	ldi	r24, 0xE1	; 225
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	0e 94 ac 05 	call	0xb58	; 0xb58 <TwoWire::write(int) [clone .constprop.29]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:564
    Wire.write(customband.raw[0]);
     ec2:	69 81       	ldd	r22, Y+1	; 0x01
     ec4:	8a e7       	ldi	r24, 0x7A	; 122
     ec6:	93 e0       	ldi	r25, 0x03	; 3
     ec8:	0e 94 7d 05 	call	0xafa	; 0xafa <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:549
    // Now we can customize the band.
    data_from_device = false;
    customband.refined.BANDIDX = bandIdx;
    customband.refined.XOSCEN = this->xoscen;
    customband.refined.XOWAIT = this->xowait;
    customband.refined.BANDBOT_HIGH = highByte(bottomFrequency);
     ecc:	99 27       	eor	r25, r25
     ece:	8b 2d       	mov	r24, r11
     ed0:	7a 2d       	mov	r23, r10
     ed2:	69 2d       	mov	r22, r9
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:565
    waitToSend();

    Wire.beginTransmission(SI4844_ADDRESS);
    Wire.write(ATDD_POWER_UP);
    Wire.write(customband.raw[0]);
    Wire.write(customband.raw[1]);
     ed4:	8a e7       	ldi	r24, 0x7A	; 122
     ed6:	93 e0       	ldi	r25, 0x03	; 3
     ed8:	0e 94 7d 05 	call	0xafa	; 0xafa <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:566
    Wire.write(customband.raw[2]);
     edc:	68 2d       	mov	r22, r8
     ede:	8a e7       	ldi	r24, 0x7A	; 122
     ee0:	93 e0       	ldi	r25, 0x03	; 3
     ee2:	0e 94 7d 05 	call	0xafa	; 0xafa <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:551
    customband.refined.BANDIDX = bandIdx;
    customband.refined.XOSCEN = this->xoscen;
    customband.refined.XOWAIT = this->xowait;
    customband.refined.BANDBOT_HIGH = highByte(bottomFrequency);
    customband.refined.BANDBOT_LOW = lowByte(bottomFrequency);
    customband.refined.BANDTOP_HIGH = highByte(topFrequency);
     ee6:	99 27       	eor	r25, r25
     ee8:	8f 2d       	mov	r24, r15
     eea:	7e 2d       	mov	r23, r14
     eec:	6d 2d       	mov	r22, r13
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:567
    Wire.beginTransmission(SI4844_ADDRESS);
    Wire.write(ATDD_POWER_UP);
    Wire.write(customband.raw[0]);
    Wire.write(customband.raw[1]);
    Wire.write(customband.raw[2]);
    Wire.write(customband.raw[3]);
     eee:	8a e7       	ldi	r24, 0x7A	; 122
     ef0:	93 e0       	ldi	r25, 0x03	; 3
     ef2:	0e 94 7d 05 	call	0xafa	; 0xafa <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:568
    Wire.write(customband.raw[4]);
     ef6:	6c 2d       	mov	r22, r12
     ef8:	8a e7       	ldi	r24, 0x7A	; 122
     efa:	93 e0       	ldi	r25, 0x03	; 3
     efc:	0e 94 7d 05 	call	0xafa	; 0xafa <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:569
    Wire.write(customband.raw[5]);
     f00:	60 2f       	mov	r22, r16
     f02:	8a e7       	ldi	r24, 0x7A	; 122
     f04:	93 e0       	ldi	r25, 0x03	; 3
     f06:	0e 94 7d 05 	call	0xafa	; 0xafa <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:570
    Wire.write(customband.raw[6]);
     f0a:	6f 81       	ldd	r22, Y+7	; 0x07
     f0c:	8a e7       	ldi	r24, 0x7A	; 122
     f0e:	93 e0       	ldi	r25, 0x03	; 3
     f10:	0e 94 7d 05 	call	0xafa	; 0xafa <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:571
    Wire.endTransmission();
     f14:	0e 94 2d 01 	call	0x25a	; 0x25a <TwoWire::endTransmission() [clone .constprop.30]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:572
    delayMicroseconds(2500);
     f18:	84 ec       	ldi	r24, 0xC4	; 196
     f1a:	99 e0       	ldi	r25, 0x09	; 9
     f1c:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <delayMicroseconds>
_ZN6SI484413waitInterruptEv.isra.2():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:166
 * @details It can occur, for example, when you use the analog tuner.  
 */
void SI4844::waitInterrupt(void)
{
    
    while (!data_from_device)
     f20:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <_ZL16data_from_device.lto_priv.54>
     f24:	88 23       	and	r24, r24
     f26:	e1 f3       	breq	.-8      	; 0xf20 <SI4844::setBandSlideSwitch() [clone .constprop.11]+0x10a>
setUserDefinedBand():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:574
    Wire.write(customband.raw[5]);
    Wire.write(customband.raw[6]);
    Wire.endTransmission();
    delayMicroseconds(2500);
    waitInterrupt();
    delayMicroseconds(2500);
     f28:	84 ec       	ldi	r24, 0xC4	; 196
     f2a:	99 e0       	ldi	r25, 0x09	; 9
     f2c:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <delayMicroseconds>
waitDetectFrequency():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:759
 * @ingroup BF
 * @brief Wait for the ATDD detect a valid frequency (frequency not zero). 
 */
void SI4844::waitDetectFrequency() {
    do { 
        delay(1);
     f30:	61 e0       	ldi	r22, 0x01	; 1
     f32:	70 e0       	ldi	r23, 0x00	; 0
     f34:	80 e0       	ldi	r24, 0x00	; 0
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	0e 94 31 03 	call	0x662	; 0x662 <delay>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:760
        this->getAllReceiverInfo();
     f3c:	0e 94 da 05 	call	0xbb4	; 0xbb4 <SI4844::getAllReceiverInfo() [clone .constprop.25]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:761
    } while ( (all_receiver_status.raw[2] | all_receiver_status.raw[3]) == 0  );   
     f40:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <rx+0x3>
     f44:	90 91 8e 03 	lds	r25, 0x038E	; 0x80038e <rx+0x4>
     f48:	89 2b       	or	r24, r25
     f4a:	91 f3       	breq	.-28     	; 0xf30 <SI4844::setBandSlideSwitch() [clone .constprop.11]+0x11a>
setBandSlideSwitch():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:645
        // if the current band is a custom band, sets the new parameters for the band.
        this->setUserDefinedBand(bandIndex, bandNode->bottomFrequency, bandNode->topFrequency, bandNode->space);
    }
     
    this->waitDetectFrequency(); 
    this->setVolume(this->volume);
     f4c:	80 91 b8 03 	lds	r24, 0x03B8	; 0x8003b8 <rx+0x2e>
setVolume():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:823
 * @see Table 4, Si48XX ATDD PROGRAMMING GUIDE; AN610; page 11
 * @param byte volumeLevel (domain: 0 to 63) 
 */
void SI4844::setVolume(byte volumeLavel)
{
    if (volumeLavel > 63)
     f50:	80 34       	cpi	r24, 0x40	; 64
     f52:	a0 f4       	brcc	.+40     	; 0xf7c <SI4844::setBandSlideSwitch() [clone .constprop.11]+0x166>
setBandSlideSwitch():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:647
    }
     
    this->waitDetectFrequency(); 
    this->setVolume(this->volume);

}
     f54:	27 96       	adiw	r28, 0x07	; 7
     f56:	0f b6       	in	r0, 0x3f	; 63
     f58:	f8 94       	cli
     f5a:	de bf       	out	0x3e, r29	; 62
     f5c:	0f be       	out	0x3f, r0	; 63
     f5e:	cd bf       	out	0x3d, r28	; 61
     f60:	df 91       	pop	r29
     f62:	cf 91       	pop	r28
     f64:	1f 91       	pop	r17
     f66:	0f 91       	pop	r16
     f68:	ff 90       	pop	r15
     f6a:	ef 90       	pop	r14
     f6c:	df 90       	pop	r13
     f6e:	cf 90       	pop	r12
     f70:	bf 90       	pop	r11
     f72:	af 90       	pop	r10
     f74:	9f 90       	pop	r9
     f76:	8f 90       	pop	r8
setVolume():
     f78:	0c 94 d5 06 	jmp	0xdaa	; 0xdaa <SI4844::setVolume(unsigned char) [clone .part.5] [clone .constprop.17]>
setBandSlideSwitch():
     f7c:	27 96       	adiw	r28, 0x07	; 7
     f7e:	0f b6       	in	r0, 0x3f	; 63
     f80:	f8 94       	cli
     f82:	de bf       	out	0x3e, r29	; 62
     f84:	0f be       	out	0x3f, r0	; 63
     f86:	cd bf       	out	0x3d, r28	; 61
     f88:	df 91       	pop	r29
     f8a:	cf 91       	pop	r28
     f8c:	1f 91       	pop	r17
     f8e:	0f 91       	pop	r16
     f90:	ff 90       	pop	r15
     f92:	ef 90       	pop	r14
     f94:	df 90       	pop	r13
     f96:	cf 90       	pop	r12
     f98:	bf 90       	pop	r11
     f9a:	af 90       	pop	r10
     f9c:	9f 90       	pop	r9
     f9e:	8f 90       	pop	r8
     fa0:	08 95       	ret

00000fa2 <Print::print(char const*) [clone .constprop.40]>:
write():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     fa2:	00 97       	sbiw	r24, 0x00	; 0
     fa4:	69 f0       	breq	.+26     	; 0xfc0 <Print::print(char const*) [clone .constprop.40]+0x1e>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.h:54
      return write((const uint8_t *)str, strlen(str));
     fa6:	fc 01       	movw	r30, r24
     fa8:	01 90       	ld	r0, Z+
     faa:	00 20       	and	r0, r0
     fac:	e9 f7       	brne	.-6      	; 0xfa8 <Print::print(char const*) [clone .constprop.40]+0x6>
     fae:	31 97       	sbiw	r30, 0x01	; 1
     fb0:	af 01       	movw	r20, r30
     fb2:	48 1b       	sub	r20, r24
     fb4:	59 0b       	sbc	r21, r25
     fb6:	bc 01       	movw	r22, r24
     fb8:	8a eb       	ldi	r24, 0xBA	; 186
     fba:	93 e0       	ldi	r25, 0x03	; 3
     fbc:	0c 94 68 03 	jmp	0x6d0	; 0x6d0 <Print::write(unsigned char const*, unsigned int)>
print():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:65
}

size_t Print::print(const char str[])
{
  return write(str);
}
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	80 e0       	ldi	r24, 0x00	; 0
     fc4:	08 95       	ret

00000fc6 <String::~String()>:
__base_dtor ():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  if(buffer)
     fc6:	fc 01       	movw	r30, r24
     fc8:	80 81       	ld	r24, Z
     fca:	91 81       	ldd	r25, Z+1	; 0x01
     fcc:	00 97       	sbiw	r24, 0x00	; 0
     fce:	11 f0       	breq	.+4      	; 0xfd4 <String::~String()+0xe>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:125
    free(buffer);
     fd0:	0c 94 3f 0f 	jmp	0x1e7e	; 0x1e7e <free>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:126
}
     fd4:	08 95       	ret

00000fd6 <String::reserve(unsigned int)>:
reserve():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:147
  buffer = NULL;
  capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
     fd6:	0f 93       	push	r16
     fd8:	1f 93       	push	r17
     fda:	cf 93       	push	r28
     fdc:	df 93       	push	r29
     fde:	ec 01       	movw	r28, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:148
  if (buffer && capacity >= size) return 1;
     fe0:	88 81       	ld	r24, Y
     fe2:	99 81       	ldd	r25, Y+1	; 0x01
     fe4:	00 97       	sbiw	r24, 0x00	; 0
     fe6:	59 f0       	breq	.+22     	; 0xffe <String::reserve(unsigned int)+0x28>
     fe8:	2a 81       	ldd	r18, Y+2	; 0x02
     fea:	3b 81       	ldd	r19, Y+3	; 0x03
     fec:	26 17       	cp	r18, r22
     fee:	37 07       	cpc	r19, r23
     ff0:	30 f0       	brcs	.+12     	; 0xffe <String::reserve(unsigned int)+0x28>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:150
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
     ff2:	81 e0       	ldi	r24, 0x01	; 1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:154
    return 1;
  }
  return 0;
}
     ff4:	df 91       	pop	r29
     ff6:	cf 91       	pop	r28
     ff8:	1f 91       	pop	r17
     ffa:	0f 91       	pop	r16
     ffc:	08 95       	ret
     ffe:	8b 01       	movw	r16, r22
changeBuffer():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:158

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
  char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    1000:	6f 5f       	subi	r22, 0xFF	; 255
    1002:	7f 4f       	sbci	r23, 0xFF	; 255
    1004:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <realloc>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:159
  if (newbuffer) {
    1008:	00 97       	sbiw	r24, 0x00	; 0
    100a:	59 f0       	breq	.+22     	; 0x1022 <String::reserve(unsigned int)+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:160
    buffer = newbuffer;
    100c:	99 83       	std	Y+1, r25	; 0x01
    100e:	88 83       	st	Y, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:161
    capacity = maxStrLen;
    1010:	1b 83       	std	Y+3, r17	; 0x03
    1012:	0a 83       	std	Y+2, r16	; 0x02
reserve():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:150

unsigned char String::reserve(unsigned int size)
{
  if (buffer && capacity >= size) return 1;
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
    1014:	2c 81       	ldd	r18, Y+4	; 0x04
    1016:	3d 81       	ldd	r19, Y+5	; 0x05
    1018:	23 2b       	or	r18, r19
    101a:	59 f7       	brne	.-42     	; 0xff2 <String::reserve(unsigned int)+0x1c>
    101c:	fc 01       	movw	r30, r24
    101e:	10 82       	st	Z, r1
    1020:	e8 cf       	rjmp	.-48     	; 0xff2 <String::reserve(unsigned int)+0x1c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:153
    return 1;
  }
  return 0;
    1022:	80 e0       	ldi	r24, 0x00	; 0
    1024:	e7 cf       	rjmp	.-50     	; 0xff4 <String::reserve(unsigned int)+0x1e>

00001026 <String::operator=(char const*) [clone .part.3]>:
_ZN6StringaSEPKc.part.3():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:239
  if (this != &rval) move(rval);
  return *this;
}
#endif

String & String::operator = (const char *cstr)
    1026:	ef 92       	push	r14
    1028:	ff 92       	push	r15
    102a:	0f 93       	push	r16
    102c:	1f 93       	push	r17
    102e:	cf 93       	push	r28
    1030:	df 93       	push	r29
    1032:	ec 01       	movw	r28, r24
    1034:	7b 01       	movw	r14, r22
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:241
{
  if (cstr) copy(cstr, strlen(cstr));
    1036:	fb 01       	movw	r30, r22
    1038:	01 90       	ld	r0, Z+
    103a:	00 20       	and	r0, r0
    103c:	e9 f7       	brne	.-6      	; 0x1038 <String::operator=(char const*) [clone .part.3]+0x12>
    103e:	31 97       	sbiw	r30, 0x01	; 1
    1040:	8f 01       	movw	r16, r30
    1042:	06 1b       	sub	r16, r22
    1044:	17 0b       	sbc	r17, r23
copy():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:173
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
  if (!reserve(length)) {
    1046:	b8 01       	movw	r22, r16
    1048:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <String::reserve(unsigned int)>
    104c:	28 81       	ld	r18, Y
    104e:	39 81       	ldd	r19, Y+1	; 0x01
    1050:	81 11       	cpse	r24, r1
    1052:	13 c0       	rjmp	.+38     	; 0x107a <String::operator=(char const*) [clone .part.3]+0x54>
invalidate():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:141
  len = 0;
}

void String::invalidate(void)
{
  if (buffer) free(buffer);
    1054:	21 15       	cp	r18, r1
    1056:	31 05       	cpc	r19, r1
    1058:	19 f0       	breq	.+6      	; 0x1060 <String::operator=(char const*) [clone .part.3]+0x3a>
    105a:	c9 01       	movw	r24, r18
    105c:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <free>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:142
  buffer = NULL;
    1060:	19 82       	std	Y+1, r1	; 0x01
    1062:	18 82       	st	Y, r1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:143
  capacity = len = 0;
    1064:	1d 82       	std	Y+5, r1	; 0x05
    1066:	1c 82       	std	Y+4, r1	; 0x04
    1068:	1b 82       	std	Y+3, r1	; 0x03
    106a:	1a 82       	std	Y+2, r1	; 0x02
_ZN6StringaSEPKc.part.3():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:245
{
  if (cstr) copy(cstr, strlen(cstr));
  else invalidate();
  
  return *this;
}
    106c:	df 91       	pop	r29
    106e:	cf 91       	pop	r28
    1070:	1f 91       	pop	r17
    1072:	0f 91       	pop	r16
    1074:	ff 90       	pop	r15
    1076:	ef 90       	pop	r14
    1078:	08 95       	ret
copy():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:177
{
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
    107a:	1d 83       	std	Y+5, r17	; 0x05
    107c:	0c 83       	std	Y+4, r16	; 0x04
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:178
  strcpy(buffer, cstr);
    107e:	b7 01       	movw	r22, r14
    1080:	c9 01       	movw	r24, r18
_ZN6StringaSEPKc.part.3():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:245
{
  if (cstr) copy(cstr, strlen(cstr));
  else invalidate();
  
  return *this;
}
    1082:	df 91       	pop	r29
    1084:	cf 91       	pop	r28
    1086:	1f 91       	pop	r17
    1088:	0f 91       	pop	r16
    108a:	ff 90       	pop	r15
    108c:	ef 90       	pop	r14
copy():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:178
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
  strcpy(buffer, cstr);
    108e:	0c 94 8e 10 	jmp	0x211c	; 0x211c <strcpy>

00001092 <String::String(char const*)>:
__base_ctor ():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:28

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    1092:	ef 92       	push	r14
    1094:	ff 92       	push	r15
    1096:	0f 93       	push	r16
    1098:	1f 93       	push	r17
    109a:	cf 93       	push	r28
    109c:	df 93       	push	r29
    109e:	ec 01       	movw	r28, r24
    10a0:	7b 01       	movw	r14, r22
_ZN6String4initEv():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:134
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
    10a2:	19 82       	std	Y+1, r1	; 0x01
    10a4:	18 82       	st	Y, r1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:135
  capacity = 0;
    10a6:	1b 82       	std	Y+3, r1	; 0x03
    10a8:	1a 82       	std	Y+2, r1	; 0x02
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:136
  len = 0;
    10aa:	1d 82       	std	Y+5, r1	; 0x05
    10ac:	1c 82       	std	Y+4, r1	; 0x04
__base_ctor ():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:31
/*********************************************/

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
    10ae:	fb 01       	movw	r30, r22
    10b0:	01 90       	ld	r0, Z+
    10b2:	00 20       	and	r0, r0
    10b4:	e9 f7       	brne	.-6      	; 0x10b0 <String::String(char const*)+0x1e>
    10b6:	31 97       	sbiw	r30, 0x01	; 1
    10b8:	8f 01       	movw	r16, r30
    10ba:	06 1b       	sub	r16, r22
    10bc:	17 0b       	sbc	r17, r23
copy():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:173
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
  if (!reserve(length)) {
    10be:	b8 01       	movw	r22, r16
    10c0:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <String::reserve(unsigned int)>
    10c4:	28 81       	ld	r18, Y
    10c6:	39 81       	ldd	r19, Y+1	; 0x01
    10c8:	81 11       	cpse	r24, r1
    10ca:	13 c0       	rjmp	.+38     	; 0x10f2 <String::String(char const*)+0x60>
invalidate():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:141
  len = 0;
}

void String::invalidate(void)
{
  if (buffer) free(buffer);
    10cc:	21 15       	cp	r18, r1
    10ce:	31 05       	cpc	r19, r1
    10d0:	19 f0       	breq	.+6      	; 0x10d8 <String::String(char const*)+0x46>
    10d2:	c9 01       	movw	r24, r18
    10d4:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <free>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:142
  buffer = NULL;
    10d8:	19 82       	std	Y+1, r1	; 0x01
    10da:	18 82       	st	Y, r1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:143
  capacity = len = 0;
    10dc:	1d 82       	std	Y+5, r1	; 0x05
    10de:	1c 82       	std	Y+4, r1	; 0x04
    10e0:	1b 82       	std	Y+3, r1	; 0x03
    10e2:	1a 82       	std	Y+2, r1	; 0x02
__base_ctor ():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:32

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
}
    10e4:	df 91       	pop	r29
    10e6:	cf 91       	pop	r28
    10e8:	1f 91       	pop	r17
    10ea:	0f 91       	pop	r16
    10ec:	ff 90       	pop	r15
    10ee:	ef 90       	pop	r14
    10f0:	08 95       	ret
copy():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:177
{
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
    10f2:	1d 83       	std	Y+5, r17	; 0x05
    10f4:	0c 83       	std	Y+4, r16	; 0x04
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:178
  strcpy(buffer, cstr);
    10f6:	b7 01       	movw	r22, r14
    10f8:	c9 01       	movw	r24, r18
__base_ctor ():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:32

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
}
    10fa:	df 91       	pop	r29
    10fc:	cf 91       	pop	r28
    10fe:	1f 91       	pop	r17
    1100:	0f 91       	pop	r16
    1102:	ff 90       	pop	r15
    1104:	ef 90       	pop	r14
copy():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:178
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
  strcpy(buffer, cstr);
    1106:	0c 94 8e 10 	jmp	0x211c	; 0x211c <strcpy>

0000110a <showStatus()>:
showStatus():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:117
}

uint32_t oldFrequency = 0L;
uint8_t oldStationIndicator = 99;

void showStatus() {
    110a:	8f 92       	push	r8
    110c:	9f 92       	push	r9
    110e:	af 92       	push	r10
    1110:	bf 92       	push	r11
    1112:	ff 92       	push	r15
    1114:	0f 93       	push	r16
    1116:	1f 93       	push	r17
    1118:	cf 93       	push	r28
    111a:	df 93       	push	r29
    111c:	cd b7       	in	r28, 0x3d	; 61
    111e:	de b7       	in	r29, 0x3e	; 62
    1120:	62 97       	sbiw	r28, 0x12	; 18
    1122:	0f b6       	in	r0, 0x3f	; 63
    1124:	f8 94       	cli
    1126:	de bf       	out	0x3e, r29	; 62
    1128:	0f be       	out	0x3f, r0	; 63
    112a:	cd bf       	out	0x3d, r28	; 61
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:119

  String unit, freqDisplay, stereo;
    112c:	66 e5       	ldi	r22, 0x56	; 86
    112e:	71 e0       	ldi	r23, 0x01	; 1
    1130:	ce 01       	movw	r24, r28
    1132:	01 96       	adiw	r24, 0x01	; 1
    1134:	0e 94 49 08 	call	0x1092	; 0x1092 <String::String(char const*)>
    1138:	66 e5       	ldi	r22, 0x56	; 86
    113a:	71 e0       	ldi	r23, 0x01	; 1
    113c:	ce 01       	movw	r24, r28
    113e:	07 96       	adiw	r24, 0x07	; 7
    1140:	0e 94 49 08 	call	0x1092	; 0x1092 <String::String(char const*)>
    1144:	66 e5       	ldi	r22, 0x56	; 86
    1146:	71 e0       	ldi	r23, 0x01	; 1
    1148:	ce 01       	movw	r24, r28
    114a:	0d 96       	adiw	r24, 0x0d	; 13
    114c:	0e 94 49 08 	call	0x1092	; 0x1092 <String::String(char const*)>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:121

  uint32_t currentFrequency = rx.getFrequencyInteger(); 
    1150:	0e 94 2a 06 	call	0xc54	; 0xc54 <SI4844::getFrequencyInteger() [clone .constprop.24]>
_ZN6SI484425getStatusStationIndicatorEv():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.h:509
   * @ingroup GB1 
   * @brief Gets Station Indicator.
   * @details **Call getStatus or getAllReceiverInfo before calling this function** 
   * @return 0 = Invalid Station; 1 = Valid Station
   */
  inline uint16_t  getStatusStationIndicator() { return device_status.refined.STATION; };
    1154:	f0 90 8a 03 	lds	r15, 0x038A	; 0x80038a <rx>
    1158:	f3 fa       	bst	r15, 3
    115a:	ff 24       	eor	r15, r15
    115c:	f0 f8       	bld	r15, 0
showStatus():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:124
  uint8_t currentStationIndicator = rx.getStatusStationIndicator();

  if ( oldFrequency == currentFrequency &&  oldStationIndicator == currentStationIndicator) return;
    115e:	80 90 84 02 	lds	r8, 0x0284	; 0x800284 <oldFrequency>
    1162:	90 90 85 02 	lds	r9, 0x0285	; 0x800285 <oldFrequency+0x1>
    1166:	a0 90 86 02 	lds	r10, 0x0286	; 0x800286 <oldFrequency+0x2>
    116a:	b0 90 87 02 	lds	r11, 0x0287	; 0x800287 <oldFrequency+0x3>
    116e:	86 16       	cp	r8, r22
    1170:	97 06       	cpc	r9, r23
    1172:	a8 06       	cpc	r10, r24
    1174:	b9 06       	cpc	r11, r25
    1176:	29 f4       	brne	.+10     	; 0x1182 <showStatus()+0x78>
    1178:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <oldStationIndicator>
    117c:	2f 15       	cp	r18, r15
    117e:	09 f4       	brne	.+2      	; 0x1182 <showStatus()+0x78>
    1180:	94 c0       	rjmp	.+296    	; 0x12aa <showStatus()+0x1a0>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:126
  
  oldFrequency = currentFrequency; 
    1182:	60 93 84 02 	sts	0x0284, r22	; 0x800284 <oldFrequency>
    1186:	70 93 85 02 	sts	0x0285, r23	; 0x800285 <oldFrequency+0x1>
    118a:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <oldFrequency+0x2>
    118e:	90 93 87 02 	sts	0x0287, r25	; 0x800287 <oldFrequency+0x3>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:127
  oldStationIndicator = currentStationIndicator;
    1192:	f0 92 04 01 	sts	0x0104, r15	; 0x800104 <oldStationIndicator>
clear():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:178
}

/********** high level commands, for the user! */
void LiquidCrystal::clear()
{
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	0e 94 32 04 	call	0x864	; 0x864 <LiquidCrystal::command(unsigned char) [clone .constprop.48]>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:179
  delayMicroseconds(2000);  // this command takes a long time!
    119c:	80 ed       	ldi	r24, 0xD0	; 208
    119e:	97 e0       	ldi	r25, 0x07	; 7
    11a0:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <delayMicroseconds>
showStatus():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:131

  display.clear();

  display.setCursor(0, 0);
    11a4:	60 e0       	ldi	r22, 0x00	; 0
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	0e 94 df 04 	call	0x9be	; 0x9be <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.22]>
_ZN6SI484411getBandModeEv():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.h:464
   * @ingroup GB1 
   * @brief Get the Band Mode 
   * @return char*   "FM", "AM" or "SW"
   * @see getStatusBandMode()
   */
  inline char * getBandMode(){ return (char *) bandmode_table[all_receiver_status.refined.BANDMODE]; };
    11ac:	e0 91 8c 03 	lds	r30, 0x038C	; 0x80038c <rx+0x2>
    11b0:	e2 95       	swap	r30
    11b2:	e6 95       	lsr	r30
    11b4:	e6 95       	lsr	r30
    11b6:	e3 70       	andi	r30, 0x03	; 3
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	ee 0f       	add	r30, r30
    11bc:	ff 1f       	adc	r31, r31
    11be:	ea 55       	subi	r30, 0x5A	; 90
    11c0:	fc 4f       	sbci	r31, 0xFC	; 252
showStatus():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:132
  display.print(rx.getBandMode());
    11c2:	80 81       	ld	r24, Z
    11c4:	91 81       	ldd	r25, Z+1	; 0x01
    11c6:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Print::print(char const*) [clone .constprop.40]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:134

  display.setCursor(12, 0);
    11ca:	60 e0       	ldi	r22, 0x00	; 0
    11cc:	8c e0       	ldi	r24, 0x0C	; 12
    11ce:	0e 94 df 04 	call	0x9be	; 0x9be <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.22]>
_ZN6SI484418getStatusBandIndexEv():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.h:569
  /** 
   * @ingroup GB1 
   * @brief Gets the current Band Index Detected.
   * @return 0~19: FM band; 20~24: AM band; 25~40: SW band
   */
  inline uint16_t  getStatusBandIndex() { return all_receiver_status.refined.BANDIDX; };
    11d2:	e0 91 8c 03 	lds	r30, 0x038C	; 0x80038c <rx+0x2>
    11d6:	ef 73       	andi	r30, 0x3F	; 63
showStatus():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:136
  bandIdx = rx.getStatusBandIndex();
  display.print(tabBand[bandIdx]);
    11d8:	26 e0       	ldi	r18, 0x06	; 6
    11da:	e2 9f       	mul	r30, r18
    11dc:	f0 01       	movw	r30, r0
    11de:	11 24       	eor	r1, r1
    11e0:	ee 52       	subi	r30, 0x2E	; 46
    11e2:	fc 4f       	sbci	r31, 0xFC	; 252
write():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.h:58
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
    11e4:	44 81       	ldd	r20, Z+4	; 0x04
    11e6:	55 81       	ldd	r21, Z+5	; 0x05
    11e8:	60 81       	ld	r22, Z
    11ea:	71 81       	ldd	r23, Z+1	; 0x01
    11ec:	8a eb       	ldi	r24, 0xBA	; 186
    11ee:	93 e0       	ldi	r25, 0x03	; 3
    11f0:	0e 94 68 03 	call	0x6d0	; 0x6d0 <Print::write(unsigned char const*, unsigned int)>
showStatus():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:138

  if (rx.getFrequencyInteger() > 999) 
    11f4:	0e 94 2a 06 	call	0xc54	; 0xc54 <SI4844::getFrequencyInteger() [clone .constprop.24]>
    11f8:	68 3e       	cpi	r22, 0xE8	; 232
    11fa:	73 40       	sbci	r23, 0x03	; 3
    11fc:	81 05       	cpc	r24, r1
    11fe:	91 05       	cpc	r25, r1
    1200:	08 f4       	brcc	.+2      	; 0x1204 <showStatus()+0xfa>
    1202:	6f c0       	rjmp	.+222    	; 0x12e2 <showStatus()+0x1d8>
operator=():
    1204:	69 e4       	ldi	r22, 0x49	; 73
    1206:	71 e0       	ldi	r23, 0x01	; 1
    1208:	ce 01       	movw	r24, r28
    120a:	01 96       	adiw	r24, 0x01	; 1
    120c:	0e 94 13 08 	call	0x1026	; 0x1026 <String::operator=(char const*) [clone .part.3]>
showStatus():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:143
    unit =  "MHZ";
  else
    unit =  "kHz";  
  
  display.setCursor(13, 1);
    1210:	61 e0       	ldi	r22, 0x01	; 1
    1212:	8d e0       	ldi	r24, 0x0D	; 13
    1214:	0e 94 df 04 	call	0x9be	; 0x9be <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.22]>
write():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.h:58
    1218:	4d 81       	ldd	r20, Y+5	; 0x05
    121a:	5e 81       	ldd	r21, Y+6	; 0x06
    121c:	69 81       	ldd	r22, Y+1	; 0x01
    121e:	7a 81       	ldd	r23, Y+2	; 0x02
    1220:	8a eb       	ldi	r24, 0xBA	; 186
    1222:	93 e0       	ldi	r25, 0x03	; 3
    1224:	0e 94 68 03 	call	0x6d0	; 0x6d0 <Print::write(unsigned char const*, unsigned int)>
_ZN6SI484417getStatusBandModeEv():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.h:562
   * @ingroup GB1 
   * @brief Gets the current Band Mode
   * @return 0 = FM mode; 1 = AM mode; 2 = SW mode
   * @see getBandMode()
   */
  inline uint16_t  getStatusBandMode() { return all_receiver_status.refined.BANDMODE; };
    1228:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <rx+0x2>
    122c:	82 95       	swap	r24
    122e:	86 95       	lsr	r24
    1230:	86 95       	lsr	r24
    1232:	83 70       	andi	r24, 0x03	; 3
showStatus():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:146
  display.print(unit);

  if (rx.getStatusBandMode() == 0) {
    1234:	91 f4       	brne	.+36     	; 0x125a <showStatus()+0x150>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:147
    display.setCursor(0, 1);
    1236:	61 e0       	ldi	r22, 0x01	; 1
    1238:	0e 94 df 04 	call	0x9be	; 0x9be <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.22]>
_ZN6SI484415getStatusStereoEv():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.h:500
   * @details Applicable to Si4840/44 parts FM function only (id does not make sense for Si4827).
   * @details **Call getStatus or getAllReceiverInfo before calling this function**  
   * @return 0 = Stereo off; 1 = Stereo on
   * @see getStereoIndicator()
   */
  inline uint16_t  getStatusStereo() { return device_status.refined.STEREO; };
    123c:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <rx>
    1240:	82 fb       	bst	r24, 2
    1242:	00 27       	eor	r16, r16
    1244:	00 f9       	bld	r16, 0
    1246:	10 e0       	ldi	r17, 0x00	; 0
showStatus():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:148
    display.print(stmo[rx.getStatusStereo()]);
    1248:	00 0f       	add	r16, r16
    124a:	11 1f       	adc	r17, r17
    124c:	f8 01       	movw	r30, r16
    124e:	eb 5e       	subi	r30, 0xEB	; 235
    1250:	fe 4f       	sbci	r31, 0xFE	; 254
    1252:	80 81       	ld	r24, Z
    1254:	91 81       	ldd	r25, Z+1	; 0x01
    1256:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Print::print(char const*) [clone .constprop.40]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:151
  }

  display.setCursor(7, 0); 
    125a:	60 e0       	ldi	r22, 0x00	; 0
    125c:	87 e0       	ldi	r24, 0x07	; 7
    125e:	0e 94 df 04 	call	0x9be	; 0x9be <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.22]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:152
  if ( currentStationIndicator != 0) {
    1262:	ff 20       	and	r15, r15
    1264:	09 f4       	brne	.+2      	; 0x1268 <showStatus()+0x15e>
    1266:	40 c0       	rjmp	.+128    	; 0x12e8 <showStatus()+0x1de>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:153
      display.print((char *)"OK");
    1268:	81 e5       	ldi	r24, 0x51	; 81
    126a:	91 e0       	ldi	r25, 0x01	; 1
    126c:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Print::print(char const*) [clone .constprop.40]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:154
      digitalWrite(TUNE_LED, HIGH);
    1270:	61 e0       	ldi	r22, 0x01	; 1
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:157
  } else { 
      display.print((char *)"  ");
      digitalWrite(TUNE_LED, LOW);
    1272:	8a e0       	ldi	r24, 0x0A	; 10
    1274:	0e 94 65 02 	call	0x4ca	; 0x4ca <digitalWrite>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:161
  }


  display.setCursor(5, 1);
    1278:	61 e0       	ldi	r22, 0x01	; 1
    127a:	85 e0       	ldi	r24, 0x05	; 5
    127c:	0e 94 df 04 	call	0x9be	; 0x9be <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.22]>
getFormattedFrequency():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1469
 * @param  removeRightDigit number of less significant digits to be removed (FM mode only)
 * @return  point to char with the formatted current frequency
 */
char* SI4844::getFormattedFrequency(uint8_t removeRightDigit, uint8_t thousandsSeparator) {

    uint32_t f = this->getFrequencyInteger();
    1280:	0e 94 2a 06 	call	0xc54	; 0xc54 <SI4844::getFrequencyInteger() [clone .constprop.24]>
_ZN6SI484417getStatusBandModeEv():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.h:562
   * @ingroup GB1 
   * @brief Gets the current Band Mode
   * @return 0 = FM mode; 1 = AM mode; 2 = SW mode
   * @see getBandMode()
   */
  inline uint16_t  getStatusBandMode() { return all_receiver_status.refined.BANDMODE; };
    1284:	20 91 8c 03 	lds	r18, 0x038C	; 0x80038c <rx+0x2>
    1288:	22 95       	swap	r18
    128a:	26 95       	lsr	r18
    128c:	26 95       	lsr	r18
    128e:	23 70       	andi	r18, 0x03	; 3
getFormattedFrequency():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1470
    if ( this->getStatusBandMode() == 0 ) { 
    1290:	89 f5       	brne	.+98     	; 0x12f4 <showStatus()+0x1ea>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1471
        this->convertToChar(f,this->strFormattedCurrentFrequenct,6,3,thousandsSeparator,true);
    1292:	03 e0       	ldi	r16, 0x03	; 3
    1294:	26 e0       	ldi	r18, 0x06	; 6
    1296:	40 eb       	ldi	r20, 0xB0	; 176
    1298:	53 e0       	ldi	r21, 0x03	; 3
    129a:	0e 94 8d 00 	call	0x11a	; 0x11a <SI4844::convertToChar(unsigned long, char*, unsigned char, unsigned char, unsigned char, bool) [clone .constprop.39]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1472
        strFormattedCurrentFrequenct[7-removeRightDigit] = '\0';
    129e:	10 92 b5 03 	sts	0x03B5, r1	; 0x8003b5 <rx+0x2b>
showStatus():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:162
  display.print(rx.getFormattedFrequency(2,'.'));  
    12a2:	80 eb       	ldi	r24, 0xB0	; 176
    12a4:	93 e0       	ldi	r25, 0x03	; 3
    12a6:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Print::print(char const*) [clone .constprop.40]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:124
  String unit, freqDisplay, stereo;

  uint32_t currentFrequency = rx.getFrequencyInteger(); 
  uint8_t currentStationIndicator = rx.getStatusStationIndicator();

  if ( oldFrequency == currentFrequency &&  oldStationIndicator == currentStationIndicator) return;
    12aa:	ce 01       	movw	r24, r28
    12ac:	0d 96       	adiw	r24, 0x0d	; 13
    12ae:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <String::~String()>
    12b2:	ce 01       	movw	r24, r28
    12b4:	07 96       	adiw	r24, 0x07	; 7
    12b6:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <String::~String()>
    12ba:	ce 01       	movw	r24, r28
    12bc:	01 96       	adiw	r24, 0x01	; 1
    12be:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <String::~String()>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:164


  display.setCursor(5, 1);
  display.print(rx.getFormattedFrequency(2,'.'));  

}
    12c2:	62 96       	adiw	r28, 0x12	; 18
    12c4:	0f b6       	in	r0, 0x3f	; 63
    12c6:	f8 94       	cli
    12c8:	de bf       	out	0x3e, r29	; 62
    12ca:	0f be       	out	0x3f, r0	; 63
    12cc:	cd bf       	out	0x3d, r28	; 61
    12ce:	df 91       	pop	r29
    12d0:	cf 91       	pop	r28
    12d2:	1f 91       	pop	r17
    12d4:	0f 91       	pop	r16
    12d6:	ff 90       	pop	r15
    12d8:	bf 90       	pop	r11
    12da:	af 90       	pop	r10
    12dc:	9f 90       	pop	r9
    12de:	8f 90       	pop	r8
    12e0:	08 95       	ret
operator=():
    12e2:	6d e4       	ldi	r22, 0x4D	; 77
    12e4:	71 e0       	ldi	r23, 0x01	; 1
    12e6:	90 cf       	rjmp	.-224    	; 0x1208 <showStatus()+0xfe>
showStatus():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:156
  display.setCursor(7, 0); 
  if ( currentStationIndicator != 0) {
      display.print((char *)"OK");
      digitalWrite(TUNE_LED, HIGH);
  } else { 
      display.print((char *)"  ");
    12e8:	84 e5       	ldi	r24, 0x54	; 84
    12ea:	91 e0       	ldi	r25, 0x01	; 1
    12ec:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Print::print(char const*) [clone .constprop.40]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:157
      digitalWrite(TUNE_LED, LOW);
    12f0:	60 e0       	ldi	r22, 0x00	; 0
    12f2:	bf cf       	rjmp	.-130    	; 0x1272 <showStatus()+0x168>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1474
    } else { 
         this->convertToChar(f,this->strFormattedCurrentFrequenct,5,(f > 999)? 2:0,'.',true);
    12f4:	00 e0       	ldi	r16, 0x00	; 0
getFormattedFrequency():
    12f6:	68 3e       	cpi	r22, 0xE8	; 232
    12f8:	23 e0       	ldi	r18, 0x03	; 3
    12fa:	72 07       	cpc	r23, r18
    12fc:	81 05       	cpc	r24, r1
    12fe:	91 05       	cpc	r25, r1
    1300:	08 f0       	brcs	.+2      	; 0x1304 <showStatus()+0x1fa>
showStatus():
    1302:	02 e0       	ldi	r16, 0x02	; 2
getFormattedFrequency():
    1304:	25 e0       	ldi	r18, 0x05	; 5
    1306:	40 eb       	ldi	r20, 0xB0	; 176
    1308:	53 e0       	ldi	r21, 0x03	; 3
    130a:	0e 94 8d 00 	call	0x11a	; 0x11a <SI4844::convertToChar(unsigned long, char*, unsigned char, unsigned char, unsigned char, bool) [clone .constprop.39]>
    130e:	c9 cf       	rjmp	.-110    	; 0x12a2 <showStatus()+0x198>

00001310 <__vector_16>:
__vector_16():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    1310:	1f 92       	push	r1
    1312:	0f 92       	push	r0
    1314:	0f b6       	in	r0, 0x3f	; 63
    1316:	0f 92       	push	r0
    1318:	11 24       	eor	r1, r1
    131a:	2f 93       	push	r18
    131c:	3f 93       	push	r19
    131e:	8f 93       	push	r24
    1320:	9f 93       	push	r25
    1322:	af 93       	push	r26
    1324:	bf 93       	push	r27
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
    1326:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <timer0_millis>
    132a:	90 91 87 03 	lds	r25, 0x0387	; 0x800387 <timer0_millis+0x1>
    132e:	a0 91 88 03 	lds	r26, 0x0388	; 0x800388 <timer0_millis+0x2>
    1332:	b0 91 89 03 	lds	r27, 0x0389	; 0x800389 <timer0_millis+0x3>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
    1336:	30 91 88 02 	lds	r19, 0x0288	; 0x800288 <timer0_fract>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
    133a:	23 e0       	ldi	r18, 0x03	; 3
    133c:	23 0f       	add	r18, r19
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
    133e:	2d 37       	cpi	r18, 0x7D	; 125
    1340:	68 f1       	brcs	.+90     	; 0x139c <__vector_16+0x8c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
    1342:	26 e8       	ldi	r18, 0x86	; 134
    1344:	23 0f       	add	r18, r19
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
    1346:	02 96       	adiw	r24, 0x02	; 2
    1348:	a1 1d       	adc	r26, r1
    134a:	b1 1d       	adc	r27, r1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
    134c:	20 93 88 02 	sts	0x0288, r18	; 0x800288 <timer0_fract>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
    1350:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <timer0_millis>
    1354:	90 93 87 03 	sts	0x0387, r25	; 0x800387 <timer0_millis+0x1>
    1358:	a0 93 88 03 	sts	0x0388, r26	; 0x800388 <timer0_millis+0x2>
    135c:	b0 93 89 03 	sts	0x0389, r27	; 0x800389 <timer0_millis+0x3>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
    1360:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <timer0_overflow_count>
    1364:	90 91 8a 02 	lds	r25, 0x028A	; 0x80028a <timer0_overflow_count+0x1>
    1368:	a0 91 8b 02 	lds	r26, 0x028B	; 0x80028b <timer0_overflow_count+0x2>
    136c:	b0 91 8c 02 	lds	r27, 0x028C	; 0x80028c <timer0_overflow_count+0x3>
    1370:	01 96       	adiw	r24, 0x01	; 1
    1372:	a1 1d       	adc	r26, r1
    1374:	b1 1d       	adc	r27, r1
    1376:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <timer0_overflow_count>
    137a:	90 93 8a 02 	sts	0x028A, r25	; 0x80028a <timer0_overflow_count+0x1>
    137e:	a0 93 8b 02 	sts	0x028B, r26	; 0x80028b <timer0_overflow_count+0x2>
    1382:	b0 93 8c 02 	sts	0x028C, r27	; 0x80028c <timer0_overflow_count+0x3>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:213
#endif
}
    1386:	bf 91       	pop	r27
    1388:	af 91       	pop	r26
    138a:	9f 91       	pop	r25
    138c:	8f 91       	pop	r24
    138e:	3f 91       	pop	r19
    1390:	2f 91       	pop	r18
    1392:	0f 90       	pop	r0
    1394:	0f be       	out	0x3f, r0	; 63
    1396:	0f 90       	pop	r0
    1398:	1f 90       	pop	r1
    139a:	18 95       	reti
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
    139c:	01 96       	adiw	r24, 0x01	; 1
    139e:	a1 1d       	adc	r26, r1
    13a0:	b1 1d       	adc	r27, r1
    13a2:	d4 cf       	rjmp	.-88     	; 0x134c <__vector_16+0x3c>

000013a4 <__vector_2>:
__vector_2():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WInterrupts.c:489
|| defined(__AVR_ATmega48PB__)  || defined(__AVR_ATmega88__)  || defined(__AVR_ATmega88P__)  \
|| defined(__AVR_ATmega88PB__)  || defined(__AVR_ATmega168__) || defined(__AVR_ATmega168P__) \
|| defined(__AVR_ATmega168PB__) || defined(__AVR_ATmega328__) || defined(__AVR_ATmega328P__) \
|| defined(__AVR_ATmega328PB__)
  IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
  IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    13a4:	1f 92       	push	r1
    13a6:	0f 92       	push	r0
    13a8:	0f b6       	in	r0, 0x3f	; 63
    13aa:	0f 92       	push	r0
    13ac:	11 24       	eor	r1, r1
    13ae:	2f 93       	push	r18
    13b0:	3f 93       	push	r19
    13b2:	4f 93       	push	r20
    13b4:	5f 93       	push	r21
    13b6:	6f 93       	push	r22
    13b8:	7f 93       	push	r23
    13ba:	8f 93       	push	r24
    13bc:	9f 93       	push	r25
    13be:	af 93       	push	r26
    13c0:	bf 93       	push	r27
    13c2:	ef 93       	push	r30
    13c4:	ff 93       	push	r31
    13c6:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_start+0x2>
    13ca:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <__data_start+0x3>
    13ce:	09 95       	icall
    13d0:	ff 91       	pop	r31
    13d2:	ef 91       	pop	r30
    13d4:	bf 91       	pop	r27
    13d6:	af 91       	pop	r26
    13d8:	9f 91       	pop	r25
    13da:	8f 91       	pop	r24
    13dc:	7f 91       	pop	r23
    13de:	6f 91       	pop	r22
    13e0:	5f 91       	pop	r21
    13e2:	4f 91       	pop	r20
    13e4:	3f 91       	pop	r19
    13e6:	2f 91       	pop	r18
    13e8:	0f 90       	pop	r0
    13ea:	0f be       	out	0x3f, r0	; 63
    13ec:	0f 90       	pop	r0
    13ee:	1f 90       	pop	r1
    13f0:	18 95       	reti

000013f2 <__vector_1>:
__vector_1():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WInterrupts.c:488
#elif defined(__AVR_ATmega8__)  || defined(__AVR_ATmega48__)  || defined(__AVR_ATmega48P__)  \
|| defined(__AVR_ATmega48PB__)  || defined(__AVR_ATmega88__)  || defined(__AVR_ATmega88P__)  \
|| defined(__AVR_ATmega88PB__)  || defined(__AVR_ATmega168__) || defined(__AVR_ATmega168P__) \
|| defined(__AVR_ATmega168PB__) || defined(__AVR_ATmega328__) || defined(__AVR_ATmega328P__) \
|| defined(__AVR_ATmega328PB__)
  IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    13f2:	1f 92       	push	r1
    13f4:	0f 92       	push	r0
    13f6:	0f b6       	in	r0, 0x3f	; 63
    13f8:	0f 92       	push	r0
    13fa:	11 24       	eor	r1, r1
    13fc:	2f 93       	push	r18
    13fe:	3f 93       	push	r19
    1400:	4f 93       	push	r20
    1402:	5f 93       	push	r21
    1404:	6f 93       	push	r22
    1406:	7f 93       	push	r23
    1408:	8f 93       	push	r24
    140a:	9f 93       	push	r25
    140c:	af 93       	push	r26
    140e:	bf 93       	push	r27
    1410:	ef 93       	push	r30
    1412:	ff 93       	push	r31
    1414:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
    1418:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
    141c:	09 95       	icall
    141e:	ff 91       	pop	r31
    1420:	ef 91       	pop	r30
    1422:	bf 91       	pop	r27
    1424:	af 91       	pop	r26
    1426:	9f 91       	pop	r25
    1428:	8f 91       	pop	r24
    142a:	7f 91       	pop	r23
    142c:	6f 91       	pop	r22
    142e:	5f 91       	pop	r21
    1430:	4f 91       	pop	r20
    1432:	3f 91       	pop	r19
    1434:	2f 91       	pop	r18
    1436:	0f 90       	pop	r0
    1438:	0f be       	out	0x3f, r0	; 63
    143a:	0f 90       	pop	r0
    143c:	1f 90       	pop	r1
    143e:	18 95       	reti

00001440 <__vector_19>:
__vector_19():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1440:	1f 92       	push	r1
    1442:	0f 92       	push	r0
    1444:	0f b6       	in	r0, 0x3f	; 63
    1446:	0f 92       	push	r0
    1448:	11 24       	eor	r1, r1
    144a:	2f 93       	push	r18
    144c:	3f 93       	push	r19
    144e:	4f 93       	push	r20
    1450:	5f 93       	push	r21
    1452:	6f 93       	push	r22
    1454:	7f 93       	push	r23
    1456:	8f 93       	push	r24
    1458:	9f 93       	push	r25
    145a:	af 93       	push	r26
    145c:	bf 93       	push	r27
    145e:	ef 93       	push	r30
    1460:	ff 93       	push	r31
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    1462:	8d ed       	ldi	r24, 0xDD	; 221
    1464:	92 e0       	ldi	r25, 0x02	; 2
    1466:	0e 94 c2 01 	call	0x384	; 0x384 <HardwareSerial::_tx_udr_empty_irq()>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial0.cpp:65
}
    146a:	ff 91       	pop	r31
    146c:	ef 91       	pop	r30
    146e:	bf 91       	pop	r27
    1470:	af 91       	pop	r26
    1472:	9f 91       	pop	r25
    1474:	8f 91       	pop	r24
    1476:	7f 91       	pop	r23
    1478:	6f 91       	pop	r22
    147a:	5f 91       	pop	r21
    147c:	4f 91       	pop	r20
    147e:	3f 91       	pop	r19
    1480:	2f 91       	pop	r18
    1482:	0f 90       	pop	r0
    1484:	0f be       	out	0x3f, r0	; 63
    1486:	0f 90       	pop	r0
    1488:	1f 90       	pop	r1
    148a:	18 95       	reti

0000148c <__vector_18>:
__vector_18():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RX_vect)
  ISR(USART_RX_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    148c:	1f 92       	push	r1
    148e:	0f 92       	push	r0
    1490:	0f b6       	in	r0, 0x3f	; 63
    1492:	0f 92       	push	r0
    1494:	11 24       	eor	r1, r1
    1496:	2f 93       	push	r18
    1498:	8f 93       	push	r24
    149a:	9f 93       	push	r25
    149c:	ef 93       	push	r30
    149e:	ff 93       	push	r31
_rx_complete_irq():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    14a0:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <Serial+0x10>
    14a4:	f0 91 ee 02 	lds	r31, 0x02EE	; 0x8002ee <Serial+0x11>
    14a8:	80 81       	ld	r24, Z
    14aa:	e0 91 f3 02 	lds	r30, 0x02F3	; 0x8002f3 <Serial+0x16>
    14ae:	f0 91 f4 02 	lds	r31, 0x02F4	; 0x8002f4 <Serial+0x17>
    14b2:	82 fd       	sbrc	r24, 2
    14b4:	1b c0       	rjmp	.+54     	; 0x14ec <__vector_18+0x60>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    14b6:	90 81       	ld	r25, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    14b8:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <Serial+0x19>
    14bc:	8f 5f       	subi	r24, 0xFF	; 255
    14be:	8f 73       	andi	r24, 0x3F	; 63
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    14c0:	20 91 f7 02 	lds	r18, 0x02F7	; 0x8002f7 <Serial+0x1a>
    14c4:	82 17       	cp	r24, r18
    14c6:	41 f0       	breq	.+16     	; 0x14d8 <__vector_18+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
    14c8:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <Serial+0x19>
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	e3 52       	subi	r30, 0x23	; 35
    14d0:	fd 4f       	sbci	r31, 0xFD	; 253
    14d2:	95 8f       	std	Z+29, r25	; 0x1d
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
    14d4:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <Serial+0x19>
__vector_18():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    14d8:	ff 91       	pop	r31
    14da:	ef 91       	pop	r30
    14dc:	9f 91       	pop	r25
    14de:	8f 91       	pop	r24
    14e0:	2f 91       	pop	r18
    14e2:	0f 90       	pop	r0
    14e4:	0f be       	out	0x3f, r0	; 63
    14e6:	0f 90       	pop	r0
    14e8:	1f 90       	pop	r1
    14ea:	18 95       	reti
_rx_complete_irq():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    14ec:	80 81       	ld	r24, Z
    14ee:	f4 cf       	rjmp	.-24     	; 0x14d8 <__vector_18+0x4c>

000014f0 <__vector_24>:
__vector_24():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:534
  }
  return(flag);
}

ISR(TWI_vect)
{
    14f0:	1f 92       	push	r1
    14f2:	0f 92       	push	r0
    14f4:	0f b6       	in	r0, 0x3f	; 63
    14f6:	0f 92       	push	r0
    14f8:	11 24       	eor	r1, r1
    14fa:	2f 93       	push	r18
    14fc:	3f 93       	push	r19
    14fe:	4f 93       	push	r20
    1500:	5f 93       	push	r21
    1502:	6f 93       	push	r22
    1504:	7f 93       	push	r23
    1506:	8f 93       	push	r24
    1508:	9f 93       	push	r25
    150a:	af 93       	push	r26
    150c:	bf 93       	push	r27
    150e:	ef 93       	push	r30
    1510:	ff 93       	push	r31
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:535
  switch(TW_STATUS){
    1512:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    1516:	88 7f       	andi	r24, 0xF8	; 248
    1518:	80 36       	cpi	r24, 0x60	; 96
    151a:	09 f4       	brne	.+2      	; 0x151e <__vector_24+0x2e>
    151c:	4a c0       	rjmp	.+148    	; 0x15b2 <__vector_24+0xc2>
    151e:	f0 f5       	brcc	.+124    	; 0x159c <__vector_24+0xac>
    1520:	88 32       	cpi	r24, 0x28	; 40
    1522:	09 f4       	brne	.+2      	; 0x1526 <__vector_24+0x36>
    1524:	a5 c0       	rjmp	.+330    	; 0x1670 <__vector_24+0x180>
    1526:	18 f5       	brcc	.+70     	; 0x156e <__vector_24+0x7e>
    1528:	80 31       	cpi	r24, 0x10	; 16
    152a:	09 f4       	brne	.+2      	; 0x152e <__vector_24+0x3e>
    152c:	99 c0       	rjmp	.+306    	; 0x1660 <__vector_24+0x170>
    152e:	b8 f4       	brcc	.+46     	; 0x155e <__vector_24+0x6e>
    1530:	88 23       	and	r24, r24
    1532:	09 f4       	brne	.+2      	; 0x1536 <__vector_24+0x46>
    1534:	01 c1       	rjmp	.+514    	; 0x1738 <__vector_24+0x248>
    1536:	88 30       	cpi	r24, 0x08	; 8
    1538:	09 f4       	brne	.+2      	; 0x153c <__vector_24+0x4c>
    153a:	92 c0       	rjmp	.+292    	; 0x1660 <__vector_24+0x170>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:696
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    153c:	ff 91       	pop	r31
    153e:	ef 91       	pop	r30
    1540:	bf 91       	pop	r27
    1542:	af 91       	pop	r26
    1544:	9f 91       	pop	r25
    1546:	8f 91       	pop	r24
    1548:	7f 91       	pop	r23
    154a:	6f 91       	pop	r22
    154c:	5f 91       	pop	r21
    154e:	4f 91       	pop	r20
    1550:	3f 91       	pop	r19
    1552:	2f 91       	pop	r18
    1554:	0f 90       	pop	r0
    1556:	0f be       	out	0x3f, r0	; 63
    1558:	0f 90       	pop	r0
    155a:	1f 90       	pop	r1
    155c:	18 95       	reti
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    155e:	88 31       	cpi	r24, 0x18	; 24
    1560:	09 f4       	brne	.+2      	; 0x1564 <__vector_24+0x74>
    1562:	86 c0       	rjmp	.+268    	; 0x1670 <__vector_24+0x180>
    1564:	80 32       	cpi	r24, 0x20	; 32
    1566:	51 f7       	brne	.-44     	; 0x153c <__vector_24+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:570
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    1568:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <twi_error>
    156c:	14 c0       	rjmp	.+40     	; 0x1596 <__vector_24+0xa6>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    156e:	80 34       	cpi	r24, 0x40	; 64
    1570:	09 f4       	brne	.+2      	; 0x1574 <__vector_24+0x84>
    1572:	a3 c0       	rjmp	.+326    	; 0x16ba <__vector_24+0x1ca>
    1574:	40 f4       	brcc	.+16     	; 0x1586 <__vector_24+0x96>
    1576:	80 33       	cpi	r24, 0x30	; 48
    1578:	b9 f3       	breq	.-18     	; 0x1568 <__vector_24+0x78>
    157a:	88 33       	cpi	r24, 0x38	; 56
    157c:	f9 f6       	brne	.-66     	; 0x153c <__vector_24+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:574
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    157e:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <twi_error>
twi_reply():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1582:	85 ec       	ldi	r24, 0xC5	; 197
    1584:	ba c0       	rjmp	.+372    	; 0x16fa <__vector_24+0x20a>
__vector_24():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1586:	80 35       	cpi	r24, 0x50	; 80
    1588:	09 f4       	brne	.+2      	; 0x158c <__vector_24+0x9c>
    158a:	87 c0       	rjmp	.+270    	; 0x169a <__vector_24+0x1aa>
    158c:	88 35       	cpi	r24, 0x58	; 88
    158e:	09 f4       	brne	.+2      	; 0x1592 <__vector_24+0xa2>
    1590:	9c c0       	rjmp	.+312    	; 0x16ca <__vector_24+0x1da>
    1592:	88 34       	cpi	r24, 0x48	; 72
    1594:	99 f6       	brne	.-90     	; 0x153c <__vector_24+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:693
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
    1596:	0e 94 f5 04 	call	0x9ea	; 0x9ea <twi_stop>
    159a:	d0 cf       	rjmp	.-96     	; 0x153c <__vector_24+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    159c:	88 39       	cpi	r24, 0x98	; 152
    159e:	09 f4       	brne	.+2      	; 0x15a2 <__vector_24+0xb2>
    15a0:	92 c0       	rjmp	.+292    	; 0x16c6 <__vector_24+0x1d6>
    15a2:	38 f5       	brcc	.+78     	; 0x15f2 <__vector_24+0x102>
    15a4:	88 37       	cpi	r24, 0x78	; 120
    15a6:	29 f0       	breq	.+10     	; 0x15b2 <__vector_24+0xc2>
    15a8:	50 f4       	brcc	.+20     	; 0x15be <__vector_24+0xce>
    15aa:	88 36       	cpi	r24, 0x68	; 104
    15ac:	11 f0       	breq	.+4      	; 0x15b2 <__vector_24+0xc2>
    15ae:	80 37       	cpi	r24, 0x70	; 112
    15b0:	29 f6       	brne	.-118    	; 0x153c <__vector_24+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:616
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    15b2:	83 e0       	ldi	r24, 0x03	; 3
    15b4:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <twi_state>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:618
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    15b8:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <twi_rxBufferIndex>
    15bc:	55 c0       	rjmp	.+170    	; 0x1668 <__vector_24+0x178>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    15be:	88 38       	cpi	r24, 0x88	; 136
    15c0:	09 f4       	brne	.+2      	; 0x15c4 <__vector_24+0xd4>
    15c2:	81 c0       	rjmp	.+258    	; 0x16c6 <__vector_24+0x1d6>
    15c4:	80 39       	cpi	r24, 0x90	; 144
    15c6:	19 f0       	breq	.+6      	; 0x15ce <__vector_24+0xde>
    15c8:	80 38       	cpi	r24, 0x80	; 128
    15ca:	09 f0       	breq	.+2      	; 0x15ce <__vector_24+0xde>
    15cc:	b7 cf       	rjmp	.-146    	; 0x153c <__vector_24+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:624
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    15ce:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <twi_rxBufferIndex>
    15d2:	80 32       	cpi	r24, 0x20	; 32
    15d4:	08 f0       	brcs	.+2      	; 0x15d8 <__vector_24+0xe8>
    15d6:	77 c0       	rjmp	.+238    	; 0x16c6 <__vector_24+0x1d6>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:626
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    15d8:	e0 91 83 02 	lds	r30, 0x0283	; 0x800283 <twi_rxBufferIndex>
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	8e 0f       	add	r24, r30
    15e0:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <twi_rxBufferIndex>
    15e4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	ed 59       	subi	r30, 0x9D	; 157
    15ec:	fd 4f       	sbci	r31, 0xFD	; 253
    15ee:	80 83       	st	Z, r24
    15f0:	3b c0       	rjmp	.+118    	; 0x1668 <__vector_24+0x178>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    15f2:	80 3b       	cpi	r24, 0xB0	; 176
    15f4:	39 f0       	breq	.+14     	; 0x1604 <__vector_24+0x114>
    15f6:	d0 f4       	brcc	.+52     	; 0x162c <__vector_24+0x13c>
    15f8:	80 3a       	cpi	r24, 0xA0	; 160
    15fa:	09 f4       	brne	.+2      	; 0x15fe <__vector_24+0x10e>
    15fc:	83 c0       	rjmp	.+262    	; 0x1704 <__vector_24+0x214>
    15fe:	88 3a       	cpi	r24, 0xA8	; 168
    1600:	09 f0       	breq	.+2      	; 0x1604 <__vector_24+0x114>
    1602:	9c cf       	rjmp	.-200    	; 0x153c <__vector_24+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:655

    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1604:	84 e0       	ldi	r24, 0x04	; 4
    1606:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <twi_state>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:657
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    160a:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <twi_txBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:659
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    160e:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <twi_txBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:662
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	e0 e0       	ldi	r30, 0x00	; 0
    1616:	09 95       	icall
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:664
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1618:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <twi_txBufferLength>
    161c:	81 11       	cpse	r24, r1
    161e:	0f c0       	rjmp	.+30     	; 0x163e <__vector_24+0x14e>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:665
        twi_txBufferLength = 1;
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <twi_txBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:666
        twi_txBuffer[0] = 0x00;
    1626:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <twi_txBuffer>
    162a:	09 c0       	rjmp	.+18     	; 0x163e <__vector_24+0x14e>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    162c:	80 3c       	cpi	r24, 0xC0	; 192
    162e:	09 f4       	brne	.+2      	; 0x1632 <__vector_24+0x142>
    1630:	a8 cf       	rjmp	.-176    	; 0x1582 <__vector_24+0x92>
    1632:	88 3c       	cpi	r24, 0xC8	; 200
    1634:	09 f4       	brne	.+2      	; 0x1638 <__vector_24+0x148>
    1636:	a5 cf       	rjmp	.-182    	; 0x1582 <__vector_24+0x92>
    1638:	88 3b       	cpi	r24, 0xB8	; 184
    163a:	09 f0       	breq	.+2      	; 0x163e <__vector_24+0x14e>
    163c:	7f cf       	rjmp	.-258    	; 0x153c <__vector_24+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:672
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    163e:	e0 91 62 02 	lds	r30, 0x0262	; 0x800262 <twi_txBufferIndex>
    1642:	81 e0       	ldi	r24, 0x01	; 1
    1644:	8e 0f       	add	r24, r30
    1646:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <twi_txBufferIndex>
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	ef 5b       	subi	r30, 0xBF	; 191
    164e:	fd 4f       	sbci	r31, 0xFD	; 253
    1650:	80 81       	ld	r24, Z
    1652:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:674
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1656:	90 91 62 02 	lds	r25, 0x0262	; 0x800262 <twi_txBufferIndex>
    165a:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <twi_txBufferLength>
    165e:	31 c0       	rjmp	.+98     	; 0x16c2 <__vector_24+0x1d2>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:540
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    1660:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <twi_slarw>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:550
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1664:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
twi_reply():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1668:	85 ec       	ldi	r24, 0xC5	; 197
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:423
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    166a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    166e:	66 cf       	rjmp	.-308    	; 0x153c <__vector_24+0x4c>
__vector_24():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:548

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1670:	90 91 d7 02 	lds	r25, 0x02D7	; 0x8002d7 <twi_masterBufferIndex>
    1674:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <twi_masterBufferLength>
    1678:	98 17       	cp	r25, r24
    167a:	b8 f5       	brcc	.+110    	; 0x16ea <__vector_24+0x1fa>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:550
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    167c:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <twi_masterBuffer>
    1680:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <twi_masterBuffer+0x1>
    1684:	e0 91 d7 02 	lds	r30, 0x02D7	; 0x8002d7 <twi_masterBufferIndex>
    1688:	21 e0       	ldi	r18, 0x01	; 1
    168a:	2e 0f       	add	r18, r30
    168c:	20 93 d7 02 	sts	0x02D7, r18	; 0x8002d7 <twi_masterBufferIndex>
    1690:	e8 0f       	add	r30, r24
    1692:	f9 2f       	mov	r31, r25
    1694:	f1 1d       	adc	r31, r1
    1696:	80 81       	ld	r24, Z
    1698:	e5 cf       	rjmp	.-54     	; 0x1664 <__vector_24+0x174>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:581
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    169a:	20 91 d8 02 	lds	r18, 0x02D8	; 0x8002d8 <twi_masterBuffer>
    169e:	30 91 d9 02 	lds	r19, 0x02D9	; 0x8002d9 <twi_masterBuffer+0x1>
    16a2:	e0 91 d7 02 	lds	r30, 0x02D7	; 0x8002d7 <twi_masterBufferIndex>
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	8e 0f       	add	r24, r30
    16aa:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <twi_masterBufferIndex>
    16ae:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    16b2:	e2 0f       	add	r30, r18
    16b4:	f3 2f       	mov	r31, r19
    16b6:	f1 1d       	adc	r31, r1
    16b8:	80 83       	st	Z, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:585
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    16ba:	90 91 d7 02 	lds	r25, 0x02D7	; 0x8002d7 <twi_masterBufferIndex>
    16be:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <twi_masterBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:674
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    16c2:	98 17       	cp	r25, r24
    16c4:	88 f2       	brcs	.-94     	; 0x1668 <__vector_24+0x178>
twi_reply():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:423
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    16c6:	85 e8       	ldi	r24, 0x85	; 133
    16c8:	d0 cf       	rjmp	.-96     	; 0x166a <__vector_24+0x17a>
__vector_24():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:593
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    16ca:	20 91 d8 02 	lds	r18, 0x02D8	; 0x8002d8 <twi_masterBuffer>
    16ce:	30 91 d9 02 	lds	r19, 0x02D9	; 0x8002d9 <twi_masterBuffer+0x1>
    16d2:	e0 91 d7 02 	lds	r30, 0x02D7	; 0x8002d7 <twi_masterBufferIndex>
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	8e 0f       	add	r24, r30
    16da:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <twi_masterBufferIndex>
    16de:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    16e2:	e2 0f       	add	r30, r18
    16e4:	f3 2f       	mov	r31, r19
    16e6:	f1 1d       	adc	r31, r1
    16e8:	80 83       	st	Z, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:594
  if (twi_sendStop)
    16ea:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <twi_sendStop>
    16ee:	81 11       	cpse	r24, r1
    16f0:	52 cf       	rjmp	.-348    	; 0x1596 <__vector_24+0xa6>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:597
          twi_stop();
  else {
    twi_inRepStart = true;  // we're going to send the START
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <twi_inRepStart>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:601
    // don't enable the interrupt. We'll generate the start, but we
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    16f8:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    16fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
__vector_24():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:685
    case TW_ST_DATA_NACK: // received nack, we are done
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    16fe:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <twi_state>
    1702:	1c cf       	rjmp	.-456    	; 0x153c <__vector_24+0x4c>
twi_releaseBus():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:474
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    1704:	85 ec       	ldi	r24, 0xC5	; 197
    1706:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:477

  // update twi state
  twi_state = TWI_READY;
    170a:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <twi_state>
__vector_24():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:637
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    170e:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <twi_rxBufferIndex>
    1712:	80 32       	cpi	r24, 0x20	; 32
    1714:	30 f4       	brcc	.+12     	; 0x1722 <__vector_24+0x232>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:638
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1716:	e0 91 83 02 	lds	r30, 0x0283	; 0x800283 <twi_rxBufferIndex>
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	ed 59       	subi	r30, 0x9D	; 157
    171e:	fd 4f       	sbci	r31, 0xFD	; 253
    1720:	10 82       	st	Z, r1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:641
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1722:	60 91 83 02 	lds	r22, 0x0283	; 0x800283 <twi_rxBufferIndex>
    1726:	70 e0       	ldi	r23, 0x00	; 0
    1728:	83 e6       	ldi	r24, 0x63	; 99
    172a:	92 e0       	ldi	r25, 0x02	; 2
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	e0 e0       	ldi	r30, 0x00	; 0
    1730:	09 95       	icall
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:643
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1732:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <twi_rxBufferIndex>
    1736:	02 cf       	rjmp	.-508    	; 0x153c <__vector_24+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:692

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    1738:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <twi_error>
    173c:	2c cf       	rjmp	.-424    	; 0x1596 <__vector_24+0xa6>

0000173e <global constructors keyed to 65535_0_SI4844_02_LCD16x2_SLIDE_SWITCH.ino.cpp.o.2650>:
_GLOBAL__I_65535_0_SI4844_02_LCD16x2_SLIDE_SWITCH.ino.cpp.o.2650():
    173e:	1f 93       	push	r17
    1740:	cf 93       	push	r28
    1742:	df 93       	push	r29
    1744:	ed ed       	ldi	r30, 0xDD	; 221
    1746:	f2 e0       	ldi	r31, 0x02	; 2
    1748:	13 82       	std	Z+3, r1	; 0x03
    174a:	12 82       	std	Z+2, r1	; 0x02
    174c:	88 ee       	ldi	r24, 0xE8	; 232
    174e:	93 e0       	ldi	r25, 0x03	; 3
    1750:	a0 e0       	ldi	r26, 0x00	; 0
    1752:	b0 e0       	ldi	r27, 0x00	; 0
    1754:	84 83       	std	Z+4, r24	; 0x04
    1756:	95 83       	std	Z+5, r25	; 0x05
    1758:	a6 83       	std	Z+6, r26	; 0x06
    175a:	b7 83       	std	Z+7, r27	; 0x07
    175c:	2d e1       	ldi	r18, 0x1D	; 29
    175e:	31 e0       	ldi	r19, 0x01	; 1
    1760:	31 83       	std	Z+1, r19	; 0x01
    1762:	20 83       	st	Z, r18
    1764:	25 ec       	ldi	r18, 0xC5	; 197
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	35 87       	std	Z+13, r19	; 0x0d
    176a:	24 87       	std	Z+12, r18	; 0x0c
    176c:	24 ec       	ldi	r18, 0xC4	; 196
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	37 87       	std	Z+15, r19	; 0x0f
    1772:	26 87       	std	Z+14, r18	; 0x0e
    1774:	20 ec       	ldi	r18, 0xC0	; 192
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	31 8b       	std	Z+17, r19	; 0x11
    177a:	20 8b       	std	Z+16, r18	; 0x10
    177c:	21 ec       	ldi	r18, 0xC1	; 193
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	33 8b       	std	Z+19, r19	; 0x13
    1782:	22 8b       	std	Z+18, r18	; 0x12
    1784:	22 ec       	ldi	r18, 0xC2	; 194
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	35 8b       	std	Z+21, r19	; 0x15
    178a:	24 8b       	std	Z+20, r18	; 0x14
    178c:	26 ec       	ldi	r18, 0xC6	; 198
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	37 8b       	std	Z+23, r19	; 0x17
    1792:	26 8b       	std	Z+22, r18	; 0x16
    1794:	11 8e       	std	Z+25, r1	; 0x19
    1796:	12 8e       	std	Z+26, r1	; 0x1a
    1798:	13 8e       	std	Z+27, r1	; 0x1b
    179a:	14 8e       	std	Z+28, r1	; 0x1c
    179c:	ea e7       	ldi	r30, 0x7A	; 122
    179e:	f3 e0       	ldi	r31, 0x03	; 3
    17a0:	13 82       	std	Z+3, r1	; 0x03
    17a2:	12 82       	std	Z+2, r1	; 0x02
    17a4:	84 83       	std	Z+4, r24	; 0x04
    17a6:	95 83       	std	Z+5, r25	; 0x05
    17a8:	a6 83       	std	Z+6, r26	; 0x06
    17aa:	b7 83       	std	Z+7, r27	; 0x07
    17ac:	8f e2       	ldi	r24, 0x2F	; 47
    17ae:	91 e0       	ldi	r25, 0x01	; 1
    17b0:	91 83       	std	Z+1, r25	; 0x01
    17b2:	80 83       	st	Z, r24
    17b4:	8f b7       	in	r24, 0x3f	; 63
    17b6:	f8 94       	cli
    17b8:	40 91 86 03 	lds	r20, 0x0386	; 0x800386 <timer0_millis>
    17bc:	50 91 87 03 	lds	r21, 0x0387	; 0x800387 <timer0_millis+0x1>
    17c0:	60 91 88 03 	lds	r22, 0x0388	; 0x800388 <timer0_millis+0x2>
    17c4:	70 91 89 03 	lds	r23, 0x0389	; 0x800389 <timer0_millis+0x3>
    17c8:	8f bf       	out	0x3f, r24	; 63
    17ca:	67 e5       	ldi	r22, 0x57	; 87
    17cc:	71 e0       	ldi	r23, 0x01	; 1
    17ce:	82 ed       	ldi	r24, 0xD2	; 210
    17d0:	93 e0       	ldi	r25, 0x03	; 3
    17d2:	0e 94 49 08 	call	0x1092	; 0x1092 <String::String(char const*)>
    17d6:	6c e5       	ldi	r22, 0x5C	; 92
    17d8:	71 e0       	ldi	r23, 0x01	; 1
    17da:	88 ed       	ldi	r24, 0xD8	; 216
    17dc:	93 e0       	ldi	r25, 0x03	; 3
    17de:	0e 94 49 08 	call	0x1092	; 0x1092 <String::String(char const*)>
    17e2:	61 e6       	ldi	r22, 0x61	; 97
    17e4:	71 e0       	ldi	r23, 0x01	; 1
    17e6:	8e ed       	ldi	r24, 0xDE	; 222
    17e8:	93 e0       	ldi	r25, 0x03	; 3
    17ea:	0e 94 49 08 	call	0x1092	; 0x1092 <String::String(char const*)>
    17ee:	66 e6       	ldi	r22, 0x66	; 102
    17f0:	71 e0       	ldi	r23, 0x01	; 1
    17f2:	84 ee       	ldi	r24, 0xE4	; 228
    17f4:	93 e0       	ldi	r25, 0x03	; 3
    17f6:	0e 94 49 08 	call	0x1092	; 0x1092 <String::String(char const*)>
    17fa:	6b e6       	ldi	r22, 0x6B	; 107
    17fc:	71 e0       	ldi	r23, 0x01	; 1
    17fe:	8a ee       	ldi	r24, 0xEA	; 234
    1800:	93 e0       	ldi	r25, 0x03	; 3
    1802:	0e 94 49 08 	call	0x1092	; 0x1092 <String::String(char const*)>
    1806:	60 e7       	ldi	r22, 0x70	; 112
    1808:	71 e0       	ldi	r23, 0x01	; 1
    180a:	80 ef       	ldi	r24, 0xF0	; 240
    180c:	93 e0       	ldi	r25, 0x03	; 3
    180e:	0e 94 49 08 	call	0x1092	; 0x1092 <String::String(char const*)>
    1812:	65 e7       	ldi	r22, 0x75	; 117
    1814:	71 e0       	ldi	r23, 0x01	; 1
    1816:	86 ef       	ldi	r24, 0xF6	; 246
    1818:	93 e0       	ldi	r25, 0x03	; 3
    181a:	0e 94 49 08 	call	0x1092	; 0x1092 <String::String(char const*)>
    181e:	6a e7       	ldi	r22, 0x7A	; 122
    1820:	71 e0       	ldi	r23, 0x01	; 1
    1822:	8c ef       	ldi	r24, 0xFC	; 252
    1824:	93 e0       	ldi	r25, 0x03	; 3
    1826:	0e 94 49 08 	call	0x1092	; 0x1092 <String::String(char const*)>
    182a:	6f e7       	ldi	r22, 0x7F	; 127
    182c:	71 e0       	ldi	r23, 0x01	; 1
    182e:	82 e0       	ldi	r24, 0x02	; 2
    1830:	94 e0       	ldi	r25, 0x04	; 4
    1832:	0e 94 49 08 	call	0x1092	; 0x1092 <String::String(char const*)>
    1836:	64 e8       	ldi	r22, 0x84	; 132
    1838:	71 e0       	ldi	r23, 0x01	; 1
    183a:	88 e0       	ldi	r24, 0x08	; 8
    183c:	94 e0       	ldi	r25, 0x04	; 4
    183e:	0e 94 49 08 	call	0x1092	; 0x1092 <String::String(char const*)>
    1842:	69 e8       	ldi	r22, 0x89	; 137
    1844:	71 e0       	ldi	r23, 0x01	; 1
    1846:	8e e0       	ldi	r24, 0x0E	; 14
    1848:	94 e0       	ldi	r25, 0x04	; 4
    184a:	0e 94 49 08 	call	0x1092	; 0x1092 <String::String(char const*)>
    184e:	6e e8       	ldi	r22, 0x8E	; 142
    1850:	71 e0       	ldi	r23, 0x01	; 1
    1852:	84 e1       	ldi	r24, 0x14	; 20
    1854:	94 e0       	ldi	r25, 0x04	; 4
    1856:	0e 94 49 08 	call	0x1092	; 0x1092 <String::String(char const*)>
    185a:	63 e9       	ldi	r22, 0x93	; 147
    185c:	71 e0       	ldi	r23, 0x01	; 1
    185e:	8a e1       	ldi	r24, 0x1A	; 26
    1860:	94 e0       	ldi	r25, 0x04	; 4
    1862:	0e 94 49 08 	call	0x1092	; 0x1092 <String::String(char const*)>
    1866:	68 e9       	ldi	r22, 0x98	; 152
    1868:	71 e0       	ldi	r23, 0x01	; 1
    186a:	80 e2       	ldi	r24, 0x20	; 32
    186c:	94 e0       	ldi	r25, 0x04	; 4
    186e:	0e 94 49 08 	call	0x1092	; 0x1092 <String::String(char const*)>
    1872:	6d e9       	ldi	r22, 0x9D	; 157
    1874:	71 e0       	ldi	r23, 0x01	; 1
    1876:	86 e2       	ldi	r24, 0x26	; 38
    1878:	94 e0       	ldi	r25, 0x04	; 4
    187a:	0e 94 49 08 	call	0x1092	; 0x1092 <String::String(char const*)>
    187e:	62 ea       	ldi	r22, 0xA2	; 162
    1880:	71 e0       	ldi	r23, 0x01	; 1
    1882:	8c e2       	ldi	r24, 0x2C	; 44
    1884:	94 e0       	ldi	r25, 0x04	; 4
    1886:	0e 94 49 08 	call	0x1092	; 0x1092 <String::String(char const*)>
    188a:	67 ea       	ldi	r22, 0xA7	; 167
    188c:	71 e0       	ldi	r23, 0x01	; 1
    188e:	82 e3       	ldi	r24, 0x32	; 50
    1890:	94 e0       	ldi	r25, 0x04	; 4
    1892:	0e 94 49 08 	call	0x1092	; 0x1092 <String::String(char const*)>
    1896:	6c ea       	ldi	r22, 0xAC	; 172
    1898:	71 e0       	ldi	r23, 0x01	; 1
    189a:	88 e3       	ldi	r24, 0x38	; 56
    189c:	94 e0       	ldi	r25, 0x04	; 4
    189e:	0e 94 49 08 	call	0x1092	; 0x1092 <String::String(char const*)>
    18a2:	61 eb       	ldi	r22, 0xB1	; 177
    18a4:	71 e0       	ldi	r23, 0x01	; 1
    18a6:	8e e3       	ldi	r24, 0x3E	; 62
    18a8:	94 e0       	ldi	r25, 0x04	; 4
    18aa:	0e 94 49 08 	call	0x1092	; 0x1092 <String::String(char const*)>
    18ae:	66 eb       	ldi	r22, 0xB6	; 182
    18b0:	71 e0       	ldi	r23, 0x01	; 1
    18b2:	84 e4       	ldi	r24, 0x44	; 68
    18b4:	94 e0       	ldi	r25, 0x04	; 4
    18b6:	0e 94 49 08 	call	0x1092	; 0x1092 <String::String(char const*)>
    18ba:	6b eb       	ldi	r22, 0xBB	; 187
    18bc:	71 e0       	ldi	r23, 0x01	; 1
    18be:	8a e4       	ldi	r24, 0x4A	; 74
    18c0:	94 e0       	ldi	r25, 0x04	; 4
    18c2:	0e 94 49 08 	call	0x1092	; 0x1092 <String::String(char const*)>
    18c6:	60 ec       	ldi	r22, 0xC0	; 192
    18c8:	71 e0       	ldi	r23, 0x01	; 1
    18ca:	80 e5       	ldi	r24, 0x50	; 80
    18cc:	94 e0       	ldi	r25, 0x04	; 4
    18ce:	0e 94 49 08 	call	0x1092	; 0x1092 <String::String(char const*)>
    18d2:	65 ec       	ldi	r22, 0xC5	; 197
    18d4:	71 e0       	ldi	r23, 0x01	; 1
    18d6:	86 e5       	ldi	r24, 0x56	; 86
    18d8:	94 e0       	ldi	r25, 0x04	; 4
    18da:	0e 94 49 08 	call	0x1092	; 0x1092 <String::String(char const*)>
    18de:	6a ec       	ldi	r22, 0xCA	; 202
    18e0:	71 e0       	ldi	r23, 0x01	; 1
    18e2:	8c e5       	ldi	r24, 0x5C	; 92
    18e4:	94 e0       	ldi	r25, 0x04	; 4
    18e6:	0e 94 49 08 	call	0x1092	; 0x1092 <String::String(char const*)>
    18ea:	6f ec       	ldi	r22, 0xCF	; 207
    18ec:	71 e0       	ldi	r23, 0x01	; 1
    18ee:	82 e6       	ldi	r24, 0x62	; 98
    18f0:	94 e0       	ldi	r25, 0x04	; 4
    18f2:	0e 94 49 08 	call	0x1092	; 0x1092 <String::String(char const*)>
    18f6:	64 ed       	ldi	r22, 0xD4	; 212
    18f8:	71 e0       	ldi	r23, 0x01	; 1
    18fa:	88 e6       	ldi	r24, 0x68	; 104
    18fc:	94 e0       	ldi	r25, 0x04	; 4
    18fe:	0e 94 49 08 	call	0x1092	; 0x1092 <String::String(char const*)>
    1902:	69 ed       	ldi	r22, 0xD9	; 217
    1904:	71 e0       	ldi	r23, 0x01	; 1
    1906:	8e e6       	ldi	r24, 0x6E	; 110
    1908:	94 e0       	ldi	r25, 0x04	; 4
    190a:	0e 94 49 08 	call	0x1092	; 0x1092 <String::String(char const*)>
    190e:	6e ed       	ldi	r22, 0xDE	; 222
    1910:	71 e0       	ldi	r23, 0x01	; 1
    1912:	84 e7       	ldi	r24, 0x74	; 116
    1914:	94 e0       	ldi	r25, 0x04	; 4
    1916:	0e 94 49 08 	call	0x1092	; 0x1092 <String::String(char const*)>
    191a:	63 ee       	ldi	r22, 0xE3	; 227
    191c:	71 e0       	ldi	r23, 0x01	; 1
    191e:	8a e7       	ldi	r24, 0x7A	; 122
    1920:	94 e0       	ldi	r25, 0x04	; 4
    1922:	0e 94 49 08 	call	0x1092	; 0x1092 <String::String(char const*)>
    1926:	68 ee       	ldi	r22, 0xE8	; 232
    1928:	71 e0       	ldi	r23, 0x01	; 1
    192a:	80 e8       	ldi	r24, 0x80	; 128
    192c:	94 e0       	ldi	r25, 0x04	; 4
    192e:	0e 94 49 08 	call	0x1092	; 0x1092 <String::String(char const*)>
    1932:	6d ee       	ldi	r22, 0xED	; 237
    1934:	71 e0       	ldi	r23, 0x01	; 1
    1936:	86 e8       	ldi	r24, 0x86	; 134
    1938:	94 e0       	ldi	r25, 0x04	; 4
    193a:	0e 94 49 08 	call	0x1092	; 0x1092 <String::String(char const*)>
    193e:	62 ef       	ldi	r22, 0xF2	; 242
    1940:	71 e0       	ldi	r23, 0x01	; 1
    1942:	8c e8       	ldi	r24, 0x8C	; 140
    1944:	94 e0       	ldi	r25, 0x04	; 4
    1946:	0e 94 49 08 	call	0x1092	; 0x1092 <String::String(char const*)>
    194a:	67 ef       	ldi	r22, 0xF7	; 247
    194c:	71 e0       	ldi	r23, 0x01	; 1
    194e:	82 e9       	ldi	r24, 0x92	; 146
    1950:	94 e0       	ldi	r25, 0x04	; 4
    1952:	0e 94 49 08 	call	0x1092	; 0x1092 <String::String(char const*)>
    1956:	6c ef       	ldi	r22, 0xFC	; 252
    1958:	71 e0       	ldi	r23, 0x01	; 1
    195a:	88 e9       	ldi	r24, 0x98	; 152
    195c:	94 e0       	ldi	r25, 0x04	; 4
    195e:	0e 94 49 08 	call	0x1092	; 0x1092 <String::String(char const*)>
    1962:	61 e0       	ldi	r22, 0x01	; 1
    1964:	72 e0       	ldi	r23, 0x02	; 2
    1966:	8e e9       	ldi	r24, 0x9E	; 158
    1968:	94 e0       	ldi	r25, 0x04	; 4
    196a:	0e 94 49 08 	call	0x1092	; 0x1092 <String::String(char const*)>
    196e:	66 e0       	ldi	r22, 0x06	; 6
    1970:	72 e0       	ldi	r23, 0x02	; 2
    1972:	84 ea       	ldi	r24, 0xA4	; 164
    1974:	94 e0       	ldi	r25, 0x04	; 4
    1976:	0e 94 49 08 	call	0x1092	; 0x1092 <String::String(char const*)>
    197a:	6b e0       	ldi	r22, 0x0B	; 11
    197c:	72 e0       	ldi	r23, 0x02	; 2
    197e:	8a ea       	ldi	r24, 0xAA	; 170
    1980:	94 e0       	ldi	r25, 0x04	; 4
    1982:	0e 94 49 08 	call	0x1092	; 0x1092 <String::String(char const*)>
    1986:	60 e1       	ldi	r22, 0x10	; 16
    1988:	72 e0       	ldi	r23, 0x02	; 2
    198a:	80 eb       	ldi	r24, 0xB0	; 176
    198c:	94 e0       	ldi	r25, 0x04	; 4
    198e:	0e 94 49 08 	call	0x1092	; 0x1092 <String::String(char const*)>
    1992:	65 e1       	ldi	r22, 0x15	; 21
    1994:	72 e0       	ldi	r23, 0x02	; 2
    1996:	86 eb       	ldi	r24, 0xB6	; 182
    1998:	94 e0       	ldi	r25, 0x04	; 4
    199a:	0e 94 49 08 	call	0x1092	; 0x1092 <String::String(char const*)>
    199e:	6a e1       	ldi	r22, 0x1A	; 26
    19a0:	72 e0       	ldi	r23, 0x02	; 2
    19a2:	8c eb       	ldi	r24, 0xBC	; 188
    19a4:	94 e0       	ldi	r25, 0x04	; 4
    19a6:	0e 94 49 08 	call	0x1092	; 0x1092 <String::String(char const*)>
    19aa:	6f e1       	ldi	r22, 0x1F	; 31
    19ac:	72 e0       	ldi	r23, 0x02	; 2
    19ae:	82 ec       	ldi	r24, 0xC2	; 194
    19b0:	94 e0       	ldi	r25, 0x04	; 4
    19b2:	0e 94 49 08 	call	0x1092	; 0x1092 <String::String(char const*)>
    19b6:	ea eb       	ldi	r30, 0xBA	; 186
    19b8:	f3 e0       	ldi	r31, 0x03	; 3
    19ba:	13 82       	std	Z+3, r1	; 0x03
    19bc:	12 82       	std	Z+2, r1	; 0x02
    19be:	81 e4       	ldi	r24, 0x41	; 65
    19c0:	91 e0       	ldi	r25, 0x01	; 1
    19c2:	91 83       	std	Z+1, r25	; 0x01
    19c4:	80 83       	st	Z, r24
    19c6:	83 e0       	ldi	r24, 0x03	; 3
    19c8:	84 83       	std	Z+4, r24	; 0x04
    19ca:	8f ef       	ldi	r24, 0xFF	; 255
    19cc:	85 83       	std	Z+5, r24	; 0x05
    19ce:	8d e0       	ldi	r24, 0x0D	; 13
    19d0:	86 83       	std	Z+6, r24	; 0x06
    19d2:	14 e0       	ldi	r17, 0x04	; 4
    19d4:	17 83       	std	Z+7, r17	; 0x07
    19d6:	85 e0       	ldi	r24, 0x05	; 5
    19d8:	80 87       	std	Z+8, r24	; 0x08
    19da:	86 e0       	ldi	r24, 0x06	; 6
    19dc:	81 87       	std	Z+9, r24	; 0x09
    19de:	87 e0       	ldi	r24, 0x07	; 7
    19e0:	82 87       	std	Z+10, r24	; 0x0a
    19e2:	13 86       	std	Z+11, r1	; 0x0b
    19e4:	14 86       	std	Z+12, r1	; 0x0c
    19e6:	15 86       	std	Z+13, r1	; 0x0d
    19e8:	16 86       	std	Z+14, r1	; 0x0e
    19ea:	17 86       	std	Z+15, r1	; 0x0f
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	0e 94 38 04 	call	0x870	; 0x870 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.45]>
    19f2:	ca e8       	ldi	r28, 0x8A	; 138
    19f4:	d3 e0       	ldi	r29, 0x03	; 3
    19f6:	1a 8a       	std	Y+18, r1	; 0x12
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	8b 8b       	std	Y+19, r24	; 0x13
    19fc:	1c 8a       	std	Y+20, r1	; 0x14
    19fe:	80 e5       	ldi	r24, 0x50	; 80
    1a00:	93 ec       	ldi	r25, 0xC3	; 195
    1a02:	a0 e0       	ldi	r26, 0x00	; 0
    1a04:	b0 e0       	ldi	r27, 0x00	; 0
    1a06:	8d 8b       	std	Y+21, r24	; 0x15
    1a08:	9e 8b       	std	Y+22, r25	; 0x16
    1a0a:	af 8b       	std	Y+23, r26	; 0x17
    1a0c:	b8 8f       	std	Y+24, r27	; 0x18
    1a0e:	19 8e       	std	Y+25, r1	; 0x19
    1a10:	1b 8e       	std	Y+27, r1	; 0x1b
    1a12:	1a 8e       	std	Y+26, r1	; 0x1a
    1a14:	86 e0       	ldi	r24, 0x06	; 6
    1a16:	eb e0       	ldi	r30, 0x0B	; 11
    1a18:	f1 e0       	ldi	r31, 0x01	; 1
    1a1a:	a6 ea       	ldi	r26, 0xA6	; 166
    1a1c:	b3 e0       	ldi	r27, 0x03	; 3
    1a1e:	01 90       	ld	r0, Z+
    1a20:	0d 92       	st	X+, r0
    1a22:	8a 95       	dec	r24
    1a24:	e1 f7       	brne	.-8      	; 0x1a1e <global constructors keyed to 65535_0_SI4844_02_LCD16x2_SLIDE_SWITCH.ino.cpp.o.2650+0x2e0>
    1a26:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <__malloc_margin+0x8>
    1a2a:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <__malloc_margin+0x9>
    1a2e:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <__malloc_margin+0xa>
    1a32:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <__malloc_margin+0xb>
    1a36:	8a a3       	std	Y+34, r24	; 0x22
    1a38:	9b a3       	std	Y+35, r25	; 0x23
    1a3a:	ac a3       	std	Y+36, r26	; 0x24
    1a3c:	bd a3       	std	Y+37, r27	; 0x25
    1a3e:	8e e1       	ldi	r24, 0x1E	; 30
    1a40:	8e a7       	std	Y+46, r24	; 0x2e
    1a42:	1f a7       	std	Y+47, r17	; 0x2f
    1a44:	df 91       	pop	r29
    1a46:	cf 91       	pop	r28
    1a48:	1f 91       	pop	r17
    1a4a:	08 95       	ret

00001a4c <main>:
init():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    1a4c:	78 94       	sei
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    1a4e:	84 b5       	in	r24, 0x24	; 36
    1a50:	83 60       	ori	r24, 0x03	; 3
    1a52:	84 bd       	out	0x24, r24	; 36
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    1a54:	85 b5       	in	r24, 0x25	; 37
    1a56:	83 60       	ori	r24, 0x03	; 3
    1a58:	85 bd       	out	0x25, r24	; 37
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    1a5a:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
    1a5e:	81 60       	ori	r24, 0x01	; 1
    1a60:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    1a64:	82 e0       	ldi	r24, 0x02	; 2
    1a66:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    1a6a:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    1a6e:	81 60       	ori	r24, 0x01	; 1
    1a70:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    1a74:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1a78:	81 60       	ori	r24, 0x01	; 1
    1a7a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    1a7e:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
    1a82:	84 60       	ori	r24, 0x04	; 4
    1a84:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    1a88:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1a8c:	81 60       	ori	r24, 0x01	; 1
    1a8e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
    1a92:	87 e8       	ldi	r24, 0x87	; 135
    1a94:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    1a98:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
setup():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:98

SI4844 rx;

void setup() {

  pinMode(TUNE_LED, OUTPUT);
    1a9c:	61 e0       	ldi	r22, 0x01	; 1
    1a9e:	8a e0       	ldi	r24, 0x0A	; 10
    1aa0:	0e 94 b1 02 	call	0x562	; 0x562 <pinMode>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:100

  display.begin(16, 2);
    1aa4:	82 e0       	ldi	r24, 0x02	; 2
    1aa6:	0e 94 38 04 	call	0x870	; 0x870 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.45]>
setupSlideSwitch():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:192
 * @param hightClockSpeed hight I2C clock speed to be used by the system (optional - default 50000 - 50kHz).
 */
void SI4844::setupSlideSwitch(uint16_t resetPin, int interruptPin, uint32_t hightClockSpeed )
{
    // UNDER CONSTRUCTION
    this->resetPin = resetPin;
    1aaa:	8c e0       	ldi	r24, 0x0C	; 12
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	90 93 99 03 	sts	0x0399, r25	; 0x800399 <rx+0xf>
    1ab2:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <rx+0xe>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:193
    this->interruptPin = interruptPin;
    1ab6:	82 e0       	ldi	r24, 0x02	; 2
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	90 93 9b 03 	sts	0x039B, r25	; 0x80039b <rx+0x11>
    1abe:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <rx+0x10>
_ZN6SI484413setClockSpeedEj():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.h:315
  /**
   * @ingroup BF
   * @brief Sets hight clock speed to be used on I2C bus
   * @param clock (10000 = 10kHz; 50000 = 50kHz; 100000 = 100kHz ... )
   */
  inline void setClockSpeed(uint16_t clock) { this->clockSpeed = clock; }; 
    1ac2:	80 e5       	ldi	r24, 0x50	; 80
    1ac4:	93 ec       	ldi	r25, 0xC3	; 195
    1ac6:	a0 e0       	ldi	r26, 0x00	; 0
    1ac8:	b0 e0       	ldi	r27, 0x00	; 0
    1aca:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <rx+0x15>
    1ace:	90 93 a0 03 	sts	0x03A0, r25	; 0x8003a0 <rx+0x16>
    1ad2:	a0 93 a1 03 	sts	0x03A1, r26	; 0x8003a1 <rx+0x17>
    1ad6:	b0 93 a2 03 	sts	0x03A2, r27	; 0x8003a2 <rx+0x18>
setupSlideSwitch():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:200
    setClockSpeed(hightClockSpeed);

    // Arduino interrupt setup.
    // if interruptPin parameter is < 0, it means the interrupt is being controlled by the user of this library
    if (interruptPin != -1 ) {
        pinMode(interruptPin, INPUT);
    1ada:	60 e0       	ldi	r22, 0x00	; 0
    1adc:	82 e0       	ldi	r24, 0x02	; 2
    1ade:	0e 94 b1 02 	call	0x562	; 0x562 <pinMode>
attachInterrupt():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WInterrupts.c:66

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode)
{
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS)
  {
    intFunc[interruptNum] = userFunc;
    1ae2:	83 e6       	ldi	r24, 0x63	; 99
    1ae4:	93 e0       	ldi	r25, 0x03	; 3
    1ae6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    1aea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WInterrupts.c:231
      #elif defined(__AVR_ATmega48__) || defined(__AVR_ATmega48P__)  || defined(__AVR_ATmega48PB__)  \
      || defined(__AVR_ATmega88__)    || defined(__AVR_ATmega88P__)  || defined(__AVR_ATmega88PB__)  \
      || defined(__AVR_ATmega168__)   || defined(__AVR_ATmega168P__) || defined(__AVR_ATmega168PB__) \
      || defined(__AVR_ATmega328__)   || defined(__AVR_ATmega328P__) || defined(__AVR_ATmega328PB__)
        case 0:
          EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
    1aee:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    1af2:	83 60       	ori	r24, 0x03	; 3
    1af4:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WInterrupts.c:232
          EIMSK |= (1 << INT0);
    1af8:	e8 9a       	sbi	0x1d, 0	; 29
setupSlideSwitch():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:204
        attachInterrupt(digitalPinToInterrupt(interruptPin), interrupt_hundler, RISING);
    }

    pinMode(resetPin, OUTPUT);
    1afa:	61 e0       	ldi	r22, 0x01	; 1
    1afc:	8c e0       	ldi	r24, 0x0C	; 12
    1afe:	0e 94 b1 02 	call	0x562	; 0x562 <pinMode>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:205
    digitalWrite(resetPin, HIGH);
    1b02:	61 e0       	ldi	r22, 0x01	; 1
    1b04:	8c e0       	ldi	r24, 0x0C	; 12
    1b06:	0e 94 65 02 	call	0x4ca	; 0x4ca <digitalWrite>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:206
    delay(1);    
    1b0a:	61 e0       	ldi	r22, 0x01	; 1
    1b0c:	70 e0       	ldi	r23, 0x00	; 0
    1b0e:	80 e0       	ldi	r24, 0x00	; 0
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	0e 94 31 03 	call	0x662	; 0x662 <delay>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:207
    data_from_device = false;    
    1b16:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <_ZL16data_from_device.lto_priv.54>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:212
    
    // Step 1: Reset and Prepare the Device
    //      1. The system controller resets the ATDD device and releases the  RSTb  pin.
    //      2. The system controller waits until the first  IRQ  is received, indicating that the ATDD device is ready to receive commands.   
    this->reset(); // Step 1 - Reset and Prepare the Device
    1b1a:	0e 94 ed 02 	call	0x5da	; 0x5da <SI4844::reset() [clone .constprop.12]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:216

    // Step 2: Obtain Device Status
    //      3. The system controller sends the  ATDD_GET_STATUS  command to retrieve the ATDD device status.    
    this->getStatus();
    1b1e:	0e 94 b4 05 	call	0xb68	; 0xb68 <SI4844::getStatus() [clone .constprop.10]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:217
    if ( device_status.refined.BCFG0 != 0) {
    1b22:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <rx>
    1b26:	80 ff       	sbrs	r24, 0
    1b28:	03 c0       	rjmp	.+6      	; 0x1b30 <main+0xe4>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:218
        system_error = 51;  // The hardware is configured to "MCU detects the band" and you are trying "ATDD device detects the band"
    1b2a:	83 e3       	ldi	r24, 0x33	; 51
    1b2c:	80 93 a3 03 	sts	0x03A3, r24	; 0x8003a3 <rx+0x19>
powerUp():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:408
 * @details Moves the SI4844 device from power down to power up 
 * @see Si48XX ATDD PROGRAMMING GUIDE; AN610; page 45
 */
void SI4844::powerUp(void)
{
    data_from_device = false;    
    1b30:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <_ZL16data_from_device.lto_priv.54>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:410

    this->currentBand = 0;
    1b34:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <rx+0x12>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:414

    si4844_arg_band_index rxBandSetup; 

    rxBandSetup.refined.XOSCEN = this->xoscen;
    1b38:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <rx+0x13>
    1b3c:	c0 e0       	ldi	r28, 0x00	; 0
    1b3e:	80 fb       	bst	r24, 0
    1b40:	c7 f9       	bld	r28, 7
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:415
    rxBandSetup.refined.XOWAIT = this->xowait;
    1b42:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <rx+0x14>
    1b46:	80 fb       	bst	r24, 0
    1b48:	c6 f9       	bld	r28, 6
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:416
    rxBandSetup.refined.BANDIDX = this->currentBand;
    1b4a:	c0 7c       	andi	r28, 0xC0	; 192
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:418

    waitToSend();
    1b4c:	0e 94 a8 06 	call	0xd50	; 0xd50 <SI4844::waitToSend() [clone .constprop.19]>
beginTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:196
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <TwoWire::transmitting>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:198
  // set address of targeted slave
  txAddress = address;
    1b56:	81 e1       	ldi	r24, 0x11	; 17
    1b58:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <TwoWire::txAddress>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:200
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    1b5c:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <TwoWire::txBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:201
  txBufferLength = 0;
    1b60:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <TwoWire::txBufferLength>
powerUp():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:421

    Wire.beginTransmission(SI4844_ADDRESS);
    Wire.write(ATDD_POWER_UP);
    1b64:	81 ee       	ldi	r24, 0xE1	; 225
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	0e 94 ac 05 	call	0xb58	; 0xb58 <TwoWire::write(int) [clone .constprop.29]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:422
    Wire.write(rxBandSetup.raw);
    1b6c:	6c 2f       	mov	r22, r28
    1b6e:	8a e7       	ldi	r24, 0x7A	; 122
    1b70:	93 e0       	ldi	r25, 0x03	; 3
    1b72:	0e 94 7d 05 	call	0xafa	; 0xafa <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:423
    Wire.endTransmission();
    1b76:	0e 94 2d 01 	call	0x25a	; 0x25a <TwoWire::endTransmission() [clone .constprop.30]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:425

    delayMicroseconds(2500);
    1b7a:	84 ec       	ldi	r24, 0xC4	; 196
    1b7c:	99 e0       	ldi	r25, 0x09	; 9
    1b7e:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <delayMicroseconds>
_ZN6SI484413waitInterruptEv.isra.2():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:166
 * @details It can occur, for example, when you use the analog tuner.  
 */
void SI4844::waitInterrupt(void)
{
    
    while (!data_from_device)
    1b82:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <_ZL16data_from_device.lto_priv.54>
    1b86:	88 23       	and	r24, r24
    1b88:	e1 f3       	breq	.-8      	; 0x1b82 <main+0x136>
setupSlideSwitch():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:230
    this->powerUp();

    // Step 5 and Step 6: Retrieve Updated Status and  real Frequency Detection
    // 6. The system controller sends the  ATDD_GET_STATUS  command to obtain the latest status.
    do { 
        delay(1);
    1b8a:	61 e0       	ldi	r22, 0x01	; 1
    1b8c:	70 e0       	ldi	r23, 0x00	; 0
    1b8e:	80 e0       	ldi	r24, 0x00	; 0
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	0e 94 31 03 	call	0x662	; 0x662 <delay>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:231
        this->getStatus();
    1b96:	0e 94 b4 05 	call	0xb68	; 0xb68 <SI4844::getStatus() [clone .constprop.10]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:232
    } while (device_status.refined.INFORDY == 0);   
    1b9a:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <rx>
    1b9e:	84 ff       	sbrs	r24, 4
    1ba0:	f4 cf       	rjmp	.-24     	; 0x1b8a <main+0x13e>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:236


    // Step 6: Set to the real band selected by the user via Slide Switch; Frequency Detection; etc
    this->setBandSlideSwitch();
    1ba2:	0e 94 0b 07 	call	0xe16	; 0xe16 <SI4844::setBandSlideSwitch() [clone .constprop.11]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:238

    this->setVolume(this->volume);
    1ba6:	80 91 b8 03 	lds	r24, 0x03B8	; 0x8003b8 <rx+0x2e>
setVolume():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:823
 * @see Table 4, Si48XX ATDD PROGRAMMING GUIDE; AN610; page 11
 * @param byte volumeLevel (domain: 0 to 63) 
 */
void SI4844::setVolume(byte volumeLavel)
{
    if (volumeLavel > 63)
    1baa:	80 34       	cpi	r24, 0x40	; 64
    1bac:	10 f4       	brcc	.+4      	; 0x1bb2 <main+0x166>
    1bae:	0e 94 d5 06 	call	0xdaa	; 0xdaa <SI4844::setVolume(unsigned char) [clone .part.5] [clone .constprop.17]>
    1bb2:	8a e3       	ldi	r24, 0x3A	; 58
    1bb4:	0e 94 d5 06 	call	0xdaa	; 0xdaa <SI4844::setVolume(unsigned char) [clone .part.5] [clone .constprop.17]>
setup():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:108
  // rx.setCrystalOscillatorStabilizationWaitTime(1);
  rx.setupSlideSwitch(RESET_PIN, INTERRUPT_PIN);

  // You must calibrate the default volume
  rx.setVolume(58);
  delay(100);
    1bb8:	64 e6       	ldi	r22, 0x64	; 100
    1bba:	70 e0       	ldi	r23, 0x00	; 0
    1bbc:	80 e0       	ldi	r24, 0x00	; 0
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	0e 94 31 03 	call	0x662	; 0x662 <delay>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:110
    
  showStatus();
    1bc4:	0e 94 85 08 	call	0x110a	; 0x110a <showStatus()>
serialEventRun():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1bc8:	c0 e0       	ldi	r28, 0x00	; 0
    1bca:	d0 e0       	ldi	r29, 0x00	; 0
loop():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:176
void loop() {

  if (rx.hasStatusChanged()) {
    if (rx.hasBandChanged()) {
      oldFrequency = 0;
      oldStationIndicator = 99;
    1bcc:	13 e6       	ldi	r17, 0x63	; 99
hasStatusChanged():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1193
 *
 *  @return true or false  
 */
bool SI4844::hasStatusChanged(void)
{
    return data_from_device;
    1bce:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <_ZL16data_from_device.lto_priv.54>
loop():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:173
/**
 * Main loop
 */
void loop() {

  if (rx.hasStatusChanged()) {
    1bd2:	88 23       	and	r24, r24
    1bd4:	c9 f0       	breq	.+50     	; 0x1c08 <main+0x1bc>
hasBandChanged():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1204
 * @details When the Slide Switch is moved by the user, the system have to process it
 *
 *  @return True if the user moved the Slide Switch
 */
bool SI4844::hasBandChanged(void) {
    this->getAllReceiverInfo();
    1bd6:	0e 94 da 05 	call	0xbb4	; 0xbb4 <SI4844::getAllReceiverInfo() [clone .constprop.25]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1205
    return ( all_receiver_status.refined.BANDIDX != this->currentBand);
    1bda:	20 91 8c 03 	lds	r18, 0x038C	; 0x80038c <rx+0x2>
    1bde:	2f 73       	andi	r18, 0x3F	; 63
    1be0:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <rx+0x12>
    1be4:	90 e0       	ldi	r25, 0x00	; 0
loop():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:174
    if (rx.hasBandChanged()) {
    1be6:	28 17       	cp	r18, r24
    1be8:	19 06       	cpc	r1, r25
    1bea:	61 f0       	breq	.+24     	; 0x1c04 <main+0x1b8>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:175
      oldFrequency = 0;
    1bec:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <oldFrequency>
    1bf0:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <oldFrequency+0x1>
    1bf4:	10 92 86 02 	sts	0x0286, r1	; 0x800286 <oldFrequency+0x2>
    1bf8:	10 92 87 02 	sts	0x0287, r1	; 0x800287 <oldFrequency+0x3>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:176
      oldStationIndicator = 99;
    1bfc:	10 93 04 01 	sts	0x0104, r17	; 0x800104 <oldStationIndicator>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:177
      rx.setBandSlideSwitch();
    1c00:	0e 94 0b 07 	call	0xe16	; 0xe16 <SI4844::setBandSlideSwitch() [clone .constprop.11]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:180
    }

    showStatus();  
    1c04:	0e 94 85 08 	call	0x110a	; 0x110a <showStatus()>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:183
  }

  delay(50);
    1c08:	62 e3       	ldi	r22, 0x32	; 50
    1c0a:	70 e0       	ldi	r23, 0x00	; 0
    1c0c:	80 e0       	ldi	r24, 0x00	; 0
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	0e 94 31 03 	call	0x662	; 0x662 <delay>
serialEventRun():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:67
    1c14:	20 97       	sbiw	r28, 0x00	; 0
    1c16:	d9 f2       	breq	.-74     	; 0x1bce <main+0x182>
    1c18:	0e 94 51 02 	call	0x4a2	; 0x4a2 <Serial0_available()>
    1c1c:	88 23       	and	r24, r24
    1c1e:	b9 f2       	breq	.-82     	; 0x1bce <main+0x182>
    1c20:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1c24:	d4 cf       	rjmp	.-88     	; 0x1bce <main+0x182>

00001c26 <_GLOBAL__sub_D_elapsedButton>:
_GLOBAL__sub_D_elapsedButton():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:184
}
    1c26:	cf 93       	push	r28
    1c28:	df 93       	push	r29
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:83

/*
   Pre-defined Band Table - See the SI48XX ATDD - PROGRAMMING GUIDE page 17.
*/

String tabBand[] = { "FM01", "FM02", "FM03", "FM04", "FM05", "FM06", "FM07", "FM08", "FM09", "FM10", "FM11", "FM12", "FM13", "FM14", "FM15", "FM16", "FM17", "FM18", "FM19", "FM20",
    1c2a:	c8 ec       	ldi	r28, 0xC8	; 200
    1c2c:	d4 e0       	ldi	r29, 0x04	; 4
__static_initialization_and_destruction_0():
    1c2e:	26 97       	sbiw	r28, 0x06	; 6
    1c30:	ce 01       	movw	r24, r28
    1c32:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <String::~String()>
    1c36:	83 e0       	ldi	r24, 0x03	; 3
    1c38:	c2 3d       	cpi	r28, 0xD2	; 210
    1c3a:	d8 07       	cpc	r29, r24
    1c3c:	c1 f7       	brne	.-16     	; 0x1c2e <_GLOBAL__sub_D_elapsedButton+0x8>
_GLOBAL__sub_D_elapsedButton():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:184

    showStatus();  
  }

  delay(50);
}
    1c3e:	df 91       	pop	r29
    1c40:	cf 91       	pop	r28
    1c42:	08 95       	ret

00001c44 <__muluhisi3>:
__muluhisi3():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    1c44:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <__umulhisi3>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    1c48:	a5 9f       	mul	r26, r21
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    1c4a:	90 0d       	add	r25, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    1c4c:	b4 9f       	mul	r27, r20
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    1c4e:	90 0d       	add	r25, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    1c50:	a4 9f       	mul	r26, r20
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    1c52:	80 0d       	add	r24, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    1c54:	91 1d       	adc	r25, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    1c56:	11 24       	eor	r1, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    1c58:	08 95       	ret

00001c5a <__prologue_saves__>:
__prologue_saves__():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2169
    1c5a:	2f 92       	push	r2
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2170
    1c5c:	3f 92       	push	r3
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2171
    1c5e:	4f 92       	push	r4
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2172
    1c60:	5f 92       	push	r5
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2173
    1c62:	6f 92       	push	r6
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2174
    1c64:	7f 92       	push	r7
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2175
    1c66:	8f 92       	push	r8
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2176
    1c68:	9f 92       	push	r9
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2177
    1c6a:	af 92       	push	r10
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2178
    1c6c:	bf 92       	push	r11
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2179
    1c6e:	cf 92       	push	r12
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2180
    1c70:	df 92       	push	r13
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2181
    1c72:	ef 92       	push	r14
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2182
    1c74:	ff 92       	push	r15
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2183
    1c76:	0f 93       	push	r16
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2184
    1c78:	1f 93       	push	r17
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2185
    1c7a:	cf 93       	push	r28
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2186
    1c7c:	df 93       	push	r29
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2200
    1c7e:	cd b7       	in	r28, 0x3d	; 61
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2201
    1c80:	de b7       	in	r29, 0x3e	; 62
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2202
    1c82:	ca 1b       	sub	r28, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2203
    1c84:	db 0b       	sbc	r29, r27
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2204
    1c86:	0f b6       	in	r0, 0x3f	; 63
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2205
    1c88:	f8 94       	cli
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2206
    1c8a:	de bf       	out	0x3e, r29	; 62
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2207
    1c8c:	0f be       	out	0x3f, r0	; 63
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2208
    1c8e:	cd bf       	out	0x3d, r28	; 61
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2211
    1c90:	09 94       	ijmp

00001c92 <__epilogue_restores__>:
__epilogue_restores__():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2222
    1c92:	2a 88       	ldd	r2, Y+18	; 0x12
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2223
    1c94:	39 88       	ldd	r3, Y+17	; 0x11
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2224
    1c96:	48 88       	ldd	r4, Y+16	; 0x10
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2225
    1c98:	5f 84       	ldd	r5, Y+15	; 0x0f
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2226
    1c9a:	6e 84       	ldd	r6, Y+14	; 0x0e
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2227
    1c9c:	7d 84       	ldd	r7, Y+13	; 0x0d
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2228
    1c9e:	8c 84       	ldd	r8, Y+12	; 0x0c
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2229
    1ca0:	9b 84       	ldd	r9, Y+11	; 0x0b
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2230
    1ca2:	aa 84       	ldd	r10, Y+10	; 0x0a
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2231
    1ca4:	b9 84       	ldd	r11, Y+9	; 0x09
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2232
    1ca6:	c8 84       	ldd	r12, Y+8	; 0x08
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2233
    1ca8:	df 80       	ldd	r13, Y+7	; 0x07
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2234
    1caa:	ee 80       	ldd	r14, Y+6	; 0x06
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2235
    1cac:	fd 80       	ldd	r15, Y+5	; 0x05
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2236
    1cae:	0c 81       	ldd	r16, Y+4	; 0x04
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2237
    1cb0:	1b 81       	ldd	r17, Y+3	; 0x03
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2238
    1cb2:	aa 81       	ldd	r26, Y+2	; 0x02
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2252
    1cb4:	b9 81       	ldd	r27, Y+1	; 0x01
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2253
    1cb6:	ce 0f       	add	r28, r30
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2254
    1cb8:	d1 1d       	adc	r29, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2255
    1cba:	0f b6       	in	r0, 0x3f	; 63
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2256
    1cbc:	f8 94       	cli
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2257
    1cbe:	de bf       	out	0x3e, r29	; 62
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2258
    1cc0:	0f be       	out	0x3f, r0	; 63
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2259
    1cc2:	cd bf       	out	0x3d, r28	; 61
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2260
    1cc4:	ed 01       	movw	r28, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2263
    1cc6:	08 95       	ret

00001cc8 <__umulhisi3>:
__umulhisi3():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    1cc8:	a2 9f       	mul	r26, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    1cca:	b0 01       	movw	r22, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    1ccc:	b3 9f       	mul	r27, r19
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    1cce:	c0 01       	movw	r24, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    1cd0:	a3 9f       	mul	r26, r19
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    1cd2:	70 0d       	add	r23, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    1cd4:	81 1d       	adc	r24, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    1cd6:	11 24       	eor	r1, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    1cd8:	91 1d       	adc	r25, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    1cda:	b2 9f       	mul	r27, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    1cdc:	70 0d       	add	r23, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    1cde:	81 1d       	adc	r24, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    1ce0:	11 24       	eor	r1, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    1ce2:	91 1d       	adc	r25, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    1ce4:	08 95       	ret

00001ce6 <__udivmodsi4>:
__udivmodsi4():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    1ce6:	a1 e2       	ldi	r26, 0x21	; 33
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    1ce8:	1a 2e       	mov	r1, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    1cea:	aa 1b       	sub	r26, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    1cec:	bb 1b       	sub	r27, r27
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    1cee:	fd 01       	movw	r30, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    1cf0:	0d c0       	rjmp	.+26     	; 0x1d0c <__udivmodsi4_ep>

00001cf2 <__udivmodsi4_loop>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    1cf2:	aa 1f       	adc	r26, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    1cf4:	bb 1f       	adc	r27, r27
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    1cf6:	ee 1f       	adc	r30, r30
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    1cf8:	ff 1f       	adc	r31, r31
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    1cfa:	a2 17       	cp	r26, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    1cfc:	b3 07       	cpc	r27, r19
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    1cfe:	e4 07       	cpc	r30, r20
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    1d00:	f5 07       	cpc	r31, r21
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    1d02:	20 f0       	brcs	.+8      	; 0x1d0c <__udivmodsi4_ep>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    1d04:	a2 1b       	sub	r26, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    1d06:	b3 0b       	sbc	r27, r19
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    1d08:	e4 0b       	sbc	r30, r20
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    1d0a:	f5 0b       	sbc	r31, r21

00001d0c <__udivmodsi4_ep>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    1d0c:	66 1f       	adc	r22, r22
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    1d0e:	77 1f       	adc	r23, r23
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    1d10:	88 1f       	adc	r24, r24
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    1d12:	99 1f       	adc	r25, r25
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    1d14:	1a 94       	dec	r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    1d16:	69 f7       	brne	.-38     	; 0x1cf2 <__udivmodsi4_loop>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    1d18:	60 95       	com	r22
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    1d1a:	70 95       	com	r23
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    1d1c:	80 95       	com	r24
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    1d1e:	90 95       	com	r25
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    1d20:	9b 01       	movw	r18, r22
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    1d22:	ac 01       	movw	r20, r24
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    1d24:	bd 01       	movw	r22, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    1d26:	cf 01       	movw	r24, r30
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    1d28:	08 95       	ret

00001d2a <__mulshisi3>:
__mulshisi3():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:603
    1d2a:	b7 ff       	sbrs	r27, 7
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:605
    1d2c:	0c 94 22 0e 	jmp	0x1c44	; 0x1c44 <__muluhisi3>

00001d30 <__mulohisi3>:
__mulohisi3():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:613
    1d30:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <__muluhisi3>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:615
    1d34:	82 1b       	sub	r24, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:616
    1d36:	93 0b       	sbc	r25, r19
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:617
    1d38:	08 95       	ret

00001d3a <__tablejump2__>:
__tablejump2__():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    1d3a:	ee 0f       	add	r30, r30
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    1d3c:	ff 1f       	adc	r31, r31
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    1d3e:	05 90       	lpm	r0, Z+
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    1d40:	f4 91       	lpm	r31, Z
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    1d42:	e0 2d       	mov	r30, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    1d44:	09 94       	ijmp

00001d46 <malloc>:
malloc():
    1d46:	0f 93       	push	r16
    1d48:	1f 93       	push	r17
    1d4a:	cf 93       	push	r28
    1d4c:	df 93       	push	r29
    1d4e:	82 30       	cpi	r24, 0x02	; 2
    1d50:	91 05       	cpc	r25, r1
    1d52:	10 f4       	brcc	.+4      	; 0x1d58 <malloc+0x12>
    1d54:	82 e0       	ldi	r24, 0x02	; 2
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	e0 91 ca 04 	lds	r30, 0x04CA	; 0x8004ca <__flp>
    1d5c:	f0 91 cb 04 	lds	r31, 0x04CB	; 0x8004cb <__flp+0x1>
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	20 e0       	ldi	r18, 0x00	; 0
    1d64:	b0 e0       	ldi	r27, 0x00	; 0
    1d66:	a0 e0       	ldi	r26, 0x00	; 0
    1d68:	30 97       	sbiw	r30, 0x00	; 0
    1d6a:	99 f4       	brne	.+38     	; 0x1d92 <malloc+0x4c>
    1d6c:	21 15       	cp	r18, r1
    1d6e:	31 05       	cpc	r19, r1
    1d70:	09 f4       	brne	.+2      	; 0x1d74 <malloc+0x2e>
    1d72:	4a c0       	rjmp	.+148    	; 0x1e08 <malloc+0xc2>
    1d74:	28 1b       	sub	r18, r24
    1d76:	39 0b       	sbc	r19, r25
    1d78:	24 30       	cpi	r18, 0x04	; 4
    1d7a:	31 05       	cpc	r19, r1
    1d7c:	d8 f5       	brcc	.+118    	; 0x1df4 <malloc+0xae>
    1d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d80:	9b 81       	ldd	r25, Y+3	; 0x03
    1d82:	61 15       	cp	r22, r1
    1d84:	71 05       	cpc	r23, r1
    1d86:	89 f1       	breq	.+98     	; 0x1dea <malloc+0xa4>
    1d88:	fb 01       	movw	r30, r22
    1d8a:	93 83       	std	Z+3, r25	; 0x03
    1d8c:	82 83       	std	Z+2, r24	; 0x02
    1d8e:	fe 01       	movw	r30, r28
    1d90:	11 c0       	rjmp	.+34     	; 0x1db4 <malloc+0x6e>
    1d92:	40 81       	ld	r20, Z
    1d94:	51 81       	ldd	r21, Z+1	; 0x01
    1d96:	02 81       	ldd	r16, Z+2	; 0x02
    1d98:	13 81       	ldd	r17, Z+3	; 0x03
    1d9a:	48 17       	cp	r20, r24
    1d9c:	59 07       	cpc	r21, r25
    1d9e:	e0 f0       	brcs	.+56     	; 0x1dd8 <malloc+0x92>
    1da0:	48 17       	cp	r20, r24
    1da2:	59 07       	cpc	r21, r25
    1da4:	99 f4       	brne	.+38     	; 0x1dcc <malloc+0x86>
    1da6:	10 97       	sbiw	r26, 0x00	; 0
    1da8:	61 f0       	breq	.+24     	; 0x1dc2 <malloc+0x7c>
    1daa:	12 96       	adiw	r26, 0x02	; 2
    1dac:	0c 93       	st	X, r16
    1dae:	12 97       	sbiw	r26, 0x02	; 2
    1db0:	13 96       	adiw	r26, 0x03	; 3
    1db2:	1c 93       	st	X, r17
    1db4:	32 96       	adiw	r30, 0x02	; 2
    1db6:	cf 01       	movw	r24, r30
    1db8:	df 91       	pop	r29
    1dba:	cf 91       	pop	r28
    1dbc:	1f 91       	pop	r17
    1dbe:	0f 91       	pop	r16
    1dc0:	08 95       	ret
    1dc2:	00 93 ca 04 	sts	0x04CA, r16	; 0x8004ca <__flp>
    1dc6:	10 93 cb 04 	sts	0x04CB, r17	; 0x8004cb <__flp+0x1>
    1dca:	f4 cf       	rjmp	.-24     	; 0x1db4 <malloc+0x6e>
    1dcc:	21 15       	cp	r18, r1
    1dce:	31 05       	cpc	r19, r1
    1dd0:	51 f0       	breq	.+20     	; 0x1de6 <malloc+0xa0>
    1dd2:	42 17       	cp	r20, r18
    1dd4:	53 07       	cpc	r21, r19
    1dd6:	38 f0       	brcs	.+14     	; 0x1de6 <malloc+0xa0>
    1dd8:	a9 01       	movw	r20, r18
    1dda:	db 01       	movw	r26, r22
    1ddc:	9a 01       	movw	r18, r20
    1dde:	bd 01       	movw	r22, r26
    1de0:	df 01       	movw	r26, r30
    1de2:	f8 01       	movw	r30, r16
    1de4:	c1 cf       	rjmp	.-126    	; 0x1d68 <malloc+0x22>
    1de6:	ef 01       	movw	r28, r30
    1de8:	f9 cf       	rjmp	.-14     	; 0x1ddc <malloc+0x96>
    1dea:	90 93 cb 04 	sts	0x04CB, r25	; 0x8004cb <__flp+0x1>
    1dee:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__flp>
    1df2:	cd cf       	rjmp	.-102    	; 0x1d8e <malloc+0x48>
    1df4:	fe 01       	movw	r30, r28
    1df6:	e2 0f       	add	r30, r18
    1df8:	f3 1f       	adc	r31, r19
    1dfa:	81 93       	st	Z+, r24
    1dfc:	91 93       	st	Z+, r25
    1dfe:	22 50       	subi	r18, 0x02	; 2
    1e00:	31 09       	sbc	r19, r1
    1e02:	39 83       	std	Y+1, r19	; 0x01
    1e04:	28 83       	st	Y, r18
    1e06:	d7 cf       	rjmp	.-82     	; 0x1db6 <malloc+0x70>
    1e08:	20 91 c8 04 	lds	r18, 0x04C8	; 0x8004c8 <__brkval>
    1e0c:	30 91 c9 04 	lds	r19, 0x04C9	; 0x8004c9 <__brkval+0x1>
    1e10:	23 2b       	or	r18, r19
    1e12:	41 f4       	brne	.+16     	; 0x1e24 <malloc+0xde>
    1e14:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <__malloc_heap_start>
    1e18:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <__malloc_heap_start+0x1>
    1e1c:	30 93 c9 04 	sts	0x04C9, r19	; 0x8004c9 <__brkval+0x1>
    1e20:	20 93 c8 04 	sts	0x04C8, r18	; 0x8004c8 <__brkval>
    1e24:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <__malloc_heap_end>
    1e28:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <__malloc_heap_end+0x1>
    1e2c:	21 15       	cp	r18, r1
    1e2e:	31 05       	cpc	r19, r1
    1e30:	41 f4       	brne	.+16     	; 0x1e42 <malloc+0xfc>
    1e32:	2d b7       	in	r18, 0x3d	; 61
    1e34:	3e b7       	in	r19, 0x3e	; 62
    1e36:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <__malloc_margin>
    1e3a:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <__malloc_margin+0x1>
    1e3e:	24 1b       	sub	r18, r20
    1e40:	35 0b       	sbc	r19, r21
    1e42:	e0 91 c8 04 	lds	r30, 0x04C8	; 0x8004c8 <__brkval>
    1e46:	f0 91 c9 04 	lds	r31, 0x04C9	; 0x8004c9 <__brkval+0x1>
    1e4a:	e2 17       	cp	r30, r18
    1e4c:	f3 07       	cpc	r31, r19
    1e4e:	a0 f4       	brcc	.+40     	; 0x1e78 <malloc+0x132>
    1e50:	2e 1b       	sub	r18, r30
    1e52:	3f 0b       	sbc	r19, r31
    1e54:	28 17       	cp	r18, r24
    1e56:	39 07       	cpc	r19, r25
    1e58:	78 f0       	brcs	.+30     	; 0x1e78 <malloc+0x132>
    1e5a:	ac 01       	movw	r20, r24
    1e5c:	4e 5f       	subi	r20, 0xFE	; 254
    1e5e:	5f 4f       	sbci	r21, 0xFF	; 255
    1e60:	24 17       	cp	r18, r20
    1e62:	35 07       	cpc	r19, r21
    1e64:	48 f0       	brcs	.+18     	; 0x1e78 <malloc+0x132>
    1e66:	4e 0f       	add	r20, r30
    1e68:	5f 1f       	adc	r21, r31
    1e6a:	50 93 c9 04 	sts	0x04C9, r21	; 0x8004c9 <__brkval+0x1>
    1e6e:	40 93 c8 04 	sts	0x04C8, r20	; 0x8004c8 <__brkval>
    1e72:	81 93       	st	Z+, r24
    1e74:	91 93       	st	Z+, r25
    1e76:	9f cf       	rjmp	.-194    	; 0x1db6 <malloc+0x70>
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	e0 e0       	ldi	r30, 0x00	; 0
    1e7c:	9c cf       	rjmp	.-200    	; 0x1db6 <malloc+0x70>

00001e7e <free>:
free():
    1e7e:	cf 93       	push	r28
    1e80:	df 93       	push	r29
    1e82:	00 97       	sbiw	r24, 0x00	; 0
    1e84:	e9 f0       	breq	.+58     	; 0x1ec0 <free+0x42>
    1e86:	fc 01       	movw	r30, r24
    1e88:	32 97       	sbiw	r30, 0x02	; 2
    1e8a:	13 82       	std	Z+3, r1	; 0x03
    1e8c:	12 82       	std	Z+2, r1	; 0x02
    1e8e:	a0 91 ca 04 	lds	r26, 0x04CA	; 0x8004ca <__flp>
    1e92:	b0 91 cb 04 	lds	r27, 0x04CB	; 0x8004cb <__flp+0x1>
    1e96:	ed 01       	movw	r28, r26
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	10 97       	sbiw	r26, 0x00	; 0
    1e9e:	a1 f4       	brne	.+40     	; 0x1ec8 <free+0x4a>
    1ea0:	20 81       	ld	r18, Z
    1ea2:	31 81       	ldd	r19, Z+1	; 0x01
    1ea4:	82 0f       	add	r24, r18
    1ea6:	93 1f       	adc	r25, r19
    1ea8:	20 91 c8 04 	lds	r18, 0x04C8	; 0x8004c8 <__brkval>
    1eac:	30 91 c9 04 	lds	r19, 0x04C9	; 0x8004c9 <__brkval+0x1>
    1eb0:	28 17       	cp	r18, r24
    1eb2:	39 07       	cpc	r19, r25
    1eb4:	09 f0       	breq	.+2      	; 0x1eb8 <free+0x3a>
    1eb6:	61 c0       	rjmp	.+194    	; 0x1f7a <free+0xfc>
    1eb8:	f0 93 c9 04 	sts	0x04C9, r31	; 0x8004c9 <__brkval+0x1>
    1ebc:	e0 93 c8 04 	sts	0x04C8, r30	; 0x8004c8 <__brkval>
    1ec0:	df 91       	pop	r29
    1ec2:	cf 91       	pop	r28
    1ec4:	08 95       	ret
    1ec6:	ea 01       	movw	r28, r20
    1ec8:	ce 17       	cp	r28, r30
    1eca:	df 07       	cpc	r29, r31
    1ecc:	e8 f5       	brcc	.+122    	; 0x1f48 <free+0xca>
    1ece:	4a 81       	ldd	r20, Y+2	; 0x02
    1ed0:	5b 81       	ldd	r21, Y+3	; 0x03
    1ed2:	9e 01       	movw	r18, r28
    1ed4:	41 15       	cp	r20, r1
    1ed6:	51 05       	cpc	r21, r1
    1ed8:	b1 f7       	brne	.-20     	; 0x1ec6 <free+0x48>
    1eda:	e9 01       	movw	r28, r18
    1edc:	fb 83       	std	Y+3, r31	; 0x03
    1ede:	ea 83       	std	Y+2, r30	; 0x02
    1ee0:	49 91       	ld	r20, Y+
    1ee2:	59 91       	ld	r21, Y+
    1ee4:	c4 0f       	add	r28, r20
    1ee6:	d5 1f       	adc	r29, r21
    1ee8:	ec 17       	cp	r30, r28
    1eea:	fd 07       	cpc	r31, r29
    1eec:	61 f4       	brne	.+24     	; 0x1f06 <free+0x88>
    1eee:	80 81       	ld	r24, Z
    1ef0:	91 81       	ldd	r25, Z+1	; 0x01
    1ef2:	02 96       	adiw	r24, 0x02	; 2
    1ef4:	84 0f       	add	r24, r20
    1ef6:	95 1f       	adc	r25, r21
    1ef8:	e9 01       	movw	r28, r18
    1efa:	99 83       	std	Y+1, r25	; 0x01
    1efc:	88 83       	st	Y, r24
    1efe:	82 81       	ldd	r24, Z+2	; 0x02
    1f00:	93 81       	ldd	r25, Z+3	; 0x03
    1f02:	9b 83       	std	Y+3, r25	; 0x03
    1f04:	8a 83       	std	Y+2, r24	; 0x02
    1f06:	f0 e0       	ldi	r31, 0x00	; 0
    1f08:	e0 e0       	ldi	r30, 0x00	; 0
    1f0a:	12 96       	adiw	r26, 0x02	; 2
    1f0c:	8d 91       	ld	r24, X+
    1f0e:	9c 91       	ld	r25, X
    1f10:	13 97       	sbiw	r26, 0x03	; 3
    1f12:	00 97       	sbiw	r24, 0x00	; 0
    1f14:	b9 f5       	brne	.+110    	; 0x1f84 <free+0x106>
    1f16:	2d 91       	ld	r18, X+
    1f18:	3c 91       	ld	r19, X
    1f1a:	11 97       	sbiw	r26, 0x01	; 1
    1f1c:	cd 01       	movw	r24, r26
    1f1e:	02 96       	adiw	r24, 0x02	; 2
    1f20:	82 0f       	add	r24, r18
    1f22:	93 1f       	adc	r25, r19
    1f24:	20 91 c8 04 	lds	r18, 0x04C8	; 0x8004c8 <__brkval>
    1f28:	30 91 c9 04 	lds	r19, 0x04C9	; 0x8004c9 <__brkval+0x1>
    1f2c:	28 17       	cp	r18, r24
    1f2e:	39 07       	cpc	r19, r25
    1f30:	39 f6       	brne	.-114    	; 0x1ec0 <free+0x42>
    1f32:	30 97       	sbiw	r30, 0x00	; 0
    1f34:	51 f5       	brne	.+84     	; 0x1f8a <free+0x10c>
    1f36:	10 92 cb 04 	sts	0x04CB, r1	; 0x8004cb <__flp+0x1>
    1f3a:	10 92 ca 04 	sts	0x04CA, r1	; 0x8004ca <__flp>
    1f3e:	b0 93 c9 04 	sts	0x04C9, r27	; 0x8004c9 <__brkval+0x1>
    1f42:	a0 93 c8 04 	sts	0x04C8, r26	; 0x8004c8 <__brkval>
    1f46:	bc cf       	rjmp	.-136    	; 0x1ec0 <free+0x42>
    1f48:	d3 83       	std	Z+3, r29	; 0x03
    1f4a:	c2 83       	std	Z+2, r28	; 0x02
    1f4c:	40 81       	ld	r20, Z
    1f4e:	51 81       	ldd	r21, Z+1	; 0x01
    1f50:	84 0f       	add	r24, r20
    1f52:	95 1f       	adc	r25, r21
    1f54:	c8 17       	cp	r28, r24
    1f56:	d9 07       	cpc	r29, r25
    1f58:	61 f4       	brne	.+24     	; 0x1f72 <free+0xf4>
    1f5a:	4e 5f       	subi	r20, 0xFE	; 254
    1f5c:	5f 4f       	sbci	r21, 0xFF	; 255
    1f5e:	88 81       	ld	r24, Y
    1f60:	99 81       	ldd	r25, Y+1	; 0x01
    1f62:	48 0f       	add	r20, r24
    1f64:	59 1f       	adc	r21, r25
    1f66:	51 83       	std	Z+1, r21	; 0x01
    1f68:	40 83       	st	Z, r20
    1f6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f6e:	93 83       	std	Z+3, r25	; 0x03
    1f70:	82 83       	std	Z+2, r24	; 0x02
    1f72:	21 15       	cp	r18, r1
    1f74:	31 05       	cpc	r19, r1
    1f76:	09 f0       	breq	.+2      	; 0x1f7a <free+0xfc>
    1f78:	b0 cf       	rjmp	.-160    	; 0x1eda <free+0x5c>
    1f7a:	f0 93 cb 04 	sts	0x04CB, r31	; 0x8004cb <__flp+0x1>
    1f7e:	e0 93 ca 04 	sts	0x04CA, r30	; 0x8004ca <__flp>
    1f82:	9e cf       	rjmp	.-196    	; 0x1ec0 <free+0x42>
    1f84:	fd 01       	movw	r30, r26
    1f86:	dc 01       	movw	r26, r24
    1f88:	c0 cf       	rjmp	.-128    	; 0x1f0a <free+0x8c>
    1f8a:	13 82       	std	Z+3, r1	; 0x03
    1f8c:	12 82       	std	Z+2, r1	; 0x02
    1f8e:	d7 cf       	rjmp	.-82     	; 0x1f3e <free+0xc0>

00001f90 <realloc>:
realloc():
    1f90:	b0 e0       	ldi	r27, 0x00	; 0
    1f92:	a0 e0       	ldi	r26, 0x00	; 0
    1f94:	ee ec       	ldi	r30, 0xCE	; 206
    1f96:	ff e0       	ldi	r31, 0x0F	; 15
    1f98:	0c 94 2f 0e 	jmp	0x1c5e	; 0x1c5e <__prologue_saves__+0x4>
    1f9c:	8c 01       	movw	r16, r24
    1f9e:	00 97       	sbiw	r24, 0x00	; 0
    1fa0:	51 f4       	brne	.+20     	; 0x1fb6 <realloc+0x26>
    1fa2:	cb 01       	movw	r24, r22
    1fa4:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <malloc>
    1fa8:	8c 01       	movw	r16, r24
    1faa:	c8 01       	movw	r24, r16
    1fac:	cd b7       	in	r28, 0x3d	; 61
    1fae:	de b7       	in	r29, 0x3e	; 62
    1fb0:	e0 e1       	ldi	r30, 0x10	; 16
    1fb2:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__epilogue_restores__+0x4>
    1fb6:	fc 01       	movw	r30, r24
    1fb8:	e6 0f       	add	r30, r22
    1fba:	f7 1f       	adc	r31, r23
    1fbc:	9c 01       	movw	r18, r24
    1fbe:	22 50       	subi	r18, 0x02	; 2
    1fc0:	31 09       	sbc	r19, r1
    1fc2:	e2 17       	cp	r30, r18
    1fc4:	f3 07       	cpc	r31, r19
    1fc6:	08 f4       	brcc	.+2      	; 0x1fca <realloc+0x3a>
    1fc8:	9d c0       	rjmp	.+314    	; 0x2104 <realloc+0x174>
    1fca:	d9 01       	movw	r26, r18
    1fcc:	cd 91       	ld	r28, X+
    1fce:	dc 91       	ld	r29, X
    1fd0:	11 97       	sbiw	r26, 0x01	; 1
    1fd2:	c6 17       	cp	r28, r22
    1fd4:	d7 07       	cpc	r29, r23
    1fd6:	98 f0       	brcs	.+38     	; 0x1ffe <realloc+0x6e>
    1fd8:	c5 30       	cpi	r28, 0x05	; 5
    1fda:	d1 05       	cpc	r29, r1
    1fdc:	30 f3       	brcs	.-52     	; 0x1faa <realloc+0x1a>
    1fde:	ce 01       	movw	r24, r28
    1fe0:	04 97       	sbiw	r24, 0x04	; 4
    1fe2:	86 17       	cp	r24, r22
    1fe4:	97 07       	cpc	r25, r23
    1fe6:	08 f3       	brcs	.-62     	; 0x1faa <realloc+0x1a>
    1fe8:	c6 1b       	sub	r28, r22
    1fea:	d7 0b       	sbc	r29, r23
    1fec:	22 97       	sbiw	r28, 0x02	; 2
    1fee:	c1 93       	st	Z+, r28
    1ff0:	d1 93       	st	Z+, r29
    1ff2:	6d 93       	st	X+, r22
    1ff4:	7c 93       	st	X, r23
    1ff6:	cf 01       	movw	r24, r30
    1ff8:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <free>
    1ffc:	d6 cf       	rjmp	.-84     	; 0x1faa <realloc+0x1a>
    1ffe:	5b 01       	movw	r10, r22
    2000:	ac 1a       	sub	r10, r28
    2002:	bd 0a       	sbc	r11, r29
    2004:	4c 01       	movw	r8, r24
    2006:	8c 0e       	add	r8, r28
    2008:	9d 1e       	adc	r9, r29
    200a:	a0 91 ca 04 	lds	r26, 0x04CA	; 0x8004ca <__flp>
    200e:	b0 91 cb 04 	lds	r27, 0x04CB	; 0x8004cb <__flp+0x1>
    2012:	51 2c       	mov	r5, r1
    2014:	41 2c       	mov	r4, r1
    2016:	f1 2c       	mov	r15, r1
    2018:	e1 2c       	mov	r14, r1
    201a:	10 97       	sbiw	r26, 0x00	; 0
    201c:	31 f5       	brne	.+76     	; 0x206a <realloc+0xda>
    201e:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <__brkval>
    2022:	90 91 c9 04 	lds	r25, 0x04C9	; 0x8004c9 <__brkval+0x1>
    2026:	88 15       	cp	r24, r8
    2028:	99 05       	cpc	r25, r9
    202a:	09 f0       	breq	.+2      	; 0x202e <realloc+0x9e>
    202c:	5c c0       	rjmp	.+184    	; 0x20e6 <realloc+0x156>
    202e:	46 16       	cp	r4, r22
    2030:	57 06       	cpc	r5, r23
    2032:	08 f0       	brcs	.+2      	; 0x2036 <realloc+0xa6>
    2034:	58 c0       	rjmp	.+176    	; 0x20e6 <realloc+0x156>
    2036:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__malloc_heap_end>
    203a:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <__malloc_heap_end+0x1>
    203e:	00 97       	sbiw	r24, 0x00	; 0
    2040:	41 f4       	brne	.+16     	; 0x2052 <realloc+0xc2>
    2042:	8d b7       	in	r24, 0x3d	; 61
    2044:	9e b7       	in	r25, 0x3e	; 62
    2046:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <__malloc_margin>
    204a:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <__malloc_margin+0x1>
    204e:	84 1b       	sub	r24, r20
    2050:	95 0b       	sbc	r25, r21
    2052:	e8 17       	cp	r30, r24
    2054:	f9 07       	cpc	r31, r25
    2056:	08 f0       	brcs	.+2      	; 0x205a <realloc+0xca>
    2058:	55 c0       	rjmp	.+170    	; 0x2104 <realloc+0x174>
    205a:	f0 93 c9 04 	sts	0x04C9, r31	; 0x8004c9 <__brkval+0x1>
    205e:	e0 93 c8 04 	sts	0x04C8, r30	; 0x8004c8 <__brkval>
    2062:	f9 01       	movw	r30, r18
    2064:	71 83       	std	Z+1, r23	; 0x01
    2066:	60 83       	st	Z, r22
    2068:	a0 cf       	rjmp	.-192    	; 0x1faa <realloc+0x1a>
    206a:	8d 91       	ld	r24, X+
    206c:	9c 91       	ld	r25, X
    206e:	11 97       	sbiw	r26, 0x01	; 1
    2070:	12 96       	adiw	r26, 0x02	; 2
    2072:	6c 90       	ld	r6, X
    2074:	12 97       	sbiw	r26, 0x02	; 2
    2076:	13 96       	adiw	r26, 0x03	; 3
    2078:	7c 90       	ld	r7, X
    207a:	13 97       	sbiw	r26, 0x03	; 3
    207c:	a8 15       	cp	r26, r8
    207e:	b9 05       	cpc	r27, r9
    2080:	59 f5       	brne	.+86     	; 0x20d8 <realloc+0x148>
    2082:	6c 01       	movw	r12, r24
    2084:	42 e0       	ldi	r20, 0x02	; 2
    2086:	c4 0e       	add	r12, r20
    2088:	d1 1c       	adc	r13, r1
    208a:	ca 14       	cp	r12, r10
    208c:	db 04       	cpc	r13, r11
    208e:	20 f1       	brcs	.+72     	; 0x20d8 <realloc+0x148>
    2090:	ac 01       	movw	r20, r24
    2092:	4a 19       	sub	r20, r10
    2094:	5b 09       	sbc	r21, r11
    2096:	da 01       	movw	r26, r20
    2098:	12 96       	adiw	r26, 0x02	; 2
    209a:	15 97       	sbiw	r26, 0x05	; 5
    209c:	80 f0       	brcs	.+32     	; 0x20be <realloc+0x12e>
    209e:	62 82       	std	Z+2, r6	; 0x02
    20a0:	73 82       	std	Z+3, r7	; 0x03
    20a2:	51 83       	std	Z+1, r21	; 0x01
    20a4:	40 83       	st	Z, r20
    20a6:	d9 01       	movw	r26, r18
    20a8:	6d 93       	st	X+, r22
    20aa:	7c 93       	st	X, r23
    20ac:	e1 14       	cp	r14, r1
    20ae:	f1 04       	cpc	r15, r1
    20b0:	71 f0       	breq	.+28     	; 0x20ce <realloc+0x13e>
    20b2:	d7 01       	movw	r26, r14
    20b4:	13 96       	adiw	r26, 0x03	; 3
    20b6:	fc 93       	st	X, r31
    20b8:	ee 93       	st	-X, r30
    20ba:	12 97       	sbiw	r26, 0x02	; 2
    20bc:	76 cf       	rjmp	.-276    	; 0x1faa <realloc+0x1a>
    20be:	22 96       	adiw	r28, 0x02	; 2
    20c0:	8c 0f       	add	r24, r28
    20c2:	9d 1f       	adc	r25, r29
    20c4:	f9 01       	movw	r30, r18
    20c6:	91 83       	std	Z+1, r25	; 0x01
    20c8:	80 83       	st	Z, r24
    20ca:	f3 01       	movw	r30, r6
    20cc:	ef cf       	rjmp	.-34     	; 0x20ac <realloc+0x11c>
    20ce:	f0 93 cb 04 	sts	0x04CB, r31	; 0x8004cb <__flp+0x1>
    20d2:	e0 93 ca 04 	sts	0x04CA, r30	; 0x8004ca <__flp>
    20d6:	69 cf       	rjmp	.-302    	; 0x1faa <realloc+0x1a>
    20d8:	48 16       	cp	r4, r24
    20da:	59 06       	cpc	r5, r25
    20dc:	08 f4       	brcc	.+2      	; 0x20e0 <realloc+0x150>
    20de:	2c 01       	movw	r4, r24
    20e0:	7d 01       	movw	r14, r26
    20e2:	d3 01       	movw	r26, r6
    20e4:	9a cf       	rjmp	.-204    	; 0x201a <realloc+0x8a>
    20e6:	cb 01       	movw	r24, r22
    20e8:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <malloc>
    20ec:	7c 01       	movw	r14, r24
    20ee:	00 97       	sbiw	r24, 0x00	; 0
    20f0:	49 f0       	breq	.+18     	; 0x2104 <realloc+0x174>
    20f2:	ae 01       	movw	r20, r28
    20f4:	b8 01       	movw	r22, r16
    20f6:	0e 94 85 10 	call	0x210a	; 0x210a <memcpy>
    20fa:	c8 01       	movw	r24, r16
    20fc:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <free>
    2100:	87 01       	movw	r16, r14
    2102:	53 cf       	rjmp	.-346    	; 0x1faa <realloc+0x1a>
    2104:	10 e0       	ldi	r17, 0x00	; 0
    2106:	00 e0       	ldi	r16, 0x00	; 0
    2108:	50 cf       	rjmp	.-352    	; 0x1faa <realloc+0x1a>

0000210a <memcpy>:
memcpy():
    210a:	fb 01       	movw	r30, r22
    210c:	dc 01       	movw	r26, r24
    210e:	02 c0       	rjmp	.+4      	; 0x2114 <memcpy+0xa>
    2110:	01 90       	ld	r0, Z+
    2112:	0d 92       	st	X+, r0
    2114:	41 50       	subi	r20, 0x01	; 1
    2116:	50 40       	sbci	r21, 0x00	; 0
    2118:	d8 f7       	brcc	.-10     	; 0x2110 <memcpy+0x6>
    211a:	08 95       	ret

0000211c <strcpy>:
strcpy():
    211c:	fb 01       	movw	r30, r22
    211e:	dc 01       	movw	r26, r24
    2120:	01 90       	ld	r0, Z+
    2122:	0d 92       	st	X+, r0
    2124:	00 20       	and	r0, r0
    2126:	e1 f7       	brne	.-8      	; 0x2120 <strcpy+0x4>
    2128:	08 95       	ret

0000212a <__do_global_dtors>:
__do_global_dtors():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    212a:	10 e0       	ldi	r17, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    212c:	c2 e6       	ldi	r28, 0x62	; 98
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    212e:	d0 e0       	ldi	r29, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    2130:	04 c0       	rjmp	.+8      	; 0x213a <__do_global_dtors+0x10>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    2132:	fe 01       	movw	r30, r28
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    2134:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <__tablejump2__>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    2138:	21 96       	adiw	r28, 0x01	; 1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    213a:	c3 36       	cpi	r28, 0x63	; 99
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    213c:	d1 07       	cpc	r29, r17
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    213e:	c9 f7       	brne	.-14     	; 0x2132 <__do_global_dtors+0x8>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    2140:	f8 94       	cli

00002142 <__stop_program>:
__stop_program():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    2142:	ff cf       	rjmp	.-2      	; 0x2142 <__stop_program>


/Users/rcaratti/Library/Caches/arduino/sketches/13AFFA734C235960AEDBAAF6F459BC8B/SI4844_02_LCD16x2_SLIDE_SWITCH.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__dtors_end>
       4:	0c 94 42 09 	jmp	0x1284	; 0x1284 <__vector_1>
       8:	0c 94 1b 09 	jmp	0x1236	; 0x1236 <__vector_2>
       c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      40:	0c 94 d1 08 	jmp	0x11a2	; 0x11a2 <__vector_16>
      44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      48:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      4c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      60:	0c 94 69 09 	jmp	0x12d2	; 0x12d2 <__vector_24>
      64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

00000068 <__trampolines_end>:
__trampolines_start():
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	24 00       	.word	0x0024	; ????
      6e:	27 00       	.word	0x0027	; ????
      70:	2a 00       	.word	0x002a	; ????

00000072 <port_to_output_PGM>:
      72:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000007c <digital_pin_to_port_PGM>:
      7c:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      8c:	03 03 03 03 02 02 03                                .......

00000093 <digital_pin_to_bit_mask_PGM>:
      93:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      a3:	04 08 10 20 40 80 40                                ... @.@

000000aa <digital_pin_to_timer_PGM>:
      aa:	00 00 00 09 00 03 02 00 00 04 05 08 00 00 00 00     ................
	...

000000c2 <__ctors_start>:
__ctors_start():
      c2:	90 0a       	sbc	r9, r16

000000c4 <__ctors_end>:
__dtors_start():
      c4:	d6 0c       	add	r13, r6

000000c6 <__dtors_end>:
__dtors_end():
      c6:	11 24       	eor	r1, r1
      c8:	1f be       	out	0x3f, r1	; 63
      ca:	cf ef       	ldi	r28, 0xFF	; 255
      cc:	d8 e0       	ldi	r29, 0x08	; 8
      ce:	de bf       	out	0x3e, r29	; 62
      d0:	cd bf       	out	0x3d, r28	; 61

000000d2 <__do_clear_bss>:
__do_clear_bss():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
      d2:	24 e0       	ldi	r18, 0x04	; 4
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
      d4:	a8 e2       	ldi	r26, 0x28	; 40
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
      d6:	b2 e0       	ldi	r27, 0x02	; 2
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
      d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
      da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
      dc:	ad 31       	cpi	r26, 0x1D	; 29
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
      de:	b2 07       	cpc	r27, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
      e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>

000000e2 <__do_copy_data>:
__do_copy_data():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
      e2:	12 e0       	ldi	r17, 0x02	; 2
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
      e4:	a0 e0       	ldi	r26, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
      e6:	b1 e0       	ldi	r27, 0x01	; 1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
      e8:	ea ec       	ldi	r30, 0xCA	; 202
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
      ea:	fe e1       	ldi	r31, 0x1E	; 30
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
      ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x10>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
      ee:	05 90       	lpm	r0, Z+
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
      f0:	0d 92       	st	X+, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
      f2:	a8 32       	cpi	r26, 0x28	; 40
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
      f4:	b1 07       	cpc	r27, r17
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
      f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0xc>

000000f8 <__do_global_ctors>:
__do_global_ctors():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
      f8:	10 e0       	ldi	r17, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
      fa:	c2 e6       	ldi	r28, 0x62	; 98
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
      fc:	d0 e0       	ldi	r29, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__do_global_ctors+0x10>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     100:	21 97       	sbiw	r28, 0x01	; 1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     102:	fe 01       	movw	r30, r28
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     104:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <__tablejump2__>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     108:	c1 36       	cpi	r28, 0x61	; 97
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     10a:	d1 07       	cpc	r29, r17
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     10c:	c9 f7       	brne	.-14     	; 0x100 <__do_global_ctors+0x8>
     10e:	0e 94 ef 0b 	call	0x17de	; 0x17de <main>
     112:	0c 94 58 0f 	jmp	0x1eb0	; 0x1eb0 <__do_global_dtors>

00000116 <__bad_interrupt>:
__vector_22():
     116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <SI4844::convertToChar(unsigned long, char*, unsigned char, unsigned char, unsigned char, bool) [clone .constprop.37]>:
convertToChar():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1432
 * @param len final string size (in bytes)
 * @param dot the decimal or thousand separator position
 * @param separator symbol "." or ","
 * @param remove_leading_zeros if true removes up to two leading zeros (default is true)
 */
void SI4844::convertToChar(uint32_t value, char *strValue, uint8_t len, uint8_t dot, uint8_t separator, bool remove_leading_zeros)
     11a:	4f 92       	push	r4
     11c:	5f 92       	push	r5
     11e:	6f 92       	push	r6
     120:	7f 92       	push	r7
     122:	af 92       	push	r10
     124:	bf 92       	push	r11
     126:	cf 92       	push	r12
     128:	df 92       	push	r13
     12a:	ef 92       	push	r14
     12c:	ff 92       	push	r15
     12e:	0f 93       	push	r16
     130:	1f 93       	push	r17
     132:	cf 93       	push	r28
     134:	df 93       	push	r29
     136:	dc 01       	movw	r26, r24
     138:	cb 01       	movw	r24, r22
     13a:	ea 01       	movw	r28, r20
     13c:	e2 2e       	mov	r14, r18
     13e:	f1 2c       	mov	r15, r1
     140:	e4 0e       	add	r14, r20
     142:	f5 1e       	adc	r15, r21
     144:	67 01       	movw	r12, r14
     146:	57 01       	movw	r10, r14
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1437
{
    char d;
    for (int i = (len - 1); i >= 0; i--)
    {
        d = value % 10;
     148:	2a e0       	ldi	r18, 0x0A	; 10
     14a:	42 2e       	mov	r4, r18
     14c:	51 2c       	mov	r5, r1
     14e:	61 2c       	mov	r6, r1
     150:	71 2c       	mov	r7, r1
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1438
        value = value / 10;
     152:	bc 01       	movw	r22, r24
     154:	cd 01       	movw	r24, r26
     156:	a3 01       	movw	r20, r6
     158:	92 01       	movw	r18, r4
     15a:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <__udivmodsi4>
     15e:	da 01       	movw	r26, r20
     160:	c9 01       	movw	r24, r18
     162:	f5 01       	movw	r30, r10
     164:	31 97       	sbiw	r30, 0x01	; 1
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1439
        strValue[i] = d + 48;
     166:	60 5d       	subi	r22, 0xD0	; 208
     168:	60 83       	st	Z, r22
     16a:	22 e0       	ldi	r18, 0x02	; 2
     16c:	a2 1a       	sub	r10, r18
     16e:	b1 08       	sbc	r11, r1
     170:	95 01       	movw	r18, r10
     172:	2c 1b       	sub	r18, r28
     174:	3d 0b       	sbc	r19, r29
     176:	5f 01       	movw	r10, r30
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1435
 * @param remove_leading_zeros if true removes up to two leading zeros (default is true)
 */
void SI4844::convertToChar(uint32_t value, char *strValue, uint8_t len, uint8_t dot, uint8_t separator, bool remove_leading_zeros)
{
    char d;
    for (int i = (len - 1); i >= 0; i--)
     178:	37 ff       	sbrs	r19, 7
     17a:	eb cf       	rjmp	.-42     	; 0x152 <SI4844::convertToChar(unsigned long, char*, unsigned char, unsigned char, unsigned char, bool) [clone .constprop.37]+0x38>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1441
    {
        d = value % 10;
        value = value / 10;
        strValue[i] = d + 48;
    }
    strValue[len] = '\0';
     17c:	f7 01       	movw	r30, r14
     17e:	10 82       	st	Z, r1
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1442
    if (dot > 0)
     180:	00 23       	and	r16, r16
     182:	99 f0       	breq	.+38     	; 0x1aa <SI4844::convertToChar(unsigned long, char*, unsigned char, unsigned char, unsigned char, bool) [clone .constprop.37]+0x90>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1444
    {
        for (int i = len; i >= dot; i--)
     184:	10 e0       	ldi	r17, 0x00	; 0
     186:	c6 01       	movw	r24, r12
     188:	8c 1b       	sub	r24, r28
     18a:	9d 0b       	sbc	r25, r29
     18c:	80 17       	cp	r24, r16
     18e:	91 07       	cpc	r25, r17
     190:	3c f0       	brlt	.+14     	; 0x1a0 <SI4844::convertToChar(unsigned long, char*, unsigned char, unsigned char, unsigned char, bool) [clone .constprop.37]+0x86>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1446
        {
            strValue[i + 1] = strValue[i];
     192:	f6 01       	movw	r30, r12
     194:	80 81       	ld	r24, Z
     196:	81 83       	std	Z+1, r24	; 0x01
     198:	f1 e0       	ldi	r31, 0x01	; 1
     19a:	cf 1a       	sub	r12, r31
     19c:	d1 08       	sbc	r13, r1
     19e:	f3 cf       	rjmp	.-26     	; 0x186 <SI4844::convertToChar(unsigned long, char*, unsigned char, unsigned char, unsigned char, bool) [clone .constprop.37]+0x6c>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1448
        }
        strValue[dot] = separator;
     1a0:	0c 0f       	add	r16, r28
     1a2:	1d 1f       	adc	r17, r29
     1a4:	8e e2       	ldi	r24, 0x2E	; 46
     1a6:	f8 01       	movw	r30, r16
     1a8:	80 83       	st	Z, r24
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1453
    }

    if (remove_leading_zeros)
    {
        if (strValue[0] == '0')
     1aa:	88 81       	ld	r24, Y
     1ac:	80 33       	cpi	r24, 0x30	; 48
     1ae:	31 f4       	brne	.+12     	; 0x1bc <SI4844::convertToChar(unsigned long, char*, unsigned char, unsigned char, unsigned char, bool) [clone .constprop.37]+0xa2>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1455
        {
            strValue[0] = ' ';
     1b0:	80 e2       	ldi	r24, 0x20	; 32
     1b2:	88 83       	st	Y, r24
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1456
            if (strValue[1] == '0')
     1b4:	99 81       	ldd	r25, Y+1	; 0x01
     1b6:	90 33       	cpi	r25, 0x30	; 48
     1b8:	09 f4       	brne	.+2      	; 0x1bc <SI4844::convertToChar(unsigned long, char*, unsigned char, unsigned char, unsigned char, bool) [clone .constprop.37]+0xa2>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1457
                strValue[1] = ' ';
     1ba:	89 83       	std	Y+1, r24	; 0x01
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1460
        }
    }
}
     1bc:	df 91       	pop	r29
     1be:	cf 91       	pop	r28
     1c0:	1f 91       	pop	r17
     1c2:	0f 91       	pop	r16
     1c4:	ff 90       	pop	r15
     1c6:	ef 90       	pop	r14
     1c8:	df 90       	pop	r13
     1ca:	cf 90       	pop	r12
     1cc:	bf 90       	pop	r11
     1ce:	af 90       	pop	r10
     1d0:	7f 90       	pop	r7
     1d2:	6f 90       	pop	r6
     1d4:	5f 90       	pop	r5
     1d6:	4f 90       	pop	r4
     1d8:	08 95       	ret

000001da <twi_readFrom.part.0.constprop.36>:
twi_readFrom.part.0():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:160
 *          data: pointer to byte array
 *          length: number of bytes to read into array
 *          sendStop: Boolean indicating whether to send a stop at the end
 * Output   number of bytes read
 */
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
     1da:	98 2f       	mov	r25, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:177
        twi_handleTimeout(twi_do_reset_on_timeout);
        return 0;
      }
    }
  #else
    while(TWI_READY != twi_state){
     1dc:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <twi_state>
     1e0:	81 11       	cpse	r24, r1
     1e2:	fc cf       	rjmp	.-8      	; 0x1dc <twi_readFrom.part.0.constprop.36+0x2>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:181
      continue;
    }
  #endif
  twi_state = TWI_MRX;
     1e4:	81 e0       	ldi	r24, 0x01	; 1
     1e6:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <twi_state>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:182
  twi_sendStop = sendStop;
     1ea:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <twi_sendStop>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:184
  // reset error state (0xFF.. no error occurred)
  twi_error = 0xFF;
     1ee:	2f ef       	ldi	r18, 0xFF	; 255
     1f0:	20 93 c8 02 	sts	0x02C8, r18	; 0x8002c8 <twi_error>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:187

  // initialize buffer iteration vars
  twi_masterBuffer = data;
     1f4:	22 ea       	ldi	r18, 0xA2	; 162
     1f6:	32 e0       	ldi	r19, 0x02	; 2
     1f8:	30 93 c7 02 	sts	0x02C7, r19	; 0x8002c7 <twi_masterBuffer+0x1>
     1fc:	20 93 c6 02 	sts	0x02C6, r18	; 0x8002c6 <twi_masterBuffer>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:188
  twi_masterBufferIndex = 0;
     200:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <twi_masterBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:189
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
     204:	2f ef       	ldi	r18, 0xFF	; 255
     206:	26 0f       	add	r18, r22
     208:	20 93 c4 02 	sts	0x02C4, r18	; 0x8002c4 <twi_masterBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:197
  // Therefore we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
     20c:	80 93 c3 02 	sts	0x02C3, r24	; 0x8002c3 <twi_slarw>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:198
  twi_slarw |= address << 1;
     210:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <twi_slarw>
     214:	99 0f       	add	r25, r25
     216:	98 2b       	or	r25, r24
     218:	90 93 c3 02 	sts	0x02C3, r25	; 0x8002c3 <twi_slarw>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:200

  if (true == twi_inRepStart) {
     21c:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <twi_inRepStart>
     220:	81 30       	cpi	r24, 0x01	; 1
     222:	c9 f4       	brne	.+50     	; 0x256 <twi_readFrom.part.0.constprop.36+0x7c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:207
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // Remember, we're dealing with an ASYNC ISR
     224:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <twi_inRepStart>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:219
          return 0;
        }
      } while(TWCR & _BV(TWWC));
    #else
      do {
        TWDR = twi_slarw;
     228:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <twi_slarw>
     22c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:220
      } while(TWCR & _BV(TWWC));
     230:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     234:	83 fd       	sbrc	r24, 3
     236:	f8 cf       	rjmp	.-16     	; 0x228 <twi_readFrom.part.0.constprop.36+0x4e>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:222
    #endif
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
     238:	85 ec       	ldi	r24, 0xC5	; 197
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:226
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
     23a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:238
        twi_handleTimeout(twi_do_reset_on_timeout);
        return 0;
      }
    }
  #else
    while(TWI_MRX == twi_state){
     23e:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <twi_state>
     242:	81 30       	cpi	r24, 0x01	; 1
     244:	e1 f3       	breq	.-8      	; 0x23e <twi_readFrom.part.0.constprop.36+0x64>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:243
      continue;
    }
  #endif

  if (twi_masterBufferIndex < length)
     246:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <twi_masterBufferIndex>
     24a:	86 17       	cp	r24, r22
     24c:	10 f4       	brcc	.+4      	; 0x252 <twi_readFrom.part.0.constprop.36+0x78>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:244
    length = twi_masterBufferIndex;
     24e:	60 91 c5 02 	lds	r22, 0x02C5	; 0x8002c5 <twi_masterBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:247

  return length;
}
     252:	86 2f       	mov	r24, r22
     254:	08 95       	ret
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:226
    #endif
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
     256:	85 ee       	ldi	r24, 0xE5	; 229
     258:	f0 cf       	rjmp	.-32     	; 0x23a <twi_readFrom.part.0.constprop.36+0x60>

0000025a <TwoWire::endTransmission() [clone .constprop.28]>:
endTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:225
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
  // transmit buffer (blocking)
  uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
     25a:	90 91 a1 02 	lds	r25, 0x02A1	; 0x8002a1 <TwoWire::txBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:269
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    return 1;
     25e:	81 e0       	ldi	r24, 0x01	; 1
twi_writeTo():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:268
 *          5 .. timeout
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
     260:	91 32       	cpi	r25, 0x21	; 33
     262:	08 f0       	brcs	.+2      	; 0x266 <TwoWire::endTransmission() [clone .constprop.28]+0xc>
     264:	43 c0       	rjmp	.+134    	; 0x2ec <TwoWire::endTransmission() [clone .constprop.28]+0x92>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:282
        twi_handleTimeout(twi_do_reset_on_timeout);
        return (5);
      }
    }
  #else
    while(TWI_READY != twi_state){
     266:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <twi_state>
     26a:	81 11       	cpse	r24, r1
     26c:	fc cf       	rjmp	.-8      	; 0x266 <TwoWire::endTransmission() [clone .constprop.28]+0xc>
endTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:225
     26e:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <TwoWire::txAddress>
twi_writeTo():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:287
      continue;
    }
  #endif

  twi_state = TWI_MTX;
     272:	22 e0       	ldi	r18, 0x02	; 2
     274:	20 93 ca 02 	sts	0x02CA, r18	; 0x8002ca <twi_state>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:288
  twi_sendStop = sendStop;
     278:	21 e0       	ldi	r18, 0x01	; 1
     27a:	20 93 c9 02 	sts	0x02C9, r18	; 0x8002c9 <twi_sendStop>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:290
  // reset error state (0xFF.. no error occurred)
  twi_error = 0xFF;
     27e:	2f ef       	ldi	r18, 0xFF	; 255
     280:	20 93 c8 02 	sts	0x02C8, r18	; 0x8002c8 <twi_error>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:293

  // initialize buffer iteration vars
  twi_masterBuffer = data;
     284:	20 e8       	ldi	r18, 0x80	; 128
     286:	32 e0       	ldi	r19, 0x02	; 2
     288:	30 93 c7 02 	sts	0x02C7, r19	; 0x8002c7 <twi_masterBuffer+0x1>
     28c:	20 93 c6 02 	sts	0x02C6, r18	; 0x8002c6 <twi_masterBuffer>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:294
  twi_masterBufferIndex = 0;
     290:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <twi_masterBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:295
  twi_masterBufferLength = length;
     294:	90 93 c4 02 	sts	0x02C4, r25	; 0x8002c4 <twi_masterBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:298

  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
     298:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <twi_slarw>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:299
  twi_slarw |= address << 1;
     29c:	90 91 c3 02 	lds	r25, 0x02C3	; 0x8002c3 <twi_slarw>
     2a0:	88 0f       	add	r24, r24
     2a2:	89 2b       	or	r24, r25
     2a4:	80 93 c3 02 	sts	0x02C3, r24	; 0x8002c3 <twi_slarw>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:304

  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
     2a8:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <twi_inRepStart>
     2ac:	81 30       	cpi	r24, 0x01	; 1
     2ae:	29 f5       	brne	.+74     	; 0x2fa <TwoWire::endTransmission() [clone .constprop.28]+0xa0>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:311
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // Remember, we're dealing with an ASYNC ISR
     2b0:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <twi_inRepStart>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:322
          return (5);
        }
      } while(TWCR & _BV(TWWC));
    #else
      do {
        TWDR = twi_slarw;
     2b4:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <twi_slarw>
     2b8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:323
      } while(TWCR & _BV(TWWC));
     2bc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     2c0:	83 fd       	sbrc	r24, 3
     2c2:	f8 cf       	rjmp	.-16     	; 0x2b4 <TwoWire::endTransmission() [clone .constprop.28]+0x5a>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:325
    #endif
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
     2c4:	85 ec       	ldi	r24, 0xC5	; 197
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:329
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
     2c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:341
        twi_handleTimeout(twi_do_reset_on_timeout);
        return (5);
      }
    }
  #else
    while(wait && (TWI_MTX == twi_state)){
     2ca:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <twi_state>
     2ce:	82 30       	cpi	r24, 0x02	; 2
     2d0:	e1 f3       	breq	.-8      	; 0x2ca <TwoWire::endTransmission() [clone .constprop.28]+0x70>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:346
      continue;
    }
  #endif

  if (twi_error == 0xFF)
     2d2:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <twi_error>
     2d6:	8f 3f       	cpi	r24, 0xFF	; 255
     2d8:	91 f0       	breq	.+36     	; 0x2fe <TwoWire::endTransmission() [clone .constprop.28]+0xa4>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:348
    return 0; // success
  else if (twi_error == TW_MT_SLA_NACK)
     2da:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <twi_error>
     2de:	80 32       	cpi	r24, 0x20	; 32
     2e0:	81 f0       	breq	.+32     	; 0x302 <TwoWire::endTransmission() [clone .constprop.28]+0xa8>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:350
    return 2; // error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
     2e2:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <twi_error>
     2e6:	80 33       	cpi	r24, 0x30	; 48
     2e8:	71 f0       	breq	.+28     	; 0x306 <TwoWire::endTransmission() [clone .constprop.28]+0xac>
endTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:353
    return 3; // error: data send, nack received
  else
    return 4; // other twi error
     2ea:	84 e0       	ldi	r24, 0x04	; 4
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:227
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     2ec:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <TwoWire::txBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:228
  txBufferLength = 0;
     2f0:	10 92 a1 02 	sts	0x02A1, r1	; 0x8002a1 <TwoWire::txBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:230
  // indicate that we are done transmitting
  transmitting = 0;
     2f4:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <TwoWire::transmitting>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:240
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
}
     2f8:	08 95       	ret
twi_writeTo():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:329
    #endif
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
     2fa:	85 ee       	ldi	r24, 0xE5	; 229
     2fc:	e4 cf       	rjmp	.-56     	; 0x2c6 <TwoWire::endTransmission() [clone .constprop.28]+0x6c>
endTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:347
      continue;
    }
  #endif

  if (twi_error == 0xFF)
    return 0; // success
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	f5 cf       	rjmp	.-22     	; 0x2ec <TwoWire::endTransmission() [clone .constprop.28]+0x92>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:349
  else if (twi_error == TW_MT_SLA_NACK)
    return 2; // error: address send, nack received
     302:	82 e0       	ldi	r24, 0x02	; 2
     304:	f3 cf       	rjmp	.-26     	; 0x2ec <TwoWire::endTransmission() [clone .constprop.28]+0x92>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:351
  else if (twi_error == TW_MT_DATA_NACK)
    return 3; // error: data send, nack received
     306:	83 e0       	ldi	r24, 0x03	; 3
     308:	f1 cf       	rjmp	.-30     	; 0x2ec <TwoWire::endTransmission() [clone .constprop.28]+0x92>

0000030a <digitalWrite>:
digitalWrite():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:189
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
  uint8_t timer = digitalPinToTimer(pin);
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	fc 01       	movw	r30, r24
     30e:	e6 55       	subi	r30, 0x56	; 86
     310:	ff 4f       	sbci	r31, 0xFF	; 255
     312:	24 91       	lpm	r18, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
     314:	fc 01       	movw	r30, r24
     316:	ed 56       	subi	r30, 0x6D	; 109
     318:	ff 4f       	sbci	r31, 0xFF	; 255
     31a:	34 91       	lpm	r19, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
     31c:	fc 01       	movw	r30, r24
     31e:	e4 58       	subi	r30, 0x84	; 132
     320:	ff 4f       	sbci	r31, 0xFF	; 255
     322:	e4 91       	lpm	r30, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     324:	ee 23       	and	r30, r30
     326:	c9 f0       	breq	.+50     	; 0x35a <digitalWrite+0x50>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     328:	22 23       	and	r18, r18
     32a:	39 f0       	breq	.+14     	; 0x33a <digitalWrite+0x30>
turnOffPWM():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
     32c:	24 30       	cpi	r18, 0x04	; 4
     32e:	01 f1       	breq	.+64     	; 0x370 <digitalWrite+0x66>
     330:	a8 f4       	brcc	.+42     	; 0x35c <digitalWrite+0x52>
     332:	22 30       	cpi	r18, 0x02	; 2
     334:	69 f1       	breq	.+90     	; 0x390 <digitalWrite+0x86>
     336:	23 30       	cpi	r18, 0x03	; 3
     338:	79 f1       	breq	.+94     	; 0x398 <digitalWrite+0x8e>
digitalWrite():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:200

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);

  out = portOutputRegister(port);
     33a:	f0 e0       	ldi	r31, 0x00	; 0
     33c:	ee 0f       	add	r30, r30
     33e:	ff 1f       	adc	r31, r31
     340:	ee 58       	subi	r30, 0x8E	; 142
     342:	ff 4f       	sbci	r31, 0xFF	; 255
     344:	a5 91       	lpm	r26, Z+
     346:	b4 91       	lpm	r27, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
     348:	8f b7       	in	r24, 0x3f	; 63
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:203
  cli();
     34a:	f8 94       	cli
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
     34c:	ec 91       	ld	r30, X
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
     34e:	61 11       	cpse	r22, r1
     350:	26 c0       	rjmp	.+76     	; 0x39e <digitalWrite+0x94>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
     352:	30 95       	com	r19
     354:	3e 23       	and	r19, r30
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
     356:	3c 93       	st	X, r19
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
     358:	8f bf       	out	0x3f, r24	; 63
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:212
}
     35a:	08 95       	ret
turnOffPWM():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
     35c:	28 30       	cpi	r18, 0x08	; 8
     35e:	71 f0       	breq	.+28     	; 0x37c <digitalWrite+0x72>
     360:	29 30       	cpi	r18, 0x09	; 9
     362:	91 f0       	breq	.+36     	; 0x388 <digitalWrite+0x7e>
     364:	25 30       	cpi	r18, 0x05	; 5
     366:	49 f7       	brne	.-46     	; 0x33a <digitalWrite+0x30>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     368:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     36c:	8f 7d       	andi	r24, 0xDF	; 223
     36e:	03 c0       	rjmp	.+6      	; 0x376 <digitalWrite+0x6c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:82
  switch (timer)
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
     370:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     374:	8f 77       	andi	r24, 0x7F	; 127
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     376:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     37a:	df cf       	rjmp	.-66     	; 0x33a <digitalWrite+0x30>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
     37c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     380:	8f 77       	andi	r24, 0x7F	; 127
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
     382:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     386:	d9 cf       	rjmp	.-78     	; 0x33a <digitalWrite+0x30>
     388:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     38c:	8f 7d       	andi	r24, 0xDF	; 223
     38e:	f9 cf       	rjmp	.-14     	; 0x382 <digitalWrite+0x78>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
     390:	84 b5       	in	r24, 0x24	; 36
     392:	8f 77       	andi	r24, 0x7F	; 127
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     394:	84 bd       	out	0x24, r24	; 36
     396:	d1 cf       	rjmp	.-94     	; 0x33a <digitalWrite+0x30>
     398:	84 b5       	in	r24, 0x24	; 36
     39a:	8f 7d       	andi	r24, 0xDF	; 223
     39c:	fb cf       	rjmp	.-10     	; 0x394 <digitalWrite+0x8a>
digitalWrite():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
     39e:	3e 2b       	or	r19, r30
     3a0:	da cf       	rjmp	.-76     	; 0x356 <digitalWrite+0x4c>

000003a2 <pinMode>:
pinMode():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     3a2:	cf 93       	push	r28
     3a4:	df 93       	push	r29
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	fc 01       	movw	r30, r24
     3aa:	ed 56       	subi	r30, 0x6D	; 109
     3ac:	ff 4f       	sbci	r31, 0xFF	; 255
     3ae:	24 91       	lpm	r18, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
     3b0:	84 58       	subi	r24, 0x84	; 132
     3b2:	9f 4f       	sbci	r25, 0xFF	; 255
     3b4:	fc 01       	movw	r30, r24
     3b6:	84 91       	lpm	r24, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     3b8:	88 23       	and	r24, r24
     3ba:	d1 f0       	breq	.+52     	; 0x3f0 <pinMode+0x4e>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	88 0f       	add	r24, r24
     3c0:	99 1f       	adc	r25, r25
     3c2:	fc 01       	movw	r30, r24
     3c4:	e8 59       	subi	r30, 0x98	; 152
     3c6:	ff 4f       	sbci	r31, 0xFF	; 255
     3c8:	a5 91       	lpm	r26, Z+
     3ca:	b4 91       	lpm	r27, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
     3cc:	fc 01       	movw	r30, r24
     3ce:	ee 58       	subi	r30, 0x8E	; 142
     3d0:	ff 4f       	sbci	r31, 0xFF	; 255
     3d2:	c5 91       	lpm	r28, Z+
     3d4:	d4 91       	lpm	r29, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
     3d6:	61 11       	cpse	r22, r1
     3d8:	0e c0       	rjmp	.+28     	; 0x3f6 <pinMode+0x54>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
     3da:	9f b7       	in	r25, 0x3f	; 63
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:43
    cli();
     3dc:	f8 94       	cli
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
     3de:	8c 91       	ld	r24, X
     3e0:	e2 2f       	mov	r30, r18
     3e2:	e0 95       	com	r30
     3e4:	8e 23       	and	r24, r30
     3e6:	8c 93       	st	X, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
     3e8:	28 81       	ld	r18, Y
     3ea:	e2 23       	and	r30, r18
     3ec:	e8 83       	st	Y, r30
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:46
    SREG = oldSREG;
     3ee:	9f bf       	out	0x3f, r25	; 63
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
     3f0:	df 91       	pop	r29
     3f2:	cf 91       	pop	r28
     3f4:	08 95       	ret
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:54
    cli();
    *reg &= ~bit;
    *out |= bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     3f6:	8f b7       	in	r24, 0x3f	; 63
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:55
    cli();
     3f8:	f8 94       	cli
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
     3fa:	ec 91       	ld	r30, X
     3fc:	e2 2b       	or	r30, r18
     3fe:	ec 93       	st	X, r30
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
     400:	8f bf       	out	0x3f, r24	; 63
     402:	f6 cf       	rjmp	.-20     	; 0x3f0 <pinMode+0x4e>

00000404 <delayMicroseconds>:
delayMicroseconds():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:619
  us -= 7; // = 2 cycles

#elif F_CPU >= 16000000L
  // for a one-microsecond delay, simply return.  the overhead
  // of the function call takes 14 (16) cycles, which is 1 us
  if (us <= 1) return; //  = 3 cycles, (4 when true)
     404:	81 30       	cpi	r24, 0x01	; 1
     406:	91 05       	cpc	r25, r1
     408:	39 f0       	breq	.+14     	; 0x418 <delayMicroseconds+0x14>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:624

  // the following loop takes 1/4 of a microsecond (4 cycles)
  // per iteration, so execute it four times for each microsecond of
  // delay requested.
  us <<= 2; // x4 us, = 4 cycles
     40a:	88 0f       	add	r24, r24
     40c:	99 1f       	adc	r25, r25
     40e:	88 0f       	add	r24, r24
     410:	99 1f       	adc	r25, r25
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:629

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // to 2nd us is at least 8 so we can substract 5
  us -= 5; // = 2 cycles,
     412:	05 97       	sbiw	r24, 0x05	; 5
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
     414:	01 97       	sbiw	r24, 0x01	; 1
     416:	f1 f7       	brne	.-4      	; 0x414 <delayMicroseconds+0x10>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
     418:	08 95       	ret

0000041a <micros>:
micros():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
     41a:	3f b7       	in	r19, 0x3f	; 63
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
     41c:	f8 94       	cli
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
     41e:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <timer0_overflow_count>
     422:	90 91 78 02 	lds	r25, 0x0278	; 0x800278 <timer0_overflow_count+0x1>
     426:	a0 91 79 02 	lds	r26, 0x0279	; 0x800279 <timer0_overflow_count+0x2>
     42a:	b0 91 7a 02 	lds	r27, 0x027A	; 0x80027a <timer0_overflow_count+0x3>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
     42e:	26 b5       	in	r18, 0x26	; 38
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
     430:	a8 9b       	sbis	0x15, 0	; 21
     432:	05 c0       	rjmp	.+10     	; 0x43e <micros+0x24>
     434:	2f 3f       	cpi	r18, 0xFF	; 255
     436:	19 f0       	breq	.+6      	; 0x43e <micros+0x24>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
     438:	01 96       	adiw	r24, 0x01	; 1
     43a:	a1 1d       	adc	r26, r1
     43c:	b1 1d       	adc	r27, r1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
     43e:	3f bf       	out	0x3f, r19	; 63
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
     440:	ba 2f       	mov	r27, r26
     442:	a9 2f       	mov	r26, r25
     444:	98 2f       	mov	r25, r24
     446:	88 27       	eor	r24, r24
     448:	bc 01       	movw	r22, r24
     44a:	cd 01       	movw	r24, r26
     44c:	62 0f       	add	r22, r18
     44e:	71 1d       	adc	r23, r1
     450:	81 1d       	adc	r24, r1
     452:	91 1d       	adc	r25, r1
     454:	42 e0       	ldi	r20, 0x02	; 2
     456:	66 0f       	add	r22, r22
     458:	77 1f       	adc	r23, r23
     45a:	88 1f       	adc	r24, r24
     45c:	99 1f       	adc	r25, r25
     45e:	4a 95       	dec	r20
     460:	d1 f7       	brne	.-12     	; 0x456 <micros+0x3c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
     462:	08 95       	ret

00000464 <delay>:
delay():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
     464:	8f 92       	push	r8
     466:	9f 92       	push	r9
     468:	af 92       	push	r10
     46a:	bf 92       	push	r11
     46c:	cf 92       	push	r12
     46e:	df 92       	push	r13
     470:	ef 92       	push	r14
     472:	ff 92       	push	r15
     474:	4b 01       	movw	r8, r22
     476:	5c 01       	movw	r10, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
     478:	0e 94 0d 02 	call	0x41a	; 0x41a <micros>
     47c:	6b 01       	movw	r12, r22
     47e:	7c 01       	movw	r14, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:401

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     480:	0e 94 0d 02 	call	0x41a	; 0x41a <micros>
     484:	6c 19       	sub	r22, r12
     486:	7d 09       	sbc	r23, r13
     488:	8e 09       	sbc	r24, r14
     48a:	9f 09       	sbc	r25, r15
     48c:	68 3e       	cpi	r22, 0xE8	; 232
     48e:	73 40       	sbci	r23, 0x03	; 3
     490:	81 05       	cpc	r24, r1
     492:	91 05       	cpc	r25, r1
     494:	a8 f3       	brcs	.-22     	; 0x480 <delay+0x1c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:402
      ms--;
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	82 1a       	sub	r8, r18
     49a:	91 08       	sbc	r9, r1
     49c:	a1 08       	sbc	r10, r1
     49e:	b1 08       	sbc	r11, r1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:403
      start += 1000UL;
     4a0:	88 ee       	ldi	r24, 0xE8	; 232
     4a2:	c8 0e       	add	r12, r24
     4a4:	83 e0       	ldi	r24, 0x03	; 3
     4a6:	d8 1e       	adc	r13, r24
     4a8:	e1 1c       	adc	r14, r1
     4aa:	f1 1c       	adc	r15, r1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     4ac:	81 14       	cp	r8, r1
     4ae:	91 04       	cpc	r9, r1
     4b0:	a1 04       	cpc	r10, r1
     4b2:	b1 04       	cpc	r11, r1
     4b4:	29 f7       	brne	.-54     	; 0x480 <delay+0x1c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
     4b6:	ff 90       	pop	r15
     4b8:	ef 90       	pop	r14
     4ba:	df 90       	pop	r13
     4bc:	cf 90       	pop	r12
     4be:	bf 90       	pop	r11
     4c0:	af 90       	pop	r10
     4c2:	9f 90       	pop	r9
     4c4:	8f 90       	pop	r8
     4c6:	08 95       	ret

000004c8 <interrupt_hundler()>:
interrupt_hundler():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:41
#ifdef ESP8266    // if the controller is ESP8266, add IRAM_ATTR.
  IRAM_ATTR 
#endif
void interrupt_hundler()
{
   data_from_device = true;
     4c8:	81 e0       	ldi	r24, 0x01	; 1
     4ca:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <_ZL16data_from_device.lto_priv.51>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:42
}
     4ce:	08 95       	ret

000004d0 <nothing>:
nothing():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WInterrupts.c:36

#include "wiring_private.h"

static void nothing(void)
{
}
     4d0:	08 95       	ret

000004d2 <Print::write(unsigned char const*, unsigned int)>:
write():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     4d2:	af 92       	push	r10
     4d4:	bf 92       	push	r11
     4d6:	cf 92       	push	r12
     4d8:	df 92       	push	r13
     4da:	ef 92       	push	r14
     4dc:	ff 92       	push	r15
     4de:	0f 93       	push	r16
     4e0:	1f 93       	push	r17
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
     4e6:	6c 01       	movw	r12, r24
     4e8:	7b 01       	movw	r14, r22
     4ea:	8b 01       	movw	r16, r22
     4ec:	04 0f       	add	r16, r20
     4ee:	15 1f       	adc	r17, r21
     4f0:	eb 01       	movw	r28, r22
     4f2:	5e 01       	movw	r10, r28
     4f4:	ae 18       	sub	r10, r14
     4f6:	bf 08       	sbc	r11, r15
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
     4f8:	c0 17       	cp	r28, r16
     4fa:	d1 07       	cpc	r29, r17
     4fc:	59 f0       	breq	.+22     	; 0x514 <Print::write(unsigned char const*, unsigned int)+0x42>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
     4fe:	69 91       	ld	r22, Y+
     500:	d6 01       	movw	r26, r12
     502:	ed 91       	ld	r30, X+
     504:	fc 91       	ld	r31, X
     506:	01 90       	ld	r0, Z+
     508:	f0 81       	ld	r31, Z
     50a:	e0 2d       	mov	r30, r0
     50c:	c6 01       	movw	r24, r12
     50e:	09 95       	icall
     510:	89 2b       	or	r24, r25
     512:	79 f7       	brne	.-34     	; 0x4f2 <Print::write(unsigned char const*, unsigned int)+0x20>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
     514:	c5 01       	movw	r24, r10
     516:	df 91       	pop	r29
     518:	cf 91       	pop	r28
     51a:	1f 91       	pop	r17
     51c:	0f 91       	pop	r16
     51e:	ff 90       	pop	r15
     520:	ef 90       	pop	r14
     522:	df 90       	pop	r13
     524:	cf 90       	pop	r12
     526:	bf 90       	pop	r11
     528:	af 90       	pop	r10
     52a:	08 95       	ret

0000052c <LiquidCrystal::pulseEnable()>:
pulseEnable():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:303
    write4bits(value>>4);
    write4bits(value);
  }
}

void LiquidCrystal::pulseEnable(void) {
     52c:	cf 93       	push	r28
     52e:	df 93       	push	r29
     530:	ec 01       	movw	r28, r24
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:304
  digitalWrite(_enable_pin, LOW);
     532:	60 e0       	ldi	r22, 0x00	; 0
     534:	8e 81       	ldd	r24, Y+6	; 0x06
     536:	0e 94 85 01 	call	0x30a	; 0x30a <digitalWrite>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:305
  delayMicroseconds(1);    
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	0e 94 02 02 	call	0x404	; 0x404 <delayMicroseconds>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:306
  digitalWrite(_enable_pin, HIGH);
     542:	61 e0       	ldi	r22, 0x01	; 1
     544:	8e 81       	ldd	r24, Y+6	; 0x06
     546:	0e 94 85 01 	call	0x30a	; 0x30a <digitalWrite>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:307
  delayMicroseconds(1);    // enable pulse must be >450ns
     54a:	81 e0       	ldi	r24, 0x01	; 1
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	0e 94 02 02 	call	0x404	; 0x404 <delayMicroseconds>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:308
  digitalWrite(_enable_pin, LOW);
     552:	60 e0       	ldi	r22, 0x00	; 0
     554:	8e 81       	ldd	r24, Y+6	; 0x06
     556:	0e 94 85 01 	call	0x30a	; 0x30a <digitalWrite>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:309
  delayMicroseconds(100);   // commands need > 37us to settle
     55a:	84 e6       	ldi	r24, 0x64	; 100
     55c:	90 e0       	ldi	r25, 0x00	; 0
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:310
}
     55e:	df 91       	pop	r29
     560:	cf 91       	pop	r28
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:309
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(1);    
  digitalWrite(_enable_pin, HIGH);
  delayMicroseconds(1);    // enable pulse must be >450ns
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(100);   // commands need > 37us to settle
     562:	0c 94 02 02 	jmp	0x404	; 0x404 <delayMicroseconds>

00000566 <LiquidCrystal::write4bits(unsigned char)>:
write4bits():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:312
}

void LiquidCrystal::write4bits(uint8_t value) {
     566:	cf 92       	push	r12
     568:	df 92       	push	r13
     56a:	ef 92       	push	r14
     56c:	ff 92       	push	r15
     56e:	0f 93       	push	r16
     570:	1f 93       	push	r17
     572:	cf 93       	push	r28
     574:	df 93       	push	r29
     576:	6c 01       	movw	r12, r24
     578:	7c 01       	movw	r14, r24
     57a:	87 e0       	ldi	r24, 0x07	; 7
     57c:	e8 0e       	add	r14, r24
     57e:	f1 1c       	adc	r15, r1
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:313
  for (int i = 0; i < 4; i++) {
     580:	d0 e0       	ldi	r29, 0x00	; 0
     582:	c0 e0       	ldi	r28, 0x00	; 0
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:314
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
     584:	06 2f       	mov	r16, r22
     586:	10 e0       	ldi	r17, 0x00	; 0
     588:	b8 01       	movw	r22, r16
     58a:	0c 2e       	mov	r0, r28
     58c:	02 c0       	rjmp	.+4      	; 0x592 <LiquidCrystal::write4bits(unsigned char)+0x2c>
     58e:	75 95       	asr	r23
     590:	67 95       	ror	r22
     592:	0a 94       	dec	r0
     594:	e2 f7       	brpl	.-8      	; 0x58e <LiquidCrystal::write4bits(unsigned char)+0x28>
     596:	61 70       	andi	r22, 0x01	; 1
     598:	f7 01       	movw	r30, r14
     59a:	81 91       	ld	r24, Z+
     59c:	7f 01       	movw	r14, r30
     59e:	0e 94 85 01 	call	0x30a	; 0x30a <digitalWrite>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:313
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(100);   // commands need > 37us to settle
}

void LiquidCrystal::write4bits(uint8_t value) {
  for (int i = 0; i < 4; i++) {
     5a2:	21 96       	adiw	r28, 0x01	; 1
     5a4:	c4 30       	cpi	r28, 0x04	; 4
     5a6:	d1 05       	cpc	r29, r1
     5a8:	79 f7       	brne	.-34     	; 0x588 <LiquidCrystal::write4bits(unsigned char)+0x22>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:317
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }

  pulseEnable();
     5aa:	c6 01       	movw	r24, r12
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:318
}
     5ac:	df 91       	pop	r29
     5ae:	cf 91       	pop	r28
     5b0:	1f 91       	pop	r17
     5b2:	0f 91       	pop	r16
     5b4:	ff 90       	pop	r15
     5b6:	ef 90       	pop	r14
     5b8:	df 90       	pop	r13
     5ba:	cf 90       	pop	r12
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:317
void LiquidCrystal::write4bits(uint8_t value) {
  for (int i = 0; i < 4; i++) {
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }

  pulseEnable();
     5bc:	0c 94 96 02 	jmp	0x52c	; 0x52c <LiquidCrystal::pulseEnable()>

000005c0 <LiquidCrystal::send(unsigned char, unsigned char)>:
send():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:287
}

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void LiquidCrystal::send(uint8_t value, uint8_t mode) {
     5c0:	cf 92       	push	r12
     5c2:	df 92       	push	r13
     5c4:	ef 92       	push	r14
     5c6:	ff 92       	push	r15
     5c8:	0f 93       	push	r16
     5ca:	1f 93       	push	r17
     5cc:	cf 93       	push	r28
     5ce:	df 93       	push	r29
     5d0:	ec 01       	movw	r28, r24
     5d2:	f6 2e       	mov	r15, r22
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:288
  digitalWrite(_rs_pin, mode);
     5d4:	64 2f       	mov	r22, r20
     5d6:	8c 81       	ldd	r24, Y+4	; 0x04
     5d8:	0e 94 85 01 	call	0x30a	; 0x30a <digitalWrite>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:291

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
     5dc:	8d 81       	ldd	r24, Y+5	; 0x05
     5de:	8f 3f       	cpi	r24, 0xFF	; 255
     5e0:	19 f0       	breq	.+6      	; 0x5e8 <LiquidCrystal::send(unsigned char, unsigned char)+0x28>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:292
    digitalWrite(_rw_pin, LOW);
     5e2:	60 e0       	ldi	r22, 0x00	; 0
     5e4:	0e 94 85 01 	call	0x30a	; 0x30a <digitalWrite>
     5e8:	0f 2d       	mov	r16, r15
     5ea:	10 e0       	ldi	r17, 0x00	; 0
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:295
  }
  
  if (_displayfunction & LCD_8BITMODE) {
     5ec:	8f 85       	ldd	r24, Y+15	; 0x0f
     5ee:	84 ff       	sbrs	r24, 4
     5f0:	25 c0       	rjmp	.+74     	; 0x63c <LiquidCrystal::send(unsigned char, unsigned char)+0x7c>
     5f2:	6e 01       	movw	r12, r28
     5f4:	87 e0       	ldi	r24, 0x07	; 7
     5f6:	c8 0e       	add	r12, r24
     5f8:	d1 1c       	adc	r13, r1
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:321

  pulseEnable();
}

void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
     5fa:	f1 2c       	mov	r15, r1
     5fc:	e1 2c       	mov	r14, r1
write8bits():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:322
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
     5fe:	b8 01       	movw	r22, r16
     600:	0e 2c       	mov	r0, r14
     602:	02 c0       	rjmp	.+4      	; 0x608 <LiquidCrystal::send(unsigned char, unsigned char)+0x48>
     604:	75 95       	asr	r23
     606:	67 95       	ror	r22
     608:	0a 94       	dec	r0
     60a:	e2 f7       	brpl	.-8      	; 0x604 <LiquidCrystal::send(unsigned char, unsigned char)+0x44>
     60c:	61 70       	andi	r22, 0x01	; 1
     60e:	f6 01       	movw	r30, r12
     610:	81 91       	ld	r24, Z+
     612:	6f 01       	movw	r12, r30
     614:	0e 94 85 01 	call	0x30a	; 0x30a <digitalWrite>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:321

  pulseEnable();
}

void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
     618:	ff ef       	ldi	r31, 0xFF	; 255
     61a:	ef 1a       	sub	r14, r31
     61c:	ff 0a       	sbc	r15, r31
     61e:	88 e0       	ldi	r24, 0x08	; 8
     620:	e8 16       	cp	r14, r24
     622:	f1 04       	cpc	r15, r1
     624:	61 f7       	brne	.-40     	; 0x5fe <LiquidCrystal::send(unsigned char, unsigned char)+0x3e>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:325
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }
  
  pulseEnable();
     626:	ce 01       	movw	r24, r28
send():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:301
    write8bits(value); 
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
     628:	df 91       	pop	r29
     62a:	cf 91       	pop	r28
     62c:	1f 91       	pop	r17
     62e:	0f 91       	pop	r16
     630:	ff 90       	pop	r15
     632:	ef 90       	pop	r14
     634:	df 90       	pop	r13
     636:	cf 90       	pop	r12
write8bits():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:325
void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }
  
  pulseEnable();
     638:	0c 94 96 02 	jmp	0x52c	; 0x52c <LiquidCrystal::pulseEnable()>
send():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:298
  }
  
  if (_displayfunction & LCD_8BITMODE) {
    write8bits(value); 
  } else {
    write4bits(value>>4);
     63c:	b8 01       	movw	r22, r16
     63e:	84 e0       	ldi	r24, 0x04	; 4
     640:	75 95       	asr	r23
     642:	67 95       	ror	r22
     644:	8a 95       	dec	r24
     646:	e1 f7       	brne	.-8      	; 0x640 <LiquidCrystal::send(unsigned char, unsigned char)+0x80>
     648:	ce 01       	movw	r24, r28
     64a:	0e 94 b3 02 	call	0x566	; 0x566 <LiquidCrystal::write4bits(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:299
    write4bits(value);
     64e:	6f 2d       	mov	r22, r15
     650:	ce 01       	movw	r24, r28
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:301
  }
}
     652:	df 91       	pop	r29
     654:	cf 91       	pop	r28
     656:	1f 91       	pop	r17
     658:	0f 91       	pop	r16
     65a:	ff 90       	pop	r15
     65c:	ef 90       	pop	r14
     65e:	df 90       	pop	r13
     660:	cf 90       	pop	r12
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:299
  
  if (_displayfunction & LCD_8BITMODE) {
    write8bits(value); 
  } else {
    write4bits(value>>4);
    write4bits(value);
     662:	0c 94 b3 02 	jmp	0x566	; 0x566 <LiquidCrystal::write4bits(unsigned char)>

00000666 <LiquidCrystal::command(unsigned char) [clone .constprop.46]>:
command():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:276
}

/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
     666:	40 e0       	ldi	r20, 0x00	; 0
     668:	68 2f       	mov	r22, r24
     66a:	8b e0       	ldi	r24, 0x0B	; 11
     66c:	93 e0       	ldi	r25, 0x03	; 3
     66e:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <LiquidCrystal::send(unsigned char, unsigned char)>

00000672 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.43]>:
begin():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:78
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
  
  begin(16, 1);  
}

void LiquidCrystal::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
     672:	cf 93       	push	r28
     674:	df 93       	push	r29
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:79
  if (lines > 1) {
     676:	82 30       	cpi	r24, 0x02	; 2
     678:	29 f4       	brne	.+10     	; 0x684 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.43]+0x12>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:80
    _displayfunction |= LCD_2LINE;
     67a:	90 91 1a 03 	lds	r25, 0x031A	; 0x80031a <display+0xf>
     67e:	98 60       	ori	r25, 0x08	; 8
     680:	90 93 1a 03 	sts	0x031A, r25	; 0x80031a <display+0xf>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:82
  }
  _numlines = lines;
     684:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <display+0x13>
setRowOffsets():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:169

}

void LiquidCrystal::setRowOffsets(int row0, int row1, int row2, int row3)
{
  _row_offsets[0] = row0;
     688:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <display+0x14>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:170
  _row_offsets[1] = row1;
     68c:	80 e4       	ldi	r24, 0x40	; 64
     68e:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <display+0x15>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:171
  _row_offsets[2] = row2;
     692:	80 e1       	ldi	r24, 0x10	; 16
     694:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <display+0x16>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:172
  _row_offsets[3] = row3;
     698:	80 e5       	ldi	r24, 0x50	; 80
     69a:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <display+0x17>
begin():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:91
  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
    _displayfunction |= LCD_5x10DOTS;
  }

  pinMode(_rs_pin, OUTPUT);
     69e:	61 e0       	ldi	r22, 0x01	; 1
     6a0:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <display+0x4>
     6a4:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <pinMode>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:93
  // we can save 1 pin by not using RW. Indicate by passing 255 instead of pin#
  if (_rw_pin != 255) { 
     6a8:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <display+0x5>
     6ac:	8f 3f       	cpi	r24, 0xFF	; 255
     6ae:	19 f0       	breq	.+6      	; 0x6b6 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.43]+0x44>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:94
    pinMode(_rw_pin, OUTPUT);
     6b0:	61 e0       	ldi	r22, 0x01	; 1
     6b2:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <pinMode>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:96
  }
  pinMode(_enable_pin, OUTPUT);
     6b6:	61 e0       	ldi	r22, 0x01	; 1
     6b8:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <display+0x6>
     6bc:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <pinMode>
     6c0:	cb e0       	ldi	r28, 0x0B	; 11
     6c2:	d3 e0       	ldi	r29, 0x03	; 3
     6c4:	9e 01       	movw	r18, r28
     6c6:	2b 50       	subi	r18, 0x0B	; 11
     6c8:	33 40       	sbci	r19, 0x03	; 3
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:99
  
  // Do these once, instead of every time a character is drawn for speed reasons.
  for (int i=0; i<((_displayfunction & LCD_8BITMODE) ? 8 : 4); ++i)
     6ca:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <display+0xf>
     6ce:	84 fd       	sbrc	r24, 4
     6d0:	0b c0       	rjmp	.+22     	; 0x6e8 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.43]+0x76>
     6d2:	84 e0       	ldi	r24, 0x04	; 4
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	21 96       	adiw	r28, 0x01	; 1
     6d8:	28 17       	cp	r18, r24
     6da:	39 07       	cpc	r19, r25
     6dc:	44 f4       	brge	.+16     	; 0x6ee <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.43]+0x7c>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:101
  {
    pinMode(_data_pins[i], OUTPUT);
     6de:	61 e0       	ldi	r22, 0x01	; 1
     6e0:	8e 81       	ldd	r24, Y+6	; 0x06
     6e2:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <pinMode>
     6e6:	ee cf       	rjmp	.-36     	; 0x6c4 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.43]+0x52>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:99
    pinMode(_rw_pin, OUTPUT);
  }
  pinMode(_enable_pin, OUTPUT);
  
  // Do these once, instead of every time a character is drawn for speed reasons.
  for (int i=0; i<((_displayfunction & LCD_8BITMODE) ? 8 : 4); ++i)
     6e8:	88 e0       	ldi	r24, 0x08	; 8
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	f4 cf       	rjmp	.-24     	; 0x6d6 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.43]+0x64>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:107
   } 

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // before sending commands. Arduino can turn on way before 4.5V so we'll wait 50
  delayMicroseconds(50000); 
     6ee:	80 e5       	ldi	r24, 0x50	; 80
     6f0:	93 ec       	ldi	r25, 0xC3	; 195
     6f2:	0e 94 02 02 	call	0x404	; 0x404 <delayMicroseconds>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:109
  // Now we pull both RS and R/W low to begin commands
  digitalWrite(_rs_pin, LOW);
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <display+0x4>
     6fc:	0e 94 85 01 	call	0x30a	; 0x30a <digitalWrite>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:110
  digitalWrite(_enable_pin, LOW);
     700:	60 e0       	ldi	r22, 0x00	; 0
     702:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <display+0x6>
     706:	0e 94 85 01 	call	0x30a	; 0x30a <digitalWrite>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:111
  if (_rw_pin != 255) { 
     70a:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <display+0x5>
     70e:	8f 3f       	cpi	r24, 0xFF	; 255
     710:	19 f0       	breq	.+6      	; 0x718 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.43]+0xa6>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:112
    digitalWrite(_rw_pin, LOW);
     712:	60 e0       	ldi	r22, 0x00	; 0
     714:	0e 94 85 01 	call	0x30a	; 0x30a <digitalWrite>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:116
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
     718:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <display+0xf>
     71c:	84 fd       	sbrc	r24, 4
     71e:	3a c0       	rjmp	.+116    	; 0x794 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.43]+0x122>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:121
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
     720:	63 e0       	ldi	r22, 0x03	; 3
     722:	8b e0       	ldi	r24, 0x0B	; 11
     724:	93 e0       	ldi	r25, 0x03	; 3
     726:	0e 94 b3 02 	call	0x566	; 0x566 <LiquidCrystal::write4bits(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:122
    delayMicroseconds(4500); // wait min 4.1ms
     72a:	84 e9       	ldi	r24, 0x94	; 148
     72c:	91 e1       	ldi	r25, 0x11	; 17
     72e:	0e 94 02 02 	call	0x404	; 0x404 <delayMicroseconds>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:125

    // second try
    write4bits(0x03);
     732:	63 e0       	ldi	r22, 0x03	; 3
     734:	8b e0       	ldi	r24, 0x0B	; 11
     736:	93 e0       	ldi	r25, 0x03	; 3
     738:	0e 94 b3 02 	call	0x566	; 0x566 <LiquidCrystal::write4bits(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:126
    delayMicroseconds(4500); // wait min 4.1ms
     73c:	84 e9       	ldi	r24, 0x94	; 148
     73e:	91 e1       	ldi	r25, 0x11	; 17
     740:	0e 94 02 02 	call	0x404	; 0x404 <delayMicroseconds>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:129
    
    // third go!
    write4bits(0x03); 
     744:	63 e0       	ldi	r22, 0x03	; 3
     746:	8b e0       	ldi	r24, 0x0B	; 11
     748:	93 e0       	ldi	r25, 0x03	; 3
     74a:	0e 94 b3 02 	call	0x566	; 0x566 <LiquidCrystal::write4bits(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:130
    delayMicroseconds(150);
     74e:	86 e9       	ldi	r24, 0x96	; 150
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	0e 94 02 02 	call	0x404	; 0x404 <delayMicroseconds>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:133

    // finally, set to 4-bit interface
    write4bits(0x02); 
     756:	62 e0       	ldi	r22, 0x02	; 2
     758:	8b e0       	ldi	r24, 0x0B	; 11
     75a:	93 e0       	ldi	r25, 0x03	; 3
     75c:	0e 94 b3 02 	call	0x566	; 0x566 <LiquidCrystal::write4bits(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:151
    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
     760:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <display+0xf>
     764:	80 62       	ori	r24, 0x20	; 32
     766:	0e 94 33 03 	call	0x666	; 0x666 <LiquidCrystal::command(unsigned char) [clone .constprop.46]>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:154

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
     76a:	84 e0       	ldi	r24, 0x04	; 4
     76c:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <display+0x10>
display():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:208
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void LiquidCrystal::display() {
  _displaycontrol |= LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
     770:	8c e0       	ldi	r24, 0x0C	; 12
     772:	0e 94 33 03 	call	0x666	; 0x666 <LiquidCrystal::command(unsigned char) [clone .constprop.46]>
clear():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:178
}

/********** high level commands, for the user! */
void LiquidCrystal::clear()
{
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	0e 94 33 03 	call	0x666	; 0x666 <LiquidCrystal::command(unsigned char) [clone .constprop.46]>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:179
  delayMicroseconds(2000);  // this command takes a long time!
     77c:	80 ed       	ldi	r24, 0xD0	; 208
     77e:	97 e0       	ldi	r25, 0x07	; 7
     780:	0e 94 02 02 	call	0x404	; 0x404 <delayMicroseconds>
begin():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:161

  // clear it off
  clear();

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
     784:	82 e0       	ldi	r24, 0x02	; 2
     786:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <display+0x11>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:163
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
     78a:	86 e0       	ldi	r24, 0x06	; 6
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:165

}
     78c:	df 91       	pop	r29
     78e:	cf 91       	pop	r28
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:163
  clear();

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
     790:	0c 94 33 03 	jmp	0x666	; 0x666 <LiquidCrystal::command(unsigned char) [clone .constprop.46]>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:139
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
     794:	80 62       	ori	r24, 0x20	; 32
     796:	0e 94 33 03 	call	0x666	; 0x666 <LiquidCrystal::command(unsigned char) [clone .constprop.46]>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:140
    delayMicroseconds(4500);  // wait more than 4.1ms
     79a:	84 e9       	ldi	r24, 0x94	; 148
     79c:	91 e1       	ldi	r25, 0x11	; 17
     79e:	0e 94 02 02 	call	0x404	; 0x404 <delayMicroseconds>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:143

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
     7a2:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <display+0xf>
     7a6:	80 62       	ori	r24, 0x20	; 32
     7a8:	0e 94 33 03 	call	0x666	; 0x666 <LiquidCrystal::command(unsigned char) [clone .constprop.46]>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:144
    delayMicroseconds(150);
     7ac:	86 e9       	ldi	r24, 0x96	; 150
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	0e 94 02 02 	call	0x404	; 0x404 <delayMicroseconds>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:147

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
     7b4:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <display+0xf>
     7b8:	80 62       	ori	r24, 0x20	; 32
     7ba:	0e 94 33 03 	call	0x666	; 0x666 <LiquidCrystal::command(unsigned char) [clone .constprop.46]>
     7be:	d0 cf       	rjmp	.-96     	; 0x760 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.43]+0xee>

000007c0 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.20]>:
setCursor():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:194
{
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
  if ( row >= max_lines ) {
    row = max_lines - 1;    // we count rows starting w/0
  }
  if ( row >= _numlines ) {
     7c0:	90 91 1e 03 	lds	r25, 0x031E	; 0x80031e <display+0x13>
     7c4:	69 17       	cp	r22, r25
     7c6:	10 f0       	brcs	.+4      	; 0x7cc <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.20]+0xc>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:195
    row = _numlines - 1;    // we count rows starting w/0
     7c8:	6f ef       	ldi	r22, 0xFF	; 255
     7ca:	69 0f       	add	r22, r25
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:198
  }
  
  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
     7cc:	e6 2f       	mov	r30, r22
     7ce:	f0 e0       	ldi	r31, 0x00	; 0
     7d0:	e5 5f       	subi	r30, 0xF5	; 245
     7d2:	fc 4f       	sbci	r31, 0xFC	; 252
     7d4:	94 89       	ldd	r25, Z+20	; 0x14
     7d6:	89 0f       	add	r24, r25
     7d8:	80 68       	ori	r24, 0x80	; 128
     7da:	0c 94 33 03 	jmp	0x666	; 0x666 <LiquidCrystal::command(unsigned char) [clone .constprop.46]>

000007de <LiquidCrystal::write(unsigned char)>:
write():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:280
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
     7de:	41 e0       	ldi	r20, 0x01	; 1
     7e0:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <LiquidCrystal::send(unsigned char, unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:282
  return 1; // assume sucess
}
     7e4:	81 e0       	ldi	r24, 0x01	; 1
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	08 95       	ret

000007ea <Print::flush()>:
flush():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.h:65

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     7ea:	08 95       	ret

000007ec <twi_stop>:
twi_stop():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:436
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     7ec:	85 ed       	ldi	r24, 0xD5	; 213
     7ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:456
          return;
        }
      }
    }
  #else
    while(TWCR & _BV(TWSTO)){
     7f2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     7f6:	84 fd       	sbrc	r24, 4
     7f8:	fc cf       	rjmp	.-8      	; 0x7f2 <twi_stop+0x6>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:462
      continue;
    }
  #endif

  // update twi state
  twi_state = TWI_READY;
     7fa:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <twi_state>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:463
}
     7fe:	08 95       	ret

00000800 <twi_transmit>:
twi_transmit():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:371
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
     800:	20 91 4f 02 	lds	r18, 0x024F	; 0x80024f <twi_txBufferLength>
     804:	26 0f       	add	r18, r22
     806:	33 27       	eor	r19, r19
     808:	33 1f       	adc	r19, r19
     80a:	21 32       	cpi	r18, 0x21	; 33
     80c:	31 05       	cpc	r19, r1
     80e:	ec f4       	brge	.+58     	; 0x84a <twi_transmit+0x4a>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:376
    return 1;
  }

  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
     810:	20 91 ca 02 	lds	r18, 0x02CA	; 0x8002ca <twi_state>
     814:	fc 01       	movw	r30, r24
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	80 e0       	ldi	r24, 0x00	; 0
     81a:	24 30       	cpi	r18, 0x04	; 4
     81c:	69 f0       	breq	.+26     	; 0x838 <twi_transmit+0x38>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:377
    return 2;
     81e:	82 e0       	ldi	r24, 0x02	; 2
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:387
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;

  return 0;
}
     820:	08 95       	ret
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:382
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    twi_txBuffer[twi_txBufferLength+i] = data[i];
     822:	a0 91 4f 02 	lds	r26, 0x024F	; 0x80024f <twi_txBufferLength>
     826:	21 91       	ld	r18, Z+
     828:	ac 01       	movw	r20, r24
     82a:	41 5d       	subi	r20, 0xD1	; 209
     82c:	5d 4f       	sbci	r21, 0xFD	; 253
     82e:	a4 0f       	add	r26, r20
     830:	b5 2f       	mov	r27, r21
     832:	b1 1d       	adc	r27, r1
     834:	2c 93       	st	X, r18
     836:	01 96       	adiw	r24, 0x01	; 1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:381
  if(TWI_STX != twi_state){
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
     838:	86 17       	cp	r24, r22
     83a:	98 f3       	brcs	.-26     	; 0x822 <twi_transmit+0x22>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:384
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
     83c:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <twi_txBufferLength>
     840:	68 0f       	add	r22, r24
     842:	60 93 4f 02 	sts	0x024F, r22	; 0x80024f <twi_txBufferLength>
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	08 95       	ret
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:372
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    return 1;
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	08 95       	ret

0000084e <TwoWire::flush()>:
flush():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:326
}

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
     84e:	08 95       	ret

00000850 <TwoWire::peek()>:
peek():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:316
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;

  if(rxBufferIndex < rxBufferLength){
     850:	e0 91 7d 02 	lds	r30, 0x027D	; 0x80027d <TwoWire::rxBufferIndex>
     854:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <TwoWire::rxBufferLength>
     858:	e8 17       	cp	r30, r24
     85a:	30 f4       	brcc	.+12     	; 0x868 <TwoWire::peek()+0x18>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:317
    value = rxBuffer[rxBufferIndex];
     85c:	f0 e0       	ldi	r31, 0x00	; 0
     85e:	ee 55       	subi	r30, 0x5E	; 94
     860:	fd 4f       	sbci	r31, 0xFD	; 253
     862:	80 81       	ld	r24, Z
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	08 95       	ret
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:314
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
     868:	8f ef       	ldi	r24, 0xFF	; 255
     86a:	9f ef       	ldi	r25, 0xFF	; 255
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:321
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
     86c:	08 95       	ret

0000086e <TwoWire::read()>:
read():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:301
int TwoWire::read(void)
{
  int value = -1;

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     86e:	90 91 7d 02 	lds	r25, 0x027D	; 0x80027d <TwoWire::rxBufferIndex>
     872:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <TwoWire::rxBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:298
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
     876:	2f ef       	ldi	r18, 0xFF	; 255
     878:	3f ef       	ldi	r19, 0xFF	; 255
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:301

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     87a:	98 17       	cp	r25, r24
     87c:	48 f4       	brcc	.+18     	; 0x890 <TwoWire::read()+0x22>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:302
    value = rxBuffer[rxBufferIndex];
     87e:	e9 2f       	mov	r30, r25
     880:	f0 e0       	ldi	r31, 0x00	; 0
     882:	ee 55       	subi	r30, 0x5E	; 94
     884:	fd 4f       	sbci	r31, 0xFD	; 253
     886:	20 81       	ld	r18, Z
     888:	30 e0       	ldi	r19, 0x00	; 0
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:303
    ++rxBufferIndex;
     88a:	9f 5f       	subi	r25, 0xFF	; 255
     88c:	90 93 7d 02 	sts	0x027D, r25	; 0x80027d <TwoWire::rxBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:307
  }

  return value;
}
     890:	c9 01       	movw	r24, r18
     892:	08 95       	ret

00000894 <TwoWire::available()>:
available():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:290
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
     894:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <TwoWire::rxBufferLength>
     898:	90 91 7d 02 	lds	r25, 0x027D	; 0x80027d <TwoWire::rxBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:291
}
     89c:	89 1b       	sub	r24, r25
     89e:	99 0b       	sbc	r25, r25
     8a0:	08 95       	ret

000008a2 <TwoWire::write(unsigned char const*, unsigned int)>:
write():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:271

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
     8a2:	cf 92       	push	r12
     8a4:	df 92       	push	r13
     8a6:	ef 92       	push	r14
     8a8:	ff 92       	push	r15
     8aa:	0f 93       	push	r16
     8ac:	1f 93       	push	r17
     8ae:	cf 93       	push	r28
     8b0:	df 93       	push	r29
     8b2:	7c 01       	movw	r14, r24
     8b4:	cb 01       	movw	r24, r22
     8b6:	8a 01       	movw	r16, r20
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:272
  if(transmitting){
     8b8:	20 91 7e 02 	lds	r18, 0x027E	; 0x80027e <TwoWire::transmitting>
     8bc:	22 23       	and	r18, r18
     8be:	89 f0       	breq	.+34     	; 0x8e2 <TwoWire::write(unsigned char const*, unsigned int)+0x40>
     8c0:	eb 01       	movw	r28, r22
     8c2:	6b 01       	movw	r12, r22
     8c4:	c4 0e       	add	r12, r20
     8c6:	d5 1e       	adc	r13, r21
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:274
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
     8c8:	cc 15       	cp	r28, r12
     8ca:	dd 05       	cpc	r29, r13
     8cc:	69 f0       	breq	.+26     	; 0x8e8 <TwoWire::write(unsigned char const*, unsigned int)+0x46>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:275
      write(data[i]);
     8ce:	69 91       	ld	r22, Y+
     8d0:	d7 01       	movw	r26, r14
     8d2:	ed 91       	ld	r30, X+
     8d4:	fc 91       	ld	r31, X
     8d6:	01 90       	ld	r0, Z+
     8d8:	f0 81       	ld	r31, Z
     8da:	e0 2d       	mov	r30, r0
     8dc:	c7 01       	movw	r24, r14
     8de:	09 95       	icall
     8e0:	f3 cf       	rjmp	.-26     	; 0x8c8 <TwoWire::write(unsigned char const*, unsigned int)+0x26>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:280
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
     8e2:	64 2f       	mov	r22, r20
     8e4:	0e 94 00 04 	call	0x800	; 0x800 <twi_transmit>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:283
  }
  return quantity;
}
     8e8:	c8 01       	movw	r24, r16
     8ea:	df 91       	pop	r29
     8ec:	cf 91       	pop	r28
     8ee:	1f 91       	pop	r17
     8f0:	0f 91       	pop	r16
     8f2:	ff 90       	pop	r15
     8f4:	ef 90       	pop	r14
     8f6:	df 90       	pop	r13
     8f8:	cf 90       	pop	r12
     8fa:	08 95       	ret

000008fc <TwoWire::write(unsigned char)>:
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:246

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
     8fc:	cf 93       	push	r28
     8fe:	df 93       	push	r29
     900:	1f 92       	push	r1
     902:	cd b7       	in	r28, 0x3d	; 61
     904:	de b7       	in	r29, 0x3e	; 62
     906:	69 83       	std	Y+1, r22	; 0x01
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:247
  if(transmitting){
     908:	20 91 7e 02 	lds	r18, 0x027E	; 0x80027e <TwoWire::transmitting>
     90c:	22 23       	and	r18, r18
     90e:	f9 f0       	breq	.+62     	; 0x94e <__stack+0x4f>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:250
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= TWI_BUFFER_SIZE){
     910:	20 91 a1 02 	lds	r18, 0x02A1	; 0x8002a1 <TwoWire::txBufferLength>
     914:	20 32       	cpi	r18, 0x20	; 32
     916:	58 f0       	brcs	.+22     	; 0x92e <__stack+0x2f>
_ZN5Print13setWriteErrorEi():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.h:44
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
     918:	21 e0       	ldi	r18, 0x01	; 1
     91a:	30 e0       	ldi	r19, 0x00	; 0
     91c:	fc 01       	movw	r30, r24
     91e:	33 83       	std	Z+3, r19	; 0x03
     920:	22 83       	std	Z+2, r18	; 0x02
write():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:252
      setWriteError();
      return 0;
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	80 e0       	ldi	r24, 0x00	; 0
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:265
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
}
     926:	0f 90       	pop	r0
     928:	df 91       	pop	r29
     92a:	cf 91       	pop	r28
     92c:	08 95       	ret
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:255
    if(txBufferLength >= TWI_BUFFER_SIZE){
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
     92e:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <TwoWire::txBufferIndex>
     932:	e8 2f       	mov	r30, r24
     934:	f0 e0       	ldi	r31, 0x00	; 0
     936:	e0 58       	subi	r30, 0x80	; 128
     938:	fd 4f       	sbci	r31, 0xFD	; 253
     93a:	99 81       	ldd	r25, Y+1	; 0x01
     93c:	90 83       	st	Z, r25
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:256
    ++txBufferIndex;
     93e:	8f 5f       	subi	r24, 0xFF	; 255
     940:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <TwoWire::txBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:258
    // update amount in buffer
    txBufferLength = txBufferIndex;
     944:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <TwoWire::txBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:264
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
     948:	81 e0       	ldi	r24, 0x01	; 1
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	ec cf       	rjmp	.-40     	; 0x926 <__stack+0x27>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:262
    // update amount in buffer
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
     94e:	61 e0       	ldi	r22, 0x01	; 1
     950:	ce 01       	movw	r24, r28
     952:	01 96       	adiw	r24, 0x01	; 1
     954:	0e 94 00 04 	call	0x800	; 0x800 <twi_transmit>
     958:	f7 cf       	rjmp	.-18     	; 0x948 <__stack+0x49>

0000095a <TwoWire::write(int) [clone .constprop.27]>:
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.h:87
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     95a:	68 2f       	mov	r22, r24
     95c:	8b ec       	ldi	r24, 0xCB	; 203
     95e:	92 e0       	ldi	r25, 0x02	; 2
     960:	0c 94 7e 04 	jmp	0x8fc	; 0x8fc <TwoWire::write(unsigned char)>

00000964 <Print::availableForWrite()>:
availableForWrite():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.h:63
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	80 e0       	ldi	r24, 0x00	; 0
     968:	08 95       	ret

0000096a <SI4844::waitInterrupt() [clone .isra.2]>:
_ZN6SI484413waitInterruptEv.isra.2():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:166
 * @details It can occur, for example, when you use the analog tuner.  
 */
void SI4844::waitInterrupt(void)
{
    
    while (!data_from_device)
     96a:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <_ZL16data_from_device.lto_priv.51>
     96e:	88 23       	and	r24, r24
     970:	e1 f3       	breq	.-8      	; 0x96a <SI4844::waitInterrupt() [clone .isra.2]>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:169
        ;
        
}
     972:	08 95       	ret

00000974 <SI4844::reset() [clone .constprop.9]>:
reset():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:363
 * @ingroup GB1
 * @brief Resets the SI4844 device
 * @details Prepares the system  to be started.
 * @see pages 7, 8, 9 and 10 of the programming guide.
 */
void SI4844::reset()
     974:	cf 93       	push	r28
     976:	df 93       	push	r29
twi_setFrequency():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:142
 * Input    Clock frequency
 * Output   none
 */
void twi_setFrequency(uint32_t frequency)
{
  TWBR = ((F_CPU / frequency) - 16) / 2;
     978:	88 e1       	ldi	r24, 0x18	; 24
     97a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
reset():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:368
{
    // waitToSend();

    setClockLow(); // See *Note on page 5
    data_from_device = false;
     97e:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <_ZL16data_from_device.lto_priv.51>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:369
    digitalWrite(resetPin, LOW);
     982:	cb ed       	ldi	r28, 0xDB	; 219
     984:	d2 e0       	ldi	r29, 0x02	; 2
     986:	60 e0       	ldi	r22, 0x00	; 0
     988:	8e 85       	ldd	r24, Y+14	; 0x0e
     98a:	0e 94 85 01 	call	0x30a	; 0x30a <digitalWrite>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:370
    delayMicroseconds(200);
     98e:	88 ec       	ldi	r24, 0xC8	; 200
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	0e 94 02 02 	call	0x404	; 0x404 <delayMicroseconds>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:371
    digitalWrite(resetPin, HIGH);
     996:	61 e0       	ldi	r22, 0x01	; 1
     998:	8e 85       	ldd	r24, Y+14	; 0x0e
     99a:	0e 94 85 01 	call	0x30a	; 0x30a <digitalWrite>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:372
    delayMicroseconds(200);
     99e:	88 ec       	ldi	r24, 0xC8	; 200
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	0e 94 02 02 	call	0x404	; 0x404 <delayMicroseconds>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:373
    waitInterrupt();
     9a6:	0e 94 b5 04 	call	0x96a	; 0x96a <SI4844::waitInterrupt() [clone .isra.2]>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:374
    delayMicroseconds(2500);
     9aa:	84 ec       	ldi	r24, 0xC4	; 196
     9ac:	99 e0       	ldi	r25, 0x09	; 9
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:375
}
     9ae:	df 91       	pop	r29
     9b0:	cf 91       	pop	r28
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:374
    digitalWrite(resetPin, LOW);
    delayMicroseconds(200);
    digitalWrite(resetPin, HIGH);
    delayMicroseconds(200);
    waitInterrupt();
    delayMicroseconds(2500);
     9b2:	0c 94 02 02 	jmp	0x404	; 0x404 <delayMicroseconds>

000009b6 <SI4844::getStatus() [clone .constprop.7]>:
beginTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:196
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
     9b6:	81 e0       	ldi	r24, 0x01	; 1
     9b8:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <TwoWire::transmitting>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:198
  // set address of targeted slave
  txAddress = address;
     9bc:	81 e1       	ldi	r24, 0x11	; 17
     9be:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <TwoWire::txAddress>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:200
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     9c2:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <TwoWire::txBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:201
  txBufferLength = 0;
     9c6:	10 92 a1 02 	sts	0x02A1, r1	; 0x8002a1 <TwoWire::txBufferLength>
getStatus():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:984
 * @details this method updates the first byte of all_receiver_status member variable
 * @return  pointer to a structure type si4844_device_status
 */
 si4844_device_status *SI4844::getStatus() {
    Wire.beginTransmission(SI4844_ADDRESS);
    Wire.write(ATDD_GET_STATUS);
     9ca:	80 ee       	ldi	r24, 0xE0	; 224
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	0e 94 ad 04 	call	0x95a	; 0x95a <TwoWire::write(int) [clone .constprop.27]>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:985
    Wire.endTransmission();
     9d2:	0e 94 2d 01 	call	0x25a	; 0x25a <TwoWire::endTransmission() [clone .constprop.28]>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:986
    delayMicroseconds(2000);
     9d6:	80 ed       	ldi	r24, 0xD0	; 208
     9d8:	97 e0       	ldi	r25, 0x07	; 7
     9da:	0e 94 02 02 	call	0x404	; 0x404 <delayMicroseconds>
twi_readFrom():
     9de:	61 e0       	ldi	r22, 0x01	; 1
     9e0:	81 e1       	ldi	r24, 0x11	; 17
     9e2:	0e 94 ed 00 	call	0x1da	; 0x1da <twi_readFrom.part.0.constprop.36>
requestFrom():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:120
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
     9e6:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <TwoWire::rxBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:121
  rxBufferLength = read;
     9ea:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <TwoWire::rxBufferLength>
getStatus():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:988
    Wire.requestFrom(SI4844_ADDRESS, 1);
    all_receiver_status.raw[0] = Wire.read();
     9ee:	8b ec       	ldi	r24, 0xCB	; 203
     9f0:	92 e0       	ldi	r25, 0x02	; 2
     9f2:	0e 94 37 04 	call	0x86e	; 0x86e <TwoWire::read()>
     9f6:	eb ed       	ldi	r30, 0xDB	; 219
     9f8:	f2 e0       	ldi	r31, 0x02	; 2
     9fa:	81 83       	std	Z+1, r24	; 0x01
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:989
    device_status.raw = all_receiver_status.raw[0];
     9fc:	80 83       	st	Z, r24
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:991
    return &device_status; 
 }
     9fe:	cf 01       	movw	r24, r30
     a00:	08 95       	ret

00000a02 <SI4844::getAllReceiverInfo() [clone .constprop.23]>:
getAllReceiverInfo():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1001
 * @details Use this method only if you want to deal with that information by yourself. 
 * @details all data of the receiver is storted in "all_receiver_status" member variable 
 * @details This library has other methods to get that information easier. 
 * @return pointer to a structure type si4844_status_response
 */
si4844_status_response *SI4844::getAllReceiverInfo()
     a02:	0f 93       	push	r16
     a04:	1f 93       	push	r17
     a06:	cf 93       	push	r28
     a08:	df 93       	push	r29
twi_setFrequency():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:142
     a0a:	20 91 f0 02 	lds	r18, 0x02F0	; 0x8002f0 <rx+0x15>
     a0e:	30 91 f1 02 	lds	r19, 0x02F1	; 0x8002f1 <rx+0x16>
     a12:	40 91 f2 02 	lds	r20, 0x02F2	; 0x8002f2 <rx+0x17>
     a16:	50 91 f3 02 	lds	r21, 0x02F3	; 0x8002f3 <rx+0x18>
     a1a:	60 e0       	ldi	r22, 0x00	; 0
     a1c:	74 e2       	ldi	r23, 0x24	; 36
     a1e:	84 ef       	ldi	r24, 0xF4	; 244
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <__udivmodsi4>
     a26:	20 51       	subi	r18, 0x10	; 16
     a28:	31 09       	sbc	r19, r1
     a2a:	41 09       	sbc	r20, r1
     a2c:	51 09       	sbc	r21, r1
     a2e:	56 95       	lsr	r21
     a30:	47 95       	ror	r20
     a32:	37 95       	ror	r19
     a34:	27 95       	ror	r18
     a36:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
beginTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:196
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
     a3a:	11 e0       	ldi	r17, 0x01	; 1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:198
  // set address of targeted slave
  txAddress = address;
     a3c:	01 e1       	ldi	r16, 0x11	; 17
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:196
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
     a3e:	10 93 7e 02 	sts	0x027E, r17	; 0x80027e <TwoWire::transmitting>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:198
  // set address of targeted slave
  txAddress = address;
     a42:	00 93 a0 02 	sts	0x02A0, r16	; 0x8002a0 <TwoWire::txAddress>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:200
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     a46:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <TwoWire::txBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:201
  txBufferLength = 0;
     a4a:	10 92 a1 02 	sts	0x02A1, r1	; 0x8002a1 <TwoWire::txBufferLength>
getAllReceiverInfo():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1007
{
    setClockHigh();
    do
    {
        Wire.beginTransmission(SI4844_ADDRESS);
        Wire.write(ATDD_GET_STATUS);
     a4e:	80 ee       	ldi	r24, 0xE0	; 224
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	0e 94 ad 04 	call	0x95a	; 0x95a <TwoWire::write(int) [clone .constprop.27]>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1008
        Wire.endTransmission();
     a56:	0e 94 2d 01 	call	0x25a	; 0x25a <TwoWire::endTransmission() [clone .constprop.28]>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1009
        delayMicroseconds(2500);
     a5a:	84 ec       	ldi	r24, 0xC4	; 196
     a5c:	99 e0       	ldi	r25, 0x09	; 9
     a5e:	0e 94 02 02 	call	0x404	; 0x404 <delayMicroseconds>
twi_readFrom():
     a62:	64 e0       	ldi	r22, 0x04	; 4
     a64:	81 e1       	ldi	r24, 0x11	; 17
     a66:	0e 94 ed 00 	call	0x1da	; 0x1da <twi_readFrom.part.0.constprop.36>
requestFrom():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:120
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
     a6a:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <TwoWire::rxBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:121
  rxBufferLength = read;
     a6e:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <TwoWire::rxBufferLength>
     a72:	cc ed       	ldi	r28, 0xDC	; 220
     a74:	d2 e0       	ldi	r29, 0x02	; 2
getAllReceiverInfo():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1013
        // request 4 bytes response from atdd (si4844)
        Wire.requestFrom(SI4844_ADDRESS, 0x04);
        for (int i = 0; i < 4; i++)
            all_receiver_status.raw[i] = Wire.read();
     a76:	8b ec       	ldi	r24, 0xCB	; 203
     a78:	92 e0       	ldi	r25, 0x02	; 2
     a7a:	0e 94 37 04 	call	0x86e	; 0x86e <TwoWire::read()>
     a7e:	89 93       	st	Y+, r24
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1012
        Wire.write(ATDD_GET_STATUS);
        Wire.endTransmission();
        delayMicroseconds(2500);
        // request 4 bytes response from atdd (si4844)
        Wire.requestFrom(SI4844_ADDRESS, 0x04);
        for (int i = 0; i < 4; i++)
     a80:	82 e0       	ldi	r24, 0x02	; 2
     a82:	c0 3e       	cpi	r28, 0xE0	; 224
     a84:	d8 07       	cpc	r29, r24
     a86:	b9 f7       	brne	.-18     	; 0xa76 <SI4844::getAllReceiverInfo() [clone .constprop.23]+0x74>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1016
            all_receiver_status.raw[i] = Wire.read();
        // check response error. Exit when no error found. See page 7.
        // if INFORDY is 0, the system is not ready yet. You may need to check if CHFREQ is 0 too.
    } while ( all_receiver_status.refined.INFORDY == 0 );
     a88:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <rx+0x1>
     a8c:	84 ff       	sbrs	r24, 4
     a8e:	d7 cf       	rjmp	.-82     	; 0xa3e <SI4844::getAllReceiverInfo() [clone .constprop.23]+0x3c>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1018

    device_status.raw = all_receiver_status.raw[0];
     a90:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <rx>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1020
    return &all_receiver_status;
}
     a94:	8c ed       	ldi	r24, 0xDC	; 220
     a96:	92 e0       	ldi	r25, 0x02	; 2
     a98:	df 91       	pop	r29
     a9a:	cf 91       	pop	r28
     a9c:	1f 91       	pop	r17
     a9e:	0f 91       	pop	r16
     aa0:	08 95       	ret

00000aa2 <SI4844::getFrequencyInteger() [clone .constprop.22]>:
getFrequencyInteger():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1146
 * @details For example: FM, 103900 KHz (103.9 MHz); SW, 7335 KHz (7.34 MHz, 41m)   
 * @details It is useful to save memory
 * 
 * @return uint32_t current frequency in KHz.  
 */
uint32_t SI4844::getFrequencyInteger(void)
     aa2:	cf 92       	push	r12
     aa4:	df 92       	push	r13
     aa6:	ef 92       	push	r14
     aa8:	ff 92       	push	r15
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1148
{
    this->getAllReceiverInfo();
     aaa:	0e 94 01 05 	call	0xa02	; 0xa02 <SI4844::getAllReceiverInfo() [clone .constprop.23]>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1153
    int addFactor = 0;
    int multFactor = 1;
    // Check CHFREQ bit[15] MSB = 1
    // See Page 15 of Si48XX ATDD PROGRAMMING GUIDE
    if (all_receiver_status.refined.BANDMODE == 0)
     aae:	90 91 dd 02 	lds	r25, 0x02DD	; 0x8002dd <rx+0x2>
     ab2:	90 7c       	andi	r25, 0xC0	; 192
     ab4:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <rx+0x3>
     ab8:	91 11       	cpse	r25, r1
     aba:	54 c0       	rjmp	.+168    	; 0xb64 <SI4844::getFrequencyInteger() [clone .constprop.22]+0xc2>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1156
    {
        multFactor = 100;
        if (all_receiver_status.refined.d1 & 0b00001000)
     abc:	98 2f       	mov	r25, r24
     abe:	92 95       	swap	r25
     ac0:	9f 70       	andi	r25, 0x0F	; 15
     ac2:	87 ff       	sbrs	r24, 7
     ac4:	64 c0       	rjmp	.+200    	; 0xb8e <SI4844::getFrequencyInteger() [clone .constprop.22]+0xec>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1158
        {
            all_receiver_status.refined.d1 &= 0b11110111;
     ac6:	97 70       	andi	r25, 0x07	; 7
     ac8:	92 95       	swap	r25
     aca:	90 7f       	andi	r25, 0xF0	; 240
     acc:	8f 70       	andi	r24, 0x0F	; 15
     ace:	89 2b       	or	r24, r25
     ad0:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <rx+0x3>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1155
    int multFactor = 1;
    // Check CHFREQ bit[15] MSB = 1
    // See Page 15 of Si48XX ATDD PROGRAMMING GUIDE
    if (all_receiver_status.refined.BANDMODE == 0)
    {
        multFactor = 100;
     ad4:	a4 e6       	ldi	r26, 0x64	; 100
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1159
        if (all_receiver_status.refined.d1 & 0b00001000)
        {
            all_receiver_status.refined.d1 &= 0b11110111;
            addFactor = 50;
     ad8:	e2 e3       	ldi	r30, 0x32	; 50
     ada:	f0 e0       	ldi	r31, 0x00	; 0
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1174
        }
    }

    uint32_t f;

    f = (all_receiver_status.refined.d4);
     adc:	20 91 df 02 	lds	r18, 0x02DF	; 0x8002df <rx+0x4>
     ae0:	62 2f       	mov	r22, r18
     ae2:	6f 70       	andi	r22, 0x0F	; 15
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1175
    f += (all_receiver_status.refined.d3) * 10;
     ae4:	22 95       	swap	r18
     ae6:	2f 70       	andi	r18, 0x0F	; 15
     ae8:	7a e0       	ldi	r23, 0x0A	; 10
     aea:	27 9f       	mul	r18, r23
     aec:	90 01       	movw	r18, r0
     aee:	11 24       	eor	r1, r1
     af0:	03 2e       	mov	r0, r19
     af2:	00 0c       	add	r0, r0
     af4:	44 0b       	sbc	r20, r20
     af6:	55 0b       	sbc	r21, r21
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1176
    f += (all_receiver_status.refined.d2) * 100;
     af8:	90 91 de 02 	lds	r25, 0x02DE	; 0x8002de <rx+0x3>
     afc:	89 2f       	mov	r24, r25
     afe:	8f 70       	andi	r24, 0x0F	; 15
     b00:	74 e6       	ldi	r23, 0x64	; 100
     b02:	87 9f       	mul	r24, r23
     b04:	60 01       	movw	r12, r0
     b06:	11 24       	eor	r1, r1
     b08:	0d 2c       	mov	r0, r13
     b0a:	00 0c       	add	r0, r0
     b0c:	ee 08       	sbc	r14, r14
     b0e:	ff 08       	sbc	r15, r15
     b10:	2c 0d       	add	r18, r12
     b12:	3d 1d       	adc	r19, r13
     b14:	4e 1d       	adc	r20, r14
     b16:	5f 1d       	adc	r21, r15
     b18:	26 0f       	add	r18, r22
     b1a:	31 1d       	adc	r19, r1
     b1c:	41 1d       	adc	r20, r1
     b1e:	51 1d       	adc	r21, r1
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1177
    f += (all_receiver_status.refined.d1) * 1000;
     b20:	92 95       	swap	r25
     b22:	9f 70       	andi	r25, 0x0F	; 15
     b24:	68 ee       	ldi	r22, 0xE8	; 232
     b26:	73 e0       	ldi	r23, 0x03	; 3
     b28:	96 9f       	mul	r25, r22
     b2a:	60 01       	movw	r12, r0
     b2c:	97 9f       	mul	r25, r23
     b2e:	d0 0c       	add	r13, r0
     b30:	11 24       	eor	r1, r1
     b32:	0d 2c       	mov	r0, r13
     b34:	00 0c       	add	r0, r0
     b36:	ee 08       	sbc	r14, r14
     b38:	ff 08       	sbc	r15, r15
     b3a:	2c 0d       	add	r18, r12
     b3c:	3d 1d       	adc	r19, r13
     b3e:	4e 1d       	adc	r20, r14
     b40:	5f 1d       	adc	r21, r15
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1179

    data_from_device = false;
     b42:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <_ZL16data_from_device.lto_priv.51>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1181

    return (f * multFactor + addFactor);
     b46:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <__mulshisi3>
     b4a:	6f 01       	movw	r12, r30
     b4c:	ff 0f       	add	r31, r31
     b4e:	ee 08       	sbc	r14, r14
     b50:	ff 08       	sbc	r15, r15
     b52:	6c 0d       	add	r22, r12
     b54:	7d 1d       	adc	r23, r13
     b56:	8e 1d       	adc	r24, r14
     b58:	9f 1d       	adc	r25, r15
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1182
}
     b5a:	ff 90       	pop	r15
     b5c:	ef 90       	pop	r14
     b5e:	df 90       	pop	r13
     b60:	cf 90       	pop	r12
     b62:	08 95       	ret
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1150
 */
uint32_t SI4844::getFrequencyInteger(void)
{
    this->getAllReceiverInfo();
    int addFactor = 0;
    int multFactor = 1;
     b64:	a1 e0       	ldi	r26, 0x01	; 1
     b66:	b0 e0       	ldi	r27, 0x00	; 0
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1162
        {
            all_receiver_status.refined.d1 &= 0b11110111;
            addFactor = 50;
        }
    }
    else if (all_receiver_status.refined.BANDMODE == 2)
     b68:	90 38       	cpi	r25, 0x80	; 128
     b6a:	99 f4       	brne	.+38     	; 0xb92 <SI4844::getFrequencyInteger() [clone .constprop.22]+0xf0>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1165
    {
        multFactor = 10;
        if (all_receiver_status.refined.d1 & 0b00001000)
     b6c:	98 2f       	mov	r25, r24
     b6e:	92 95       	swap	r25
     b70:	9f 70       	andi	r25, 0x0F	; 15
     b72:	87 ff       	sbrs	r24, 7
     b74:	11 c0       	rjmp	.+34     	; 0xb98 <SI4844::getFrequencyInteger() [clone .constprop.22]+0xf6>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1167
        {
            all_receiver_status.refined.d1 &= 0b11110111;   
     b76:	97 70       	andi	r25, 0x07	; 7
     b78:	92 95       	swap	r25
     b7a:	90 7f       	andi	r25, 0xF0	; 240
     b7c:	8f 70       	andi	r24, 0x0F	; 15
     b7e:	89 2b       	or	r24, r25
     b80:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <rx+0x3>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1164
            addFactor = 50;
        }
    }
    else if (all_receiver_status.refined.BANDMODE == 2)
    {
        multFactor = 10;
     b84:	aa e0       	ldi	r26, 0x0A	; 10
     b86:	b0 e0       	ldi	r27, 0x00	; 0
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1168
        if (all_receiver_status.refined.d1 & 0b00001000)
        {
            all_receiver_status.refined.d1 &= 0b11110111;   
            addFactor = 5;
     b88:	e5 e0       	ldi	r30, 0x05	; 5
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	a7 cf       	rjmp	.-178    	; 0xadc <SI4844::getFrequencyInteger() [clone .constprop.22]+0x3a>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1155
    int multFactor = 1;
    // Check CHFREQ bit[15] MSB = 1
    // See Page 15 of Si48XX ATDD PROGRAMMING GUIDE
    if (all_receiver_status.refined.BANDMODE == 0)
    {
        multFactor = 100;
     b8e:	a4 e6       	ldi	r26, 0x64	; 100
     b90:	b0 e0       	ldi	r27, 0x00	; 0
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1149
 * @return uint32_t current frequency in KHz.  
 */
uint32_t SI4844::getFrequencyInteger(void)
{
    this->getAllReceiverInfo();
    int addFactor = 0;
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	e0 e0       	ldi	r30, 0x00	; 0
     b96:	a2 cf       	rjmp	.-188    	; 0xadc <SI4844::getFrequencyInteger() [clone .constprop.22]+0x3a>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1164
            addFactor = 50;
        }
    }
    else if (all_receiver_status.refined.BANDMODE == 2)
    {
        multFactor = 10;
     b98:	aa e0       	ldi	r26, 0x0A	; 10
     b9a:	b0 e0       	ldi	r27, 0x00	; 0
     b9c:	fa cf       	rjmp	.-12     	; 0xb92 <SI4844::getFrequencyInteger() [clone .constprop.22]+0xf0>

00000b9e <SI4844::waitToSend() [clone .constprop.17]>:
waitToSend():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:748
/**
 * @ingroup BF
 * @brief Wait for the ATDD become Clear to Send. 
 * @details Waits for CTS status
 */
inline void SI4844::waitToSend()
     b9e:	cf 93       	push	r28
     ba0:	df 93       	push	r29
beginTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:196
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
     ba2:	d1 e0       	ldi	r29, 0x01	; 1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:198
  // set address of targeted slave
  txAddress = address;
     ba4:	c1 e1       	ldi	r28, 0x11	; 17
_ZN6SI484413isClearToSendEv.isra.4():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:733
 * @return true 
 * @return false 
 */
bool SI4844::isClearToSend(void)
{
    delayMicroseconds(2000);
     ba6:	80 ed       	ldi	r24, 0xD0	; 208
     ba8:	97 e0       	ldi	r25, 0x07	; 7
     baa:	0e 94 02 02 	call	0x404	; 0x404 <delayMicroseconds>
beginTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:196
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
     bae:	d0 93 7e 02 	sts	0x027E, r29	; 0x80027e <TwoWire::transmitting>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:198
  // set address of targeted slave
  txAddress = address;
     bb2:	c0 93 a0 02 	sts	0x02A0, r28	; 0x8002a0 <TwoWire::txAddress>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:200
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     bb6:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <TwoWire::txBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:201
  txBufferLength = 0;
     bba:	10 92 a1 02 	sts	0x02A1, r1	; 0x8002a1 <TwoWire::txBufferLength>
_ZN6SI484413isClearToSendEv.isra.4():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:735
    Wire.beginTransmission(SI4844_ADDRESS);
    Wire.write(ATDD_GET_STATUS);
     bbe:	80 ee       	ldi	r24, 0xE0	; 224
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	0e 94 ad 04 	call	0x95a	; 0x95a <TwoWire::write(int) [clone .constprop.27]>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:736
    Wire.endTransmission();
     bc6:	0e 94 2d 01 	call	0x25a	; 0x25a <TwoWire::endTransmission() [clone .constprop.28]>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:737
    delayMicroseconds(2000);
     bca:	80 ed       	ldi	r24, 0xD0	; 208
     bcc:	97 e0       	ldi	r25, 0x07	; 7
     bce:	0e 94 02 02 	call	0x404	; 0x404 <delayMicroseconds>
twi_readFrom():
     bd2:	61 e0       	ldi	r22, 0x01	; 1
     bd4:	81 e1       	ldi	r24, 0x11	; 17
     bd6:	0e 94 ed 00 	call	0x1da	; 0x1da <twi_readFrom.part.0.constprop.36>
requestFrom():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:120
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
     bda:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <TwoWire::rxBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:121
  rxBufferLength = read;
     bde:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <TwoWire::rxBufferLength>
_ZN6SI484413isClearToSendEv.isra.4():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:739
    Wire.requestFrom(SI4844_ADDRESS, 1);
    all_receiver_status.raw[0] = Wire.read();
     be2:	8b ec       	ldi	r24, 0xCB	; 203
     be4:	92 e0       	ldi	r25, 0x02	; 2
     be6:	0e 94 37 04 	call	0x86e	; 0x86e <TwoWire::read()>
     bea:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <rx+0x1>
waitToSend():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:751
 * @details Waits for CTS status
 */
inline void SI4844::waitToSend()
{

    while (!isClearToSend())
     bee:	87 ff       	sbrs	r24, 7
     bf0:	da cf       	rjmp	.-76     	; 0xba6 <SI4844::waitToSend() [clone .constprop.17]+0x8>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:753
        ;
}
     bf2:	df 91       	pop	r29
     bf4:	cf 91       	pop	r28
     bf6:	08 95       	ret

00000bf8 <SI4844::setVolume(unsigned char) [clone .part.5] [clone .constprop.15]>:
_ZN6SI48449setVolumeEh.part.5():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:824
 * @brief Sets the volume level. 
 * @details Sets a value to the audio volume.
 * @see Table 4, Si48XX ATDD PROGRAMMING GUIDE; AN610; page 11
 * @param byte volumeLevel (domain: 0 to 63) 
 */
void SI4844::setVolume(byte volumeLavel)
     bf8:	cf 93       	push	r28
     bfa:	c8 2f       	mov	r28, r24
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:829
{
    if (volumeLavel > 63)
        return;

    waitToSend();
     bfc:	0e 94 cf 05 	call	0xb9e	; 0xb9e <SI4844::waitToSend() [clone .constprop.17]>
setProperty():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:62
    si4844_property property;
    si4844_property param;

    property.value = propertyNumber;
    param.value = parameter;
    waitToSend();
     c00:	0e 94 cf 05 	call	0xb9e	; 0xb9e <SI4844::waitToSend() [clone .constprop.17]>
beginTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:196
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <TwoWire::transmitting>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:198
  // set address of targeted slave
  txAddress = address;
     c0a:	81 e1       	ldi	r24, 0x11	; 17
     c0c:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <TwoWire::txAddress>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:200
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     c10:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <TwoWire::txBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:201
  txBufferLength = 0;
     c14:	10 92 a1 02 	sts	0x02A1, r1	; 0x8002a1 <TwoWire::txBufferLength>
setProperty():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:64
    Wire.beginTransmission(SI4844_ADDRESS);
    Wire.write(SET_PROPERTY);
     c18:	82 e1       	ldi	r24, 0x12	; 18
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	0e 94 ad 04 	call	0x95a	; 0x95a <TwoWire::write(int) [clone .constprop.27]>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:65
    Wire.write(0x00);
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	0e 94 ad 04 	call	0x95a	; 0x95a <TwoWire::write(int) [clone .constprop.27]>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:66
    Wire.write(property.raw.byteHigh); // Send property - High byte - most significant first
     c28:	60 e4       	ldi	r22, 0x40	; 64
     c2a:	8b ec       	ldi	r24, 0xCB	; 203
     c2c:	92 e0       	ldi	r25, 0x02	; 2
     c2e:	0e 94 7e 04 	call	0x8fc	; 0x8fc <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:67
    Wire.write(property.raw.byteLow);  // Send property - Low byte - less significant after
     c32:	60 e0       	ldi	r22, 0x00	; 0
     c34:	8b ec       	ldi	r24, 0xCB	; 203
     c36:	92 e0       	ldi	r25, 0x02	; 2
     c38:	0e 94 7e 04 	call	0x8fc	; 0x8fc <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:68
    Wire.write(param.raw.byteHigh);    // Send the argments. High Byte - Most significant first
     c3c:	60 e0       	ldi	r22, 0x00	; 0
     c3e:	8b ec       	ldi	r24, 0xCB	; 203
     c40:	92 e0       	ldi	r25, 0x02	; 2
     c42:	0e 94 7e 04 	call	0x8fc	; 0x8fc <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:69
    Wire.write(param.raw.byteLow);     // Send the argments. Low Byte - Less significant after
     c46:	6c 2f       	mov	r22, r28
     c48:	8b ec       	ldi	r24, 0xCB	; 203
     c4a:	92 e0       	ldi	r25, 0x02	; 2
     c4c:	0e 94 7e 04 	call	0x8fc	; 0x8fc <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:70
    Wire.endTransmission();
     c50:	0e 94 2d 01 	call	0x25a	; 0x25a <TwoWire::endTransmission() [clone .constprop.28]>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:71
    delayMicroseconds(550);
     c54:	86 e2       	ldi	r24, 0x26	; 38
     c56:	92 e0       	ldi	r25, 0x02	; 2
     c58:	0e 94 02 02 	call	0x404	; 0x404 <delayMicroseconds>
_ZN6SI48449setVolumeEh.part.5():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:832
        return;

    waitToSend();
    setProperty(RX_VOLUME, volumeLavel);

    this->volume = volumeLavel;
     c5c:	c0 93 09 03 	sts	0x0309, r28	; 0x800309 <rx+0x2e>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:833
}
     c60:	cf 91       	pop	r28
     c62:	08 95       	ret

00000c64 <SI4844::setBandSlideSwitch() [clone .constprop.8]>:
setBandSlideSwitch():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:623
 * @see See Table 8. Pre-defined Band Table in Si48XX ATDD PROGRAMMING GUIDE; AN610; pages 17 and 18  
 * @param band  band index number. 
 * @see Si4822/26/27/40/44 A NTENNA , SCHEMATIC , LAYOUT, AND DESIGN GUIDELINES 
 * @todo The functions setBand and setBandSlideSwitch will be rewritten with the goal of improving the final code.
 */
void SI4844::setBandSlideSwitch()
     c64:	8f 92       	push	r8
     c66:	9f 92       	push	r9
     c68:	af 92       	push	r10
     c6a:	bf 92       	push	r11
     c6c:	cf 92       	push	r12
     c6e:	df 92       	push	r13
     c70:	ef 92       	push	r14
     c72:	ff 92       	push	r15
     c74:	0f 93       	push	r16
     c76:	1f 93       	push	r17
     c78:	cf 93       	push	r28
     c7a:	df 93       	push	r29
     c7c:	00 d0       	rcall	.+0      	; 0xc7e <SI4844::setBandSlideSwitch() [clone .constprop.8]+0x1a>
     c7e:	00 d0       	rcall	.+0      	; 0xc80 <SI4844::setBandSlideSwitch() [clone .constprop.8]+0x1c>
     c80:	00 d0       	rcall	.+0      	; 0xc82 <SI4844::setBandSlideSwitch() [clone .constprop.8]+0x1e>
     c82:	1f 92       	push	r1
     c84:	cd b7       	in	r28, 0x3d	; 61
     c86:	de b7       	in	r29, 0x3e	; 62
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:625
{
    this->waitToSend();
     c88:	0e 94 cf 05 	call	0xb9e	; 0xb9e <SI4844::waitToSend() [clone .constprop.17]>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:626
    this->getAllReceiverInfo();
     c8c:	0e 94 01 05 	call	0xa02	; 0xa02 <SI4844::getAllReceiverInfo() [clone .constprop.23]>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:627
    uint8_t bandIndex = this->all_receiver_status.refined.BANDIDX;
     c90:	10 91 dd 02 	lds	r17, 0x02DD	; 0x8002dd <rx+0x2>
     c94:	1f 73       	andi	r17, 0x3F	; 63
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:630

   // If band mode changed, reset the device. 
   if (all_receiver_status.refined.HOSTRST == 1) {
     c96:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <rx+0x1>
     c9a:	86 fd       	sbrc	r24, 6
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:631
       this->reset();
     c9c:	0e 94 ba 04 	call	0x974	; 0x974 <SI4844::reset() [clone .constprop.9]>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:634
    }   

    this->waitToSend();
     ca0:	0e 94 cf 05 	call	0xb9e	; 0xb9e <SI4844::waitToSend() [clone .constprop.17]>
findBand():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/BandList.h:77
      }
    }

    // Find a custom band by its bandIdx and return its pointer
    BandNode* findBand(int8_t bandIdx) {
      BandNode* current = head;
     ca4:	e0 91 f5 02 	lds	r30, 0x02F5	; 0x8002f5 <rx+0x1a>
     ca8:	f0 91 f6 02 	lds	r31, 0x02F6	; 0x8002f6 <rx+0x1b>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/BandList.h:78
      while (current) {
     cac:	30 97       	sbiw	r30, 0x00	; 0
     cae:	41 f0       	breq	.+16     	; 0xcc0 <SI4844::setBandSlideSwitch() [clone .constprop.8]+0x5c>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/BandList.h:79
        if (current->bandIdx == bandIdx) return current; // Return the pointer if found
     cb0:	80 81       	ld	r24, Z
     cb2:	18 17       	cp	r17, r24
     cb4:	09 f4       	brne	.+2      	; 0xcb8 <SI4844::setBandSlideSwitch() [clone .constprop.8]+0x54>
     cb6:	5b c0       	rjmp	.+182    	; 0xd6e <SI4844::setBandSlideSwitch() [clone .constprop.8]+0x10a>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/BandList.h:80
        current = current->next; // Move to the next node
     cb8:	02 84       	ldd	r0, Z+10	; 0x0a
     cba:	f3 85       	ldd	r31, Z+11	; 0x0b
     cbc:	e0 2d       	mov	r30, r0
     cbe:	f6 cf       	rjmp	.-20     	; 0xcac <SI4844::setBandSlideSwitch() [clone .constprop.8]+0x48>
setPredefinedBand():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:508

void SI4844::setPredefinedBand(uint8_t bandIdx) {

    si4844_arg_band_index rxBandSetup; 

    this->currentBand = bandIdx;
     cc0:	10 93 ed 02 	sts	0x02ED, r17	; 0x8002ed <rx+0x12>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:510

    data_from_device = false;
     cc4:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <_ZL16data_from_device.lto_priv.51>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:512

    rxBandSetup.refined.XOSCEN = this->xoscen;
     cc8:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <rx+0x13>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	80 fb       	bst	r24, 0
     cd0:	67 f9       	bld	r22, 7
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:513
    rxBandSetup.refined.XOWAIT = this->xowait;
     cd2:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <rx+0x14>
     cd6:	80 fb       	bst	r24, 0
     cd8:	66 f9       	bld	r22, 6
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:514
    rxBandSetup.refined.BANDIDX = this->currentBand;
     cda:	60 7c       	andi	r22, 0xC0	; 192
     cdc:	16 2b       	or	r17, r22
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:515
    waitToSend();
     cde:	0e 94 cf 05 	call	0xb9e	; 0xb9e <SI4844::waitToSend() [clone .constprop.17]>
beginTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:196
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <TwoWire::transmitting>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:198
  // set address of targeted slave
  txAddress = address;
     ce8:	81 e1       	ldi	r24, 0x11	; 17
     cea:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <TwoWire::txAddress>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:200
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     cee:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <TwoWire::txBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:201
  txBufferLength = 0;
     cf2:	10 92 a1 02 	sts	0x02A1, r1	; 0x8002a1 <TwoWire::txBufferLength>
setPredefinedBand():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:517
    Wire.beginTransmission(SI4844_ADDRESS);
    Wire.write(ATDD_POWER_UP);
     cf6:	81 ee       	ldi	r24, 0xE1	; 225
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	0e 94 ad 04 	call	0x95a	; 0x95a <TwoWire::write(int) [clone .constprop.27]>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:518
    Wire.write(rxBandSetup.raw);
     cfe:	61 2f       	mov	r22, r17
setUserDefinedBand():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:571
    Wire.write(customband.raw[1]);
    Wire.write(customband.raw[2]);
    Wire.write(customband.raw[3]);
    Wire.write(customband.raw[4]);
    Wire.write(customband.raw[5]);
    Wire.write(customband.raw[6]);
     d00:	8b ec       	ldi	r24, 0xCB	; 203
     d02:	92 e0       	ldi	r25, 0x02	; 2
     d04:	0e 94 7e 04 	call	0x8fc	; 0x8fc <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:572
    Wire.endTransmission();
     d08:	0e 94 2d 01 	call	0x25a	; 0x25a <TwoWire::endTransmission() [clone .constprop.28]>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:573
    delayMicroseconds(2500);
     d0c:	84 ec       	ldi	r24, 0xC4	; 196
     d0e:	99 e0       	ldi	r25, 0x09	; 9
     d10:	0e 94 02 02 	call	0x404	; 0x404 <delayMicroseconds>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:574
    waitInterrupt();
     d14:	0e 94 b5 04 	call	0x96a	; 0x96a <SI4844::waitInterrupt() [clone .isra.2]>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:575
    delayMicroseconds(2500);
     d18:	84 ec       	ldi	r24, 0xC4	; 196
     d1a:	99 e0       	ldi	r25, 0x09	; 9
     d1c:	0e 94 02 02 	call	0x404	; 0x404 <delayMicroseconds>
waitDetectFrequency():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:762
 * @ingroup BF
 * @brief Wait for the ATDD detect a valid frequency (frequency not zero). 
 */
void SI4844::waitDetectFrequency() {
    do { 
        delay(1);
     d20:	61 e0       	ldi	r22, 0x01	; 1
     d22:	70 e0       	ldi	r23, 0x00	; 0
     d24:	80 e0       	ldi	r24, 0x00	; 0
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	0e 94 32 02 	call	0x464	; 0x464 <delay>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:763
        this->getAllReceiverInfo();
     d2c:	0e 94 01 05 	call	0xa02	; 0xa02 <SI4844::getAllReceiverInfo() [clone .constprop.23]>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:764
    } while ( (all_receiver_status.raw[2] | all_receiver_status.raw[3]) == 0  );   
     d30:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <rx+0x3>
     d34:	90 91 df 02 	lds	r25, 0x02DF	; 0x8002df <rx+0x4>
     d38:	89 2b       	or	r24, r25
     d3a:	91 f3       	breq	.-28     	; 0xd20 <SI4844::setBandSlideSwitch() [clone .constprop.8]+0xbc>
setBandSlideSwitch():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:645
        // if the current band is a custom band, sets the new parameters for the band.
        this->setUserDefinedBand(bandIndex, bandNode->bottomFrequency, bandNode->topFrequency, bandNode->space);
    }
     
    this->waitDetectFrequency(); 
    this->setVolume(this->volume);
     d3c:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <rx+0x2e>
setVolume():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:826
 * @see Table 4, Si48XX ATDD PROGRAMMING GUIDE; AN610; page 11
 * @param byte volumeLevel (domain: 0 to 63) 
 */
void SI4844::setVolume(byte volumeLavel)
{
    if (volumeLavel > 63)
     d40:	80 34       	cpi	r24, 0x40	; 64
     d42:	08 f0       	brcs	.+2      	; 0xd46 <SI4844::setBandSlideSwitch() [clone .constprop.8]+0xe2>
     d44:	64 c0       	rjmp	.+200    	; 0xe0e <SI4844::setBandSlideSwitch() [clone .constprop.8]+0x1aa>
setBandSlideSwitch():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:647
    }
     
    this->waitDetectFrequency(); 
    this->setVolume(this->volume);

}
     d46:	27 96       	adiw	r28, 0x07	; 7
     d48:	0f b6       	in	r0, 0x3f	; 63
     d4a:	f8 94       	cli
     d4c:	de bf       	out	0x3e, r29	; 62
     d4e:	0f be       	out	0x3f, r0	; 63
     d50:	cd bf       	out	0x3d, r28	; 61
     d52:	df 91       	pop	r29
     d54:	cf 91       	pop	r28
     d56:	1f 91       	pop	r17
     d58:	0f 91       	pop	r16
     d5a:	ff 90       	pop	r15
     d5c:	ef 90       	pop	r14
     d5e:	df 90       	pop	r13
     d60:	cf 90       	pop	r12
     d62:	bf 90       	pop	r11
     d64:	af 90       	pop	r10
     d66:	9f 90       	pop	r9
     d68:	8f 90       	pop	r8
setVolume():
     d6a:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <SI4844::setVolume(unsigned char) [clone .part.5] [clone .constprop.15]>
setBandSlideSwitch():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:641
    BandNode *bandNode = this->findCustomBand(bandIndex);
    if ( bandNode  == nullptr )  {   
        this->setPredefinedBand(bandIndex);
    } else {
        // if the current band is a custom band, sets the new parameters for the band.
        this->setUserDefinedBand(bandIndex, bandNode->bottomFrequency, bandNode->topFrequency, bandNode->space);
     d6e:	01 85       	ldd	r16, Z+9	; 0x09
     d70:	c5 80       	ldd	r12, Z+5	; 0x05
     d72:	d6 80       	ldd	r13, Z+6	; 0x06
     d74:	e7 80       	ldd	r14, Z+7	; 0x07
     d76:	f0 84       	ldd	r15, Z+8	; 0x08
     d78:	81 80       	ldd	r8, Z+1	; 0x01
     d7a:	92 80       	ldd	r9, Z+2	; 0x02
     d7c:	a3 80       	ldd	r10, Z+3	; 0x03
     d7e:	b4 80       	ldd	r11, Z+4	; 0x04
setUserDefinedBand():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:543
 */
void SI4844::setUserDefinedBand(int8_t bandIdx, uint32_t bottomFrequency, uint32_t topFrequency, uint8_t space ) {

    SI4844_arg_band customband;

    this->currentBand = bandIdx;
     d80:	10 93 ed 02 	sts	0x02ED, r17	; 0x8002ed <rx+0x12>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:546

    // Now we can customize the band.
    data_from_device = false;
     d84:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <_ZL16data_from_device.lto_priv.51>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:547
    customband.refined.BANDIDX = bandIdx;
     d88:	69 81       	ldd	r22, Y+1	; 0x01
     d8a:	60 7c       	andi	r22, 0xC0	; 192
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:548
    customband.refined.XOSCEN = this->xoscen;
     d8c:	61 2b       	or	r22, r17
     d8e:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <rx+0x13>
     d92:	80 fb       	bst	r24, 0
     d94:	67 f9       	bld	r22, 7
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:549
    customband.refined.XOWAIT = this->xowait;
     d96:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <rx+0x14>
     d9a:	80 fb       	bst	r24, 0
     d9c:	66 f9       	bld	r22, 6
     d9e:	69 83       	std	Y+1, r22	; 0x01
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:558
    customband.refined.BANDTOP_LOW = lowByte(topFrequency);
    customband.refined.CHSPC = space;
    customband.refined.DFBAND = 0; 
    customband.refined.UNI_AM = 0;
    customband.refined.TVFREQ = 0;
    customband.refined.DUMMY = 0;
     da0:	1f 82       	std	Y+7, r1	; 0x07
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:561

    // Wait until rady to send a command
    waitToSend();
     da2:	0e 94 cf 05 	call	0xb9e	; 0xb9e <SI4844::waitToSend() [clone .constprop.17]>
beginTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:196
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <TwoWire::transmitting>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:198
  // set address of targeted slave
  txAddress = address;
     dac:	81 e1       	ldi	r24, 0x11	; 17
     dae:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <TwoWire::txAddress>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:200
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     db2:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <TwoWire::txBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:201
  txBufferLength = 0;
     db6:	10 92 a1 02 	sts	0x02A1, r1	; 0x8002a1 <TwoWire::txBufferLength>
setUserDefinedBand():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:564

    Wire.beginTransmission(SI4844_ADDRESS);
    Wire.write(ATDD_POWER_UP);
     dba:	81 ee       	ldi	r24, 0xE1	; 225
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	0e 94 ad 04 	call	0x95a	; 0x95a <TwoWire::write(int) [clone .constprop.27]>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:565
    Wire.write(customband.raw[0]);
     dc2:	69 81       	ldd	r22, Y+1	; 0x01
     dc4:	8b ec       	ldi	r24, 0xCB	; 203
     dc6:	92 e0       	ldi	r25, 0x02	; 2
     dc8:	0e 94 7e 04 	call	0x8fc	; 0x8fc <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:550
    // Now we can customize the band.
    data_from_device = false;
    customband.refined.BANDIDX = bandIdx;
    customband.refined.XOSCEN = this->xoscen;
    customband.refined.XOWAIT = this->xowait;
    customband.refined.BANDBOT_HIGH = highByte(bottomFrequency);
     dcc:	99 27       	eor	r25, r25
     dce:	8b 2d       	mov	r24, r11
     dd0:	7a 2d       	mov	r23, r10
     dd2:	69 2d       	mov	r22, r9
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:566
    waitToSend();

    Wire.beginTransmission(SI4844_ADDRESS);
    Wire.write(ATDD_POWER_UP);
    Wire.write(customband.raw[0]);
    Wire.write(customband.raw[1]);
     dd4:	8b ec       	ldi	r24, 0xCB	; 203
     dd6:	92 e0       	ldi	r25, 0x02	; 2
     dd8:	0e 94 7e 04 	call	0x8fc	; 0x8fc <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:567
    Wire.write(customband.raw[2]);
     ddc:	68 2d       	mov	r22, r8
     dde:	8b ec       	ldi	r24, 0xCB	; 203
     de0:	92 e0       	ldi	r25, 0x02	; 2
     de2:	0e 94 7e 04 	call	0x8fc	; 0x8fc <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:552
    customband.refined.BANDIDX = bandIdx;
    customband.refined.XOSCEN = this->xoscen;
    customband.refined.XOWAIT = this->xowait;
    customband.refined.BANDBOT_HIGH = highByte(bottomFrequency);
    customband.refined.BANDBOT_LOW = lowByte(bottomFrequency);
    customband.refined.BANDTOP_HIGH = highByte(topFrequency);
     de6:	99 27       	eor	r25, r25
     de8:	8f 2d       	mov	r24, r15
     dea:	7e 2d       	mov	r23, r14
     dec:	6d 2d       	mov	r22, r13
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:568
    Wire.beginTransmission(SI4844_ADDRESS);
    Wire.write(ATDD_POWER_UP);
    Wire.write(customband.raw[0]);
    Wire.write(customband.raw[1]);
    Wire.write(customband.raw[2]);
    Wire.write(customband.raw[3]);
     dee:	8b ec       	ldi	r24, 0xCB	; 203
     df0:	92 e0       	ldi	r25, 0x02	; 2
     df2:	0e 94 7e 04 	call	0x8fc	; 0x8fc <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:569
    Wire.write(customband.raw[4]);
     df6:	6c 2d       	mov	r22, r12
     df8:	8b ec       	ldi	r24, 0xCB	; 203
     dfa:	92 e0       	ldi	r25, 0x02	; 2
     dfc:	0e 94 7e 04 	call	0x8fc	; 0x8fc <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:570
    Wire.write(customband.raw[5]);
     e00:	60 2f       	mov	r22, r16
     e02:	8b ec       	ldi	r24, 0xCB	; 203
     e04:	92 e0       	ldi	r25, 0x02	; 2
     e06:	0e 94 7e 04 	call	0x8fc	; 0x8fc <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:571
    Wire.write(customband.raw[6]);
     e0a:	6f 81       	ldd	r22, Y+7	; 0x07
     e0c:	79 cf       	rjmp	.-270    	; 0xd00 <SI4844::setBandSlideSwitch() [clone .constprop.8]+0x9c>
setBandSlideSwitch():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:647
    }
     
    this->waitDetectFrequency(); 
    this->setVolume(this->volume);

}
     e0e:	27 96       	adiw	r28, 0x07	; 7
     e10:	0f b6       	in	r0, 0x3f	; 63
     e12:	f8 94       	cli
     e14:	de bf       	out	0x3e, r29	; 62
     e16:	0f be       	out	0x3f, r0	; 63
     e18:	cd bf       	out	0x3d, r28	; 61
     e1a:	df 91       	pop	r29
     e1c:	cf 91       	pop	r28
     e1e:	1f 91       	pop	r17
     e20:	0f 91       	pop	r16
     e22:	ff 90       	pop	r15
     e24:	ef 90       	pop	r14
     e26:	df 90       	pop	r13
     e28:	cf 90       	pop	r12
     e2a:	bf 90       	pop	r11
     e2c:	af 90       	pop	r10
     e2e:	9f 90       	pop	r9
     e30:	8f 90       	pop	r8
     e32:	08 95       	ret

00000e34 <Print::print(char const*) [clone .constprop.38]>:
write():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     e34:	00 97       	sbiw	r24, 0x00	; 0
     e36:	69 f0       	breq	.+26     	; 0xe52 <Print::print(char const*) [clone .constprop.38]+0x1e>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.h:54
      return write((const uint8_t *)str, strlen(str));
     e38:	fc 01       	movw	r30, r24
     e3a:	01 90       	ld	r0, Z+
     e3c:	00 20       	and	r0, r0
     e3e:	e9 f7       	brne	.-6      	; 0xe3a <Print::print(char const*) [clone .constprop.38]+0x6>
     e40:	31 97       	sbiw	r30, 0x01	; 1
     e42:	af 01       	movw	r20, r30
     e44:	48 1b       	sub	r20, r24
     e46:	59 0b       	sbc	r21, r25
     e48:	bc 01       	movw	r22, r24
     e4a:	8b e0       	ldi	r24, 0x0B	; 11
     e4c:	93 e0       	ldi	r25, 0x03	; 3
     e4e:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <Print::write(unsigned char const*, unsigned int)>
print():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:65
}

size_t Print::print(const char str[])
{
  return write(str);
}
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	08 95       	ret

00000e58 <String::~String()>:
__base_dtor ():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  if(buffer)
     e58:	fc 01       	movw	r30, r24
     e5a:	80 81       	ld	r24, Z
     e5c:	91 81       	ldd	r25, Z+1	; 0x01
     e5e:	00 97       	sbiw	r24, 0x00	; 0
     e60:	11 f0       	breq	.+4      	; 0xe66 <String::~String()+0xe>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:125
    free(buffer);
     e62:	0c 94 02 0e 	jmp	0x1c04	; 0x1c04 <free>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:126
}
     e66:	08 95       	ret

00000e68 <String::reserve(unsigned int)>:
reserve():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:147
  buffer = NULL;
  capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
     e68:	0f 93       	push	r16
     e6a:	1f 93       	push	r17
     e6c:	cf 93       	push	r28
     e6e:	df 93       	push	r29
     e70:	ec 01       	movw	r28, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:148
  if (buffer && capacity >= size) return 1;
     e72:	88 81       	ld	r24, Y
     e74:	99 81       	ldd	r25, Y+1	; 0x01
     e76:	00 97       	sbiw	r24, 0x00	; 0
     e78:	59 f0       	breq	.+22     	; 0xe90 <String::reserve(unsigned int)+0x28>
     e7a:	2a 81       	ldd	r18, Y+2	; 0x02
     e7c:	3b 81       	ldd	r19, Y+3	; 0x03
     e7e:	26 17       	cp	r18, r22
     e80:	37 07       	cpc	r19, r23
     e82:	30 f0       	brcs	.+12     	; 0xe90 <String::reserve(unsigned int)+0x28>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:150
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
     e84:	81 e0       	ldi	r24, 0x01	; 1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:154
    return 1;
  }
  return 0;
}
     e86:	df 91       	pop	r29
     e88:	cf 91       	pop	r28
     e8a:	1f 91       	pop	r17
     e8c:	0f 91       	pop	r16
     e8e:	08 95       	ret
     e90:	8b 01       	movw	r16, r22
changeBuffer():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:158

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
  char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
     e92:	6f 5f       	subi	r22, 0xFF	; 255
     e94:	7f 4f       	sbci	r23, 0xFF	; 255
     e96:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <realloc>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:159
  if (newbuffer) {
     e9a:	00 97       	sbiw	r24, 0x00	; 0
     e9c:	59 f0       	breq	.+22     	; 0xeb4 <String::reserve(unsigned int)+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:160
    buffer = newbuffer;
     e9e:	99 83       	std	Y+1, r25	; 0x01
     ea0:	88 83       	st	Y, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:161
    capacity = maxStrLen;
     ea2:	1b 83       	std	Y+3, r17	; 0x03
     ea4:	0a 83       	std	Y+2, r16	; 0x02
reserve():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:150

unsigned char String::reserve(unsigned int size)
{
  if (buffer && capacity >= size) return 1;
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
     ea6:	2c 81       	ldd	r18, Y+4	; 0x04
     ea8:	3d 81       	ldd	r19, Y+5	; 0x05
     eaa:	23 2b       	or	r18, r19
     eac:	59 f7       	brne	.-42     	; 0xe84 <String::reserve(unsigned int)+0x1c>
     eae:	fc 01       	movw	r30, r24
     eb0:	10 82       	st	Z, r1
     eb2:	e8 cf       	rjmp	.-48     	; 0xe84 <String::reserve(unsigned int)+0x1c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:153
    return 1;
  }
  return 0;
     eb4:	80 e0       	ldi	r24, 0x00	; 0
     eb6:	e7 cf       	rjmp	.-50     	; 0xe86 <String::reserve(unsigned int)+0x1e>

00000eb8 <String::String(char const*)>:
__base_ctor ():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:28

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
     eb8:	ef 92       	push	r14
     eba:	ff 92       	push	r15
     ebc:	0f 93       	push	r16
     ebe:	1f 93       	push	r17
     ec0:	cf 93       	push	r28
     ec2:	df 93       	push	r29
     ec4:	ec 01       	movw	r28, r24
     ec6:	7b 01       	movw	r14, r22
_ZN6String4initEv():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:134
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
     ec8:	19 82       	std	Y+1, r1	; 0x01
     eca:	18 82       	st	Y, r1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:135
  capacity = 0;
     ecc:	1b 82       	std	Y+3, r1	; 0x03
     ece:	1a 82       	std	Y+2, r1	; 0x02
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:136
  len = 0;
     ed0:	1d 82       	std	Y+5, r1	; 0x05
     ed2:	1c 82       	std	Y+4, r1	; 0x04
__base_ctor ():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:31
/*********************************************/

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
     ed4:	fb 01       	movw	r30, r22
     ed6:	01 90       	ld	r0, Z+
     ed8:	00 20       	and	r0, r0
     eda:	e9 f7       	brne	.-6      	; 0xed6 <String::String(char const*)+0x1e>
     edc:	31 97       	sbiw	r30, 0x01	; 1
     ede:	8f 01       	movw	r16, r30
     ee0:	06 1b       	sub	r16, r22
     ee2:	17 0b       	sbc	r17, r23
copy():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:173
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
  if (!reserve(length)) {
     ee4:	b8 01       	movw	r22, r16
     ee6:	0e 94 34 07 	call	0xe68	; 0xe68 <String::reserve(unsigned int)>
     eea:	28 81       	ld	r18, Y
     eec:	39 81       	ldd	r19, Y+1	; 0x01
     eee:	81 11       	cpse	r24, r1
     ef0:	13 c0       	rjmp	.+38     	; 0xf18 <String::String(char const*)+0x60>
invalidate():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:141
  len = 0;
}

void String::invalidate(void)
{
  if (buffer) free(buffer);
     ef2:	21 15       	cp	r18, r1
     ef4:	31 05       	cpc	r19, r1
     ef6:	19 f0       	breq	.+6      	; 0xefe <String::String(char const*)+0x46>
     ef8:	c9 01       	movw	r24, r18
     efa:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <free>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:142
  buffer = NULL;
     efe:	19 82       	std	Y+1, r1	; 0x01
     f00:	18 82       	st	Y, r1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:143
  capacity = len = 0;
     f02:	1d 82       	std	Y+5, r1	; 0x05
     f04:	1c 82       	std	Y+4, r1	; 0x04
     f06:	1b 82       	std	Y+3, r1	; 0x03
     f08:	1a 82       	std	Y+2, r1	; 0x02
__base_ctor ():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:32

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
}
     f0a:	df 91       	pop	r29
     f0c:	cf 91       	pop	r28
     f0e:	1f 91       	pop	r17
     f10:	0f 91       	pop	r16
     f12:	ff 90       	pop	r15
     f14:	ef 90       	pop	r14
     f16:	08 95       	ret
copy():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:177
{
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
     f18:	1d 83       	std	Y+5, r17	; 0x05
     f1a:	0c 83       	std	Y+4, r16	; 0x04
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:178
  strcpy(buffer, cstr);
     f1c:	b7 01       	movw	r22, r14
     f1e:	c9 01       	movw	r24, r18
__base_ctor ():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:32

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
}
     f20:	df 91       	pop	r29
     f22:	cf 91       	pop	r28
     f24:	1f 91       	pop	r17
     f26:	0f 91       	pop	r16
     f28:	ff 90       	pop	r15
     f2a:	ef 90       	pop	r14
copy():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:178
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
  strcpy(buffer, cstr);
     f2c:	0c 94 51 0f 	jmp	0x1ea2	; 0x1ea2 <strcpy>

00000f30 <String::operator=(char const*) [clone .part.3]>:
_ZN6StringaSEPKc.part.3():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:239
  if (this != &rval) move(rval);
  return *this;
}
#endif

String & String::operator = (const char *cstr)
     f30:	ef 92       	push	r14
     f32:	ff 92       	push	r15
     f34:	0f 93       	push	r16
     f36:	1f 93       	push	r17
     f38:	cf 93       	push	r28
     f3a:	df 93       	push	r29
     f3c:	ec 01       	movw	r28, r24
     f3e:	7b 01       	movw	r14, r22
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:241
{
  if (cstr) copy(cstr, strlen(cstr));
     f40:	fb 01       	movw	r30, r22
     f42:	01 90       	ld	r0, Z+
     f44:	00 20       	and	r0, r0
     f46:	e9 f7       	brne	.-6      	; 0xf42 <String::operator=(char const*) [clone .part.3]+0x12>
     f48:	31 97       	sbiw	r30, 0x01	; 1
     f4a:	8f 01       	movw	r16, r30
     f4c:	06 1b       	sub	r16, r22
     f4e:	17 0b       	sbc	r17, r23
copy():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:173
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
  if (!reserve(length)) {
     f50:	b8 01       	movw	r22, r16
     f52:	0e 94 34 07 	call	0xe68	; 0xe68 <String::reserve(unsigned int)>
     f56:	28 81       	ld	r18, Y
     f58:	39 81       	ldd	r19, Y+1	; 0x01
     f5a:	81 11       	cpse	r24, r1
     f5c:	13 c0       	rjmp	.+38     	; 0xf84 <String::operator=(char const*) [clone .part.3]+0x54>
invalidate():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:141
  len = 0;
}

void String::invalidate(void)
{
  if (buffer) free(buffer);
     f5e:	21 15       	cp	r18, r1
     f60:	31 05       	cpc	r19, r1
     f62:	19 f0       	breq	.+6      	; 0xf6a <String::operator=(char const*) [clone .part.3]+0x3a>
     f64:	c9 01       	movw	r24, r18
     f66:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <free>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:142
  buffer = NULL;
     f6a:	19 82       	std	Y+1, r1	; 0x01
     f6c:	18 82       	st	Y, r1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:143
  capacity = len = 0;
     f6e:	1d 82       	std	Y+5, r1	; 0x05
     f70:	1c 82       	std	Y+4, r1	; 0x04
     f72:	1b 82       	std	Y+3, r1	; 0x03
     f74:	1a 82       	std	Y+2, r1	; 0x02
_ZN6StringaSEPKc.part.3():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:245
{
  if (cstr) copy(cstr, strlen(cstr));
  else invalidate();
  
  return *this;
}
     f76:	df 91       	pop	r29
     f78:	cf 91       	pop	r28
     f7a:	1f 91       	pop	r17
     f7c:	0f 91       	pop	r16
     f7e:	ff 90       	pop	r15
     f80:	ef 90       	pop	r14
     f82:	08 95       	ret
copy():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:177
{
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
     f84:	1d 83       	std	Y+5, r17	; 0x05
     f86:	0c 83       	std	Y+4, r16	; 0x04
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:178
  strcpy(buffer, cstr);
     f88:	b7 01       	movw	r22, r14
     f8a:	c9 01       	movw	r24, r18
_ZN6StringaSEPKc.part.3():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:245
{
  if (cstr) copy(cstr, strlen(cstr));
  else invalidate();
  
  return *this;
}
     f8c:	df 91       	pop	r29
     f8e:	cf 91       	pop	r28
     f90:	1f 91       	pop	r17
     f92:	0f 91       	pop	r16
     f94:	ff 90       	pop	r15
     f96:	ef 90       	pop	r14
copy():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:178
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
  strcpy(buffer, cstr);
     f98:	0c 94 51 0f 	jmp	0x1ea2	; 0x1ea2 <strcpy>

00000f9c <showStatus()>:
showStatus():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:117
}

uint32_t oldFrequency = 0L;
uint8_t oldStationIndicator = 99;

void showStatus() {
     f9c:	8f 92       	push	r8
     f9e:	9f 92       	push	r9
     fa0:	af 92       	push	r10
     fa2:	bf 92       	push	r11
     fa4:	ff 92       	push	r15
     fa6:	0f 93       	push	r16
     fa8:	1f 93       	push	r17
     faa:	cf 93       	push	r28
     fac:	df 93       	push	r29
     fae:	cd b7       	in	r28, 0x3d	; 61
     fb0:	de b7       	in	r29, 0x3e	; 62
     fb2:	62 97       	sbiw	r28, 0x12	; 18
     fb4:	0f b6       	in	r0, 0x3f	; 63
     fb6:	f8 94       	cli
     fb8:	de bf       	out	0x3e, r29	; 62
     fba:	0f be       	out	0x3f, r0	; 63
     fbc:	cd bf       	out	0x3d, r28	; 61
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:119

  String unit, freqDisplay, stereo;
     fbe:	64 e4       	ldi	r22, 0x44	; 68
     fc0:	71 e0       	ldi	r23, 0x01	; 1
     fc2:	ce 01       	movw	r24, r28
     fc4:	01 96       	adiw	r24, 0x01	; 1
     fc6:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <String::String(char const*)>
     fca:	64 e4       	ldi	r22, 0x44	; 68
     fcc:	71 e0       	ldi	r23, 0x01	; 1
     fce:	ce 01       	movw	r24, r28
     fd0:	07 96       	adiw	r24, 0x07	; 7
     fd2:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <String::String(char const*)>
     fd6:	64 e4       	ldi	r22, 0x44	; 68
     fd8:	71 e0       	ldi	r23, 0x01	; 1
     fda:	ce 01       	movw	r24, r28
     fdc:	0d 96       	adiw	r24, 0x0d	; 13
     fde:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <String::String(char const*)>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:121

  uint32_t currentFrequency = rx.getFrequencyInteger(); 
     fe2:	0e 94 51 05 	call	0xaa2	; 0xaa2 <SI4844::getFrequencyInteger() [clone .constprop.22]>
_ZN6SI484425getStatusStationIndicatorEv():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.h:509
   * @ingroup GB1 
   * @brief Gets Station Indicator.
   * @details **Call getStatus or getAllReceiverInfo before calling this function** 
   * @return 0 = Invalid Station; 1 = Valid Station
   */
  inline uint16_t  getStatusStationIndicator() { return device_status.refined.STATION; };
     fe6:	f0 90 db 02 	lds	r15, 0x02DB	; 0x8002db <rx>
     fea:	f3 fa       	bst	r15, 3
     fec:	ff 24       	eor	r15, r15
     fee:	f0 f8       	bld	r15, 0
showStatus():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:124
  uint8_t currentStationIndicator = rx.getStatusStationIndicator();

  if ( oldFrequency == currentFrequency &&  oldStationIndicator == currentStationIndicator) return;
     ff0:	80 90 72 02 	lds	r8, 0x0272	; 0x800272 <oldFrequency>
     ff4:	90 90 73 02 	lds	r9, 0x0273	; 0x800273 <oldFrequency+0x1>
     ff8:	a0 90 74 02 	lds	r10, 0x0274	; 0x800274 <oldFrequency+0x2>
     ffc:	b0 90 75 02 	lds	r11, 0x0275	; 0x800275 <oldFrequency+0x3>
    1000:	86 16       	cp	r8, r22
    1002:	97 06       	cpc	r9, r23
    1004:	a8 06       	cpc	r10, r24
    1006:	b9 06       	cpc	r11, r25
    1008:	29 f4       	brne	.+10     	; 0x1014 <showStatus()+0x78>
    100a:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <oldStationIndicator>
    100e:	2f 15       	cp	r18, r15
    1010:	09 f4       	brne	.+2      	; 0x1014 <showStatus()+0x78>
    1012:	94 c0       	rjmp	.+296    	; 0x113c <showStatus()+0x1a0>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:126
  
  oldFrequency = currentFrequency; 
    1014:	60 93 72 02 	sts	0x0272, r22	; 0x800272 <oldFrequency>
    1018:	70 93 73 02 	sts	0x0273, r23	; 0x800273 <oldFrequency+0x1>
    101c:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <oldFrequency+0x2>
    1020:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <oldFrequency+0x3>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:127
  oldStationIndicator = currentStationIndicator;
    1024:	f0 92 04 01 	sts	0x0104, r15	; 0x800104 <oldStationIndicator>
clear():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:178
}

/********** high level commands, for the user! */
void LiquidCrystal::clear()
{
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	0e 94 33 03 	call	0x666	; 0x666 <LiquidCrystal::command(unsigned char) [clone .constprop.46]>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:179
  delayMicroseconds(2000);  // this command takes a long time!
    102e:	80 ed       	ldi	r24, 0xD0	; 208
    1030:	97 e0       	ldi	r25, 0x07	; 7
    1032:	0e 94 02 02 	call	0x404	; 0x404 <delayMicroseconds>
showStatus():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:131

  display.clear();

  display.setCursor(0, 0);
    1036:	60 e0       	ldi	r22, 0x00	; 0
    1038:	80 e0       	ldi	r24, 0x00	; 0
    103a:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.20]>
_ZN6SI484411getBandModeEv():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.h:464
   * @ingroup GB1 
   * @brief Get the Band Mode 
   * @return char*   "FM", "AM" or "SW"
   * @see getStatusBandMode()
   */
  inline char * getBandMode(){ return (char *) bandmode_table[all_receiver_status.refined.BANDMODE]; };
    103e:	e0 91 dd 02 	lds	r30, 0x02DD	; 0x8002dd <rx+0x2>
    1042:	e2 95       	swap	r30
    1044:	e6 95       	lsr	r30
    1046:	e6 95       	lsr	r30
    1048:	e3 70       	andi	r30, 0x03	; 3
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	ee 0f       	add	r30, r30
    104e:	ff 1f       	adc	r31, r31
    1050:	e9 50       	subi	r30, 0x09	; 9
    1052:	fd 4f       	sbci	r31, 0xFD	; 253
showStatus():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:132
  display.print(rx.getBandMode());
    1054:	80 81       	ld	r24, Z
    1056:	91 81       	ldd	r25, Z+1	; 0x01
    1058:	0e 94 1a 07 	call	0xe34	; 0xe34 <Print::print(char const*) [clone .constprop.38]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:134

  display.setCursor(12, 0);
    105c:	60 e0       	ldi	r22, 0x00	; 0
    105e:	8c e0       	ldi	r24, 0x0C	; 12
    1060:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.20]>
_ZN6SI484418getStatusBandIndexEv():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.h:569
  /** 
   * @ingroup GB1 
   * @brief Gets the current Band Index Detected.
   * @return 0~19: FM band; 20~24: AM band; 25~40: SW band
   */
  inline uint16_t  getStatusBandIndex() { return all_receiver_status.refined.BANDIDX; };
    1064:	e0 91 dd 02 	lds	r30, 0x02DD	; 0x8002dd <rx+0x2>
    1068:	ef 73       	andi	r30, 0x3F	; 63
showStatus():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:136
  bandIdx = rx.getStatusBandIndex();
  display.print(tabBand[bandIdx]);
    106a:	26 e0       	ldi	r18, 0x06	; 6
    106c:	e2 9f       	mul	r30, r18
    106e:	f0 01       	movw	r30, r0
    1070:	11 24       	eor	r1, r1
    1072:	ed 5d       	subi	r30, 0xDD	; 221
    1074:	fc 4f       	sbci	r31, 0xFC	; 252
write():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.h:58
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
    1076:	44 81       	ldd	r20, Z+4	; 0x04
    1078:	55 81       	ldd	r21, Z+5	; 0x05
    107a:	60 81       	ld	r22, Z
    107c:	71 81       	ldd	r23, Z+1	; 0x01
    107e:	8b e0       	ldi	r24, 0x0B	; 11
    1080:	93 e0       	ldi	r25, 0x03	; 3
    1082:	0e 94 69 02 	call	0x4d2	; 0x4d2 <Print::write(unsigned char const*, unsigned int)>
showStatus():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:138

  if (rx.getFrequencyInteger() > 999) 
    1086:	0e 94 51 05 	call	0xaa2	; 0xaa2 <SI4844::getFrequencyInteger() [clone .constprop.22]>
    108a:	68 3e       	cpi	r22, 0xE8	; 232
    108c:	73 40       	sbci	r23, 0x03	; 3
    108e:	81 05       	cpc	r24, r1
    1090:	91 05       	cpc	r25, r1
    1092:	08 f4       	brcc	.+2      	; 0x1096 <showStatus()+0xfa>
    1094:	6f c0       	rjmp	.+222    	; 0x1174 <showStatus()+0x1d8>
operator=():
    1096:	67 e3       	ldi	r22, 0x37	; 55
    1098:	71 e0       	ldi	r23, 0x01	; 1
    109a:	ce 01       	movw	r24, r28
    109c:	01 96       	adiw	r24, 0x01	; 1
    109e:	0e 94 98 07 	call	0xf30	; 0xf30 <String::operator=(char const*) [clone .part.3]>
showStatus():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:143
    unit =  "MHZ";
  else
    unit =  "kHz";  
  
  display.setCursor(13, 1);
    10a2:	61 e0       	ldi	r22, 0x01	; 1
    10a4:	8d e0       	ldi	r24, 0x0D	; 13
    10a6:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.20]>
write():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.h:58
    10aa:	4d 81       	ldd	r20, Y+5	; 0x05
    10ac:	5e 81       	ldd	r21, Y+6	; 0x06
    10ae:	69 81       	ldd	r22, Y+1	; 0x01
    10b0:	7a 81       	ldd	r23, Y+2	; 0x02
    10b2:	8b e0       	ldi	r24, 0x0B	; 11
    10b4:	93 e0       	ldi	r25, 0x03	; 3
    10b6:	0e 94 69 02 	call	0x4d2	; 0x4d2 <Print::write(unsigned char const*, unsigned int)>
_ZN6SI484417getStatusBandModeEv():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.h:562
   * @ingroup GB1 
   * @brief Gets the current Band Mode
   * @return 0 = FM mode; 1 = AM mode; 2 = SW mode
   * @see getBandMode()
   */
  inline uint16_t  getStatusBandMode() { return all_receiver_status.refined.BANDMODE; };
    10ba:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <rx+0x2>
    10be:	82 95       	swap	r24
    10c0:	86 95       	lsr	r24
    10c2:	86 95       	lsr	r24
    10c4:	83 70       	andi	r24, 0x03	; 3
showStatus():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:146
  display.print(unit);

  if (rx.getStatusBandMode() == 0) {
    10c6:	91 f4       	brne	.+36     	; 0x10ec <showStatus()+0x150>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:147
    display.setCursor(0, 1);
    10c8:	61 e0       	ldi	r22, 0x01	; 1
    10ca:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.20]>
_ZN6SI484415getStatusStereoEv():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.h:500
   * @details Applicable to Si4840/44 parts FM function only (id does not make sense for Si4827).
   * @details **Call getStatus or getAllReceiverInfo before calling this function**  
   * @return 0 = Stereo off; 1 = Stereo on
   * @see getStereoIndicator()
   */
  inline uint16_t  getStatusStereo() { return device_status.refined.STEREO; };
    10ce:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <rx>
    10d2:	82 fb       	bst	r24, 2
    10d4:	00 27       	eor	r16, r16
    10d6:	00 f9       	bld	r16, 0
    10d8:	10 e0       	ldi	r17, 0x00	; 0
showStatus():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:148
    display.print(stmo[rx.getStatusStereo()]);
    10da:	00 0f       	add	r16, r16
    10dc:	11 1f       	adc	r17, r17
    10de:	f8 01       	movw	r30, r16
    10e0:	eb 5e       	subi	r30, 0xEB	; 235
    10e2:	fe 4f       	sbci	r31, 0xFE	; 254
    10e4:	80 81       	ld	r24, Z
    10e6:	91 81       	ldd	r25, Z+1	; 0x01
    10e8:	0e 94 1a 07 	call	0xe34	; 0xe34 <Print::print(char const*) [clone .constprop.38]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:151
  }

  display.setCursor(7, 0); 
    10ec:	60 e0       	ldi	r22, 0x00	; 0
    10ee:	87 e0       	ldi	r24, 0x07	; 7
    10f0:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.20]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:152
  if ( currentStationIndicator != 0) {
    10f4:	ff 20       	and	r15, r15
    10f6:	09 f4       	brne	.+2      	; 0x10fa <showStatus()+0x15e>
    10f8:	40 c0       	rjmp	.+128    	; 0x117a <showStatus()+0x1de>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:153
      display.print((char *)"OK");
    10fa:	8f e3       	ldi	r24, 0x3F	; 63
    10fc:	91 e0       	ldi	r25, 0x01	; 1
    10fe:	0e 94 1a 07 	call	0xe34	; 0xe34 <Print::print(char const*) [clone .constprop.38]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:154
      digitalWrite(TUNE_LED, HIGH);
    1102:	61 e0       	ldi	r22, 0x01	; 1
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:157
  } else { 
      display.print((char *)"  ");
      digitalWrite(TUNE_LED, LOW);
    1104:	8a e0       	ldi	r24, 0x0A	; 10
    1106:	0e 94 85 01 	call	0x30a	; 0x30a <digitalWrite>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:161
  }


  display.setCursor(5, 1);
    110a:	61 e0       	ldi	r22, 0x01	; 1
    110c:	85 e0       	ldi	r24, 0x05	; 5
    110e:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.20]>
getFormattedFrequency():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1472
 * @param  removeRightDigit number of less significant digits to be removed (FM mode only)
 * @return  point to char with the formatted current frequency
 */
char* SI4844::getFormattedFrequency(uint8_t removeRightDigit, uint8_t thousandsSeparator) {

    uint32_t f = this->getFrequencyInteger();
    1112:	0e 94 51 05 	call	0xaa2	; 0xaa2 <SI4844::getFrequencyInteger() [clone .constprop.22]>
_ZN6SI484417getStatusBandModeEv():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.h:562
   * @ingroup GB1 
   * @brief Gets the current Band Mode
   * @return 0 = FM mode; 1 = AM mode; 2 = SW mode
   * @see getBandMode()
   */
  inline uint16_t  getStatusBandMode() { return all_receiver_status.refined.BANDMODE; };
    1116:	20 91 dd 02 	lds	r18, 0x02DD	; 0x8002dd <rx+0x2>
    111a:	22 95       	swap	r18
    111c:	26 95       	lsr	r18
    111e:	26 95       	lsr	r18
    1120:	23 70       	andi	r18, 0x03	; 3
getFormattedFrequency():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1473
    if ( this->getStatusBandMode() == 0 ) { 
    1122:	89 f5       	brne	.+98     	; 0x1186 <showStatus()+0x1ea>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1474
        this->convertToChar(f,this->strFormattedCurrentFrequenct,6,3,thousandsSeparator,true);
    1124:	03 e0       	ldi	r16, 0x03	; 3
    1126:	26 e0       	ldi	r18, 0x06	; 6
    1128:	41 e0       	ldi	r20, 0x01	; 1
    112a:	53 e0       	ldi	r21, 0x03	; 3
    112c:	0e 94 8d 00 	call	0x11a	; 0x11a <SI4844::convertToChar(unsigned long, char*, unsigned char, unsigned char, unsigned char, bool) [clone .constprop.37]>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1475
        strFormattedCurrentFrequenct[7-removeRightDigit] = '\0';
    1130:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <rx+0x2b>
showStatus():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:162
  display.print(rx.getFormattedFrequency(2,'.'));  
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	93 e0       	ldi	r25, 0x03	; 3
    1138:	0e 94 1a 07 	call	0xe34	; 0xe34 <Print::print(char const*) [clone .constprop.38]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:124
  String unit, freqDisplay, stereo;

  uint32_t currentFrequency = rx.getFrequencyInteger(); 
  uint8_t currentStationIndicator = rx.getStatusStationIndicator();

  if ( oldFrequency == currentFrequency &&  oldStationIndicator == currentStationIndicator) return;
    113c:	ce 01       	movw	r24, r28
    113e:	0d 96       	adiw	r24, 0x0d	; 13
    1140:	0e 94 2c 07 	call	0xe58	; 0xe58 <String::~String()>
    1144:	ce 01       	movw	r24, r28
    1146:	07 96       	adiw	r24, 0x07	; 7
    1148:	0e 94 2c 07 	call	0xe58	; 0xe58 <String::~String()>
    114c:	ce 01       	movw	r24, r28
    114e:	01 96       	adiw	r24, 0x01	; 1
    1150:	0e 94 2c 07 	call	0xe58	; 0xe58 <String::~String()>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:164


  display.setCursor(5, 1);
  display.print(rx.getFormattedFrequency(2,'.'));  

}
    1154:	62 96       	adiw	r28, 0x12	; 18
    1156:	0f b6       	in	r0, 0x3f	; 63
    1158:	f8 94       	cli
    115a:	de bf       	out	0x3e, r29	; 62
    115c:	0f be       	out	0x3f, r0	; 63
    115e:	cd bf       	out	0x3d, r28	; 61
    1160:	df 91       	pop	r29
    1162:	cf 91       	pop	r28
    1164:	1f 91       	pop	r17
    1166:	0f 91       	pop	r16
    1168:	ff 90       	pop	r15
    116a:	bf 90       	pop	r11
    116c:	af 90       	pop	r10
    116e:	9f 90       	pop	r9
    1170:	8f 90       	pop	r8
    1172:	08 95       	ret
operator=():
    1174:	6b e3       	ldi	r22, 0x3B	; 59
    1176:	71 e0       	ldi	r23, 0x01	; 1
    1178:	90 cf       	rjmp	.-224    	; 0x109a <showStatus()+0xfe>
showStatus():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:156
  display.setCursor(7, 0); 
  if ( currentStationIndicator != 0) {
      display.print((char *)"OK");
      digitalWrite(TUNE_LED, HIGH);
  } else { 
      display.print((char *)"  ");
    117a:	82 e4       	ldi	r24, 0x42	; 66
    117c:	91 e0       	ldi	r25, 0x01	; 1
    117e:	0e 94 1a 07 	call	0xe34	; 0xe34 <Print::print(char const*) [clone .constprop.38]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:157
      digitalWrite(TUNE_LED, LOW);
    1182:	60 e0       	ldi	r22, 0x00	; 0
    1184:	bf cf       	rjmp	.-130    	; 0x1104 <showStatus()+0x168>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1477
    } else { 
         this->convertToChar(f,this->strFormattedCurrentFrequenct,5,(f > 999)? 2:0,'.',true);
    1186:	00 e0       	ldi	r16, 0x00	; 0
getFormattedFrequency():
    1188:	68 3e       	cpi	r22, 0xE8	; 232
    118a:	23 e0       	ldi	r18, 0x03	; 3
    118c:	72 07       	cpc	r23, r18
    118e:	81 05       	cpc	r24, r1
    1190:	91 05       	cpc	r25, r1
    1192:	08 f0       	brcs	.+2      	; 0x1196 <showStatus()+0x1fa>
showStatus():
    1194:	02 e0       	ldi	r16, 0x02	; 2
getFormattedFrequency():
    1196:	25 e0       	ldi	r18, 0x05	; 5
    1198:	41 e0       	ldi	r20, 0x01	; 1
    119a:	53 e0       	ldi	r21, 0x03	; 3
    119c:	0e 94 8d 00 	call	0x11a	; 0x11a <SI4844::convertToChar(unsigned long, char*, unsigned char, unsigned char, unsigned char, bool) [clone .constprop.37]>
    11a0:	c9 cf       	rjmp	.-110    	; 0x1134 <showStatus()+0x198>

000011a2 <__vector_16>:
__vector_16():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    11a2:	1f 92       	push	r1
    11a4:	0f 92       	push	r0
    11a6:	0f b6       	in	r0, 0x3f	; 63
    11a8:	0f 92       	push	r0
    11aa:	11 24       	eor	r1, r1
    11ac:	2f 93       	push	r18
    11ae:	3f 93       	push	r19
    11b0:	8f 93       	push	r24
    11b2:	9f 93       	push	r25
    11b4:	af 93       	push	r26
    11b6:	bf 93       	push	r27
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
    11b8:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <timer0_millis>
    11bc:	90 91 d8 02 	lds	r25, 0x02D8	; 0x8002d8 <timer0_millis+0x1>
    11c0:	a0 91 d9 02 	lds	r26, 0x02D9	; 0x8002d9 <timer0_millis+0x2>
    11c4:	b0 91 da 02 	lds	r27, 0x02DA	; 0x8002da <timer0_millis+0x3>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
    11c8:	30 91 76 02 	lds	r19, 0x0276	; 0x800276 <timer0_fract>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
    11cc:	23 e0       	ldi	r18, 0x03	; 3
    11ce:	23 0f       	add	r18, r19
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
    11d0:	2d 37       	cpi	r18, 0x7D	; 125
    11d2:	68 f1       	brcs	.+90     	; 0x122e <__vector_16+0x8c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
    11d4:	26 e8       	ldi	r18, 0x86	; 134
    11d6:	23 0f       	add	r18, r19
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
    11d8:	02 96       	adiw	r24, 0x02	; 2
    11da:	a1 1d       	adc	r26, r1
    11dc:	b1 1d       	adc	r27, r1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
    11de:	20 93 76 02 	sts	0x0276, r18	; 0x800276 <timer0_fract>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
    11e2:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <timer0_millis>
    11e6:	90 93 d8 02 	sts	0x02D8, r25	; 0x8002d8 <timer0_millis+0x1>
    11ea:	a0 93 d9 02 	sts	0x02D9, r26	; 0x8002d9 <timer0_millis+0x2>
    11ee:	b0 93 da 02 	sts	0x02DA, r27	; 0x8002da <timer0_millis+0x3>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
    11f2:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <timer0_overflow_count>
    11f6:	90 91 78 02 	lds	r25, 0x0278	; 0x800278 <timer0_overflow_count+0x1>
    11fa:	a0 91 79 02 	lds	r26, 0x0279	; 0x800279 <timer0_overflow_count+0x2>
    11fe:	b0 91 7a 02 	lds	r27, 0x027A	; 0x80027a <timer0_overflow_count+0x3>
    1202:	01 96       	adiw	r24, 0x01	; 1
    1204:	a1 1d       	adc	r26, r1
    1206:	b1 1d       	adc	r27, r1
    1208:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <timer0_overflow_count>
    120c:	90 93 78 02 	sts	0x0278, r25	; 0x800278 <timer0_overflow_count+0x1>
    1210:	a0 93 79 02 	sts	0x0279, r26	; 0x800279 <timer0_overflow_count+0x2>
    1214:	b0 93 7a 02 	sts	0x027A, r27	; 0x80027a <timer0_overflow_count+0x3>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:213
#endif
}
    1218:	bf 91       	pop	r27
    121a:	af 91       	pop	r26
    121c:	9f 91       	pop	r25
    121e:	8f 91       	pop	r24
    1220:	3f 91       	pop	r19
    1222:	2f 91       	pop	r18
    1224:	0f 90       	pop	r0
    1226:	0f be       	out	0x3f, r0	; 63
    1228:	0f 90       	pop	r0
    122a:	1f 90       	pop	r1
    122c:	18 95       	reti
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
    122e:	01 96       	adiw	r24, 0x01	; 1
    1230:	a1 1d       	adc	r26, r1
    1232:	b1 1d       	adc	r27, r1
    1234:	d4 cf       	rjmp	.-88     	; 0x11de <__vector_16+0x3c>

00001236 <__vector_2>:
__vector_2():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WInterrupts.c:489
|| defined(__AVR_ATmega48PB__)  || defined(__AVR_ATmega88__)  || defined(__AVR_ATmega88P__)  \
|| defined(__AVR_ATmega88PB__)  || defined(__AVR_ATmega168__) || defined(__AVR_ATmega168P__) \
|| defined(__AVR_ATmega168PB__) || defined(__AVR_ATmega328__) || defined(__AVR_ATmega328P__) \
|| defined(__AVR_ATmega328PB__)
  IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
  IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    1236:	1f 92       	push	r1
    1238:	0f 92       	push	r0
    123a:	0f b6       	in	r0, 0x3f	; 63
    123c:	0f 92       	push	r0
    123e:	11 24       	eor	r1, r1
    1240:	2f 93       	push	r18
    1242:	3f 93       	push	r19
    1244:	4f 93       	push	r20
    1246:	5f 93       	push	r21
    1248:	6f 93       	push	r22
    124a:	7f 93       	push	r23
    124c:	8f 93       	push	r24
    124e:	9f 93       	push	r25
    1250:	af 93       	push	r26
    1252:	bf 93       	push	r27
    1254:	ef 93       	push	r30
    1256:	ff 93       	push	r31
    1258:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_start+0x2>
    125c:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <__data_start+0x3>
    1260:	09 95       	icall
    1262:	ff 91       	pop	r31
    1264:	ef 91       	pop	r30
    1266:	bf 91       	pop	r27
    1268:	af 91       	pop	r26
    126a:	9f 91       	pop	r25
    126c:	8f 91       	pop	r24
    126e:	7f 91       	pop	r23
    1270:	6f 91       	pop	r22
    1272:	5f 91       	pop	r21
    1274:	4f 91       	pop	r20
    1276:	3f 91       	pop	r19
    1278:	2f 91       	pop	r18
    127a:	0f 90       	pop	r0
    127c:	0f be       	out	0x3f, r0	; 63
    127e:	0f 90       	pop	r0
    1280:	1f 90       	pop	r1
    1282:	18 95       	reti

00001284 <__vector_1>:
__vector_1():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WInterrupts.c:488
#elif defined(__AVR_ATmega8__)  || defined(__AVR_ATmega48__)  || defined(__AVR_ATmega48P__)  \
|| defined(__AVR_ATmega48PB__)  || defined(__AVR_ATmega88__)  || defined(__AVR_ATmega88P__)  \
|| defined(__AVR_ATmega88PB__)  || defined(__AVR_ATmega168__) || defined(__AVR_ATmega168P__) \
|| defined(__AVR_ATmega168PB__) || defined(__AVR_ATmega328__) || defined(__AVR_ATmega328P__) \
|| defined(__AVR_ATmega328PB__)
  IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    1284:	1f 92       	push	r1
    1286:	0f 92       	push	r0
    1288:	0f b6       	in	r0, 0x3f	; 63
    128a:	0f 92       	push	r0
    128c:	11 24       	eor	r1, r1
    128e:	2f 93       	push	r18
    1290:	3f 93       	push	r19
    1292:	4f 93       	push	r20
    1294:	5f 93       	push	r21
    1296:	6f 93       	push	r22
    1298:	7f 93       	push	r23
    129a:	8f 93       	push	r24
    129c:	9f 93       	push	r25
    129e:	af 93       	push	r26
    12a0:	bf 93       	push	r27
    12a2:	ef 93       	push	r30
    12a4:	ff 93       	push	r31
    12a6:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
    12aa:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
    12ae:	09 95       	icall
    12b0:	ff 91       	pop	r31
    12b2:	ef 91       	pop	r30
    12b4:	bf 91       	pop	r27
    12b6:	af 91       	pop	r26
    12b8:	9f 91       	pop	r25
    12ba:	8f 91       	pop	r24
    12bc:	7f 91       	pop	r23
    12be:	6f 91       	pop	r22
    12c0:	5f 91       	pop	r21
    12c2:	4f 91       	pop	r20
    12c4:	3f 91       	pop	r19
    12c6:	2f 91       	pop	r18
    12c8:	0f 90       	pop	r0
    12ca:	0f be       	out	0x3f, r0	; 63
    12cc:	0f 90       	pop	r0
    12ce:	1f 90       	pop	r1
    12d0:	18 95       	reti

000012d2 <__vector_24>:
__vector_24():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:534
  }
  return(flag);
}

ISR(TWI_vect)
{
    12d2:	1f 92       	push	r1
    12d4:	0f 92       	push	r0
    12d6:	0f b6       	in	r0, 0x3f	; 63
    12d8:	0f 92       	push	r0
    12da:	11 24       	eor	r1, r1
    12dc:	2f 93       	push	r18
    12de:	3f 93       	push	r19
    12e0:	4f 93       	push	r20
    12e2:	5f 93       	push	r21
    12e4:	6f 93       	push	r22
    12e6:	7f 93       	push	r23
    12e8:	8f 93       	push	r24
    12ea:	9f 93       	push	r25
    12ec:	af 93       	push	r26
    12ee:	bf 93       	push	r27
    12f0:	ef 93       	push	r30
    12f2:	ff 93       	push	r31
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:535
  switch(TW_STATUS){
    12f4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    12f8:	88 7f       	andi	r24, 0xF8	; 248
    12fa:	80 36       	cpi	r24, 0x60	; 96
    12fc:	09 f4       	brne	.+2      	; 0x1300 <__vector_24+0x2e>
    12fe:	4a c0       	rjmp	.+148    	; 0x1394 <__vector_24+0xc2>
    1300:	f0 f5       	brcc	.+124    	; 0x137e <__vector_24+0xac>
    1302:	88 32       	cpi	r24, 0x28	; 40
    1304:	09 f4       	brne	.+2      	; 0x1308 <__vector_24+0x36>
    1306:	a5 c0       	rjmp	.+330    	; 0x1452 <__vector_24+0x180>
    1308:	18 f5       	brcc	.+70     	; 0x1350 <__vector_24+0x7e>
    130a:	80 31       	cpi	r24, 0x10	; 16
    130c:	09 f4       	brne	.+2      	; 0x1310 <__vector_24+0x3e>
    130e:	99 c0       	rjmp	.+306    	; 0x1442 <__vector_24+0x170>
    1310:	b8 f4       	brcc	.+46     	; 0x1340 <__vector_24+0x6e>
    1312:	88 23       	and	r24, r24
    1314:	09 f4       	brne	.+2      	; 0x1318 <__vector_24+0x46>
    1316:	01 c1       	rjmp	.+514    	; 0x151a <__vector_24+0x248>
    1318:	88 30       	cpi	r24, 0x08	; 8
    131a:	09 f4       	brne	.+2      	; 0x131e <__vector_24+0x4c>
    131c:	92 c0       	rjmp	.+292    	; 0x1442 <__vector_24+0x170>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:696
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    131e:	ff 91       	pop	r31
    1320:	ef 91       	pop	r30
    1322:	bf 91       	pop	r27
    1324:	af 91       	pop	r26
    1326:	9f 91       	pop	r25
    1328:	8f 91       	pop	r24
    132a:	7f 91       	pop	r23
    132c:	6f 91       	pop	r22
    132e:	5f 91       	pop	r21
    1330:	4f 91       	pop	r20
    1332:	3f 91       	pop	r19
    1334:	2f 91       	pop	r18
    1336:	0f 90       	pop	r0
    1338:	0f be       	out	0x3f, r0	; 63
    133a:	0f 90       	pop	r0
    133c:	1f 90       	pop	r1
    133e:	18 95       	reti
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1340:	88 31       	cpi	r24, 0x18	; 24
    1342:	09 f4       	brne	.+2      	; 0x1346 <__vector_24+0x74>
    1344:	86 c0       	rjmp	.+268    	; 0x1452 <__vector_24+0x180>
    1346:	80 32       	cpi	r24, 0x20	; 32
    1348:	51 f7       	brne	.-44     	; 0x131e <__vector_24+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:570
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    134a:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <twi_error>
    134e:	14 c0       	rjmp	.+40     	; 0x1378 <__vector_24+0xa6>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1350:	80 34       	cpi	r24, 0x40	; 64
    1352:	09 f4       	brne	.+2      	; 0x1356 <__vector_24+0x84>
    1354:	a3 c0       	rjmp	.+326    	; 0x149c <__vector_24+0x1ca>
    1356:	40 f4       	brcc	.+16     	; 0x1368 <__vector_24+0x96>
    1358:	80 33       	cpi	r24, 0x30	; 48
    135a:	b9 f3       	breq	.-18     	; 0x134a <__vector_24+0x78>
    135c:	88 33       	cpi	r24, 0x38	; 56
    135e:	f9 f6       	brne	.-66     	; 0x131e <__vector_24+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:574
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    1360:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <twi_error>
twi_reply():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1364:	85 ec       	ldi	r24, 0xC5	; 197
    1366:	ba c0       	rjmp	.+372    	; 0x14dc <__vector_24+0x20a>
__vector_24():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1368:	80 35       	cpi	r24, 0x50	; 80
    136a:	09 f4       	brne	.+2      	; 0x136e <__vector_24+0x9c>
    136c:	87 c0       	rjmp	.+270    	; 0x147c <__vector_24+0x1aa>
    136e:	88 35       	cpi	r24, 0x58	; 88
    1370:	09 f4       	brne	.+2      	; 0x1374 <__vector_24+0xa2>
    1372:	9c c0       	rjmp	.+312    	; 0x14ac <__vector_24+0x1da>
    1374:	88 34       	cpi	r24, 0x48	; 72
    1376:	99 f6       	brne	.-90     	; 0x131e <__vector_24+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:693
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
    1378:	0e 94 f6 03 	call	0x7ec	; 0x7ec <twi_stop>
    137c:	d0 cf       	rjmp	.-96     	; 0x131e <__vector_24+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    137e:	88 39       	cpi	r24, 0x98	; 152
    1380:	09 f4       	brne	.+2      	; 0x1384 <__vector_24+0xb2>
    1382:	92 c0       	rjmp	.+292    	; 0x14a8 <__vector_24+0x1d6>
    1384:	38 f5       	brcc	.+78     	; 0x13d4 <__vector_24+0x102>
    1386:	88 37       	cpi	r24, 0x78	; 120
    1388:	29 f0       	breq	.+10     	; 0x1394 <__vector_24+0xc2>
    138a:	50 f4       	brcc	.+20     	; 0x13a0 <__vector_24+0xce>
    138c:	88 36       	cpi	r24, 0x68	; 104
    138e:	11 f0       	breq	.+4      	; 0x1394 <__vector_24+0xc2>
    1390:	80 37       	cpi	r24, 0x70	; 112
    1392:	29 f6       	brne	.-118    	; 0x131e <__vector_24+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:616
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    1394:	83 e0       	ldi	r24, 0x03	; 3
    1396:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <twi_state>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:618
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    139a:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <twi_rxBufferIndex>
    139e:	55 c0       	rjmp	.+170    	; 0x144a <__vector_24+0x178>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    13a0:	88 38       	cpi	r24, 0x88	; 136
    13a2:	09 f4       	brne	.+2      	; 0x13a6 <__vector_24+0xd4>
    13a4:	81 c0       	rjmp	.+258    	; 0x14a8 <__vector_24+0x1d6>
    13a6:	80 39       	cpi	r24, 0x90	; 144
    13a8:	19 f0       	breq	.+6      	; 0x13b0 <__vector_24+0xde>
    13aa:	80 38       	cpi	r24, 0x80	; 128
    13ac:	09 f0       	breq	.+2      	; 0x13b0 <__vector_24+0xde>
    13ae:	b7 cf       	rjmp	.-146    	; 0x131e <__vector_24+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:624
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    13b0:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <twi_rxBufferIndex>
    13b4:	80 32       	cpi	r24, 0x20	; 32
    13b6:	08 f0       	brcs	.+2      	; 0x13ba <__vector_24+0xe8>
    13b8:	77 c0       	rjmp	.+238    	; 0x14a8 <__vector_24+0x1d6>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:626
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    13ba:	e0 91 71 02 	lds	r30, 0x0271	; 0x800271 <twi_rxBufferIndex>
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	8e 0f       	add	r24, r30
    13c2:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <twi_rxBufferIndex>
    13c6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	ef 5a       	subi	r30, 0xAF	; 175
    13ce:	fd 4f       	sbci	r31, 0xFD	; 253
    13d0:	80 83       	st	Z, r24
    13d2:	3b c0       	rjmp	.+118    	; 0x144a <__vector_24+0x178>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    13d4:	80 3b       	cpi	r24, 0xB0	; 176
    13d6:	39 f0       	breq	.+14     	; 0x13e6 <__vector_24+0x114>
    13d8:	d0 f4       	brcc	.+52     	; 0x140e <__vector_24+0x13c>
    13da:	80 3a       	cpi	r24, 0xA0	; 160
    13dc:	09 f4       	brne	.+2      	; 0x13e0 <__vector_24+0x10e>
    13de:	83 c0       	rjmp	.+262    	; 0x14e6 <__vector_24+0x214>
    13e0:	88 3a       	cpi	r24, 0xA8	; 168
    13e2:	09 f0       	breq	.+2      	; 0x13e6 <__vector_24+0x114>
    13e4:	9c cf       	rjmp	.-200    	; 0x131e <__vector_24+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:655

    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    13e6:	84 e0       	ldi	r24, 0x04	; 4
    13e8:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <twi_state>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:657
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    13ec:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <twi_txBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:659
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    13f0:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <twi_txBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:662
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	e0 e0       	ldi	r30, 0x00	; 0
    13f8:	09 95       	icall
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:664
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    13fa:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <twi_txBufferLength>
    13fe:	81 11       	cpse	r24, r1
    1400:	0f c0       	rjmp	.+30     	; 0x1420 <__vector_24+0x14e>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:665
        twi_txBufferLength = 1;
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <twi_txBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:666
        twi_txBuffer[0] = 0x00;
    1408:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <twi_txBuffer>
    140c:	09 c0       	rjmp	.+18     	; 0x1420 <__vector_24+0x14e>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    140e:	80 3c       	cpi	r24, 0xC0	; 192
    1410:	09 f4       	brne	.+2      	; 0x1414 <__vector_24+0x142>
    1412:	a8 cf       	rjmp	.-176    	; 0x1364 <__vector_24+0x92>
    1414:	88 3c       	cpi	r24, 0xC8	; 200
    1416:	09 f4       	brne	.+2      	; 0x141a <__vector_24+0x148>
    1418:	a5 cf       	rjmp	.-182    	; 0x1364 <__vector_24+0x92>
    141a:	88 3b       	cpi	r24, 0xB8	; 184
    141c:	09 f0       	breq	.+2      	; 0x1420 <__vector_24+0x14e>
    141e:	7f cf       	rjmp	.-258    	; 0x131e <__vector_24+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:672
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    1420:	e0 91 50 02 	lds	r30, 0x0250	; 0x800250 <twi_txBufferIndex>
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	8e 0f       	add	r24, r30
    1428:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <twi_txBufferIndex>
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	e1 5d       	subi	r30, 0xD1	; 209
    1430:	fd 4f       	sbci	r31, 0xFD	; 253
    1432:	80 81       	ld	r24, Z
    1434:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:674
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1438:	90 91 50 02 	lds	r25, 0x0250	; 0x800250 <twi_txBufferIndex>
    143c:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <twi_txBufferLength>
    1440:	31 c0       	rjmp	.+98     	; 0x14a4 <__vector_24+0x1d2>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:540
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    1442:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <twi_slarw>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:550
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1446:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
twi_reply():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    144a:	85 ec       	ldi	r24, 0xC5	; 197
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:423
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    144c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1450:	66 cf       	rjmp	.-308    	; 0x131e <__vector_24+0x4c>
__vector_24():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:548

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1452:	90 91 c5 02 	lds	r25, 0x02C5	; 0x8002c5 <twi_masterBufferIndex>
    1456:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <twi_masterBufferLength>
    145a:	98 17       	cp	r25, r24
    145c:	b8 f5       	brcc	.+110    	; 0x14cc <__vector_24+0x1fa>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:550
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    145e:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <twi_masterBuffer>
    1462:	90 91 c7 02 	lds	r25, 0x02C7	; 0x8002c7 <twi_masterBuffer+0x1>
    1466:	e0 91 c5 02 	lds	r30, 0x02C5	; 0x8002c5 <twi_masterBufferIndex>
    146a:	21 e0       	ldi	r18, 0x01	; 1
    146c:	2e 0f       	add	r18, r30
    146e:	20 93 c5 02 	sts	0x02C5, r18	; 0x8002c5 <twi_masterBufferIndex>
    1472:	e8 0f       	add	r30, r24
    1474:	f9 2f       	mov	r31, r25
    1476:	f1 1d       	adc	r31, r1
    1478:	80 81       	ld	r24, Z
    147a:	e5 cf       	rjmp	.-54     	; 0x1446 <__vector_24+0x174>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:581
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    147c:	20 91 c6 02 	lds	r18, 0x02C6	; 0x8002c6 <twi_masterBuffer>
    1480:	30 91 c7 02 	lds	r19, 0x02C7	; 0x8002c7 <twi_masterBuffer+0x1>
    1484:	e0 91 c5 02 	lds	r30, 0x02C5	; 0x8002c5 <twi_masterBufferIndex>
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	8e 0f       	add	r24, r30
    148c:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <twi_masterBufferIndex>
    1490:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    1494:	e2 0f       	add	r30, r18
    1496:	f3 2f       	mov	r31, r19
    1498:	f1 1d       	adc	r31, r1
    149a:	80 83       	st	Z, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:585
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    149c:	90 91 c5 02 	lds	r25, 0x02C5	; 0x8002c5 <twi_masterBufferIndex>
    14a0:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <twi_masterBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:674
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    14a4:	98 17       	cp	r25, r24
    14a6:	88 f2       	brcs	.-94     	; 0x144a <__vector_24+0x178>
twi_reply():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:423
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    14a8:	85 e8       	ldi	r24, 0x85	; 133
    14aa:	d0 cf       	rjmp	.-96     	; 0x144c <__vector_24+0x17a>
__vector_24():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:593
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    14ac:	20 91 c6 02 	lds	r18, 0x02C6	; 0x8002c6 <twi_masterBuffer>
    14b0:	30 91 c7 02 	lds	r19, 0x02C7	; 0x8002c7 <twi_masterBuffer+0x1>
    14b4:	e0 91 c5 02 	lds	r30, 0x02C5	; 0x8002c5 <twi_masterBufferIndex>
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	8e 0f       	add	r24, r30
    14bc:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <twi_masterBufferIndex>
    14c0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    14c4:	e2 0f       	add	r30, r18
    14c6:	f3 2f       	mov	r31, r19
    14c8:	f1 1d       	adc	r31, r1
    14ca:	80 83       	st	Z, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:594
  if (twi_sendStop)
    14cc:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <twi_sendStop>
    14d0:	81 11       	cpse	r24, r1
    14d2:	52 cf       	rjmp	.-348    	; 0x1378 <__vector_24+0xa6>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:597
          twi_stop();
  else {
    twi_inRepStart = true;  // we're going to send the START
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <twi_inRepStart>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:601
    // don't enable the interrupt. We'll generate the start, but we
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    14da:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    14dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
__vector_24():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:685
    case TW_ST_DATA_NACK: // received nack, we are done
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    14e0:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <twi_state>
    14e4:	1c cf       	rjmp	.-456    	; 0x131e <__vector_24+0x4c>
twi_releaseBus():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:474
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    14e6:	85 ec       	ldi	r24, 0xC5	; 197
    14e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:477

  // update twi state
  twi_state = TWI_READY;
    14ec:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <twi_state>
__vector_24():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:637
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    14f0:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <twi_rxBufferIndex>
    14f4:	80 32       	cpi	r24, 0x20	; 32
    14f6:	30 f4       	brcc	.+12     	; 0x1504 <__vector_24+0x232>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:638
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    14f8:	e0 91 71 02 	lds	r30, 0x0271	; 0x800271 <twi_rxBufferIndex>
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	ef 5a       	subi	r30, 0xAF	; 175
    1500:	fd 4f       	sbci	r31, 0xFD	; 253
    1502:	10 82       	st	Z, r1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:641
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1504:	60 91 71 02 	lds	r22, 0x0271	; 0x800271 <twi_rxBufferIndex>
    1508:	70 e0       	ldi	r23, 0x00	; 0
    150a:	81 e5       	ldi	r24, 0x51	; 81
    150c:	92 e0       	ldi	r25, 0x02	; 2
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	e0 e0       	ldi	r30, 0x00	; 0
    1512:	09 95       	icall
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:643
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1514:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <twi_rxBufferIndex>
    1518:	02 cf       	rjmp	.-508    	; 0x131e <__vector_24+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:692

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    151a:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <twi_error>
    151e:	2c cf       	rjmp	.-424    	; 0x1378 <__vector_24+0xa6>

00001520 <global constructors keyed to 65535_0_SI4844_02_LCD16x2_SLIDE_SWITCH.ino.cpp.o.2504>:
_GLOBAL__I_65535_0_SI4844_02_LCD16x2_SLIDE_SWITCH.ino.cpp.o.2504():
    1520:	1f 93       	push	r17
    1522:	cf 93       	push	r28
    1524:	df 93       	push	r29
    1526:	eb ec       	ldi	r30, 0xCB	; 203
    1528:	f2 e0       	ldi	r31, 0x02	; 2
    152a:	13 82       	std	Z+3, r1	; 0x03
    152c:	12 82       	std	Z+2, r1	; 0x02
    152e:	88 ee       	ldi	r24, 0xE8	; 232
    1530:	93 e0       	ldi	r25, 0x03	; 3
    1532:	a0 e0       	ldi	r26, 0x00	; 0
    1534:	b0 e0       	ldi	r27, 0x00	; 0
    1536:	84 83       	std	Z+4, r24	; 0x04
    1538:	95 83       	std	Z+5, r25	; 0x05
    153a:	a6 83       	std	Z+6, r26	; 0x06
    153c:	b7 83       	std	Z+7, r27	; 0x07
    153e:	8d e1       	ldi	r24, 0x1D	; 29
    1540:	91 e0       	ldi	r25, 0x01	; 1
    1542:	91 83       	std	Z+1, r25	; 0x01
    1544:	80 83       	st	Z, r24
    1546:	8f b7       	in	r24, 0x3f	; 63
    1548:	f8 94       	cli
    154a:	40 91 d7 02 	lds	r20, 0x02D7	; 0x8002d7 <timer0_millis>
    154e:	50 91 d8 02 	lds	r21, 0x02D8	; 0x8002d8 <timer0_millis+0x1>
    1552:	60 91 d9 02 	lds	r22, 0x02D9	; 0x8002d9 <timer0_millis+0x2>
    1556:	70 91 da 02 	lds	r23, 0x02DA	; 0x8002da <timer0_millis+0x3>
    155a:	8f bf       	out	0x3f, r24	; 63
    155c:	65 e4       	ldi	r22, 0x45	; 69
    155e:	71 e0       	ldi	r23, 0x01	; 1
    1560:	83 e2       	ldi	r24, 0x23	; 35
    1562:	93 e0       	ldi	r25, 0x03	; 3
    1564:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <String::String(char const*)>
    1568:	6a e4       	ldi	r22, 0x4A	; 74
    156a:	71 e0       	ldi	r23, 0x01	; 1
    156c:	89 e2       	ldi	r24, 0x29	; 41
    156e:	93 e0       	ldi	r25, 0x03	; 3
    1570:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <String::String(char const*)>
    1574:	6f e4       	ldi	r22, 0x4F	; 79
    1576:	71 e0       	ldi	r23, 0x01	; 1
    1578:	8f e2       	ldi	r24, 0x2F	; 47
    157a:	93 e0       	ldi	r25, 0x03	; 3
    157c:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <String::String(char const*)>
    1580:	64 e5       	ldi	r22, 0x54	; 84
    1582:	71 e0       	ldi	r23, 0x01	; 1
    1584:	85 e3       	ldi	r24, 0x35	; 53
    1586:	93 e0       	ldi	r25, 0x03	; 3
    1588:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <String::String(char const*)>
    158c:	69 e5       	ldi	r22, 0x59	; 89
    158e:	71 e0       	ldi	r23, 0x01	; 1
    1590:	8b e3       	ldi	r24, 0x3B	; 59
    1592:	93 e0       	ldi	r25, 0x03	; 3
    1594:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <String::String(char const*)>
    1598:	6e e5       	ldi	r22, 0x5E	; 94
    159a:	71 e0       	ldi	r23, 0x01	; 1
    159c:	81 e4       	ldi	r24, 0x41	; 65
    159e:	93 e0       	ldi	r25, 0x03	; 3
    15a0:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <String::String(char const*)>
    15a4:	63 e6       	ldi	r22, 0x63	; 99
    15a6:	71 e0       	ldi	r23, 0x01	; 1
    15a8:	87 e4       	ldi	r24, 0x47	; 71
    15aa:	93 e0       	ldi	r25, 0x03	; 3
    15ac:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <String::String(char const*)>
    15b0:	68 e6       	ldi	r22, 0x68	; 104
    15b2:	71 e0       	ldi	r23, 0x01	; 1
    15b4:	8d e4       	ldi	r24, 0x4D	; 77
    15b6:	93 e0       	ldi	r25, 0x03	; 3
    15b8:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <String::String(char const*)>
    15bc:	6d e6       	ldi	r22, 0x6D	; 109
    15be:	71 e0       	ldi	r23, 0x01	; 1
    15c0:	83 e5       	ldi	r24, 0x53	; 83
    15c2:	93 e0       	ldi	r25, 0x03	; 3
    15c4:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <String::String(char const*)>
    15c8:	62 e7       	ldi	r22, 0x72	; 114
    15ca:	71 e0       	ldi	r23, 0x01	; 1
    15cc:	89 e5       	ldi	r24, 0x59	; 89
    15ce:	93 e0       	ldi	r25, 0x03	; 3
    15d0:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <String::String(char const*)>
    15d4:	67 e7       	ldi	r22, 0x77	; 119
    15d6:	71 e0       	ldi	r23, 0x01	; 1
    15d8:	8f e5       	ldi	r24, 0x5F	; 95
    15da:	93 e0       	ldi	r25, 0x03	; 3
    15dc:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <String::String(char const*)>
    15e0:	6c e7       	ldi	r22, 0x7C	; 124
    15e2:	71 e0       	ldi	r23, 0x01	; 1
    15e4:	85 e6       	ldi	r24, 0x65	; 101
    15e6:	93 e0       	ldi	r25, 0x03	; 3
    15e8:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <String::String(char const*)>
    15ec:	61 e8       	ldi	r22, 0x81	; 129
    15ee:	71 e0       	ldi	r23, 0x01	; 1
    15f0:	8b e6       	ldi	r24, 0x6B	; 107
    15f2:	93 e0       	ldi	r25, 0x03	; 3
    15f4:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <String::String(char const*)>
    15f8:	66 e8       	ldi	r22, 0x86	; 134
    15fa:	71 e0       	ldi	r23, 0x01	; 1
    15fc:	81 e7       	ldi	r24, 0x71	; 113
    15fe:	93 e0       	ldi	r25, 0x03	; 3
    1600:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <String::String(char const*)>
    1604:	6b e8       	ldi	r22, 0x8B	; 139
    1606:	71 e0       	ldi	r23, 0x01	; 1
    1608:	87 e7       	ldi	r24, 0x77	; 119
    160a:	93 e0       	ldi	r25, 0x03	; 3
    160c:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <String::String(char const*)>
    1610:	60 e9       	ldi	r22, 0x90	; 144
    1612:	71 e0       	ldi	r23, 0x01	; 1
    1614:	8d e7       	ldi	r24, 0x7D	; 125
    1616:	93 e0       	ldi	r25, 0x03	; 3
    1618:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <String::String(char const*)>
    161c:	65 e9       	ldi	r22, 0x95	; 149
    161e:	71 e0       	ldi	r23, 0x01	; 1
    1620:	83 e8       	ldi	r24, 0x83	; 131
    1622:	93 e0       	ldi	r25, 0x03	; 3
    1624:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <String::String(char const*)>
    1628:	6a e9       	ldi	r22, 0x9A	; 154
    162a:	71 e0       	ldi	r23, 0x01	; 1
    162c:	89 e8       	ldi	r24, 0x89	; 137
    162e:	93 e0       	ldi	r25, 0x03	; 3
    1630:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <String::String(char const*)>
    1634:	6f e9       	ldi	r22, 0x9F	; 159
    1636:	71 e0       	ldi	r23, 0x01	; 1
    1638:	8f e8       	ldi	r24, 0x8F	; 143
    163a:	93 e0       	ldi	r25, 0x03	; 3
    163c:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <String::String(char const*)>
    1640:	64 ea       	ldi	r22, 0xA4	; 164
    1642:	71 e0       	ldi	r23, 0x01	; 1
    1644:	85 e9       	ldi	r24, 0x95	; 149
    1646:	93 e0       	ldi	r25, 0x03	; 3
    1648:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <String::String(char const*)>
    164c:	69 ea       	ldi	r22, 0xA9	; 169
    164e:	71 e0       	ldi	r23, 0x01	; 1
    1650:	8b e9       	ldi	r24, 0x9B	; 155
    1652:	93 e0       	ldi	r25, 0x03	; 3
    1654:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <String::String(char const*)>
    1658:	6e ea       	ldi	r22, 0xAE	; 174
    165a:	71 e0       	ldi	r23, 0x01	; 1
    165c:	81 ea       	ldi	r24, 0xA1	; 161
    165e:	93 e0       	ldi	r25, 0x03	; 3
    1660:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <String::String(char const*)>
    1664:	63 eb       	ldi	r22, 0xB3	; 179
    1666:	71 e0       	ldi	r23, 0x01	; 1
    1668:	87 ea       	ldi	r24, 0xA7	; 167
    166a:	93 e0       	ldi	r25, 0x03	; 3
    166c:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <String::String(char const*)>
    1670:	68 eb       	ldi	r22, 0xB8	; 184
    1672:	71 e0       	ldi	r23, 0x01	; 1
    1674:	8d ea       	ldi	r24, 0xAD	; 173
    1676:	93 e0       	ldi	r25, 0x03	; 3
    1678:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <String::String(char const*)>
    167c:	6d eb       	ldi	r22, 0xBD	; 189
    167e:	71 e0       	ldi	r23, 0x01	; 1
    1680:	83 eb       	ldi	r24, 0xB3	; 179
    1682:	93 e0       	ldi	r25, 0x03	; 3
    1684:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <String::String(char const*)>
    1688:	62 ec       	ldi	r22, 0xC2	; 194
    168a:	71 e0       	ldi	r23, 0x01	; 1
    168c:	89 eb       	ldi	r24, 0xB9	; 185
    168e:	93 e0       	ldi	r25, 0x03	; 3
    1690:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <String::String(char const*)>
    1694:	67 ec       	ldi	r22, 0xC7	; 199
    1696:	71 e0       	ldi	r23, 0x01	; 1
    1698:	8f eb       	ldi	r24, 0xBF	; 191
    169a:	93 e0       	ldi	r25, 0x03	; 3
    169c:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <String::String(char const*)>
    16a0:	6c ec       	ldi	r22, 0xCC	; 204
    16a2:	71 e0       	ldi	r23, 0x01	; 1
    16a4:	85 ec       	ldi	r24, 0xC5	; 197
    16a6:	93 e0       	ldi	r25, 0x03	; 3
    16a8:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <String::String(char const*)>
    16ac:	61 ed       	ldi	r22, 0xD1	; 209
    16ae:	71 e0       	ldi	r23, 0x01	; 1
    16b0:	8b ec       	ldi	r24, 0xCB	; 203
    16b2:	93 e0       	ldi	r25, 0x03	; 3
    16b4:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <String::String(char const*)>
    16b8:	66 ed       	ldi	r22, 0xD6	; 214
    16ba:	71 e0       	ldi	r23, 0x01	; 1
    16bc:	81 ed       	ldi	r24, 0xD1	; 209
    16be:	93 e0       	ldi	r25, 0x03	; 3
    16c0:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <String::String(char const*)>
    16c4:	6b ed       	ldi	r22, 0xDB	; 219
    16c6:	71 e0       	ldi	r23, 0x01	; 1
    16c8:	87 ed       	ldi	r24, 0xD7	; 215
    16ca:	93 e0       	ldi	r25, 0x03	; 3
    16cc:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <String::String(char const*)>
    16d0:	60 ee       	ldi	r22, 0xE0	; 224
    16d2:	71 e0       	ldi	r23, 0x01	; 1
    16d4:	8d ed       	ldi	r24, 0xDD	; 221
    16d6:	93 e0       	ldi	r25, 0x03	; 3
    16d8:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <String::String(char const*)>
    16dc:	65 ee       	ldi	r22, 0xE5	; 229
    16de:	71 e0       	ldi	r23, 0x01	; 1
    16e0:	83 ee       	ldi	r24, 0xE3	; 227
    16e2:	93 e0       	ldi	r25, 0x03	; 3
    16e4:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <String::String(char const*)>
    16e8:	6a ee       	ldi	r22, 0xEA	; 234
    16ea:	71 e0       	ldi	r23, 0x01	; 1
    16ec:	89 ee       	ldi	r24, 0xE9	; 233
    16ee:	93 e0       	ldi	r25, 0x03	; 3
    16f0:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <String::String(char const*)>
    16f4:	6f ee       	ldi	r22, 0xEF	; 239
    16f6:	71 e0       	ldi	r23, 0x01	; 1
    16f8:	8f ee       	ldi	r24, 0xEF	; 239
    16fa:	93 e0       	ldi	r25, 0x03	; 3
    16fc:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <String::String(char const*)>
    1700:	64 ef       	ldi	r22, 0xF4	; 244
    1702:	71 e0       	ldi	r23, 0x01	; 1
    1704:	85 ef       	ldi	r24, 0xF5	; 245
    1706:	93 e0       	ldi	r25, 0x03	; 3
    1708:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <String::String(char const*)>
    170c:	69 ef       	ldi	r22, 0xF9	; 249
    170e:	71 e0       	ldi	r23, 0x01	; 1
    1710:	8b ef       	ldi	r24, 0xFB	; 251
    1712:	93 e0       	ldi	r25, 0x03	; 3
    1714:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <String::String(char const*)>
    1718:	6e ef       	ldi	r22, 0xFE	; 254
    171a:	71 e0       	ldi	r23, 0x01	; 1
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	94 e0       	ldi	r25, 0x04	; 4
    1720:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <String::String(char const*)>
    1724:	63 e0       	ldi	r22, 0x03	; 3
    1726:	72 e0       	ldi	r23, 0x02	; 2
    1728:	87 e0       	ldi	r24, 0x07	; 7
    172a:	94 e0       	ldi	r25, 0x04	; 4
    172c:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <String::String(char const*)>
    1730:	68 e0       	ldi	r22, 0x08	; 8
    1732:	72 e0       	ldi	r23, 0x02	; 2
    1734:	8d e0       	ldi	r24, 0x0D	; 13
    1736:	94 e0       	ldi	r25, 0x04	; 4
    1738:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <String::String(char const*)>
    173c:	6d e0       	ldi	r22, 0x0D	; 13
    173e:	72 e0       	ldi	r23, 0x02	; 2
    1740:	83 e1       	ldi	r24, 0x13	; 19
    1742:	94 e0       	ldi	r25, 0x04	; 4
    1744:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <String::String(char const*)>
    1748:	eb e0       	ldi	r30, 0x0B	; 11
    174a:	f3 e0       	ldi	r31, 0x03	; 3
    174c:	13 82       	std	Z+3, r1	; 0x03
    174e:	12 82       	std	Z+2, r1	; 0x02
    1750:	8f e2       	ldi	r24, 0x2F	; 47
    1752:	91 e0       	ldi	r25, 0x01	; 1
    1754:	91 83       	std	Z+1, r25	; 0x01
    1756:	80 83       	st	Z, r24
    1758:	83 e0       	ldi	r24, 0x03	; 3
    175a:	84 83       	std	Z+4, r24	; 0x04
    175c:	8f ef       	ldi	r24, 0xFF	; 255
    175e:	85 83       	std	Z+5, r24	; 0x05
    1760:	8d e0       	ldi	r24, 0x0D	; 13
    1762:	86 83       	std	Z+6, r24	; 0x06
    1764:	14 e0       	ldi	r17, 0x04	; 4
    1766:	17 83       	std	Z+7, r17	; 0x07
    1768:	85 e0       	ldi	r24, 0x05	; 5
    176a:	80 87       	std	Z+8, r24	; 0x08
    176c:	86 e0       	ldi	r24, 0x06	; 6
    176e:	81 87       	std	Z+9, r24	; 0x09
    1770:	87 e0       	ldi	r24, 0x07	; 7
    1772:	82 87       	std	Z+10, r24	; 0x0a
    1774:	13 86       	std	Z+11, r1	; 0x0b
    1776:	14 86       	std	Z+12, r1	; 0x0c
    1778:	15 86       	std	Z+13, r1	; 0x0d
    177a:	16 86       	std	Z+14, r1	; 0x0e
    177c:	17 86       	std	Z+15, r1	; 0x0f
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	0e 94 39 03 	call	0x672	; 0x672 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.43]>
    1784:	cb ed       	ldi	r28, 0xDB	; 219
    1786:	d2 e0       	ldi	r29, 0x02	; 2
    1788:	1a 8a       	std	Y+18, r1	; 0x12
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	8b 8b       	std	Y+19, r24	; 0x13
    178e:	1c 8a       	std	Y+20, r1	; 0x14
    1790:	80 e5       	ldi	r24, 0x50	; 80
    1792:	93 ec       	ldi	r25, 0xC3	; 195
    1794:	a0 e0       	ldi	r26, 0x00	; 0
    1796:	b0 e0       	ldi	r27, 0x00	; 0
    1798:	8d 8b       	std	Y+21, r24	; 0x15
    179a:	9e 8b       	std	Y+22, r25	; 0x16
    179c:	af 8b       	std	Y+23, r26	; 0x17
    179e:	b8 8f       	std	Y+24, r27	; 0x18
    17a0:	19 8e       	std	Y+25, r1	; 0x19
    17a2:	1b 8e       	std	Y+27, r1	; 0x1b
    17a4:	1a 8e       	std	Y+26, r1	; 0x1a
    17a6:	86 e0       	ldi	r24, 0x06	; 6
    17a8:	eb e0       	ldi	r30, 0x0B	; 11
    17aa:	f1 e0       	ldi	r31, 0x01	; 1
    17ac:	a7 ef       	ldi	r26, 0xF7	; 247
    17ae:	b2 e0       	ldi	r27, 0x02	; 2
    17b0:	01 90       	ld	r0, Z+
    17b2:	0d 92       	st	X+, r0
    17b4:	8a 95       	dec	r24
    17b6:	e1 f7       	brne	.-8      	; 0x17b0 <global constructors keyed to 65535_0_SI4844_02_LCD16x2_SLIDE_SWITCH.ino.cpp.o.2504+0x290>
    17b8:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <__malloc_margin+0x8>
    17bc:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <__malloc_margin+0x9>
    17c0:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <__malloc_margin+0xa>
    17c4:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <__malloc_margin+0xb>
    17c8:	8a a3       	std	Y+34, r24	; 0x22
    17ca:	9b a3       	std	Y+35, r25	; 0x23
    17cc:	ac a3       	std	Y+36, r26	; 0x24
    17ce:	bd a3       	std	Y+37, r27	; 0x25
    17d0:	8e e1       	ldi	r24, 0x1E	; 30
    17d2:	8e a7       	std	Y+46, r24	; 0x2e
    17d4:	1f a7       	std	Y+47, r17	; 0x2f
    17d6:	df 91       	pop	r29
    17d8:	cf 91       	pop	r28
    17da:	1f 91       	pop	r17
    17dc:	08 95       	ret

000017de <main>:
init():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    17de:	78 94       	sei
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    17e0:	84 b5       	in	r24, 0x24	; 36
    17e2:	83 60       	ori	r24, 0x03	; 3
    17e4:	84 bd       	out	0x24, r24	; 36
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    17e6:	85 b5       	in	r24, 0x25	; 37
    17e8:	83 60       	ori	r24, 0x03	; 3
    17ea:	85 bd       	out	0x25, r24	; 37
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    17ec:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
    17f0:	81 60       	ori	r24, 0x01	; 1
    17f2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    17f6:	82 e0       	ldi	r24, 0x02	; 2
    17f8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    17fc:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    1800:	81 60       	ori	r24, 0x01	; 1
    1802:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    1806:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    180a:	81 60       	ori	r24, 0x01	; 1
    180c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    1810:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
    1814:	84 60       	ori	r24, 0x04	; 4
    1816:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    181a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    181e:	81 60       	ori	r24, 0x01	; 1
    1820:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
    1824:	87 e8       	ldi	r24, 0x87	; 135
    1826:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    182a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
setup():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:98

SI4844 rx;

void setup() {

  pinMode(TUNE_LED, OUTPUT);
    182e:	61 e0       	ldi	r22, 0x01	; 1
    1830:	8a e0       	ldi	r24, 0x0A	; 10
    1832:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <pinMode>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:100

  display.begin(16, 2);
    1836:	82 e0       	ldi	r24, 0x02	; 2
    1838:	0e 94 39 03 	call	0x672	; 0x672 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.43]>
setupSlideSwitch():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:192
 * @param hightClockSpeed hight I2C clock speed to be used by the system (optional - default 50000 - 50kHz).
 */
void SI4844::setupSlideSwitch(uint16_t resetPin, int interruptPin, uint32_t hightClockSpeed )
{
    // UNDER CONSTRUCTION
    this->resetPin = resetPin;
    183c:	8c e0       	ldi	r24, 0x0C	; 12
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	90 93 ea 02 	sts	0x02EA, r25	; 0x8002ea <rx+0xf>
    1844:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <rx+0xe>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:193
    this->interruptPin = interruptPin;
    1848:	82 e0       	ldi	r24, 0x02	; 2
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	90 93 ec 02 	sts	0x02EC, r25	; 0x8002ec <rx+0x11>
    1850:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <rx+0x10>
_ZN6SI484413setClockSpeedEj():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.h:315
  /**
   * @ingroup BF
   * @brief Sets hight clock speed to be used on I2C bus
   * @param clock (10000 = 10kHz; 50000 = 50kHz; 100000 = 100kHz ... )
   */
  inline void setClockSpeed(uint16_t clock) { this->clockSpeed = clock; }; 
    1854:	80 e5       	ldi	r24, 0x50	; 80
    1856:	93 ec       	ldi	r25, 0xC3	; 195
    1858:	a0 e0       	ldi	r26, 0x00	; 0
    185a:	b0 e0       	ldi	r27, 0x00	; 0
    185c:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <rx+0x15>
    1860:	90 93 f1 02 	sts	0x02F1, r25	; 0x8002f1 <rx+0x16>
    1864:	a0 93 f2 02 	sts	0x02F2, r26	; 0x8002f2 <rx+0x17>
    1868:	b0 93 f3 02 	sts	0x02F3, r27	; 0x8002f3 <rx+0x18>
setupSlideSwitch():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:200
    setClockSpeed(hightClockSpeed);

    // Arduino interrupt setup.
    // if interruptPin parameter is < 0, it means the interrupt is being controlled by the user of this library
    if (interruptPin != -1 ) {
        pinMode(interruptPin, INPUT);
    186c:	60 e0       	ldi	r22, 0x00	; 0
    186e:	82 e0       	ldi	r24, 0x02	; 2
    1870:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <pinMode>
attachInterrupt():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WInterrupts.c:66

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode)
{
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS)
  {
    intFunc[interruptNum] = userFunc;
    1874:	84 e6       	ldi	r24, 0x64	; 100
    1876:	92 e0       	ldi	r25, 0x02	; 2
    1878:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    187c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WInterrupts.c:231
      #elif defined(__AVR_ATmega48__) || defined(__AVR_ATmega48P__)  || defined(__AVR_ATmega48PB__)  \
      || defined(__AVR_ATmega88__)    || defined(__AVR_ATmega88P__)  || defined(__AVR_ATmega88PB__)  \
      || defined(__AVR_ATmega168__)   || defined(__AVR_ATmega168P__) || defined(__AVR_ATmega168PB__) \
      || defined(__AVR_ATmega328__)   || defined(__AVR_ATmega328P__) || defined(__AVR_ATmega328PB__)
        case 0:
          EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
    1880:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    1884:	83 60       	ori	r24, 0x03	; 3
    1886:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WInterrupts.c:232
          EIMSK |= (1 << INT0);
    188a:	e8 9a       	sbi	0x1d, 0	; 29
setupSlideSwitch():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:204
        attachInterrupt(digitalPinToInterrupt(interruptPin), interrupt_hundler, RISING);
    }

    pinMode(resetPin, OUTPUT);
    188c:	61 e0       	ldi	r22, 0x01	; 1
    188e:	8c e0       	ldi	r24, 0x0C	; 12
    1890:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <pinMode>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:205
    digitalWrite(resetPin, HIGH);
    1894:	61 e0       	ldi	r22, 0x01	; 1
    1896:	8c e0       	ldi	r24, 0x0C	; 12
    1898:	0e 94 85 01 	call	0x30a	; 0x30a <digitalWrite>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:206
    delay(1);    
    189c:	61 e0       	ldi	r22, 0x01	; 1
    189e:	70 e0       	ldi	r23, 0x00	; 0
    18a0:	80 e0       	ldi	r24, 0x00	; 0
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	0e 94 32 02 	call	0x464	; 0x464 <delay>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:207
    data_from_device = false;    
    18a8:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <_ZL16data_from_device.lto_priv.51>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:212
    
    // Step 1: Reset and Prepare the Device
    //      1. The system controller resets the ATDD device and releases the  RSTb  pin.
    //      2. The system controller waits until the first  IRQ  is received, indicating that the ATDD device is ready to receive commands.   
    this->reset(); // Step 1 - Reset and Prepare the Device
    18ac:	0e 94 ba 04 	call	0x974	; 0x974 <SI4844::reset() [clone .constprop.9]>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:216

    // Step 2: Obtain Device Status
    //      3. The system controller sends the  ATDD_GET_STATUS  command to retrieve the ATDD device status.    
    this->getStatus();
    18b0:	0e 94 db 04 	call	0x9b6	; 0x9b6 <SI4844::getStatus() [clone .constprop.7]>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:217
    if ( device_status.refined.BCFG0 != 0) {
    18b4:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <rx>
    18b8:	80 ff       	sbrs	r24, 0
    18ba:	03 c0       	rjmp	.+6      	; 0x18c2 <main+0xe4>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:218
        system_error = 51;  // The hardware is configured to "MCU detects the band" and you are trying "ATDD device detects the band"
    18bc:	83 e3       	ldi	r24, 0x33	; 51
    18be:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <rx+0x19>
powerUp():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:408
 * @details Moves the SI4844 device from power down to power up 
 * @see Si48XX ATDD PROGRAMMING GUIDE; AN610; page 45
 */
void SI4844::powerUp(void)
{
    data_from_device = false;    
    18c2:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <_ZL16data_from_device.lto_priv.51>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:410

    this->currentBand = 0;
    18c6:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <rx+0x12>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:414

    si4844_arg_band_index rxBandSetup; 

    rxBandSetup.refined.XOSCEN = this->xoscen;
    18ca:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <rx+0x13>
    18ce:	c0 e0       	ldi	r28, 0x00	; 0
    18d0:	80 fb       	bst	r24, 0
    18d2:	c7 f9       	bld	r28, 7
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:415
    rxBandSetup.refined.XOWAIT = this->xowait;
    18d4:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <rx+0x14>
    18d8:	80 fb       	bst	r24, 0
    18da:	c6 f9       	bld	r28, 6
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:416
    rxBandSetup.refined.BANDIDX = this->currentBand;
    18dc:	c0 7c       	andi	r28, 0xC0	; 192
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:418

    waitToSend();
    18de:	0e 94 cf 05 	call	0xb9e	; 0xb9e <SI4844::waitToSend() [clone .constprop.17]>
beginTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:196
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <TwoWire::transmitting>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:198
  // set address of targeted slave
  txAddress = address;
    18e8:	81 e1       	ldi	r24, 0x11	; 17
    18ea:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <TwoWire::txAddress>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:200
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    18ee:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <TwoWire::txBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:201
  txBufferLength = 0;
    18f2:	10 92 a1 02 	sts	0x02A1, r1	; 0x8002a1 <TwoWire::txBufferLength>
powerUp():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:421

    Wire.beginTransmission(SI4844_ADDRESS);
    Wire.write(ATDD_POWER_UP);
    18f6:	81 ee       	ldi	r24, 0xE1	; 225
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	0e 94 ad 04 	call	0x95a	; 0x95a <TwoWire::write(int) [clone .constprop.27]>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:422
    Wire.write(rxBandSetup.raw);
    18fe:	6c 2f       	mov	r22, r28
    1900:	8b ec       	ldi	r24, 0xCB	; 203
    1902:	92 e0       	ldi	r25, 0x02	; 2
    1904:	0e 94 7e 04 	call	0x8fc	; 0x8fc <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:423
    Wire.endTransmission();
    1908:	0e 94 2d 01 	call	0x25a	; 0x25a <TwoWire::endTransmission() [clone .constprop.28]>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:425

    delayMicroseconds(2500);
    190c:	84 ec       	ldi	r24, 0xC4	; 196
    190e:	99 e0       	ldi	r25, 0x09	; 9
    1910:	0e 94 02 02 	call	0x404	; 0x404 <delayMicroseconds>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:426
    this->waitInterrupt();
    1914:	0e 94 b5 04 	call	0x96a	; 0x96a <SI4844::waitInterrupt() [clone .isra.2]>
setupSlideSwitch():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:230
    this->powerUp();

    // Step 5 and Step 6: Retrieve Updated Status and  real Frequency Detection
    // 6. The system controller sends the  ATDD_GET_STATUS  command to obtain the latest status.
    do { 
        delay(1);
    1918:	61 e0       	ldi	r22, 0x01	; 1
    191a:	70 e0       	ldi	r23, 0x00	; 0
    191c:	80 e0       	ldi	r24, 0x00	; 0
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	0e 94 32 02 	call	0x464	; 0x464 <delay>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:231
        this->getStatus();
    1924:	0e 94 db 04 	call	0x9b6	; 0x9b6 <SI4844::getStatus() [clone .constprop.7]>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:232
    } while (device_status.refined.INFORDY == 0);   
    1928:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <rx>
    192c:	84 ff       	sbrs	r24, 4
    192e:	f4 cf       	rjmp	.-24     	; 0x1918 <main+0x13a>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:236


    // Step 6: Set to the real band selected by the user via Slide Switch; Frequency Detection; etc
    this->setBandSlideSwitch();
    1930:	0e 94 32 06 	call	0xc64	; 0xc64 <SI4844::setBandSlideSwitch() [clone .constprop.8]>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:238

    this->setVolume(this->volume);
    1934:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <rx+0x2e>
setVolume():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:826
 * @see Table 4, Si48XX ATDD PROGRAMMING GUIDE; AN610; page 11
 * @param byte volumeLevel (domain: 0 to 63) 
 */
void SI4844::setVolume(byte volumeLavel)
{
    if (volumeLavel > 63)
    1938:	80 34       	cpi	r24, 0x40	; 64
    193a:	10 f4       	brcc	.+4      	; 0x1940 <main+0x162>
    193c:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <SI4844::setVolume(unsigned char) [clone .part.5] [clone .constprop.15]>
    1940:	8a e3       	ldi	r24, 0x3A	; 58
    1942:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <SI4844::setVolume(unsigned char) [clone .part.5] [clone .constprop.15]>
setup():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:108
  // rx.setCrystalOscillatorStabilizationWaitTime(1);
  rx.setupSlideSwitch(RESET_PIN, INTERRUPT_PIN);

  // You must calibrate the default volume
  rx.setVolume(58);
  delay(100);
    1946:	64 e6       	ldi	r22, 0x64	; 100
    1948:	70 e0       	ldi	r23, 0x00	; 0
    194a:	80 e0       	ldi	r24, 0x00	; 0
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	0e 94 32 02 	call	0x464	; 0x464 <delay>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:110
    
  showStatus();
    1952:	0e 94 ce 07 	call	0xf9c	; 0xf9c <showStatus()>
main():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/main.cpp:47
  
  setup();
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    1956:	c0 e0       	ldi	r28, 0x00	; 0
    1958:	d0 e0       	ldi	r29, 0x00	; 0
loop():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:176
void loop() {

  if (rx.hasStatusChanged()) {
    if (rx.hasBandChanged()) {
      oldFrequency = 0;
      oldStationIndicator = 99;
    195a:	13 e6       	ldi	r17, 0x63	; 99
hasStatusChanged():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1196
 *
 *  @return true or false  
 */
bool SI4844::hasStatusChanged(void)
{
    return data_from_device;
    195c:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <_ZL16data_from_device.lto_priv.51>
loop():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:173
/**
 * Main loop
 */
void loop() {

  if (rx.hasStatusChanged()) {
    1960:	88 23       	and	r24, r24
    1962:	c9 f0       	breq	.+50     	; 0x1996 <main+0x1b8>
hasBandChanged():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1207
 * @details When the Slide Switch is moved by the user, the system have to process it
 *
 *  @return True if the user moved the Slide Switch
 */
bool SI4844::hasBandChanged(void) {
    this->getAllReceiverInfo();
    1964:	0e 94 01 05 	call	0xa02	; 0xa02 <SI4844::getAllReceiverInfo() [clone .constprop.23]>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1208
    return ( all_receiver_status.refined.BANDIDX != this->currentBand);
    1968:	20 91 dd 02 	lds	r18, 0x02DD	; 0x8002dd <rx+0x2>
    196c:	2f 73       	andi	r18, 0x3F	; 63
    196e:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <rx+0x12>
    1972:	90 e0       	ldi	r25, 0x00	; 0
loop():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:174
    if (rx.hasBandChanged()) {
    1974:	28 17       	cp	r18, r24
    1976:	19 06       	cpc	r1, r25
    1978:	61 f0       	breq	.+24     	; 0x1992 <main+0x1b4>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:175
      oldFrequency = 0;
    197a:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <oldFrequency>
    197e:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <oldFrequency+0x1>
    1982:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <oldFrequency+0x2>
    1986:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <oldFrequency+0x3>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:176
      oldStationIndicator = 99;
    198a:	10 93 04 01 	sts	0x0104, r17	; 0x800104 <oldStationIndicator>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:177
      rx.setBandSlideSwitch();
    198e:	0e 94 32 06 	call	0xc64	; 0xc64 <SI4844::setBandSlideSwitch() [clone .constprop.8]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:180
    }

    showStatus();  
    1992:	0e 94 ce 07 	call	0xf9c	; 0xf9c <showStatus()>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:183
  }

  delay(50);
    1996:	62 e3       	ldi	r22, 0x32	; 50
    1998:	70 e0       	ldi	r23, 0x00	; 0
    199a:	80 e0       	ldi	r24, 0x00	; 0
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	0e 94 32 02 	call	0x464	; 0x464 <delay>
main():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/main.cpp:47
    19a2:	20 97       	sbiw	r28, 0x00	; 0
    19a4:	d9 f2       	breq	.-74     	; 0x195c <main+0x17e>
    19a6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    19aa:	d8 cf       	rjmp	.-80     	; 0x195c <main+0x17e>

000019ac <_GLOBAL__sub_D_elapsedButton>:
_GLOBAL__sub_D_elapsedButton():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:184
}
    19ac:	cf 93       	push	r28
    19ae:	df 93       	push	r29
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:83

/*
   Pre-defined Band Table - See the SI48XX ATDD - PROGRAMMING GUIDE page 17.
*/

String tabBand[] = { "FM01", "FM02", "FM03", "FM04", "FM05", "FM06", "FM07", "FM08", "FM09", "FM10", "FM11", "FM12", "FM13", "FM14", "FM15", "FM16", "FM17", "FM18", "FM19", "FM20",
    19b0:	c9 e1       	ldi	r28, 0x19	; 25
    19b2:	d4 e0       	ldi	r29, 0x04	; 4
__static_initialization_and_destruction_0():
    19b4:	26 97       	sbiw	r28, 0x06	; 6
    19b6:	ce 01       	movw	r24, r28
    19b8:	0e 94 2c 07 	call	0xe58	; 0xe58 <String::~String()>
    19bc:	83 e0       	ldi	r24, 0x03	; 3
    19be:	c3 32       	cpi	r28, 0x23	; 35
    19c0:	d8 07       	cpc	r29, r24
    19c2:	c1 f7       	brne	.-16     	; 0x19b4 <_GLOBAL__sub_D_elapsedButton+0x8>
_GLOBAL__sub_D_elapsedButton():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:184

    showStatus();  
  }

  delay(50);
}
    19c4:	df 91       	pop	r29
    19c6:	cf 91       	pop	r28
    19c8:	08 95       	ret

000019ca <__muluhisi3>:
__muluhisi3():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    19ca:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <__umulhisi3>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    19ce:	a5 9f       	mul	r26, r21
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    19d0:	90 0d       	add	r25, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    19d2:	b4 9f       	mul	r27, r20
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    19d4:	90 0d       	add	r25, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    19d6:	a4 9f       	mul	r26, r20
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    19d8:	80 0d       	add	r24, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    19da:	91 1d       	adc	r25, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    19dc:	11 24       	eor	r1, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    19de:	08 95       	ret

000019e0 <__prologue_saves__>:
__prologue_saves__():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2169
    19e0:	2f 92       	push	r2
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2170
    19e2:	3f 92       	push	r3
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2171
    19e4:	4f 92       	push	r4
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2172
    19e6:	5f 92       	push	r5
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2173
    19e8:	6f 92       	push	r6
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2174
    19ea:	7f 92       	push	r7
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2175
    19ec:	8f 92       	push	r8
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2176
    19ee:	9f 92       	push	r9
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2177
    19f0:	af 92       	push	r10
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2178
    19f2:	bf 92       	push	r11
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2179
    19f4:	cf 92       	push	r12
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2180
    19f6:	df 92       	push	r13
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2181
    19f8:	ef 92       	push	r14
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2182
    19fa:	ff 92       	push	r15
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2183
    19fc:	0f 93       	push	r16
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2184
    19fe:	1f 93       	push	r17
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2185
    1a00:	cf 93       	push	r28
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2186
    1a02:	df 93       	push	r29
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2200
    1a04:	cd b7       	in	r28, 0x3d	; 61
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2201
    1a06:	de b7       	in	r29, 0x3e	; 62
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2202
    1a08:	ca 1b       	sub	r28, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2203
    1a0a:	db 0b       	sbc	r29, r27
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2204
    1a0c:	0f b6       	in	r0, 0x3f	; 63
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2205
    1a0e:	f8 94       	cli
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2206
    1a10:	de bf       	out	0x3e, r29	; 62
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2207
    1a12:	0f be       	out	0x3f, r0	; 63
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2208
    1a14:	cd bf       	out	0x3d, r28	; 61
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2211
    1a16:	09 94       	ijmp

00001a18 <__epilogue_restores__>:
__epilogue_restores__():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2222
    1a18:	2a 88       	ldd	r2, Y+18	; 0x12
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2223
    1a1a:	39 88       	ldd	r3, Y+17	; 0x11
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2224
    1a1c:	48 88       	ldd	r4, Y+16	; 0x10
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2225
    1a1e:	5f 84       	ldd	r5, Y+15	; 0x0f
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2226
    1a20:	6e 84       	ldd	r6, Y+14	; 0x0e
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2227
    1a22:	7d 84       	ldd	r7, Y+13	; 0x0d
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2228
    1a24:	8c 84       	ldd	r8, Y+12	; 0x0c
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2229
    1a26:	9b 84       	ldd	r9, Y+11	; 0x0b
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2230
    1a28:	aa 84       	ldd	r10, Y+10	; 0x0a
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2231
    1a2a:	b9 84       	ldd	r11, Y+9	; 0x09
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2232
    1a2c:	c8 84       	ldd	r12, Y+8	; 0x08
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2233
    1a2e:	df 80       	ldd	r13, Y+7	; 0x07
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2234
    1a30:	ee 80       	ldd	r14, Y+6	; 0x06
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2235
    1a32:	fd 80       	ldd	r15, Y+5	; 0x05
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2236
    1a34:	0c 81       	ldd	r16, Y+4	; 0x04
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2237
    1a36:	1b 81       	ldd	r17, Y+3	; 0x03
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2238
    1a38:	aa 81       	ldd	r26, Y+2	; 0x02
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2252
    1a3a:	b9 81       	ldd	r27, Y+1	; 0x01
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2253
    1a3c:	ce 0f       	add	r28, r30
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2254
    1a3e:	d1 1d       	adc	r29, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2255
    1a40:	0f b6       	in	r0, 0x3f	; 63
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2256
    1a42:	f8 94       	cli
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2257
    1a44:	de bf       	out	0x3e, r29	; 62
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2258
    1a46:	0f be       	out	0x3f, r0	; 63
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2259
    1a48:	cd bf       	out	0x3d, r28	; 61
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2260
    1a4a:	ed 01       	movw	r28, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2263
    1a4c:	08 95       	ret

00001a4e <__umulhisi3>:
__umulhisi3():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    1a4e:	a2 9f       	mul	r26, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    1a50:	b0 01       	movw	r22, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    1a52:	b3 9f       	mul	r27, r19
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    1a54:	c0 01       	movw	r24, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    1a56:	a3 9f       	mul	r26, r19
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    1a58:	70 0d       	add	r23, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    1a5a:	81 1d       	adc	r24, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    1a5c:	11 24       	eor	r1, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    1a5e:	91 1d       	adc	r25, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    1a60:	b2 9f       	mul	r27, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    1a62:	70 0d       	add	r23, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    1a64:	81 1d       	adc	r24, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    1a66:	11 24       	eor	r1, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    1a68:	91 1d       	adc	r25, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    1a6a:	08 95       	ret

00001a6c <__udivmodsi4>:
__udivmodsi4():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    1a6c:	a1 e2       	ldi	r26, 0x21	; 33
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    1a6e:	1a 2e       	mov	r1, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    1a70:	aa 1b       	sub	r26, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    1a72:	bb 1b       	sub	r27, r27
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    1a74:	fd 01       	movw	r30, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    1a76:	0d c0       	rjmp	.+26     	; 0x1a92 <__udivmodsi4_ep>

00001a78 <__udivmodsi4_loop>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    1a78:	aa 1f       	adc	r26, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    1a7a:	bb 1f       	adc	r27, r27
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    1a7c:	ee 1f       	adc	r30, r30
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    1a7e:	ff 1f       	adc	r31, r31
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    1a80:	a2 17       	cp	r26, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    1a82:	b3 07       	cpc	r27, r19
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    1a84:	e4 07       	cpc	r30, r20
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    1a86:	f5 07       	cpc	r31, r21
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    1a88:	20 f0       	brcs	.+8      	; 0x1a92 <__udivmodsi4_ep>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    1a8a:	a2 1b       	sub	r26, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    1a8c:	b3 0b       	sbc	r27, r19
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    1a8e:	e4 0b       	sbc	r30, r20
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    1a90:	f5 0b       	sbc	r31, r21

00001a92 <__udivmodsi4_ep>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    1a92:	66 1f       	adc	r22, r22
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    1a94:	77 1f       	adc	r23, r23
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    1a96:	88 1f       	adc	r24, r24
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    1a98:	99 1f       	adc	r25, r25
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    1a9a:	1a 94       	dec	r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    1a9c:	69 f7       	brne	.-38     	; 0x1a78 <__udivmodsi4_loop>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    1a9e:	60 95       	com	r22
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    1aa0:	70 95       	com	r23
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    1aa2:	80 95       	com	r24
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    1aa4:	90 95       	com	r25
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    1aa6:	9b 01       	movw	r18, r22
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    1aa8:	ac 01       	movw	r20, r24
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    1aaa:	bd 01       	movw	r22, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    1aac:	cf 01       	movw	r24, r30
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    1aae:	08 95       	ret

00001ab0 <__mulshisi3>:
__mulshisi3():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:603
    1ab0:	b7 ff       	sbrs	r27, 7
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:605
    1ab2:	0c 94 e5 0c 	jmp	0x19ca	; 0x19ca <__muluhisi3>

00001ab6 <__mulohisi3>:
__mulohisi3():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:613
    1ab6:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <__muluhisi3>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:615
    1aba:	82 1b       	sub	r24, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:616
    1abc:	93 0b       	sbc	r25, r19
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:617
    1abe:	08 95       	ret

00001ac0 <__tablejump2__>:
__tablejump2__():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    1ac0:	ee 0f       	add	r30, r30
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    1ac2:	ff 1f       	adc	r31, r31
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    1ac4:	05 90       	lpm	r0, Z+
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    1ac6:	f4 91       	lpm	r31, Z
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    1ac8:	e0 2d       	mov	r30, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    1aca:	09 94       	ijmp

00001acc <malloc>:
malloc():
    1acc:	0f 93       	push	r16
    1ace:	1f 93       	push	r17
    1ad0:	cf 93       	push	r28
    1ad2:	df 93       	push	r29
    1ad4:	82 30       	cpi	r24, 0x02	; 2
    1ad6:	91 05       	cpc	r25, r1
    1ad8:	10 f4       	brcc	.+4      	; 0x1ade <malloc+0x12>
    1ada:	82 e0       	ldi	r24, 0x02	; 2
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	e0 91 1b 04 	lds	r30, 0x041B	; 0x80041b <__flp>
    1ae2:	f0 91 1c 04 	lds	r31, 0x041C	; 0x80041c <__flp+0x1>
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	b0 e0       	ldi	r27, 0x00	; 0
    1aec:	a0 e0       	ldi	r26, 0x00	; 0
    1aee:	30 97       	sbiw	r30, 0x00	; 0
    1af0:	99 f4       	brne	.+38     	; 0x1b18 <malloc+0x4c>
    1af2:	21 15       	cp	r18, r1
    1af4:	31 05       	cpc	r19, r1
    1af6:	09 f4       	brne	.+2      	; 0x1afa <malloc+0x2e>
    1af8:	4a c0       	rjmp	.+148    	; 0x1b8e <malloc+0xc2>
    1afa:	28 1b       	sub	r18, r24
    1afc:	39 0b       	sbc	r19, r25
    1afe:	24 30       	cpi	r18, 0x04	; 4
    1b00:	31 05       	cpc	r19, r1
    1b02:	d8 f5       	brcc	.+118    	; 0x1b7a <malloc+0xae>
    1b04:	8a 81       	ldd	r24, Y+2	; 0x02
    1b06:	9b 81       	ldd	r25, Y+3	; 0x03
    1b08:	61 15       	cp	r22, r1
    1b0a:	71 05       	cpc	r23, r1
    1b0c:	89 f1       	breq	.+98     	; 0x1b70 <malloc+0xa4>
    1b0e:	fb 01       	movw	r30, r22
    1b10:	93 83       	std	Z+3, r25	; 0x03
    1b12:	82 83       	std	Z+2, r24	; 0x02
    1b14:	fe 01       	movw	r30, r28
    1b16:	11 c0       	rjmp	.+34     	; 0x1b3a <malloc+0x6e>
    1b18:	40 81       	ld	r20, Z
    1b1a:	51 81       	ldd	r21, Z+1	; 0x01
    1b1c:	02 81       	ldd	r16, Z+2	; 0x02
    1b1e:	13 81       	ldd	r17, Z+3	; 0x03
    1b20:	48 17       	cp	r20, r24
    1b22:	59 07       	cpc	r21, r25
    1b24:	e0 f0       	brcs	.+56     	; 0x1b5e <malloc+0x92>
    1b26:	48 17       	cp	r20, r24
    1b28:	59 07       	cpc	r21, r25
    1b2a:	99 f4       	brne	.+38     	; 0x1b52 <malloc+0x86>
    1b2c:	10 97       	sbiw	r26, 0x00	; 0
    1b2e:	61 f0       	breq	.+24     	; 0x1b48 <malloc+0x7c>
    1b30:	12 96       	adiw	r26, 0x02	; 2
    1b32:	0c 93       	st	X, r16
    1b34:	12 97       	sbiw	r26, 0x02	; 2
    1b36:	13 96       	adiw	r26, 0x03	; 3
    1b38:	1c 93       	st	X, r17
    1b3a:	32 96       	adiw	r30, 0x02	; 2
    1b3c:	cf 01       	movw	r24, r30
    1b3e:	df 91       	pop	r29
    1b40:	cf 91       	pop	r28
    1b42:	1f 91       	pop	r17
    1b44:	0f 91       	pop	r16
    1b46:	08 95       	ret
    1b48:	00 93 1b 04 	sts	0x041B, r16	; 0x80041b <__flp>
    1b4c:	10 93 1c 04 	sts	0x041C, r17	; 0x80041c <__flp+0x1>
    1b50:	f4 cf       	rjmp	.-24     	; 0x1b3a <malloc+0x6e>
    1b52:	21 15       	cp	r18, r1
    1b54:	31 05       	cpc	r19, r1
    1b56:	51 f0       	breq	.+20     	; 0x1b6c <malloc+0xa0>
    1b58:	42 17       	cp	r20, r18
    1b5a:	53 07       	cpc	r21, r19
    1b5c:	38 f0       	brcs	.+14     	; 0x1b6c <malloc+0xa0>
    1b5e:	a9 01       	movw	r20, r18
    1b60:	db 01       	movw	r26, r22
    1b62:	9a 01       	movw	r18, r20
    1b64:	bd 01       	movw	r22, r26
    1b66:	df 01       	movw	r26, r30
    1b68:	f8 01       	movw	r30, r16
    1b6a:	c1 cf       	rjmp	.-126    	; 0x1aee <malloc+0x22>
    1b6c:	ef 01       	movw	r28, r30
    1b6e:	f9 cf       	rjmp	.-14     	; 0x1b62 <malloc+0x96>
    1b70:	90 93 1c 04 	sts	0x041C, r25	; 0x80041c <__flp+0x1>
    1b74:	80 93 1b 04 	sts	0x041B, r24	; 0x80041b <__flp>
    1b78:	cd cf       	rjmp	.-102    	; 0x1b14 <malloc+0x48>
    1b7a:	fe 01       	movw	r30, r28
    1b7c:	e2 0f       	add	r30, r18
    1b7e:	f3 1f       	adc	r31, r19
    1b80:	81 93       	st	Z+, r24
    1b82:	91 93       	st	Z+, r25
    1b84:	22 50       	subi	r18, 0x02	; 2
    1b86:	31 09       	sbc	r19, r1
    1b88:	39 83       	std	Y+1, r19	; 0x01
    1b8a:	28 83       	st	Y, r18
    1b8c:	d7 cf       	rjmp	.-82     	; 0x1b3c <malloc+0x70>
    1b8e:	20 91 19 04 	lds	r18, 0x0419	; 0x800419 <__brkval>
    1b92:	30 91 1a 04 	lds	r19, 0x041A	; 0x80041a <__brkval+0x1>
    1b96:	23 2b       	or	r18, r19
    1b98:	41 f4       	brne	.+16     	; 0x1baa <malloc+0xde>
    1b9a:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <__malloc_heap_start>
    1b9e:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <__malloc_heap_start+0x1>
    1ba2:	30 93 1a 04 	sts	0x041A, r19	; 0x80041a <__brkval+0x1>
    1ba6:	20 93 19 04 	sts	0x0419, r18	; 0x800419 <__brkval>
    1baa:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <__malloc_heap_end>
    1bae:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <__malloc_heap_end+0x1>
    1bb2:	21 15       	cp	r18, r1
    1bb4:	31 05       	cpc	r19, r1
    1bb6:	41 f4       	brne	.+16     	; 0x1bc8 <malloc+0xfc>
    1bb8:	2d b7       	in	r18, 0x3d	; 61
    1bba:	3e b7       	in	r19, 0x3e	; 62
    1bbc:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <__malloc_margin>
    1bc0:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <__malloc_margin+0x1>
    1bc4:	24 1b       	sub	r18, r20
    1bc6:	35 0b       	sbc	r19, r21
    1bc8:	e0 91 19 04 	lds	r30, 0x0419	; 0x800419 <__brkval>
    1bcc:	f0 91 1a 04 	lds	r31, 0x041A	; 0x80041a <__brkval+0x1>
    1bd0:	e2 17       	cp	r30, r18
    1bd2:	f3 07       	cpc	r31, r19
    1bd4:	a0 f4       	brcc	.+40     	; 0x1bfe <malloc+0x132>
    1bd6:	2e 1b       	sub	r18, r30
    1bd8:	3f 0b       	sbc	r19, r31
    1bda:	28 17       	cp	r18, r24
    1bdc:	39 07       	cpc	r19, r25
    1bde:	78 f0       	brcs	.+30     	; 0x1bfe <malloc+0x132>
    1be0:	ac 01       	movw	r20, r24
    1be2:	4e 5f       	subi	r20, 0xFE	; 254
    1be4:	5f 4f       	sbci	r21, 0xFF	; 255
    1be6:	24 17       	cp	r18, r20
    1be8:	35 07       	cpc	r19, r21
    1bea:	48 f0       	brcs	.+18     	; 0x1bfe <malloc+0x132>
    1bec:	4e 0f       	add	r20, r30
    1bee:	5f 1f       	adc	r21, r31
    1bf0:	50 93 1a 04 	sts	0x041A, r21	; 0x80041a <__brkval+0x1>
    1bf4:	40 93 19 04 	sts	0x0419, r20	; 0x800419 <__brkval>
    1bf8:	81 93       	st	Z+, r24
    1bfa:	91 93       	st	Z+, r25
    1bfc:	9f cf       	rjmp	.-194    	; 0x1b3c <malloc+0x70>
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	e0 e0       	ldi	r30, 0x00	; 0
    1c02:	9c cf       	rjmp	.-200    	; 0x1b3c <malloc+0x70>

00001c04 <free>:
free():
    1c04:	cf 93       	push	r28
    1c06:	df 93       	push	r29
    1c08:	00 97       	sbiw	r24, 0x00	; 0
    1c0a:	e9 f0       	breq	.+58     	; 0x1c46 <free+0x42>
    1c0c:	fc 01       	movw	r30, r24
    1c0e:	32 97       	sbiw	r30, 0x02	; 2
    1c10:	13 82       	std	Z+3, r1	; 0x03
    1c12:	12 82       	std	Z+2, r1	; 0x02
    1c14:	a0 91 1b 04 	lds	r26, 0x041B	; 0x80041b <__flp>
    1c18:	b0 91 1c 04 	lds	r27, 0x041C	; 0x80041c <__flp+0x1>
    1c1c:	ed 01       	movw	r28, r26
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	20 e0       	ldi	r18, 0x00	; 0
    1c22:	10 97       	sbiw	r26, 0x00	; 0
    1c24:	a1 f4       	brne	.+40     	; 0x1c4e <free+0x4a>
    1c26:	20 81       	ld	r18, Z
    1c28:	31 81       	ldd	r19, Z+1	; 0x01
    1c2a:	82 0f       	add	r24, r18
    1c2c:	93 1f       	adc	r25, r19
    1c2e:	20 91 19 04 	lds	r18, 0x0419	; 0x800419 <__brkval>
    1c32:	30 91 1a 04 	lds	r19, 0x041A	; 0x80041a <__brkval+0x1>
    1c36:	28 17       	cp	r18, r24
    1c38:	39 07       	cpc	r19, r25
    1c3a:	09 f0       	breq	.+2      	; 0x1c3e <free+0x3a>
    1c3c:	61 c0       	rjmp	.+194    	; 0x1d00 <free+0xfc>
    1c3e:	f0 93 1a 04 	sts	0x041A, r31	; 0x80041a <__brkval+0x1>
    1c42:	e0 93 19 04 	sts	0x0419, r30	; 0x800419 <__brkval>
    1c46:	df 91       	pop	r29
    1c48:	cf 91       	pop	r28
    1c4a:	08 95       	ret
    1c4c:	ea 01       	movw	r28, r20
    1c4e:	ce 17       	cp	r28, r30
    1c50:	df 07       	cpc	r29, r31
    1c52:	e8 f5       	brcc	.+122    	; 0x1cce <free+0xca>
    1c54:	4a 81       	ldd	r20, Y+2	; 0x02
    1c56:	5b 81       	ldd	r21, Y+3	; 0x03
    1c58:	9e 01       	movw	r18, r28
    1c5a:	41 15       	cp	r20, r1
    1c5c:	51 05       	cpc	r21, r1
    1c5e:	b1 f7       	brne	.-20     	; 0x1c4c <free+0x48>
    1c60:	e9 01       	movw	r28, r18
    1c62:	fb 83       	std	Y+3, r31	; 0x03
    1c64:	ea 83       	std	Y+2, r30	; 0x02
    1c66:	49 91       	ld	r20, Y+
    1c68:	59 91       	ld	r21, Y+
    1c6a:	c4 0f       	add	r28, r20
    1c6c:	d5 1f       	adc	r29, r21
    1c6e:	ec 17       	cp	r30, r28
    1c70:	fd 07       	cpc	r31, r29
    1c72:	61 f4       	brne	.+24     	; 0x1c8c <free+0x88>
    1c74:	80 81       	ld	r24, Z
    1c76:	91 81       	ldd	r25, Z+1	; 0x01
    1c78:	02 96       	adiw	r24, 0x02	; 2
    1c7a:	84 0f       	add	r24, r20
    1c7c:	95 1f       	adc	r25, r21
    1c7e:	e9 01       	movw	r28, r18
    1c80:	99 83       	std	Y+1, r25	; 0x01
    1c82:	88 83       	st	Y, r24
    1c84:	82 81       	ldd	r24, Z+2	; 0x02
    1c86:	93 81       	ldd	r25, Z+3	; 0x03
    1c88:	9b 83       	std	Y+3, r25	; 0x03
    1c8a:	8a 83       	std	Y+2, r24	; 0x02
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	e0 e0       	ldi	r30, 0x00	; 0
    1c90:	12 96       	adiw	r26, 0x02	; 2
    1c92:	8d 91       	ld	r24, X+
    1c94:	9c 91       	ld	r25, X
    1c96:	13 97       	sbiw	r26, 0x03	; 3
    1c98:	00 97       	sbiw	r24, 0x00	; 0
    1c9a:	b9 f5       	brne	.+110    	; 0x1d0a <free+0x106>
    1c9c:	2d 91       	ld	r18, X+
    1c9e:	3c 91       	ld	r19, X
    1ca0:	11 97       	sbiw	r26, 0x01	; 1
    1ca2:	cd 01       	movw	r24, r26
    1ca4:	02 96       	adiw	r24, 0x02	; 2
    1ca6:	82 0f       	add	r24, r18
    1ca8:	93 1f       	adc	r25, r19
    1caa:	20 91 19 04 	lds	r18, 0x0419	; 0x800419 <__brkval>
    1cae:	30 91 1a 04 	lds	r19, 0x041A	; 0x80041a <__brkval+0x1>
    1cb2:	28 17       	cp	r18, r24
    1cb4:	39 07       	cpc	r19, r25
    1cb6:	39 f6       	brne	.-114    	; 0x1c46 <free+0x42>
    1cb8:	30 97       	sbiw	r30, 0x00	; 0
    1cba:	51 f5       	brne	.+84     	; 0x1d10 <free+0x10c>
    1cbc:	10 92 1c 04 	sts	0x041C, r1	; 0x80041c <__flp+0x1>
    1cc0:	10 92 1b 04 	sts	0x041B, r1	; 0x80041b <__flp>
    1cc4:	b0 93 1a 04 	sts	0x041A, r27	; 0x80041a <__brkval+0x1>
    1cc8:	a0 93 19 04 	sts	0x0419, r26	; 0x800419 <__brkval>
    1ccc:	bc cf       	rjmp	.-136    	; 0x1c46 <free+0x42>
    1cce:	d3 83       	std	Z+3, r29	; 0x03
    1cd0:	c2 83       	std	Z+2, r28	; 0x02
    1cd2:	40 81       	ld	r20, Z
    1cd4:	51 81       	ldd	r21, Z+1	; 0x01
    1cd6:	84 0f       	add	r24, r20
    1cd8:	95 1f       	adc	r25, r21
    1cda:	c8 17       	cp	r28, r24
    1cdc:	d9 07       	cpc	r29, r25
    1cde:	61 f4       	brne	.+24     	; 0x1cf8 <free+0xf4>
    1ce0:	4e 5f       	subi	r20, 0xFE	; 254
    1ce2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ce4:	88 81       	ld	r24, Y
    1ce6:	99 81       	ldd	r25, Y+1	; 0x01
    1ce8:	48 0f       	add	r20, r24
    1cea:	59 1f       	adc	r21, r25
    1cec:	51 83       	std	Z+1, r21	; 0x01
    1cee:	40 83       	st	Z, r20
    1cf0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf2:	9b 81       	ldd	r25, Y+3	; 0x03
    1cf4:	93 83       	std	Z+3, r25	; 0x03
    1cf6:	82 83       	std	Z+2, r24	; 0x02
    1cf8:	21 15       	cp	r18, r1
    1cfa:	31 05       	cpc	r19, r1
    1cfc:	09 f0       	breq	.+2      	; 0x1d00 <free+0xfc>
    1cfe:	b0 cf       	rjmp	.-160    	; 0x1c60 <free+0x5c>
    1d00:	f0 93 1c 04 	sts	0x041C, r31	; 0x80041c <__flp+0x1>
    1d04:	e0 93 1b 04 	sts	0x041B, r30	; 0x80041b <__flp>
    1d08:	9e cf       	rjmp	.-196    	; 0x1c46 <free+0x42>
    1d0a:	fd 01       	movw	r30, r26
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	c0 cf       	rjmp	.-128    	; 0x1c90 <free+0x8c>
    1d10:	13 82       	std	Z+3, r1	; 0x03
    1d12:	12 82       	std	Z+2, r1	; 0x02
    1d14:	d7 cf       	rjmp	.-82     	; 0x1cc4 <free+0xc0>

00001d16 <realloc>:
realloc():
    1d16:	b0 e0       	ldi	r27, 0x00	; 0
    1d18:	a0 e0       	ldi	r26, 0x00	; 0
    1d1a:	e1 e9       	ldi	r30, 0x91	; 145
    1d1c:	fe e0       	ldi	r31, 0x0E	; 14
    1d1e:	0c 94 f2 0c 	jmp	0x19e4	; 0x19e4 <__prologue_saves__+0x4>
    1d22:	8c 01       	movw	r16, r24
    1d24:	00 97       	sbiw	r24, 0x00	; 0
    1d26:	51 f4       	brne	.+20     	; 0x1d3c <realloc+0x26>
    1d28:	cb 01       	movw	r24, r22
    1d2a:	0e 94 66 0d 	call	0x1acc	; 0x1acc <malloc>
    1d2e:	8c 01       	movw	r16, r24
    1d30:	c8 01       	movw	r24, r16
    1d32:	cd b7       	in	r28, 0x3d	; 61
    1d34:	de b7       	in	r29, 0x3e	; 62
    1d36:	e0 e1       	ldi	r30, 0x10	; 16
    1d38:	0c 94 0e 0d 	jmp	0x1a1c	; 0x1a1c <__epilogue_restores__+0x4>
    1d3c:	fc 01       	movw	r30, r24
    1d3e:	e6 0f       	add	r30, r22
    1d40:	f7 1f       	adc	r31, r23
    1d42:	9c 01       	movw	r18, r24
    1d44:	22 50       	subi	r18, 0x02	; 2
    1d46:	31 09       	sbc	r19, r1
    1d48:	e2 17       	cp	r30, r18
    1d4a:	f3 07       	cpc	r31, r19
    1d4c:	08 f4       	brcc	.+2      	; 0x1d50 <realloc+0x3a>
    1d4e:	9d c0       	rjmp	.+314    	; 0x1e8a <realloc+0x174>
    1d50:	d9 01       	movw	r26, r18
    1d52:	cd 91       	ld	r28, X+
    1d54:	dc 91       	ld	r29, X
    1d56:	11 97       	sbiw	r26, 0x01	; 1
    1d58:	c6 17       	cp	r28, r22
    1d5a:	d7 07       	cpc	r29, r23
    1d5c:	98 f0       	brcs	.+38     	; 0x1d84 <realloc+0x6e>
    1d5e:	c5 30       	cpi	r28, 0x05	; 5
    1d60:	d1 05       	cpc	r29, r1
    1d62:	30 f3       	brcs	.-52     	; 0x1d30 <realloc+0x1a>
    1d64:	ce 01       	movw	r24, r28
    1d66:	04 97       	sbiw	r24, 0x04	; 4
    1d68:	86 17       	cp	r24, r22
    1d6a:	97 07       	cpc	r25, r23
    1d6c:	08 f3       	brcs	.-62     	; 0x1d30 <realloc+0x1a>
    1d6e:	c6 1b       	sub	r28, r22
    1d70:	d7 0b       	sbc	r29, r23
    1d72:	22 97       	sbiw	r28, 0x02	; 2
    1d74:	c1 93       	st	Z+, r28
    1d76:	d1 93       	st	Z+, r29
    1d78:	6d 93       	st	X+, r22
    1d7a:	7c 93       	st	X, r23
    1d7c:	cf 01       	movw	r24, r30
    1d7e:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <free>
    1d82:	d6 cf       	rjmp	.-84     	; 0x1d30 <realloc+0x1a>
    1d84:	5b 01       	movw	r10, r22
    1d86:	ac 1a       	sub	r10, r28
    1d88:	bd 0a       	sbc	r11, r29
    1d8a:	4c 01       	movw	r8, r24
    1d8c:	8c 0e       	add	r8, r28
    1d8e:	9d 1e       	adc	r9, r29
    1d90:	a0 91 1b 04 	lds	r26, 0x041B	; 0x80041b <__flp>
    1d94:	b0 91 1c 04 	lds	r27, 0x041C	; 0x80041c <__flp+0x1>
    1d98:	51 2c       	mov	r5, r1
    1d9a:	41 2c       	mov	r4, r1
    1d9c:	f1 2c       	mov	r15, r1
    1d9e:	e1 2c       	mov	r14, r1
    1da0:	10 97       	sbiw	r26, 0x00	; 0
    1da2:	31 f5       	brne	.+76     	; 0x1df0 <realloc+0xda>
    1da4:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <__brkval>
    1da8:	90 91 1a 04 	lds	r25, 0x041A	; 0x80041a <__brkval+0x1>
    1dac:	88 15       	cp	r24, r8
    1dae:	99 05       	cpc	r25, r9
    1db0:	09 f0       	breq	.+2      	; 0x1db4 <realloc+0x9e>
    1db2:	5c c0       	rjmp	.+184    	; 0x1e6c <realloc+0x156>
    1db4:	46 16       	cp	r4, r22
    1db6:	57 06       	cpc	r5, r23
    1db8:	08 f0       	brcs	.+2      	; 0x1dbc <realloc+0xa6>
    1dba:	58 c0       	rjmp	.+176    	; 0x1e6c <realloc+0x156>
    1dbc:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__malloc_heap_end>
    1dc0:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <__malloc_heap_end+0x1>
    1dc4:	00 97       	sbiw	r24, 0x00	; 0
    1dc6:	41 f4       	brne	.+16     	; 0x1dd8 <realloc+0xc2>
    1dc8:	8d b7       	in	r24, 0x3d	; 61
    1dca:	9e b7       	in	r25, 0x3e	; 62
    1dcc:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <__malloc_margin>
    1dd0:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <__malloc_margin+0x1>
    1dd4:	84 1b       	sub	r24, r20
    1dd6:	95 0b       	sbc	r25, r21
    1dd8:	e8 17       	cp	r30, r24
    1dda:	f9 07       	cpc	r31, r25
    1ddc:	08 f0       	brcs	.+2      	; 0x1de0 <realloc+0xca>
    1dde:	55 c0       	rjmp	.+170    	; 0x1e8a <realloc+0x174>
    1de0:	f0 93 1a 04 	sts	0x041A, r31	; 0x80041a <__brkval+0x1>
    1de4:	e0 93 19 04 	sts	0x0419, r30	; 0x800419 <__brkval>
    1de8:	f9 01       	movw	r30, r18
    1dea:	71 83       	std	Z+1, r23	; 0x01
    1dec:	60 83       	st	Z, r22
    1dee:	a0 cf       	rjmp	.-192    	; 0x1d30 <realloc+0x1a>
    1df0:	8d 91       	ld	r24, X+
    1df2:	9c 91       	ld	r25, X
    1df4:	11 97       	sbiw	r26, 0x01	; 1
    1df6:	12 96       	adiw	r26, 0x02	; 2
    1df8:	6c 90       	ld	r6, X
    1dfa:	12 97       	sbiw	r26, 0x02	; 2
    1dfc:	13 96       	adiw	r26, 0x03	; 3
    1dfe:	7c 90       	ld	r7, X
    1e00:	13 97       	sbiw	r26, 0x03	; 3
    1e02:	a8 15       	cp	r26, r8
    1e04:	b9 05       	cpc	r27, r9
    1e06:	59 f5       	brne	.+86     	; 0x1e5e <realloc+0x148>
    1e08:	6c 01       	movw	r12, r24
    1e0a:	42 e0       	ldi	r20, 0x02	; 2
    1e0c:	c4 0e       	add	r12, r20
    1e0e:	d1 1c       	adc	r13, r1
    1e10:	ca 14       	cp	r12, r10
    1e12:	db 04       	cpc	r13, r11
    1e14:	20 f1       	brcs	.+72     	; 0x1e5e <realloc+0x148>
    1e16:	ac 01       	movw	r20, r24
    1e18:	4a 19       	sub	r20, r10
    1e1a:	5b 09       	sbc	r21, r11
    1e1c:	da 01       	movw	r26, r20
    1e1e:	12 96       	adiw	r26, 0x02	; 2
    1e20:	15 97       	sbiw	r26, 0x05	; 5
    1e22:	80 f0       	brcs	.+32     	; 0x1e44 <realloc+0x12e>
    1e24:	62 82       	std	Z+2, r6	; 0x02
    1e26:	73 82       	std	Z+3, r7	; 0x03
    1e28:	51 83       	std	Z+1, r21	; 0x01
    1e2a:	40 83       	st	Z, r20
    1e2c:	d9 01       	movw	r26, r18
    1e2e:	6d 93       	st	X+, r22
    1e30:	7c 93       	st	X, r23
    1e32:	e1 14       	cp	r14, r1
    1e34:	f1 04       	cpc	r15, r1
    1e36:	71 f0       	breq	.+28     	; 0x1e54 <realloc+0x13e>
    1e38:	d7 01       	movw	r26, r14
    1e3a:	13 96       	adiw	r26, 0x03	; 3
    1e3c:	fc 93       	st	X, r31
    1e3e:	ee 93       	st	-X, r30
    1e40:	12 97       	sbiw	r26, 0x02	; 2
    1e42:	76 cf       	rjmp	.-276    	; 0x1d30 <realloc+0x1a>
    1e44:	22 96       	adiw	r28, 0x02	; 2
    1e46:	8c 0f       	add	r24, r28
    1e48:	9d 1f       	adc	r25, r29
    1e4a:	f9 01       	movw	r30, r18
    1e4c:	91 83       	std	Z+1, r25	; 0x01
    1e4e:	80 83       	st	Z, r24
    1e50:	f3 01       	movw	r30, r6
    1e52:	ef cf       	rjmp	.-34     	; 0x1e32 <realloc+0x11c>
    1e54:	f0 93 1c 04 	sts	0x041C, r31	; 0x80041c <__flp+0x1>
    1e58:	e0 93 1b 04 	sts	0x041B, r30	; 0x80041b <__flp>
    1e5c:	69 cf       	rjmp	.-302    	; 0x1d30 <realloc+0x1a>
    1e5e:	48 16       	cp	r4, r24
    1e60:	59 06       	cpc	r5, r25
    1e62:	08 f4       	brcc	.+2      	; 0x1e66 <realloc+0x150>
    1e64:	2c 01       	movw	r4, r24
    1e66:	7d 01       	movw	r14, r26
    1e68:	d3 01       	movw	r26, r6
    1e6a:	9a cf       	rjmp	.-204    	; 0x1da0 <realloc+0x8a>
    1e6c:	cb 01       	movw	r24, r22
    1e6e:	0e 94 66 0d 	call	0x1acc	; 0x1acc <malloc>
    1e72:	7c 01       	movw	r14, r24
    1e74:	00 97       	sbiw	r24, 0x00	; 0
    1e76:	49 f0       	breq	.+18     	; 0x1e8a <realloc+0x174>
    1e78:	ae 01       	movw	r20, r28
    1e7a:	b8 01       	movw	r22, r16
    1e7c:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <memcpy>
    1e80:	c8 01       	movw	r24, r16
    1e82:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <free>
    1e86:	87 01       	movw	r16, r14
    1e88:	53 cf       	rjmp	.-346    	; 0x1d30 <realloc+0x1a>
    1e8a:	10 e0       	ldi	r17, 0x00	; 0
    1e8c:	00 e0       	ldi	r16, 0x00	; 0
    1e8e:	50 cf       	rjmp	.-352    	; 0x1d30 <realloc+0x1a>

00001e90 <memcpy>:
memcpy():
    1e90:	fb 01       	movw	r30, r22
    1e92:	dc 01       	movw	r26, r24
    1e94:	02 c0       	rjmp	.+4      	; 0x1e9a <memcpy+0xa>
    1e96:	01 90       	ld	r0, Z+
    1e98:	0d 92       	st	X+, r0
    1e9a:	41 50       	subi	r20, 0x01	; 1
    1e9c:	50 40       	sbci	r21, 0x00	; 0
    1e9e:	d8 f7       	brcc	.-10     	; 0x1e96 <memcpy+0x6>
    1ea0:	08 95       	ret

00001ea2 <strcpy>:
strcpy():
    1ea2:	fb 01       	movw	r30, r22
    1ea4:	dc 01       	movw	r26, r24
    1ea6:	01 90       	ld	r0, Z+
    1ea8:	0d 92       	st	X+, r0
    1eaa:	00 20       	and	r0, r0
    1eac:	e1 f7       	brne	.-8      	; 0x1ea6 <strcpy+0x4>
    1eae:	08 95       	ret

00001eb0 <__do_global_dtors>:
__do_global_dtors():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    1eb0:	10 e0       	ldi	r17, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    1eb2:	c2 e6       	ldi	r28, 0x62	; 98
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    1eb4:	d0 e0       	ldi	r29, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    1eb6:	04 c0       	rjmp	.+8      	; 0x1ec0 <__do_global_dtors+0x10>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    1eb8:	fe 01       	movw	r30, r28
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    1eba:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <__tablejump2__>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    1ebe:	21 96       	adiw	r28, 0x01	; 1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    1ec0:	c3 36       	cpi	r28, 0x63	; 99
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    1ec2:	d1 07       	cpc	r29, r17
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    1ec4:	c9 f7       	brne	.-14     	; 0x1eb8 <__do_global_dtors+0x8>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    1ec6:	f8 94       	cli

00001ec8 <__stop_program>:
__stop_program():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    1ec8:	ff cf       	rjmp	.-2      	; 0x1ec8 <__stop_program>

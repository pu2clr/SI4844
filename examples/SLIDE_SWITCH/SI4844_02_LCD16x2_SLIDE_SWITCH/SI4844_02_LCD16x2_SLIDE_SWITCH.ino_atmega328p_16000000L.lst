
/Users/rcaratti/Library/Caches/arduino/sketches/13AFFA734C235960AEDBAAF6F459BC8B/SI4844_02_LCD16x2_SLIDE_SWITCH.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__dtors_end>
       4:	0c 94 1e 0a 	jmp	0x143c	; 0x143c <__vector_1>
       8:	0c 94 f7 09 	jmp	0x13ee	; 0x13ee <__vector_2>
       c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      40:	0c 94 ad 09 	jmp	0x135a	; 0x135a <__vector_16>
      44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      48:	0c 94 6b 0a 	jmp	0x14d6	; 0x14d6 <__vector_18>
      4c:	0c 94 45 0a 	jmp	0x148a	; 0x148a <__vector_19>
      50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      60:	0c 94 9d 0a 	jmp	0x153a	; 0x153a <__vector_24>
      64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

00000068 <__trampolines_end>:
__trampolines_start():
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	24 00       	.word	0x0024	; ????
      6e:	27 00       	.word	0x0027	; ????
      70:	2a 00       	.word	0x002a	; ????

00000072 <port_to_output_PGM>:
      72:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000007c <digital_pin_to_port_PGM>:
      7c:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      8c:	03 03 03 03 02 02 03                                .......

00000093 <digital_pin_to_bit_mask_PGM>:
      93:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      a3:	04 08 10 20 40 80 40                                ... @.@

000000aa <digital_pin_to_timer_PGM>:
      aa:	00 00 00 09 00 03 02 00 00 04 05 08 00 00 00 00     ................
	...

000000c2 <__ctors_start>:
__ctors_start():
      c2:	c4 0b       	sbc	r28, r20

000000c4 <__ctors_end>:
__dtors_start():
      c4:	36 0e       	add	r3, r22

000000c6 <__dtors_end>:
__dtors_end():
      c6:	11 24       	eor	r1, r1
      c8:	1f be       	out	0x3f, r1	; 63
      ca:	cf ef       	ldi	r28, 0xFF	; 255
      cc:	d8 e0       	ldi	r29, 0x08	; 8
      ce:	de bf       	out	0x3e, r29	; 62
      d0:	cd bf       	out	0x3d, r28	; 61

000000d2 <__do_clear_bss>:
__do_clear_bss():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
      d2:	24 e0       	ldi	r18, 0x04	; 4
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
      d4:	aa e3       	ldi	r26, 0x3A	; 58
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
      d6:	b2 e0       	ldi	r27, 0x02	; 2
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
      d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
      da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
      dc:	ac 3c       	cpi	r26, 0xCC	; 204
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
      de:	b2 07       	cpc	r27, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
      e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>

000000e2 <__do_copy_data>:
__do_copy_data():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
      e2:	12 e0       	ldi	r17, 0x02	; 2
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
      e4:	a0 e0       	ldi	r26, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
      e6:	b1 e0       	ldi	r27, 0x01	; 1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
      e8:	ea e8       	ldi	r30, 0x8A	; 138
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
      ea:	f1 e2       	ldi	r31, 0x21	; 33
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
      ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x10>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
      ee:	05 90       	lpm	r0, Z+
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
      f0:	0d 92       	st	X+, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
      f2:	aa 33       	cpi	r26, 0x3A	; 58
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
      f4:	b1 07       	cpc	r27, r17
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
      f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0xc>

000000f8 <__do_global_ctors>:
__do_global_ctors():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
      f8:	10 e0       	ldi	r17, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
      fa:	c2 e6       	ldi	r28, 0x62	; 98
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
      fc:	d0 e0       	ldi	r29, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__do_global_ctors+0x10>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     100:	21 97       	sbiw	r28, 0x01	; 1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     102:	fe 01       	movw	r30, r28
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     104:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <__tablejump2__>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     108:	c1 36       	cpi	r28, 0x61	; 97
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     10a:	d1 07       	cpc	r29, r17
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     10c:	c9 f7       	brne	.-14     	; 0x100 <__do_global_ctors+0x8>
     10e:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <main>
     112:	0c 94 b8 10 	jmp	0x2170	; 0x2170 <__do_global_dtors>

00000116 <__bad_interrupt>:
__vector_22():
     116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <SI4844::convertToChar(unsigned long, char*, unsigned char, unsigned char, unsigned char, bool) [clone .constprop.40]>:
convertToChar():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1430
 * @param len final string size (in bytes)
 * @param dot the decimal or thousand separator position
 * @param separator symbol "." or ","
 * @param remove_leading_zeros if true removes up to two leading zeros (default is true)
 */
void SI4844::convertToChar(uint32_t value, char *strValue, uint8_t len, uint8_t dot, uint8_t separator, bool remove_leading_zeros)
     11a:	4f 92       	push	r4
     11c:	5f 92       	push	r5
     11e:	6f 92       	push	r6
     120:	7f 92       	push	r7
     122:	af 92       	push	r10
     124:	bf 92       	push	r11
     126:	cf 92       	push	r12
     128:	df 92       	push	r13
     12a:	ef 92       	push	r14
     12c:	ff 92       	push	r15
     12e:	0f 93       	push	r16
     130:	1f 93       	push	r17
     132:	cf 93       	push	r28
     134:	df 93       	push	r29
     136:	dc 01       	movw	r26, r24
     138:	cb 01       	movw	r24, r22
     13a:	ea 01       	movw	r28, r20
     13c:	e2 2e       	mov	r14, r18
     13e:	f1 2c       	mov	r15, r1
     140:	e4 0e       	add	r14, r20
     142:	f5 1e       	adc	r15, r21
     144:	67 01       	movw	r12, r14
     146:	57 01       	movw	r10, r14
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1435
{
    char d;
    for (int i = (len - 1); i >= 0; i--)
    {
        d = value % 10;
     148:	2a e0       	ldi	r18, 0x0A	; 10
     14a:	42 2e       	mov	r4, r18
     14c:	51 2c       	mov	r5, r1
     14e:	61 2c       	mov	r6, r1
     150:	71 2c       	mov	r7, r1
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1436
        value = value / 10;
     152:	bc 01       	movw	r22, r24
     154:	cd 01       	movw	r24, r26
     156:	a3 01       	movw	r20, r6
     158:	92 01       	movw	r18, r4
     15a:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <__udivmodsi4>
     15e:	da 01       	movw	r26, r20
     160:	c9 01       	movw	r24, r18
     162:	f5 01       	movw	r30, r10
     164:	31 97       	sbiw	r30, 0x01	; 1
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1437
        strValue[i] = d + 48;
     166:	60 5d       	subi	r22, 0xD0	; 208
     168:	60 83       	st	Z, r22
     16a:	22 e0       	ldi	r18, 0x02	; 2
     16c:	a2 1a       	sub	r10, r18
     16e:	b1 08       	sbc	r11, r1
     170:	95 01       	movw	r18, r10
     172:	2c 1b       	sub	r18, r28
     174:	3d 0b       	sbc	r19, r29
     176:	5f 01       	movw	r10, r30
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1433
 * @param remove_leading_zeros if true removes up to two leading zeros (default is true)
 */
void SI4844::convertToChar(uint32_t value, char *strValue, uint8_t len, uint8_t dot, uint8_t separator, bool remove_leading_zeros)
{
    char d;
    for (int i = (len - 1); i >= 0; i--)
     178:	37 ff       	sbrs	r19, 7
     17a:	eb cf       	rjmp	.-42     	; 0x152 <SI4844::convertToChar(unsigned long, char*, unsigned char, unsigned char, unsigned char, bool) [clone .constprop.40]+0x38>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1439
    {
        d = value % 10;
        value = value / 10;
        strValue[i] = d + 48;
    }
    strValue[len] = '\0';
     17c:	f7 01       	movw	r30, r14
     17e:	10 82       	st	Z, r1
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1440
    if (dot > 0)
     180:	00 23       	and	r16, r16
     182:	99 f0       	breq	.+38     	; 0x1aa <SI4844::convertToChar(unsigned long, char*, unsigned char, unsigned char, unsigned char, bool) [clone .constprop.40]+0x90>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1442
    {
        for (int i = len; i >= dot; i--)
     184:	10 e0       	ldi	r17, 0x00	; 0
     186:	c6 01       	movw	r24, r12
     188:	8c 1b       	sub	r24, r28
     18a:	9d 0b       	sbc	r25, r29
     18c:	80 17       	cp	r24, r16
     18e:	91 07       	cpc	r25, r17
     190:	3c f0       	brlt	.+14     	; 0x1a0 <SI4844::convertToChar(unsigned long, char*, unsigned char, unsigned char, unsigned char, bool) [clone .constprop.40]+0x86>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1444
        {
            strValue[i + 1] = strValue[i];
     192:	f6 01       	movw	r30, r12
     194:	80 81       	ld	r24, Z
     196:	81 83       	std	Z+1, r24	; 0x01
     198:	f1 e0       	ldi	r31, 0x01	; 1
     19a:	cf 1a       	sub	r12, r31
     19c:	d1 08       	sbc	r13, r1
     19e:	f3 cf       	rjmp	.-26     	; 0x186 <SI4844::convertToChar(unsigned long, char*, unsigned char, unsigned char, unsigned char, bool) [clone .constprop.40]+0x6c>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1446
        }
        strValue[dot] = separator;
     1a0:	0c 0f       	add	r16, r28
     1a2:	1d 1f       	adc	r17, r29
     1a4:	8e e2       	ldi	r24, 0x2E	; 46
     1a6:	f8 01       	movw	r30, r16
     1a8:	80 83       	st	Z, r24
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1451
    }

    if (remove_leading_zeros)
    {
        if (strValue[0] == '0')
     1aa:	88 81       	ld	r24, Y
     1ac:	80 33       	cpi	r24, 0x30	; 48
     1ae:	31 f4       	brne	.+12     	; 0x1bc <SI4844::convertToChar(unsigned long, char*, unsigned char, unsigned char, unsigned char, bool) [clone .constprop.40]+0xa2>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1453
        {
            strValue[0] = ' ';
     1b0:	80 e2       	ldi	r24, 0x20	; 32
     1b2:	88 83       	st	Y, r24
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1454
            if (strValue[1] == '0')
     1b4:	99 81       	ldd	r25, Y+1	; 0x01
     1b6:	90 33       	cpi	r25, 0x30	; 48
     1b8:	09 f4       	brne	.+2      	; 0x1bc <SI4844::convertToChar(unsigned long, char*, unsigned char, unsigned char, unsigned char, bool) [clone .constprop.40]+0xa2>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1455
                strValue[1] = ' ';
     1ba:	89 83       	std	Y+1, r24	; 0x01
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1458
        }
    }
}
     1bc:	df 91       	pop	r29
     1be:	cf 91       	pop	r28
     1c0:	1f 91       	pop	r17
     1c2:	0f 91       	pop	r16
     1c4:	ff 90       	pop	r15
     1c6:	ef 90       	pop	r14
     1c8:	df 90       	pop	r13
     1ca:	cf 90       	pop	r12
     1cc:	bf 90       	pop	r11
     1ce:	af 90       	pop	r10
     1d0:	7f 90       	pop	r7
     1d2:	6f 90       	pop	r6
     1d4:	5f 90       	pop	r5
     1d6:	4f 90       	pop	r4
     1d8:	08 95       	ret

000001da <twi_readFrom.part.0.constprop.39>:
twi_readFrom.part.0():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:160
 *          data: pointer to byte array
 *          length: number of bytes to read into array
 *          sendStop: Boolean indicating whether to send a stop at the end
 * Output   number of bytes read
 */
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
     1da:	98 2f       	mov	r25, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:177
        twi_handleTimeout(twi_do_reset_on_timeout);
        return 0;
      }
    }
  #else
    while(TWI_READY != twi_state){
     1dc:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <twi_state>
     1e0:	81 11       	cpse	r24, r1
     1e2:	fc cf       	rjmp	.-8      	; 0x1dc <twi_readFrom.part.0.constprop.39+0x2>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:181
      continue;
    }
  #endif
  twi_state = TWI_MRX;
     1e4:	81 e0       	ldi	r24, 0x01	; 1
     1e6:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <twi_state>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:182
  twi_sendStop = sendStop;
     1ea:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <twi_sendStop>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:184
  // reset error state (0xFF.. no error occurred)
  twi_error = 0xFF;
     1ee:	2f ef       	ldi	r18, 0xFF	; 255
     1f0:	20 93 da 02 	sts	0x02DA, r18	; 0x8002da <twi_error>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:187

  // initialize buffer iteration vars
  twi_masterBuffer = data;
     1f4:	24 eb       	ldi	r18, 0xB4	; 180
     1f6:	32 e0       	ldi	r19, 0x02	; 2
     1f8:	30 93 d9 02 	sts	0x02D9, r19	; 0x8002d9 <twi_masterBuffer+0x1>
     1fc:	20 93 d8 02 	sts	0x02D8, r18	; 0x8002d8 <twi_masterBuffer>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:188
  twi_masterBufferIndex = 0;
     200:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <twi_masterBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:189
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
     204:	2f ef       	ldi	r18, 0xFF	; 255
     206:	26 0f       	add	r18, r22
     208:	20 93 d6 02 	sts	0x02D6, r18	; 0x8002d6 <twi_masterBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:197
  // Therefore we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
     20c:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <twi_slarw>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:198
  twi_slarw |= address << 1;
     210:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <twi_slarw>
     214:	99 0f       	add	r25, r25
     216:	98 2b       	or	r25, r24
     218:	90 93 d5 02 	sts	0x02D5, r25	; 0x8002d5 <twi_slarw>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:200

  if (true == twi_inRepStart) {
     21c:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <twi_inRepStart>
     220:	81 30       	cpi	r24, 0x01	; 1
     222:	c9 f4       	brne	.+50     	; 0x256 <twi_readFrom.part.0.constprop.39+0x7c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:207
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // Remember, we're dealing with an ASYNC ISR
     224:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <twi_inRepStart>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:219
          return 0;
        }
      } while(TWCR & _BV(TWWC));
    #else
      do {
        TWDR = twi_slarw;
     228:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <twi_slarw>
     22c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:220
      } while(TWCR & _BV(TWWC));
     230:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     234:	83 fd       	sbrc	r24, 3
     236:	f8 cf       	rjmp	.-16     	; 0x228 <twi_readFrom.part.0.constprop.39+0x4e>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:222
    #endif
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
     238:	85 ec       	ldi	r24, 0xC5	; 197
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:226
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
     23a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:238
        twi_handleTimeout(twi_do_reset_on_timeout);
        return 0;
      }
    }
  #else
    while(TWI_MRX == twi_state){
     23e:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <twi_state>
     242:	81 30       	cpi	r24, 0x01	; 1
     244:	e1 f3       	breq	.-8      	; 0x23e <twi_readFrom.part.0.constprop.39+0x64>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:243
      continue;
    }
  #endif

  if (twi_masterBufferIndex < length)
     246:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <twi_masterBufferIndex>
     24a:	86 17       	cp	r24, r22
     24c:	10 f4       	brcc	.+4      	; 0x252 <twi_readFrom.part.0.constprop.39+0x78>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:244
    length = twi_masterBufferIndex;
     24e:	60 91 d7 02 	lds	r22, 0x02D7	; 0x8002d7 <twi_masterBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:247

  return length;
}
     252:	86 2f       	mov	r24, r22
     254:	08 95       	ret
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:226
    #endif
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
     256:	85 ee       	ldi	r24, 0xE5	; 229
     258:	f0 cf       	rjmp	.-32     	; 0x23a <twi_readFrom.part.0.constprop.39+0x60>

0000025a <TwoWire::endTransmission() [clone .constprop.31]>:
endTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:225
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
  // transmit buffer (blocking)
  uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
     25a:	90 91 b3 02 	lds	r25, 0x02B3	; 0x8002b3 <TwoWire::txBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:269
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    return 1;
     25e:	81 e0       	ldi	r24, 0x01	; 1
twi_writeTo():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:268
 *          5 .. timeout
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
     260:	91 32       	cpi	r25, 0x21	; 33
     262:	08 f0       	brcs	.+2      	; 0x266 <TwoWire::endTransmission() [clone .constprop.31]+0xc>
     264:	43 c0       	rjmp	.+134    	; 0x2ec <TwoWire::endTransmission() [clone .constprop.31]+0x92>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:282
        twi_handleTimeout(twi_do_reset_on_timeout);
        return (5);
      }
    }
  #else
    while(TWI_READY != twi_state){
     266:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <twi_state>
     26a:	81 11       	cpse	r24, r1
     26c:	fc cf       	rjmp	.-8      	; 0x266 <TwoWire::endTransmission() [clone .constprop.31]+0xc>
endTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:225
     26e:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <TwoWire::txAddress>
twi_writeTo():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:287
      continue;
    }
  #endif

  twi_state = TWI_MTX;
     272:	22 e0       	ldi	r18, 0x02	; 2
     274:	20 93 dc 02 	sts	0x02DC, r18	; 0x8002dc <twi_state>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:288
  twi_sendStop = sendStop;
     278:	21 e0       	ldi	r18, 0x01	; 1
     27a:	20 93 db 02 	sts	0x02DB, r18	; 0x8002db <twi_sendStop>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:290
  // reset error state (0xFF.. no error occurred)
  twi_error = 0xFF;
     27e:	2f ef       	ldi	r18, 0xFF	; 255
     280:	20 93 da 02 	sts	0x02DA, r18	; 0x8002da <twi_error>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:293

  // initialize buffer iteration vars
  twi_masterBuffer = data;
     284:	22 e9       	ldi	r18, 0x92	; 146
     286:	32 e0       	ldi	r19, 0x02	; 2
     288:	30 93 d9 02 	sts	0x02D9, r19	; 0x8002d9 <twi_masterBuffer+0x1>
     28c:	20 93 d8 02 	sts	0x02D8, r18	; 0x8002d8 <twi_masterBuffer>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:294
  twi_masterBufferIndex = 0;
     290:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <twi_masterBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:295
  twi_masterBufferLength = length;
     294:	90 93 d6 02 	sts	0x02D6, r25	; 0x8002d6 <twi_masterBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:298

  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
     298:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <twi_slarw>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:299
  twi_slarw |= address << 1;
     29c:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <twi_slarw>
     2a0:	88 0f       	add	r24, r24
     2a2:	89 2b       	or	r24, r25
     2a4:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <twi_slarw>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:304

  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
     2a8:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <twi_inRepStart>
     2ac:	81 30       	cpi	r24, 0x01	; 1
     2ae:	29 f5       	brne	.+74     	; 0x2fa <TwoWire::endTransmission() [clone .constprop.31]+0xa0>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:311
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // Remember, we're dealing with an ASYNC ISR
     2b0:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <twi_inRepStart>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:322
          return (5);
        }
      } while(TWCR & _BV(TWWC));
    #else
      do {
        TWDR = twi_slarw;
     2b4:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <twi_slarw>
     2b8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:323
      } while(TWCR & _BV(TWWC));
     2bc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     2c0:	83 fd       	sbrc	r24, 3
     2c2:	f8 cf       	rjmp	.-16     	; 0x2b4 <TwoWire::endTransmission() [clone .constprop.31]+0x5a>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:325
    #endif
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
     2c4:	85 ec       	ldi	r24, 0xC5	; 197
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:329
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
     2c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:341
        twi_handleTimeout(twi_do_reset_on_timeout);
        return (5);
      }
    }
  #else
    while(wait && (TWI_MTX == twi_state)){
     2ca:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <twi_state>
     2ce:	82 30       	cpi	r24, 0x02	; 2
     2d0:	e1 f3       	breq	.-8      	; 0x2ca <TwoWire::endTransmission() [clone .constprop.31]+0x70>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:346
      continue;
    }
  #endif

  if (twi_error == 0xFF)
     2d2:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <twi_error>
     2d6:	8f 3f       	cpi	r24, 0xFF	; 255
     2d8:	91 f0       	breq	.+36     	; 0x2fe <TwoWire::endTransmission() [clone .constprop.31]+0xa4>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:348
    return 0; // success
  else if (twi_error == TW_MT_SLA_NACK)
     2da:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <twi_error>
     2de:	80 32       	cpi	r24, 0x20	; 32
     2e0:	81 f0       	breq	.+32     	; 0x302 <TwoWire::endTransmission() [clone .constprop.31]+0xa8>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:350
    return 2; // error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
     2e2:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <twi_error>
     2e6:	80 33       	cpi	r24, 0x30	; 48
     2e8:	71 f0       	breq	.+28     	; 0x306 <TwoWire::endTransmission() [clone .constprop.31]+0xac>
endTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:353
    return 3; // error: data send, nack received
  else
    return 4; // other twi error
     2ea:	84 e0       	ldi	r24, 0x04	; 4
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:227
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     2ec:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <TwoWire::txBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:228
  txBufferLength = 0;
     2f0:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <TwoWire::txBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:230
  // indicate that we are done transmitting
  transmitting = 0;
     2f4:	10 92 90 02 	sts	0x0290, r1	; 0x800290 <TwoWire::transmitting>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:240
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
}
     2f8:	08 95       	ret
twi_writeTo():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:329
    #endif
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
     2fa:	85 ee       	ldi	r24, 0xE5	; 229
     2fc:	e4 cf       	rjmp	.-56     	; 0x2c6 <TwoWire::endTransmission() [clone .constprop.31]+0x6c>
endTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:347
      continue;
    }
  #endif

  if (twi_error == 0xFF)
    return 0; // success
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	f5 cf       	rjmp	.-22     	; 0x2ec <TwoWire::endTransmission() [clone .constprop.31]+0x92>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:349
  else if (twi_error == TW_MT_SLA_NACK)
    return 2; // error: address send, nack received
     302:	82 e0       	ldi	r24, 0x02	; 2
     304:	f3 cf       	rjmp	.-26     	; 0x2ec <TwoWire::endTransmission() [clone .constprop.31]+0x92>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:351
  else if (twi_error == TW_MT_DATA_NACK)
    return 3; // error: data send, nack received
     306:	83 e0       	ldi	r24, 0x03	; 3
     308:	f1 cf       	rjmp	.-30     	; 0x2ec <TwoWire::endTransmission() [clone .constprop.31]+0x92>

0000030a <HardwareSerial::availableForWrite()>:
availableForWrite():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:195
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     30a:	fc 01       	movw	r30, r24
     30c:	53 8d       	ldd	r21, Z+27	; 0x1b
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:196
    tail = _tx_buffer_tail;
     30e:	44 8d       	ldd	r20, Z+28	; 0x1c
     310:	25 2f       	mov	r18, r21
     312:	30 e0       	ldi	r19, 0x00	; 0
     314:	84 2f       	mov	r24, r20
     316:	90 e0       	ldi	r25, 0x00	; 0
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:198
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     318:	82 1b       	sub	r24, r18
     31a:	93 0b       	sbc	r25, r19
     31c:	54 17       	cp	r21, r20
     31e:	10 f0       	brcs	.+4      	; 0x324 <HardwareSerial::availableForWrite()+0x1a>
     320:	cf 96       	adiw	r24, 0x3f	; 63
     322:	08 95       	ret
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:199
  return tail - head - 1;
     324:	01 97       	sbiw	r24, 0x01	; 1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:200
}
     326:	08 95       	ret

00000328 <HardwareSerial::read()>:
read():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:178
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
     328:	fc 01       	movw	r30, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:180
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     32a:	91 8d       	ldd	r25, Z+25	; 0x19
     32c:	82 8d       	ldd	r24, Z+26	; 0x1a
     32e:	98 17       	cp	r25, r24
     330:	61 f0       	breq	.+24     	; 0x34a <HardwareSerial::read()+0x22>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:183
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     332:	a2 8d       	ldd	r26, Z+26	; 0x1a
     334:	ae 0f       	add	r26, r30
     336:	bf 2f       	mov	r27, r31
     338:	b1 1d       	adc	r27, r1
     33a:	5d 96       	adiw	r26, 0x1d	; 29
     33c:	8c 91       	ld	r24, X
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:184
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     33e:	92 8d       	ldd	r25, Z+26	; 0x1a
     340:	9f 5f       	subi	r25, 0xFF	; 255
     342:	9f 73       	andi	r25, 0x3F	; 63
     344:	92 8f       	std	Z+26, r25	; 0x1a
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:185
    return c;
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	08 95       	ret
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:181

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     34a:	8f ef       	ldi	r24, 0xFF	; 255
     34c:	9f ef       	ldi	r25, 0xFF	; 255
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:187
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     34e:	08 95       	ret

00000350 <HardwareSerial::peek()>:
peek():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:169
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
     350:	fc 01       	movw	r30, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:170
  if (_rx_buffer_head == _rx_buffer_tail) {
     352:	91 8d       	ldd	r25, Z+25	; 0x19
     354:	82 8d       	ldd	r24, Z+26	; 0x1a
     356:	98 17       	cp	r25, r24
     358:	31 f0       	breq	.+12     	; 0x366 <HardwareSerial::peek()+0x16>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:173
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     35a:	82 8d       	ldd	r24, Z+26	; 0x1a
     35c:	e8 0f       	add	r30, r24
     35e:	f1 1d       	adc	r31, r1
     360:	85 8d       	ldd	r24, Z+29	; 0x1d
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	08 95       	ret
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:171
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     366:	8f ef       	ldi	r24, 0xFF	; 255
     368:	9f ef       	ldi	r25, 0xFF	; 255
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:175
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     36a:	08 95       	ret

0000036c <HardwareSerial::available()>:
available():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:164
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     36c:	fc 01       	movw	r30, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:165
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     36e:	91 8d       	ldd	r25, Z+25	; 0x19
     370:	22 8d       	ldd	r18, Z+26	; 0x1a
     372:	89 2f       	mov	r24, r25
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	80 5c       	subi	r24, 0xC0	; 192
     378:	9f 4f       	sbci	r25, 0xFF	; 255
     37a:	82 1b       	sub	r24, r18
     37c:	91 09       	sbc	r25, r1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:166
}
     37e:	8f 73       	andi	r24, 0x3F	; 63
     380:	99 27       	eor	r25, r25
     382:	08 95       	ret

00000384 <HardwareSerial::_tx_udr_empty_irq()>:
_tx_udr_empty_irq():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     384:	fc 01       	movw	r30, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     386:	a4 8d       	ldd	r26, Z+28	; 0x1c
     388:	a8 0f       	add	r26, r24
     38a:	b9 2f       	mov	r27, r25
     38c:	b1 1d       	adc	r27, r1
     38e:	a3 5a       	subi	r26, 0xA3	; 163
     390:	bf 4f       	sbci	r27, 0xFF	; 255
     392:	2c 91       	ld	r18, X
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     394:	84 8d       	ldd	r24, Z+28	; 0x1c
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	01 96       	adiw	r24, 0x01	; 1
     39a:	8f 73       	andi	r24, 0x3F	; 63
     39c:	99 27       	eor	r25, r25
     39e:	84 8f       	std	Z+28, r24	; 0x1c
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:96

  *_udr = c;
     3a0:	a6 89       	ldd	r26, Z+22	; 0x16
     3a2:	b7 89       	ldd	r27, Z+23	; 0x17
     3a4:	2c 93       	st	X, r18
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:104
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

  #ifdef MPCM0
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     3a6:	a0 89       	ldd	r26, Z+16	; 0x10
     3a8:	b1 89       	ldd	r27, Z+17	; 0x11
     3aa:	8c 91       	ld	r24, X
     3ac:	83 70       	andi	r24, 0x03	; 3
     3ae:	80 64       	ori	r24, 0x40	; 64
     3b0:	8c 93       	st	X, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:109
  #else
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
  #endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     3b2:	93 8d       	ldd	r25, Z+27	; 0x1b
     3b4:	84 8d       	ldd	r24, Z+28	; 0x1c
     3b6:	98 13       	cpse	r25, r24
     3b8:	06 c0       	rjmp	.+12     	; 0x3c6 <HardwareSerial::_tx_udr_empty_irq()+0x42>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
     3ba:	02 88       	ldd	r0, Z+18	; 0x12
     3bc:	f3 89       	ldd	r31, Z+19	; 0x13
     3be:	e0 2d       	mov	r30, r0
     3c0:	80 81       	ld	r24, Z
     3c2:	8f 7d       	andi	r24, 0xDF	; 223
     3c4:	80 83       	st	Z, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:113
  }
}
     3c6:	08 95       	ret

000003c8 <HardwareSerial::write(unsigned char)>:
write():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:223
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     3c8:	ef 92       	push	r14
     3ca:	ff 92       	push	r15
     3cc:	0f 93       	push	r16
     3ce:	1f 93       	push	r17
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
     3d4:	ec 01       	movw	r28, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:224
  _written = true;
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	88 8f       	std	Y+24, r24	; 0x18
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:229
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     3da:	9b 8d       	ldd	r25, Y+27	; 0x1b
     3dc:	8c 8d       	ldd	r24, Y+28	; 0x1c
     3de:	98 13       	cpse	r25, r24
     3e0:	1a c0       	rjmp	.+52     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     3e2:	e8 89       	ldd	r30, Y+16	; 0x10
     3e4:	f9 89       	ldd	r31, Y+17	; 0x11
     3e6:	80 81       	ld	r24, Z
     3e8:	85 ff       	sbrs	r24, 5
     3ea:	15 c0       	rjmp	.+42     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:238
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     3ec:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
/Users/rcaratti/Library/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3ee:	f8 94       	cli
write():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:239
      *_udr = c;
     3f0:	ee 89       	ldd	r30, Y+22	; 0x16
     3f2:	ff 89       	ldd	r31, Y+23	; 0x17
     3f4:	60 83       	st	Z, r22
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:241
      #ifdef MPCM0
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     3f6:	e8 89       	ldd	r30, Y+16	; 0x10
     3f8:	f9 89       	ldd	r31, Y+17	; 0x11
     3fa:	80 81       	ld	r24, Z
     3fc:	83 70       	andi	r24, 0x03	; 3
     3fe:	80 64       	ori	r24, 0x40	; 64
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:271
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    *_ucsrb |= _BV(UDRIE0);
     400:	80 83       	st	Z, r24
__iRestore():
/Users/rcaratti/Library/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     402:	9f bf       	out	0x3f, r25	; 63
write():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:275
  }
  
  return 1;
}
     404:	81 e0       	ldi	r24, 0x01	; 1
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	df 91       	pop	r29
     40a:	cf 91       	pop	r28
     40c:	1f 91       	pop	r17
     40e:	0f 91       	pop	r16
     410:	ff 90       	pop	r15
     412:	ef 90       	pop	r14
     414:	08 95       	ret
     416:	f6 2e       	mov	r15, r22
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:248
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
      #endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     418:	0b 8d       	ldd	r16, Y+27	; 0x1b
     41a:	10 e0       	ldi	r17, 0x00	; 0
     41c:	0f 5f       	subi	r16, 0xFF	; 255
     41e:	1f 4f       	sbci	r17, 0xFF	; 255
     420:	0f 73       	andi	r16, 0x3F	; 63
     422:	11 27       	eor	r17, r17
     424:	e0 2e       	mov	r14, r16
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:252

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     426:	8c 8d       	ldd	r24, Y+28	; 0x1c
     428:	8e 11       	cpse	r24, r14
     42a:	0c c0       	rjmp	.+24     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:253
    if (bit_is_clear(SREG, SREG_I)) {
     42c:	0f b6       	in	r0, 0x3f	; 63
     42e:	07 fc       	sbrc	r0, 7
     430:	fa cf       	rjmp	.-12     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:258
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     432:	e8 89       	ldd	r30, Y+16	; 0x10
     434:	f9 89       	ldd	r31, Y+17	; 0x11
     436:	80 81       	ld	r24, Z
     438:	85 ff       	sbrs	r24, 5
     43a:	f5 cf       	rjmp	.-22     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:259
        _tx_udr_empty_irq();
     43c:	ce 01       	movw	r24, r28
     43e:	0e 94 c2 01 	call	0x384	; 0x384 <HardwareSerial::_tx_udr_empty_irq()>
     442:	f1 cf       	rjmp	.-30     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:265
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     444:	eb 8d       	ldd	r30, Y+27	; 0x1b
     446:	ec 0f       	add	r30, r28
     448:	fd 2f       	mov	r31, r29
     44a:	f1 1d       	adc	r31, r1
     44c:	e3 5a       	subi	r30, 0xA3	; 163
     44e:	ff 4f       	sbci	r31, 0xFF	; 255
     450:	f0 82       	st	Z, r15
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:269
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     452:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
/Users/rcaratti/Library/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     454:	f8 94       	cli
write():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:270
    _tx_buffer_head = i;
     456:	0b 8f       	std	Y+27, r16	; 0x1b
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:271
    *_ucsrb |= _BV(UDRIE0);
     458:	ea 89       	ldd	r30, Y+18	; 0x12
     45a:	fb 89       	ldd	r31, Y+19	; 0x13
     45c:	80 81       	ld	r24, Z
     45e:	80 62       	ori	r24, 0x20	; 32
     460:	cf cf       	rjmp	.-98     	; 0x400 <__LOCK_REGION_LENGTH__>

00000462 <HardwareSerial::flush()>:
flush():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:203
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     462:	cf 93       	push	r28
     464:	df 93       	push	r29
     466:	ec 01       	movw	r28, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:207
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     468:	88 8d       	ldd	r24, Y+24	; 0x18
     46a:	88 23       	and	r24, r24
     46c:	b9 f0       	breq	.+46     	; 0x49c <HardwareSerial::flush()+0x3a>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:210
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     46e:	aa 89       	ldd	r26, Y+18	; 0x12
     470:	bb 89       	ldd	r27, Y+19	; 0x13
     472:	e8 89       	ldd	r30, Y+16	; 0x10
     474:	f9 89       	ldd	r31, Y+17	; 0x11
     476:	8c 91       	ld	r24, X
     478:	85 fd       	sbrc	r24, 5
     47a:	03 c0       	rjmp	.+6      	; 0x482 <HardwareSerial::flush()+0x20>
     47c:	80 81       	ld	r24, Z
     47e:	86 fd       	sbrc	r24, 6
     480:	0d c0       	rjmp	.+26     	; 0x49c <HardwareSerial::flush()+0x3a>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:211
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     482:	0f b6       	in	r0, 0x3f	; 63
     484:	07 fc       	sbrc	r0, 7
     486:	f7 cf       	rjmp	.-18     	; 0x476 <HardwareSerial::flush()+0x14>
     488:	8c 91       	ld	r24, X
     48a:	85 ff       	sbrs	r24, 5
     48c:	f2 cf       	rjmp	.-28     	; 0x472 <HardwareSerial::flush()+0x10>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:215
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
     48e:	80 81       	ld	r24, Z
     490:	85 ff       	sbrs	r24, 5
     492:	ed cf       	rjmp	.-38     	; 0x46e <HardwareSerial::flush()+0xc>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:216
        _tx_udr_empty_irq();
     494:	ce 01       	movw	r24, r28
     496:	0e 94 c2 01 	call	0x384	; 0x384 <HardwareSerial::_tx_udr_empty_irq()>
     49a:	e9 cf       	rjmp	.-46     	; 0x46e <HardwareSerial::flush()+0xc>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:220
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     49c:	df 91       	pop	r29
     49e:	cf 91       	pop	r28
     4a0:	08 95       	ret

000004a2 <Serial0_available()>:
Serial0_available():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     4a2:	8d ed       	ldi	r24, 0xDD	; 221
     4a4:	92 e0       	ldi	r25, 0x02	; 2
     4a6:	0e 94 b6 01 	call	0x36c	; 0x36c <HardwareSerial::available()>
     4aa:	21 e0       	ldi	r18, 0x01	; 1
     4ac:	89 2b       	or	r24, r25
     4ae:	09 f4       	brne	.+2      	; 0x4b2 <Serial0_available()+0x10>
     4b0:	20 e0       	ldi	r18, 0x00	; 0
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
}
     4b2:	82 2f       	mov	r24, r18
     4b4:	08 95       	ret

000004b6 <serialEventRun()>:
serialEventRun():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	89 2b       	or	r24, r25
     4bc:	29 f0       	breq	.+10     	; 0x4c8 <serialEventRun()+0x12>
     4be:	0e 94 51 02 	call	0x4a2	; 0x4a2 <Serial0_available()>
     4c2:	81 11       	cpse	r24, r1
     4c4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:78
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
     4c8:	08 95       	ret

000004ca <digitalWrite>:
digitalWrite():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:189
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
  uint8_t timer = digitalPinToTimer(pin);
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	fc 01       	movw	r30, r24
     4ce:	e6 55       	subi	r30, 0x56	; 86
     4d0:	ff 4f       	sbci	r31, 0xFF	; 255
     4d2:	24 91       	lpm	r18, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
     4d4:	fc 01       	movw	r30, r24
     4d6:	ed 56       	subi	r30, 0x6D	; 109
     4d8:	ff 4f       	sbci	r31, 0xFF	; 255
     4da:	34 91       	lpm	r19, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
     4dc:	fc 01       	movw	r30, r24
     4de:	e4 58       	subi	r30, 0x84	; 132
     4e0:	ff 4f       	sbci	r31, 0xFF	; 255
     4e2:	e4 91       	lpm	r30, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     4e4:	ee 23       	and	r30, r30
     4e6:	c9 f0       	breq	.+50     	; 0x51a <digitalWrite+0x50>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     4e8:	22 23       	and	r18, r18
     4ea:	39 f0       	breq	.+14     	; 0x4fa <digitalWrite+0x30>
turnOffPWM():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
     4ec:	24 30       	cpi	r18, 0x04	; 4
     4ee:	01 f1       	breq	.+64     	; 0x530 <digitalWrite+0x66>
     4f0:	a8 f4       	brcc	.+42     	; 0x51c <digitalWrite+0x52>
     4f2:	22 30       	cpi	r18, 0x02	; 2
     4f4:	69 f1       	breq	.+90     	; 0x550 <digitalWrite+0x86>
     4f6:	23 30       	cpi	r18, 0x03	; 3
     4f8:	79 f1       	breq	.+94     	; 0x558 <digitalWrite+0x8e>
digitalWrite():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:200

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);

  out = portOutputRegister(port);
     4fa:	f0 e0       	ldi	r31, 0x00	; 0
     4fc:	ee 0f       	add	r30, r30
     4fe:	ff 1f       	adc	r31, r31
     500:	ee 58       	subi	r30, 0x8E	; 142
     502:	ff 4f       	sbci	r31, 0xFF	; 255
     504:	a5 91       	lpm	r26, Z+
     506:	b4 91       	lpm	r27, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
     508:	8f b7       	in	r24, 0x3f	; 63
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:203
  cli();
     50a:	f8 94       	cli
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
     50c:	ec 91       	ld	r30, X
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
     50e:	61 11       	cpse	r22, r1
     510:	26 c0       	rjmp	.+76     	; 0x55e <digitalWrite+0x94>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
     512:	30 95       	com	r19
     514:	3e 23       	and	r19, r30
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
     516:	3c 93       	st	X, r19
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
     518:	8f bf       	out	0x3f, r24	; 63
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:212
}
     51a:	08 95       	ret
turnOffPWM():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
     51c:	28 30       	cpi	r18, 0x08	; 8
     51e:	71 f0       	breq	.+28     	; 0x53c <digitalWrite+0x72>
     520:	29 30       	cpi	r18, 0x09	; 9
     522:	91 f0       	breq	.+36     	; 0x548 <digitalWrite+0x7e>
     524:	25 30       	cpi	r18, 0x05	; 5
     526:	49 f7       	brne	.-46     	; 0x4fa <digitalWrite+0x30>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     528:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     52c:	8f 7d       	andi	r24, 0xDF	; 223
     52e:	03 c0       	rjmp	.+6      	; 0x536 <digitalWrite+0x6c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:82
  switch (timer)
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
     530:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     534:	8f 77       	andi	r24, 0x7F	; 127
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     536:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     53a:	df cf       	rjmp	.-66     	; 0x4fa <digitalWrite+0x30>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
     53c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     540:	8f 77       	andi	r24, 0x7F	; 127
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
     542:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     546:	d9 cf       	rjmp	.-78     	; 0x4fa <digitalWrite+0x30>
     548:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     54c:	8f 7d       	andi	r24, 0xDF	; 223
     54e:	f9 cf       	rjmp	.-14     	; 0x542 <digitalWrite+0x78>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
     550:	84 b5       	in	r24, 0x24	; 36
     552:	8f 77       	andi	r24, 0x7F	; 127
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     554:	84 bd       	out	0x24, r24	; 36
     556:	d1 cf       	rjmp	.-94     	; 0x4fa <digitalWrite+0x30>
     558:	84 b5       	in	r24, 0x24	; 36
     55a:	8f 7d       	andi	r24, 0xDF	; 223
     55c:	fb cf       	rjmp	.-10     	; 0x554 <digitalWrite+0x8a>
digitalWrite():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
     55e:	3e 2b       	or	r19, r30
     560:	da cf       	rjmp	.-76     	; 0x516 <digitalWrite+0x4c>

00000562 <pinMode>:
pinMode():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     562:	cf 93       	push	r28
     564:	df 93       	push	r29
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	fc 01       	movw	r30, r24
     56a:	ed 56       	subi	r30, 0x6D	; 109
     56c:	ff 4f       	sbci	r31, 0xFF	; 255
     56e:	24 91       	lpm	r18, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
     570:	84 58       	subi	r24, 0x84	; 132
     572:	9f 4f       	sbci	r25, 0xFF	; 255
     574:	fc 01       	movw	r30, r24
     576:	84 91       	lpm	r24, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     578:	88 23       	and	r24, r24
     57a:	d1 f0       	breq	.+52     	; 0x5b0 <pinMode+0x4e>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	88 0f       	add	r24, r24
     580:	99 1f       	adc	r25, r25
     582:	fc 01       	movw	r30, r24
     584:	e8 59       	subi	r30, 0x98	; 152
     586:	ff 4f       	sbci	r31, 0xFF	; 255
     588:	a5 91       	lpm	r26, Z+
     58a:	b4 91       	lpm	r27, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
     58c:	fc 01       	movw	r30, r24
     58e:	ee 58       	subi	r30, 0x8E	; 142
     590:	ff 4f       	sbci	r31, 0xFF	; 255
     592:	c5 91       	lpm	r28, Z+
     594:	d4 91       	lpm	r29, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
     596:	61 11       	cpse	r22, r1
     598:	0e c0       	rjmp	.+28     	; 0x5b6 <pinMode+0x54>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
     59a:	9f b7       	in	r25, 0x3f	; 63
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:43
    cli();
     59c:	f8 94       	cli
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
     59e:	8c 91       	ld	r24, X
     5a0:	e2 2f       	mov	r30, r18
     5a2:	e0 95       	com	r30
     5a4:	8e 23       	and	r24, r30
     5a6:	8c 93       	st	X, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
     5a8:	28 81       	ld	r18, Y
     5aa:	e2 23       	and	r30, r18
     5ac:	e8 83       	st	Y, r30
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:46
    SREG = oldSREG;
     5ae:	9f bf       	out	0x3f, r25	; 63
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
     5b0:	df 91       	pop	r29
     5b2:	cf 91       	pop	r28
     5b4:	08 95       	ret
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:54
    cli();
    *reg &= ~bit;
    *out |= bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     5b6:	8f b7       	in	r24, 0x3f	; 63
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:55
    cli();
     5b8:	f8 94       	cli
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
     5ba:	ec 91       	ld	r30, X
     5bc:	e2 2b       	or	r30, r18
     5be:	ec 93       	st	X, r30
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
     5c0:	8f bf       	out	0x3f, r24	; 63
     5c2:	f6 cf       	rjmp	.-20     	; 0x5b0 <pinMode+0x4e>

000005c4 <delayMicroseconds>:
delayMicroseconds():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:619
  us -= 7; // = 2 cycles

#elif F_CPU >= 16000000L
  // for a one-microsecond delay, simply return.  the overhead
  // of the function call takes 14 (16) cycles, which is 1 us
  if (us <= 1) return; //  = 3 cycles, (4 when true)
     5c4:	81 30       	cpi	r24, 0x01	; 1
     5c6:	91 05       	cpc	r25, r1
     5c8:	39 f0       	breq	.+14     	; 0x5d8 <delayMicroseconds+0x14>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:624

  // the following loop takes 1/4 of a microsecond (4 cycles)
  // per iteration, so execute it four times for each microsecond of
  // delay requested.
  us <<= 2; // x4 us, = 4 cycles
     5ca:	88 0f       	add	r24, r24
     5cc:	99 1f       	adc	r25, r25
     5ce:	88 0f       	add	r24, r24
     5d0:	99 1f       	adc	r25, r25
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:629

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // to 2nd us is at least 8 so we can substract 5
  us -= 5; // = 2 cycles,
     5d2:	05 97       	sbiw	r24, 0x05	; 5
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
     5d4:	01 97       	sbiw	r24, 0x01	; 1
     5d6:	f1 f7       	brne	.-4      	; 0x5d4 <delayMicroseconds+0x10>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
     5d8:	08 95       	ret

000005da <micros>:
micros():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
     5da:	3f b7       	in	r19, 0x3f	; 63
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
     5dc:	f8 94       	cli
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
     5de:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <timer0_overflow_count>
     5e2:	90 91 8a 02 	lds	r25, 0x028A	; 0x80028a <timer0_overflow_count+0x1>
     5e6:	a0 91 8b 02 	lds	r26, 0x028B	; 0x80028b <timer0_overflow_count+0x2>
     5ea:	b0 91 8c 02 	lds	r27, 0x028C	; 0x80028c <timer0_overflow_count+0x3>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
     5ee:	26 b5       	in	r18, 0x26	; 38
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
     5f0:	a8 9b       	sbis	0x15, 0	; 21
     5f2:	05 c0       	rjmp	.+10     	; 0x5fe <micros+0x24>
     5f4:	2f 3f       	cpi	r18, 0xFF	; 255
     5f6:	19 f0       	breq	.+6      	; 0x5fe <micros+0x24>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
     5f8:	01 96       	adiw	r24, 0x01	; 1
     5fa:	a1 1d       	adc	r26, r1
     5fc:	b1 1d       	adc	r27, r1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
     5fe:	3f bf       	out	0x3f, r19	; 63
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
     600:	ba 2f       	mov	r27, r26
     602:	a9 2f       	mov	r26, r25
     604:	98 2f       	mov	r25, r24
     606:	88 27       	eor	r24, r24
     608:	bc 01       	movw	r22, r24
     60a:	cd 01       	movw	r24, r26
     60c:	62 0f       	add	r22, r18
     60e:	71 1d       	adc	r23, r1
     610:	81 1d       	adc	r24, r1
     612:	91 1d       	adc	r25, r1
     614:	42 e0       	ldi	r20, 0x02	; 2
     616:	66 0f       	add	r22, r22
     618:	77 1f       	adc	r23, r23
     61a:	88 1f       	adc	r24, r24
     61c:	99 1f       	adc	r25, r25
     61e:	4a 95       	dec	r20
     620:	d1 f7       	brne	.-12     	; 0x616 <micros+0x3c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
     622:	08 95       	ret

00000624 <delay>:
delay():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
     624:	8f 92       	push	r8
     626:	9f 92       	push	r9
     628:	af 92       	push	r10
     62a:	bf 92       	push	r11
     62c:	cf 92       	push	r12
     62e:	df 92       	push	r13
     630:	ef 92       	push	r14
     632:	ff 92       	push	r15
     634:	4b 01       	movw	r8, r22
     636:	5c 01       	movw	r10, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
     638:	0e 94 ed 02 	call	0x5da	; 0x5da <micros>
     63c:	6b 01       	movw	r12, r22
     63e:	7c 01       	movw	r14, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:401

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     640:	0e 94 ed 02 	call	0x5da	; 0x5da <micros>
     644:	6c 19       	sub	r22, r12
     646:	7d 09       	sbc	r23, r13
     648:	8e 09       	sbc	r24, r14
     64a:	9f 09       	sbc	r25, r15
     64c:	68 3e       	cpi	r22, 0xE8	; 232
     64e:	73 40       	sbci	r23, 0x03	; 3
     650:	81 05       	cpc	r24, r1
     652:	91 05       	cpc	r25, r1
     654:	a8 f3       	brcs	.-22     	; 0x640 <delay+0x1c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:402
      ms--;
     656:	21 e0       	ldi	r18, 0x01	; 1
     658:	82 1a       	sub	r8, r18
     65a:	91 08       	sbc	r9, r1
     65c:	a1 08       	sbc	r10, r1
     65e:	b1 08       	sbc	r11, r1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:403
      start += 1000UL;
     660:	88 ee       	ldi	r24, 0xE8	; 232
     662:	c8 0e       	add	r12, r24
     664:	83 e0       	ldi	r24, 0x03	; 3
     666:	d8 1e       	adc	r13, r24
     668:	e1 1c       	adc	r14, r1
     66a:	f1 1c       	adc	r15, r1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     66c:	81 14       	cp	r8, r1
     66e:	91 04       	cpc	r9, r1
     670:	a1 04       	cpc	r10, r1
     672:	b1 04       	cpc	r11, r1
     674:	29 f7       	brne	.-54     	; 0x640 <delay+0x1c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
     676:	ff 90       	pop	r15
     678:	ef 90       	pop	r14
     67a:	df 90       	pop	r13
     67c:	cf 90       	pop	r12
     67e:	bf 90       	pop	r11
     680:	af 90       	pop	r10
     682:	9f 90       	pop	r9
     684:	8f 90       	pop	r8
     686:	08 95       	ret

00000688 <interrupt_hundler()>:
interrupt_hundler():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:41
#ifdef ESP8266    // if the controller is ESP8266, add IRAM_ATTR.
  IRAM_ATTR 
#endif
void interrupt_hundler()
{
   data_from_device = true;
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <_ZL16data_from_device.lto_priv.55>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:42
}
     68e:	08 95       	ret

00000690 <nothing>:
nothing():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WInterrupts.c:36

#include "wiring_private.h"

static void nothing(void)
{
}
     690:	08 95       	ret

00000692 <Print::write(unsigned char const*, unsigned int)>:
write():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     692:	af 92       	push	r10
     694:	bf 92       	push	r11
     696:	cf 92       	push	r12
     698:	df 92       	push	r13
     69a:	ef 92       	push	r14
     69c:	ff 92       	push	r15
     69e:	0f 93       	push	r16
     6a0:	1f 93       	push	r17
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	6c 01       	movw	r12, r24
     6a8:	7b 01       	movw	r14, r22
     6aa:	8b 01       	movw	r16, r22
     6ac:	04 0f       	add	r16, r20
     6ae:	15 1f       	adc	r17, r21
     6b0:	eb 01       	movw	r28, r22
     6b2:	5e 01       	movw	r10, r28
     6b4:	ae 18       	sub	r10, r14
     6b6:	bf 08       	sbc	r11, r15
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
     6b8:	c0 17       	cp	r28, r16
     6ba:	d1 07       	cpc	r29, r17
     6bc:	59 f0       	breq	.+22     	; 0x6d4 <Print::write(unsigned char const*, unsigned int)+0x42>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
     6be:	69 91       	ld	r22, Y+
     6c0:	d6 01       	movw	r26, r12
     6c2:	ed 91       	ld	r30, X+
     6c4:	fc 91       	ld	r31, X
     6c6:	01 90       	ld	r0, Z+
     6c8:	f0 81       	ld	r31, Z
     6ca:	e0 2d       	mov	r30, r0
     6cc:	c6 01       	movw	r24, r12
     6ce:	09 95       	icall
     6d0:	89 2b       	or	r24, r25
     6d2:	79 f7       	brne	.-34     	; 0x6b2 <Print::write(unsigned char const*, unsigned int)+0x20>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
     6d4:	c5 01       	movw	r24, r10
     6d6:	df 91       	pop	r29
     6d8:	cf 91       	pop	r28
     6da:	1f 91       	pop	r17
     6dc:	0f 91       	pop	r16
     6de:	ff 90       	pop	r15
     6e0:	ef 90       	pop	r14
     6e2:	df 90       	pop	r13
     6e4:	cf 90       	pop	r12
     6e6:	bf 90       	pop	r11
     6e8:	af 90       	pop	r10
     6ea:	08 95       	ret

000006ec <LiquidCrystal::pulseEnable()>:
pulseEnable():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:303
    write4bits(value>>4);
    write4bits(value);
  }
}

void LiquidCrystal::pulseEnable(void) {
     6ec:	cf 93       	push	r28
     6ee:	df 93       	push	r29
     6f0:	ec 01       	movw	r28, r24
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:304
  digitalWrite(_enable_pin, LOW);
     6f2:	60 e0       	ldi	r22, 0x00	; 0
     6f4:	8e 81       	ldd	r24, Y+6	; 0x06
     6f6:	0e 94 65 02 	call	0x4ca	; 0x4ca <digitalWrite>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:305
  delayMicroseconds(1);    
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <delayMicroseconds>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:306
  digitalWrite(_enable_pin, HIGH);
     702:	61 e0       	ldi	r22, 0x01	; 1
     704:	8e 81       	ldd	r24, Y+6	; 0x06
     706:	0e 94 65 02 	call	0x4ca	; 0x4ca <digitalWrite>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:307
  delayMicroseconds(1);    // enable pulse must be >450ns
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <delayMicroseconds>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:308
  digitalWrite(_enable_pin, LOW);
     712:	60 e0       	ldi	r22, 0x00	; 0
     714:	8e 81       	ldd	r24, Y+6	; 0x06
     716:	0e 94 65 02 	call	0x4ca	; 0x4ca <digitalWrite>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:309
  delayMicroseconds(100);   // commands need > 37us to settle
     71a:	84 e6       	ldi	r24, 0x64	; 100
     71c:	90 e0       	ldi	r25, 0x00	; 0
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:310
}
     71e:	df 91       	pop	r29
     720:	cf 91       	pop	r28
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:309
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(1);    
  digitalWrite(_enable_pin, HIGH);
  delayMicroseconds(1);    // enable pulse must be >450ns
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(100);   // commands need > 37us to settle
     722:	0c 94 e2 02 	jmp	0x5c4	; 0x5c4 <delayMicroseconds>

00000726 <LiquidCrystal::write4bits(unsigned char)>:
write4bits():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:312
}

void LiquidCrystal::write4bits(uint8_t value) {
     726:	cf 92       	push	r12
     728:	df 92       	push	r13
     72a:	ef 92       	push	r14
     72c:	ff 92       	push	r15
     72e:	0f 93       	push	r16
     730:	1f 93       	push	r17
     732:	cf 93       	push	r28
     734:	df 93       	push	r29
     736:	6c 01       	movw	r12, r24
     738:	7c 01       	movw	r14, r24
     73a:	87 e0       	ldi	r24, 0x07	; 7
     73c:	e8 0e       	add	r14, r24
     73e:	f1 1c       	adc	r15, r1
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:313
  for (int i = 0; i < 4; i++) {
     740:	d0 e0       	ldi	r29, 0x00	; 0
     742:	c0 e0       	ldi	r28, 0x00	; 0
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:314
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
     744:	06 2f       	mov	r16, r22
     746:	10 e0       	ldi	r17, 0x00	; 0
     748:	b8 01       	movw	r22, r16
     74a:	0c 2e       	mov	r0, r28
     74c:	02 c0       	rjmp	.+4      	; 0x752 <LiquidCrystal::write4bits(unsigned char)+0x2c>
     74e:	75 95       	asr	r23
     750:	67 95       	ror	r22
     752:	0a 94       	dec	r0
     754:	e2 f7       	brpl	.-8      	; 0x74e <LiquidCrystal::write4bits(unsigned char)+0x28>
     756:	61 70       	andi	r22, 0x01	; 1
     758:	f7 01       	movw	r30, r14
     75a:	81 91       	ld	r24, Z+
     75c:	7f 01       	movw	r14, r30
     75e:	0e 94 65 02 	call	0x4ca	; 0x4ca <digitalWrite>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:313
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(100);   // commands need > 37us to settle
}

void LiquidCrystal::write4bits(uint8_t value) {
  for (int i = 0; i < 4; i++) {
     762:	21 96       	adiw	r28, 0x01	; 1
     764:	c4 30       	cpi	r28, 0x04	; 4
     766:	d1 05       	cpc	r29, r1
     768:	79 f7       	brne	.-34     	; 0x748 <LiquidCrystal::write4bits(unsigned char)+0x22>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:317
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }

  pulseEnable();
     76a:	c6 01       	movw	r24, r12
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:318
}
     76c:	df 91       	pop	r29
     76e:	cf 91       	pop	r28
     770:	1f 91       	pop	r17
     772:	0f 91       	pop	r16
     774:	ff 90       	pop	r15
     776:	ef 90       	pop	r14
     778:	df 90       	pop	r13
     77a:	cf 90       	pop	r12
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:317
void LiquidCrystal::write4bits(uint8_t value) {
  for (int i = 0; i < 4; i++) {
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }

  pulseEnable();
     77c:	0c 94 76 03 	jmp	0x6ec	; 0x6ec <LiquidCrystal::pulseEnable()>

00000780 <LiquidCrystal::send(unsigned char, unsigned char)>:
send():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:287
}

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void LiquidCrystal::send(uint8_t value, uint8_t mode) {
     780:	cf 92       	push	r12
     782:	df 92       	push	r13
     784:	ef 92       	push	r14
     786:	ff 92       	push	r15
     788:	0f 93       	push	r16
     78a:	1f 93       	push	r17
     78c:	cf 93       	push	r28
     78e:	df 93       	push	r29
     790:	ec 01       	movw	r28, r24
     792:	f6 2e       	mov	r15, r22
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:288
  digitalWrite(_rs_pin, mode);
     794:	64 2f       	mov	r22, r20
     796:	8c 81       	ldd	r24, Y+4	; 0x04
     798:	0e 94 65 02 	call	0x4ca	; 0x4ca <digitalWrite>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:291

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
     79c:	8d 81       	ldd	r24, Y+5	; 0x05
     79e:	8f 3f       	cpi	r24, 0xFF	; 255
     7a0:	19 f0       	breq	.+6      	; 0x7a8 <LiquidCrystal::send(unsigned char, unsigned char)+0x28>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:292
    digitalWrite(_rw_pin, LOW);
     7a2:	60 e0       	ldi	r22, 0x00	; 0
     7a4:	0e 94 65 02 	call	0x4ca	; 0x4ca <digitalWrite>
     7a8:	0f 2d       	mov	r16, r15
     7aa:	10 e0       	ldi	r17, 0x00	; 0
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:295
  }
  
  if (_displayfunction & LCD_8BITMODE) {
     7ac:	8f 85       	ldd	r24, Y+15	; 0x0f
     7ae:	84 ff       	sbrs	r24, 4
     7b0:	25 c0       	rjmp	.+74     	; 0x7fc <LiquidCrystal::send(unsigned char, unsigned char)+0x7c>
     7b2:	6e 01       	movw	r12, r28
     7b4:	87 e0       	ldi	r24, 0x07	; 7
     7b6:	c8 0e       	add	r12, r24
     7b8:	d1 1c       	adc	r13, r1
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:321

  pulseEnable();
}

void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
     7ba:	f1 2c       	mov	r15, r1
     7bc:	e1 2c       	mov	r14, r1
write8bits():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:322
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
     7be:	b8 01       	movw	r22, r16
     7c0:	0e 2c       	mov	r0, r14
     7c2:	02 c0       	rjmp	.+4      	; 0x7c8 <LiquidCrystal::send(unsigned char, unsigned char)+0x48>
     7c4:	75 95       	asr	r23
     7c6:	67 95       	ror	r22
     7c8:	0a 94       	dec	r0
     7ca:	e2 f7       	brpl	.-8      	; 0x7c4 <LiquidCrystal::send(unsigned char, unsigned char)+0x44>
     7cc:	61 70       	andi	r22, 0x01	; 1
     7ce:	f6 01       	movw	r30, r12
     7d0:	81 91       	ld	r24, Z+
     7d2:	6f 01       	movw	r12, r30
     7d4:	0e 94 65 02 	call	0x4ca	; 0x4ca <digitalWrite>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:321

  pulseEnable();
}

void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
     7d8:	ff ef       	ldi	r31, 0xFF	; 255
     7da:	ef 1a       	sub	r14, r31
     7dc:	ff 0a       	sbc	r15, r31
     7de:	88 e0       	ldi	r24, 0x08	; 8
     7e0:	e8 16       	cp	r14, r24
     7e2:	f1 04       	cpc	r15, r1
     7e4:	61 f7       	brne	.-40     	; 0x7be <LiquidCrystal::send(unsigned char, unsigned char)+0x3e>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:325
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }
  
  pulseEnable();
     7e6:	ce 01       	movw	r24, r28
send():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:301
    write8bits(value); 
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
     7e8:	df 91       	pop	r29
     7ea:	cf 91       	pop	r28
     7ec:	1f 91       	pop	r17
     7ee:	0f 91       	pop	r16
     7f0:	ff 90       	pop	r15
     7f2:	ef 90       	pop	r14
     7f4:	df 90       	pop	r13
     7f6:	cf 90       	pop	r12
write8bits():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:325
void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }
  
  pulseEnable();
     7f8:	0c 94 76 03 	jmp	0x6ec	; 0x6ec <LiquidCrystal::pulseEnable()>
send():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:298
  }
  
  if (_displayfunction & LCD_8BITMODE) {
    write8bits(value); 
  } else {
    write4bits(value>>4);
     7fc:	b8 01       	movw	r22, r16
     7fe:	84 e0       	ldi	r24, 0x04	; 4
     800:	75 95       	asr	r23
     802:	67 95       	ror	r22
     804:	8a 95       	dec	r24
     806:	e1 f7       	brne	.-8      	; 0x800 <LiquidCrystal::send(unsigned char, unsigned char)+0x80>
     808:	ce 01       	movw	r24, r28
     80a:	0e 94 93 03 	call	0x726	; 0x726 <LiquidCrystal::write4bits(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:299
    write4bits(value);
     80e:	6f 2d       	mov	r22, r15
     810:	ce 01       	movw	r24, r28
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:301
  }
}
     812:	df 91       	pop	r29
     814:	cf 91       	pop	r28
     816:	1f 91       	pop	r17
     818:	0f 91       	pop	r16
     81a:	ff 90       	pop	r15
     81c:	ef 90       	pop	r14
     81e:	df 90       	pop	r13
     820:	cf 90       	pop	r12
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:299
  
  if (_displayfunction & LCD_8BITMODE) {
    write8bits(value); 
  } else {
    write4bits(value>>4);
    write4bits(value);
     822:	0c 94 93 03 	jmp	0x726	; 0x726 <LiquidCrystal::write4bits(unsigned char)>

00000826 <LiquidCrystal::command(unsigned char) [clone .constprop.49]>:
command():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:276
}

/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
     826:	40 e0       	ldi	r20, 0x00	; 0
     828:	68 2f       	mov	r22, r24
     82a:	8a eb       	ldi	r24, 0xBA	; 186
     82c:	93 e0       	ldi	r25, 0x03	; 3
     82e:	0c 94 c0 03 	jmp	0x780	; 0x780 <LiquidCrystal::send(unsigned char, unsigned char)>

00000832 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.46]>:
begin():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:78
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
  
  begin(16, 1);  
}

void LiquidCrystal::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
     832:	cf 93       	push	r28
     834:	df 93       	push	r29
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:79
  if (lines > 1) {
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	29 f4       	brne	.+10     	; 0x844 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.46]+0x12>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:80
    _displayfunction |= LCD_2LINE;
     83a:	90 91 c9 03 	lds	r25, 0x03C9	; 0x8003c9 <display+0xf>
     83e:	98 60       	ori	r25, 0x08	; 8
     840:	90 93 c9 03 	sts	0x03C9, r25	; 0x8003c9 <display+0xf>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:82
  }
  _numlines = lines;
     844:	80 93 cd 03 	sts	0x03CD, r24	; 0x8003cd <display+0x13>
setRowOffsets():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:169

}

void LiquidCrystal::setRowOffsets(int row0, int row1, int row2, int row3)
{
  _row_offsets[0] = row0;
     848:	10 92 ce 03 	sts	0x03CE, r1	; 0x8003ce <display+0x14>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:170
  _row_offsets[1] = row1;
     84c:	80 e4       	ldi	r24, 0x40	; 64
     84e:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <display+0x15>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:171
  _row_offsets[2] = row2;
     852:	80 e1       	ldi	r24, 0x10	; 16
     854:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <display+0x16>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:172
  _row_offsets[3] = row3;
     858:	80 e5       	ldi	r24, 0x50	; 80
     85a:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <display+0x17>
begin():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:91
  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
    _displayfunction |= LCD_5x10DOTS;
  }

  pinMode(_rs_pin, OUTPUT);
     85e:	61 e0       	ldi	r22, 0x01	; 1
     860:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <display+0x4>
     864:	0e 94 b1 02 	call	0x562	; 0x562 <pinMode>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:93
  // we can save 1 pin by not using RW. Indicate by passing 255 instead of pin#
  if (_rw_pin != 255) { 
     868:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <display+0x5>
     86c:	8f 3f       	cpi	r24, 0xFF	; 255
     86e:	19 f0       	breq	.+6      	; 0x876 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.46]+0x44>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:94
    pinMode(_rw_pin, OUTPUT);
     870:	61 e0       	ldi	r22, 0x01	; 1
     872:	0e 94 b1 02 	call	0x562	; 0x562 <pinMode>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:96
  }
  pinMode(_enable_pin, OUTPUT);
     876:	61 e0       	ldi	r22, 0x01	; 1
     878:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <display+0x6>
     87c:	0e 94 b1 02 	call	0x562	; 0x562 <pinMode>
     880:	ca eb       	ldi	r28, 0xBA	; 186
     882:	d3 e0       	ldi	r29, 0x03	; 3
     884:	9e 01       	movw	r18, r28
     886:	2a 5b       	subi	r18, 0xBA	; 186
     888:	33 40       	sbci	r19, 0x03	; 3
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:99
  
  // Do these once, instead of every time a character is drawn for speed reasons.
  for (int i=0; i<((_displayfunction & LCD_8BITMODE) ? 8 : 4); ++i)
     88a:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <display+0xf>
     88e:	84 fd       	sbrc	r24, 4
     890:	0b c0       	rjmp	.+22     	; 0x8a8 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.46]+0x76>
     892:	84 e0       	ldi	r24, 0x04	; 4
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	21 96       	adiw	r28, 0x01	; 1
     898:	28 17       	cp	r18, r24
     89a:	39 07       	cpc	r19, r25
     89c:	44 f4       	brge	.+16     	; 0x8ae <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.46]+0x7c>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:101
  {
    pinMode(_data_pins[i], OUTPUT);
     89e:	61 e0       	ldi	r22, 0x01	; 1
     8a0:	8e 81       	ldd	r24, Y+6	; 0x06
     8a2:	0e 94 b1 02 	call	0x562	; 0x562 <pinMode>
     8a6:	ee cf       	rjmp	.-36     	; 0x884 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.46]+0x52>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:99
    pinMode(_rw_pin, OUTPUT);
  }
  pinMode(_enable_pin, OUTPUT);
  
  // Do these once, instead of every time a character is drawn for speed reasons.
  for (int i=0; i<((_displayfunction & LCD_8BITMODE) ? 8 : 4); ++i)
     8a8:	88 e0       	ldi	r24, 0x08	; 8
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	f4 cf       	rjmp	.-24     	; 0x896 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.46]+0x64>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:107
   } 

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // before sending commands. Arduino can turn on way before 4.5V so we'll wait 50
  delayMicroseconds(50000); 
     8ae:	80 e5       	ldi	r24, 0x50	; 80
     8b0:	93 ec       	ldi	r25, 0xC3	; 195
     8b2:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <delayMicroseconds>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:109
  // Now we pull both RS and R/W low to begin commands
  digitalWrite(_rs_pin, LOW);
     8b6:	60 e0       	ldi	r22, 0x00	; 0
     8b8:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <display+0x4>
     8bc:	0e 94 65 02 	call	0x4ca	; 0x4ca <digitalWrite>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:110
  digitalWrite(_enable_pin, LOW);
     8c0:	60 e0       	ldi	r22, 0x00	; 0
     8c2:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <display+0x6>
     8c6:	0e 94 65 02 	call	0x4ca	; 0x4ca <digitalWrite>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:111
  if (_rw_pin != 255) { 
     8ca:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <display+0x5>
     8ce:	8f 3f       	cpi	r24, 0xFF	; 255
     8d0:	19 f0       	breq	.+6      	; 0x8d8 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.46]+0xa6>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:112
    digitalWrite(_rw_pin, LOW);
     8d2:	60 e0       	ldi	r22, 0x00	; 0
     8d4:	0e 94 65 02 	call	0x4ca	; 0x4ca <digitalWrite>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:116
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
     8d8:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <display+0xf>
     8dc:	84 fd       	sbrc	r24, 4
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__stack+0x55>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:121
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
     8e0:	63 e0       	ldi	r22, 0x03	; 3
     8e2:	8a eb       	ldi	r24, 0xBA	; 186
     8e4:	93 e0       	ldi	r25, 0x03	; 3
     8e6:	0e 94 93 03 	call	0x726	; 0x726 <LiquidCrystal::write4bits(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:122
    delayMicroseconds(4500); // wait min 4.1ms
     8ea:	84 e9       	ldi	r24, 0x94	; 148
     8ec:	91 e1       	ldi	r25, 0x11	; 17
     8ee:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <delayMicroseconds>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:125

    // second try
    write4bits(0x03);
     8f2:	63 e0       	ldi	r22, 0x03	; 3
     8f4:	8a eb       	ldi	r24, 0xBA	; 186
     8f6:	93 e0       	ldi	r25, 0x03	; 3
     8f8:	0e 94 93 03 	call	0x726	; 0x726 <LiquidCrystal::write4bits(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:126
    delayMicroseconds(4500); // wait min 4.1ms
     8fc:	84 e9       	ldi	r24, 0x94	; 148
     8fe:	91 e1       	ldi	r25, 0x11	; 17
     900:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <delayMicroseconds>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:129
    
    // third go!
    write4bits(0x03); 
     904:	63 e0       	ldi	r22, 0x03	; 3
     906:	8a eb       	ldi	r24, 0xBA	; 186
     908:	93 e0       	ldi	r25, 0x03	; 3
     90a:	0e 94 93 03 	call	0x726	; 0x726 <LiquidCrystal::write4bits(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:130
    delayMicroseconds(150);
     90e:	86 e9       	ldi	r24, 0x96	; 150
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <delayMicroseconds>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:133

    // finally, set to 4-bit interface
    write4bits(0x02); 
     916:	62 e0       	ldi	r22, 0x02	; 2
     918:	8a eb       	ldi	r24, 0xBA	; 186
     91a:	93 e0       	ldi	r25, 0x03	; 3
     91c:	0e 94 93 03 	call	0x726	; 0x726 <LiquidCrystal::write4bits(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:151
    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
     920:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <display+0xf>
     924:	80 62       	ori	r24, 0x20	; 32
     926:	0e 94 13 04 	call	0x826	; 0x826 <LiquidCrystal::command(unsigned char) [clone .constprop.49]>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:154

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
     92a:	84 e0       	ldi	r24, 0x04	; 4
     92c:	80 93 ca 03 	sts	0x03CA, r24	; 0x8003ca <display+0x10>
display():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:208
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void LiquidCrystal::display() {
  _displaycontrol |= LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
     930:	8c e0       	ldi	r24, 0x0C	; 12
     932:	0e 94 13 04 	call	0x826	; 0x826 <LiquidCrystal::command(unsigned char) [clone .constprop.49]>
clear():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:178
}

/********** high level commands, for the user! */
void LiquidCrystal::clear()
{
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	0e 94 13 04 	call	0x826	; 0x826 <LiquidCrystal::command(unsigned char) [clone .constprop.49]>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:179
  delayMicroseconds(2000);  // this command takes a long time!
     93c:	80 ed       	ldi	r24, 0xD0	; 208
     93e:	97 e0       	ldi	r25, 0x07	; 7
     940:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <delayMicroseconds>
begin():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:161

  // clear it off
  clear();

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
     944:	82 e0       	ldi	r24, 0x02	; 2
     946:	80 93 cb 03 	sts	0x03CB, r24	; 0x8003cb <display+0x11>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:163
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
     94a:	86 e0       	ldi	r24, 0x06	; 6
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:165

}
     94c:	df 91       	pop	r29
     94e:	cf 91       	pop	r28
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:163
  clear();

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
     950:	0c 94 13 04 	jmp	0x826	; 0x826 <LiquidCrystal::command(unsigned char) [clone .constprop.49]>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:139
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
     954:	80 62       	ori	r24, 0x20	; 32
     956:	0e 94 13 04 	call	0x826	; 0x826 <LiquidCrystal::command(unsigned char) [clone .constprop.49]>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:140
    delayMicroseconds(4500);  // wait more than 4.1ms
     95a:	84 e9       	ldi	r24, 0x94	; 148
     95c:	91 e1       	ldi	r25, 0x11	; 17
     95e:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <delayMicroseconds>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:143

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
     962:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <display+0xf>
     966:	80 62       	ori	r24, 0x20	; 32
     968:	0e 94 13 04 	call	0x826	; 0x826 <LiquidCrystal::command(unsigned char) [clone .constprop.49]>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:144
    delayMicroseconds(150);
     96c:	86 e9       	ldi	r24, 0x96	; 150
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <delayMicroseconds>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:147

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
     974:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <display+0xf>
     978:	80 62       	ori	r24, 0x20	; 32
     97a:	0e 94 13 04 	call	0x826	; 0x826 <LiquidCrystal::command(unsigned char) [clone .constprop.49]>
     97e:	d0 cf       	rjmp	.-96     	; 0x920 <__stack+0x21>

00000980 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.23]>:
setCursor():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:194
{
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
  if ( row >= max_lines ) {
    row = max_lines - 1;    // we count rows starting w/0
  }
  if ( row >= _numlines ) {
     980:	90 91 cd 03 	lds	r25, 0x03CD	; 0x8003cd <display+0x13>
     984:	69 17       	cp	r22, r25
     986:	10 f0       	brcs	.+4      	; 0x98c <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.23]+0xc>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:195
    row = _numlines - 1;    // we count rows starting w/0
     988:	6f ef       	ldi	r22, 0xFF	; 255
     98a:	69 0f       	add	r22, r25
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:198
  }
  
  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
     98c:	e6 2f       	mov	r30, r22
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	e6 54       	subi	r30, 0x46	; 70
     992:	fc 4f       	sbci	r31, 0xFC	; 252
     994:	94 89       	ldd	r25, Z+20	; 0x14
     996:	89 0f       	add	r24, r25
     998:	80 68       	ori	r24, 0x80	; 128
     99a:	0c 94 13 04 	jmp	0x826	; 0x826 <LiquidCrystal::command(unsigned char) [clone .constprop.49]>

0000099e <LiquidCrystal::write(unsigned char)>:
write():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:280
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
     99e:	41 e0       	ldi	r20, 0x01	; 1
     9a0:	0e 94 c0 03 	call	0x780	; 0x780 <LiquidCrystal::send(unsigned char, unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:282
  return 1; // assume sucess
}
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	08 95       	ret

000009aa <Print::flush()>:
flush():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.h:65

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     9aa:	08 95       	ret

000009ac <twi_stop>:
twi_stop():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:436
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     9ac:	85 ed       	ldi	r24, 0xD5	; 213
     9ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:456
          return;
        }
      }
    }
  #else
    while(TWCR & _BV(TWSTO)){
     9b2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     9b6:	84 fd       	sbrc	r24, 4
     9b8:	fc cf       	rjmp	.-8      	; 0x9b2 <twi_stop+0x6>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:462
      continue;
    }
  #endif

  // update twi state
  twi_state = TWI_READY;
     9ba:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <twi_state>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:463
}
     9be:	08 95       	ret

000009c0 <twi_transmit>:
twi_transmit():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:371
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
     9c0:	20 91 61 02 	lds	r18, 0x0261	; 0x800261 <twi_txBufferLength>
     9c4:	26 0f       	add	r18, r22
     9c6:	33 27       	eor	r19, r19
     9c8:	33 1f       	adc	r19, r19
     9ca:	21 32       	cpi	r18, 0x21	; 33
     9cc:	31 05       	cpc	r19, r1
     9ce:	ec f4       	brge	.+58     	; 0xa0a <twi_transmit+0x4a>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:376
    return 1;
  }

  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
     9d0:	20 91 dc 02 	lds	r18, 0x02DC	; 0x8002dc <twi_state>
     9d4:	fc 01       	movw	r30, r24
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	80 e0       	ldi	r24, 0x00	; 0
     9da:	24 30       	cpi	r18, 0x04	; 4
     9dc:	69 f0       	breq	.+26     	; 0x9f8 <twi_transmit+0x38>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:377
    return 2;
     9de:	82 e0       	ldi	r24, 0x02	; 2
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:387
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;

  return 0;
}
     9e0:	08 95       	ret
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:382
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    twi_txBuffer[twi_txBufferLength+i] = data[i];
     9e2:	a0 91 61 02 	lds	r26, 0x0261	; 0x800261 <twi_txBufferLength>
     9e6:	21 91       	ld	r18, Z+
     9e8:	ac 01       	movw	r20, r24
     9ea:	4f 5b       	subi	r20, 0xBF	; 191
     9ec:	5d 4f       	sbci	r21, 0xFD	; 253
     9ee:	a4 0f       	add	r26, r20
     9f0:	b5 2f       	mov	r27, r21
     9f2:	b1 1d       	adc	r27, r1
     9f4:	2c 93       	st	X, r18
     9f6:	01 96       	adiw	r24, 0x01	; 1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:381
  if(TWI_STX != twi_state){
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
     9f8:	86 17       	cp	r24, r22
     9fa:	98 f3       	brcs	.-26     	; 0x9e2 <twi_transmit+0x22>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:384
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
     9fc:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <twi_txBufferLength>
     a00:	68 0f       	add	r22, r24
     a02:	60 93 61 02 	sts	0x0261, r22	; 0x800261 <twi_txBufferLength>
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	08 95       	ret
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:372
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    return 1;
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	08 95       	ret

00000a0e <TwoWire::flush()>:
flush():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:326
}

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
     a0e:	08 95       	ret

00000a10 <TwoWire::peek()>:
peek():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:316
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;

  if(rxBufferIndex < rxBufferLength){
     a10:	e0 91 8f 02 	lds	r30, 0x028F	; 0x80028f <TwoWire::rxBufferIndex>
     a14:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <TwoWire::rxBufferLength>
     a18:	e8 17       	cp	r30, r24
     a1a:	30 f4       	brcc	.+12     	; 0xa28 <TwoWire::peek()+0x18>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:317
    value = rxBuffer[rxBufferIndex];
     a1c:	f0 e0       	ldi	r31, 0x00	; 0
     a1e:	ec 54       	subi	r30, 0x4C	; 76
     a20:	fd 4f       	sbci	r31, 0xFD	; 253
     a22:	80 81       	ld	r24, Z
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	08 95       	ret
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:314
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
     a28:	8f ef       	ldi	r24, 0xFF	; 255
     a2a:	9f ef       	ldi	r25, 0xFF	; 255
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:321
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
     a2c:	08 95       	ret

00000a2e <TwoWire::read()>:
read():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:301
int TwoWire::read(void)
{
  int value = -1;

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     a2e:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <TwoWire::rxBufferIndex>
     a32:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <TwoWire::rxBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:298
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
     a36:	2f ef       	ldi	r18, 0xFF	; 255
     a38:	3f ef       	ldi	r19, 0xFF	; 255
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:301

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     a3a:	98 17       	cp	r25, r24
     a3c:	48 f4       	brcc	.+18     	; 0xa50 <TwoWire::read()+0x22>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:302
    value = rxBuffer[rxBufferIndex];
     a3e:	e9 2f       	mov	r30, r25
     a40:	f0 e0       	ldi	r31, 0x00	; 0
     a42:	ec 54       	subi	r30, 0x4C	; 76
     a44:	fd 4f       	sbci	r31, 0xFD	; 253
     a46:	20 81       	ld	r18, Z
     a48:	30 e0       	ldi	r19, 0x00	; 0
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:303
    ++rxBufferIndex;
     a4a:	9f 5f       	subi	r25, 0xFF	; 255
     a4c:	90 93 8f 02 	sts	0x028F, r25	; 0x80028f <TwoWire::rxBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:307
  }

  return value;
}
     a50:	c9 01       	movw	r24, r18
     a52:	08 95       	ret

00000a54 <TwoWire::available()>:
available():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:290
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
     a54:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <TwoWire::rxBufferLength>
     a58:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <TwoWire::rxBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:291
}
     a5c:	89 1b       	sub	r24, r25
     a5e:	99 0b       	sbc	r25, r25
     a60:	08 95       	ret

00000a62 <TwoWire::write(unsigned char const*, unsigned int)>:
write():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:271

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
     a62:	cf 92       	push	r12
     a64:	df 92       	push	r13
     a66:	ef 92       	push	r14
     a68:	ff 92       	push	r15
     a6a:	0f 93       	push	r16
     a6c:	1f 93       	push	r17
     a6e:	cf 93       	push	r28
     a70:	df 93       	push	r29
     a72:	7c 01       	movw	r14, r24
     a74:	cb 01       	movw	r24, r22
     a76:	8a 01       	movw	r16, r20
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:272
  if(transmitting){
     a78:	20 91 90 02 	lds	r18, 0x0290	; 0x800290 <TwoWire::transmitting>
     a7c:	22 23       	and	r18, r18
     a7e:	89 f0       	breq	.+34     	; 0xaa2 <TwoWire::write(unsigned char const*, unsigned int)+0x40>
     a80:	eb 01       	movw	r28, r22
     a82:	6b 01       	movw	r12, r22
     a84:	c4 0e       	add	r12, r20
     a86:	d5 1e       	adc	r13, r21
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:274
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
     a88:	cc 15       	cp	r28, r12
     a8a:	dd 05       	cpc	r29, r13
     a8c:	69 f0       	breq	.+26     	; 0xaa8 <TwoWire::write(unsigned char const*, unsigned int)+0x46>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:275
      write(data[i]);
     a8e:	69 91       	ld	r22, Y+
     a90:	d7 01       	movw	r26, r14
     a92:	ed 91       	ld	r30, X+
     a94:	fc 91       	ld	r31, X
     a96:	01 90       	ld	r0, Z+
     a98:	f0 81       	ld	r31, Z
     a9a:	e0 2d       	mov	r30, r0
     a9c:	c7 01       	movw	r24, r14
     a9e:	09 95       	icall
     aa0:	f3 cf       	rjmp	.-26     	; 0xa88 <TwoWire::write(unsigned char const*, unsigned int)+0x26>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:280
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
     aa2:	64 2f       	mov	r22, r20
     aa4:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <twi_transmit>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:283
  }
  return quantity;
}
     aa8:	c8 01       	movw	r24, r16
     aaa:	df 91       	pop	r29
     aac:	cf 91       	pop	r28
     aae:	1f 91       	pop	r17
     ab0:	0f 91       	pop	r16
     ab2:	ff 90       	pop	r15
     ab4:	ef 90       	pop	r14
     ab6:	df 90       	pop	r13
     ab8:	cf 90       	pop	r12
     aba:	08 95       	ret

00000abc <TwoWire::write(unsigned char)>:
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:246

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
     abc:	cf 93       	push	r28
     abe:	df 93       	push	r29
     ac0:	1f 92       	push	r1
     ac2:	cd b7       	in	r28, 0x3d	; 61
     ac4:	de b7       	in	r29, 0x3e	; 62
     ac6:	69 83       	std	Y+1, r22	; 0x01
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:247
  if(transmitting){
     ac8:	20 91 90 02 	lds	r18, 0x0290	; 0x800290 <TwoWire::transmitting>
     acc:	22 23       	and	r18, r18
     ace:	f9 f0       	breq	.+62     	; 0xb0e <TwoWire::write(unsigned char)+0x52>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:250
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= TWI_BUFFER_SIZE){
     ad0:	20 91 b3 02 	lds	r18, 0x02B3	; 0x8002b3 <TwoWire::txBufferLength>
     ad4:	20 32       	cpi	r18, 0x20	; 32
     ad6:	58 f0       	brcs	.+22     	; 0xaee <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.h:44
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
     ad8:	21 e0       	ldi	r18, 0x01	; 1
     ada:	30 e0       	ldi	r19, 0x00	; 0
     adc:	fc 01       	movw	r30, r24
     ade:	33 83       	std	Z+3, r19	; 0x03
     ae0:	22 83       	std	Z+2, r18	; 0x02
write():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:252
      setWriteError();
      return 0;
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	80 e0       	ldi	r24, 0x00	; 0
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:265
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
}
     ae6:	0f 90       	pop	r0
     ae8:	df 91       	pop	r29
     aea:	cf 91       	pop	r28
     aec:	08 95       	ret
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:255
    if(txBufferLength >= TWI_BUFFER_SIZE){
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
     aee:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <TwoWire::txBufferIndex>
     af2:	e8 2f       	mov	r30, r24
     af4:	f0 e0       	ldi	r31, 0x00	; 0
     af6:	ee 56       	subi	r30, 0x6E	; 110
     af8:	fd 4f       	sbci	r31, 0xFD	; 253
     afa:	99 81       	ldd	r25, Y+1	; 0x01
     afc:	90 83       	st	Z, r25
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:256
    ++txBufferIndex;
     afe:	8f 5f       	subi	r24, 0xFF	; 255
     b00:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <TwoWire::txBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:258
    // update amount in buffer
    txBufferLength = txBufferIndex;
     b04:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <TwoWire::txBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:264
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	ec cf       	rjmp	.-40     	; 0xae6 <TwoWire::write(unsigned char)+0x2a>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:262
    // update amount in buffer
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
     b0e:	61 e0       	ldi	r22, 0x01	; 1
     b10:	ce 01       	movw	r24, r28
     b12:	01 96       	adiw	r24, 0x01	; 1
     b14:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <twi_transmit>
     b18:	f7 cf       	rjmp	.-18     	; 0xb08 <TwoWire::write(unsigned char)+0x4c>

00000b1a <TwoWire::write(int) [clone .constprop.30]>:
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.h:87
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     b1a:	68 2f       	mov	r22, r24
     b1c:	8a e7       	ldi	r24, 0x7A	; 122
     b1e:	93 e0       	ldi	r25, 0x03	; 3
     b20:	0c 94 5e 05 	jmp	0xabc	; 0xabc <TwoWire::write(unsigned char)>

00000b24 <Print::availableForWrite()>:
availableForWrite():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.h:63
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	08 95       	ret

00000b2a <SI4844::waitInterrupt() [clone .isra.2]>:
_ZN6SI484413waitInterruptEv.isra.2():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:166
 * @details It can occur, for example, when you use the analog tuner.  
 */
void SI4844::waitInterrupt(void)
{
    
    while (!data_from_device)
     b2a:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <_ZL16data_from_device.lto_priv.55>
     b2e:	88 23       	and	r24, r24
     b30:	e1 f3       	breq	.-8      	; 0xb2a <SI4844::waitInterrupt() [clone .isra.2]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:169
        ;
        
}
     b32:	08 95       	ret

00000b34 <SI4844::reset() [clone .constprop.12]>:
reset():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:363
 * @ingroup GB1
 * @brief Resets the SI4844 device
 * @details Prepares the system  to be started.
 * @see pages 7, 8, 9 and 10 of the programming guide.
 */
void SI4844::reset()
     b34:	cf 93       	push	r28
     b36:	df 93       	push	r29
twi_setFrequency():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:142
 * Input    Clock frequency
 * Output   none
 */
void twi_setFrequency(uint32_t frequency)
{
  TWBR = ((F_CPU / frequency) - 16) / 2;
     b38:	88 e1       	ldi	r24, 0x18	; 24
     b3a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
reset():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:368
{
    // waitToSend();

    setClockLow(); // See *Note on page 5
    data_from_device = false;
     b3e:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <_ZL16data_from_device.lto_priv.55>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:369
    digitalWrite(resetPin, LOW);
     b42:	ca e8       	ldi	r28, 0x8A	; 138
     b44:	d3 e0       	ldi	r29, 0x03	; 3
     b46:	60 e0       	ldi	r22, 0x00	; 0
     b48:	8e 85       	ldd	r24, Y+14	; 0x0e
     b4a:	0e 94 65 02 	call	0x4ca	; 0x4ca <digitalWrite>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:370
    delayMicroseconds(200);
     b4e:	88 ec       	ldi	r24, 0xC8	; 200
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <delayMicroseconds>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:371
    digitalWrite(resetPin, HIGH);
     b56:	61 e0       	ldi	r22, 0x01	; 1
     b58:	8e 85       	ldd	r24, Y+14	; 0x0e
     b5a:	0e 94 65 02 	call	0x4ca	; 0x4ca <digitalWrite>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:372
    delayMicroseconds(200);
     b5e:	88 ec       	ldi	r24, 0xC8	; 200
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <delayMicroseconds>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:373
    waitInterrupt();
     b66:	0e 94 95 05 	call	0xb2a	; 0xb2a <SI4844::waitInterrupt() [clone .isra.2]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:374
    delayMicroseconds(2500);
     b6a:	84 ec       	ldi	r24, 0xC4	; 196
     b6c:	99 e0       	ldi	r25, 0x09	; 9
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:375
}
     b6e:	df 91       	pop	r29
     b70:	cf 91       	pop	r28
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:374
    digitalWrite(resetPin, LOW);
    delayMicroseconds(200);
    digitalWrite(resetPin, HIGH);
    delayMicroseconds(200);
    waitInterrupt();
    delayMicroseconds(2500);
     b72:	0c 94 e2 02 	jmp	0x5c4	; 0x5c4 <delayMicroseconds>

00000b76 <SI4844::getStatus() [clone .constprop.10]>:
beginTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:196
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <TwoWire::transmitting>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:198
  // set address of targeted slave
  txAddress = address;
     b7c:	81 e1       	ldi	r24, 0x11	; 17
     b7e:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <TwoWire::txAddress>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:200
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     b82:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <TwoWire::txBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:201
  txBufferLength = 0;
     b86:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <TwoWire::txBufferLength>
getStatus():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:982
 * @details this method updates the first byte of all_receiver_status member variable
 * @return  pointer to a structure type si4844_device_status
 */
 si4844_device_status *SI4844::getStatus() {
    Wire.beginTransmission(SI4844_ADDRESS);
    Wire.write(ATDD_GET_STATUS);
     b8a:	80 ee       	ldi	r24, 0xE0	; 224
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	0e 94 8d 05 	call	0xb1a	; 0xb1a <TwoWire::write(int) [clone .constprop.30]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:983
    Wire.endTransmission();
     b92:	0e 94 2d 01 	call	0x25a	; 0x25a <TwoWire::endTransmission() [clone .constprop.31]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:984
    delayMicroseconds(2000);
     b96:	80 ed       	ldi	r24, 0xD0	; 208
     b98:	97 e0       	ldi	r25, 0x07	; 7
     b9a:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <delayMicroseconds>
twi_readFrom():
     b9e:	61 e0       	ldi	r22, 0x01	; 1
     ba0:	81 e1       	ldi	r24, 0x11	; 17
     ba2:	0e 94 ed 00 	call	0x1da	; 0x1da <twi_readFrom.part.0.constprop.39>
requestFrom():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:120
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
     ba6:	10 92 8f 02 	sts	0x028F, r1	; 0x80028f <TwoWire::rxBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:121
  rxBufferLength = read;
     baa:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <TwoWire::rxBufferLength>
getStatus():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:986
    Wire.requestFrom(SI4844_ADDRESS, 1);
    all_receiver_status.raw[0] = Wire.read();
     bae:	8a e7       	ldi	r24, 0x7A	; 122
     bb0:	93 e0       	ldi	r25, 0x03	; 3
     bb2:	0e 94 17 05 	call	0xa2e	; 0xa2e <TwoWire::read()>
     bb6:	ea e8       	ldi	r30, 0x8A	; 138
     bb8:	f3 e0       	ldi	r31, 0x03	; 3
     bba:	81 83       	std	Z+1, r24	; 0x01
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:987
    device_status.raw = all_receiver_status.raw[0];
     bbc:	80 83       	st	Z, r24
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:989
    return &device_status; 
 }
     bbe:	cf 01       	movw	r24, r30
     bc0:	08 95       	ret

00000bc2 <SI4844::getAllReceiverInfo() [clone .constprop.26]>:
getAllReceiverInfo():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:999
 * @details Use this method only if you want to deal with that information by yourself. 
 * @details all data of the receiver is storted in "all_receiver_status" member variable 
 * @details This library has other methods to get that information easier. 
 * @return pointer to a structure type si4844_status_response
 */
si4844_status_response *SI4844::getAllReceiverInfo()
     bc2:	0f 93       	push	r16
     bc4:	1f 93       	push	r17
     bc6:	cf 93       	push	r28
     bc8:	df 93       	push	r29
twi_setFrequency():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:142
     bca:	20 91 9f 03 	lds	r18, 0x039F	; 0x80039f <rx+0x15>
     bce:	30 91 a0 03 	lds	r19, 0x03A0	; 0x8003a0 <rx+0x16>
     bd2:	40 91 a1 03 	lds	r20, 0x03A1	; 0x8003a1 <rx+0x17>
     bd6:	50 91 a2 03 	lds	r21, 0x03A2	; 0x8003a2 <rx+0x18>
     bda:	60 e0       	ldi	r22, 0x00	; 0
     bdc:	74 e2       	ldi	r23, 0x24	; 36
     bde:	84 ef       	ldi	r24, 0xF4	; 244
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <__udivmodsi4>
     be6:	20 51       	subi	r18, 0x10	; 16
     be8:	31 09       	sbc	r19, r1
     bea:	41 09       	sbc	r20, r1
     bec:	51 09       	sbc	r21, r1
     bee:	56 95       	lsr	r21
     bf0:	47 95       	ror	r20
     bf2:	37 95       	ror	r19
     bf4:	27 95       	ror	r18
     bf6:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
beginTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:196
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
     bfa:	11 e0       	ldi	r17, 0x01	; 1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:198
  // set address of targeted slave
  txAddress = address;
     bfc:	01 e1       	ldi	r16, 0x11	; 17
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:196
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
     bfe:	10 93 90 02 	sts	0x0290, r17	; 0x800290 <TwoWire::transmitting>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:198
  // set address of targeted slave
  txAddress = address;
     c02:	00 93 b2 02 	sts	0x02B2, r16	; 0x8002b2 <TwoWire::txAddress>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:200
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     c06:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <TwoWire::txBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:201
  txBufferLength = 0;
     c0a:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <TwoWire::txBufferLength>
getAllReceiverInfo():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1005
{
    setClockHigh();
    do
    {
        Wire.beginTransmission(SI4844_ADDRESS);
        Wire.write(ATDD_GET_STATUS);
     c0e:	80 ee       	ldi	r24, 0xE0	; 224
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	0e 94 8d 05 	call	0xb1a	; 0xb1a <TwoWire::write(int) [clone .constprop.30]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1006
        Wire.endTransmission();
     c16:	0e 94 2d 01 	call	0x25a	; 0x25a <TwoWire::endTransmission() [clone .constprop.31]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1007
        delayMicroseconds(2500);
     c1a:	84 ec       	ldi	r24, 0xC4	; 196
     c1c:	99 e0       	ldi	r25, 0x09	; 9
     c1e:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <delayMicroseconds>
twi_readFrom():
     c22:	64 e0       	ldi	r22, 0x04	; 4
     c24:	81 e1       	ldi	r24, 0x11	; 17
     c26:	0e 94 ed 00 	call	0x1da	; 0x1da <twi_readFrom.part.0.constprop.39>
requestFrom():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:120
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
     c2a:	10 92 8f 02 	sts	0x028F, r1	; 0x80028f <TwoWire::rxBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:121
  rxBufferLength = read;
     c2e:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <TwoWire::rxBufferLength>
     c32:	cb e8       	ldi	r28, 0x8B	; 139
     c34:	d3 e0       	ldi	r29, 0x03	; 3
getAllReceiverInfo():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1011
        // request 4 bytes response from atdd (si4844)
        Wire.requestFrom(SI4844_ADDRESS, 0x04);
        for (int i = 0; i < 4; i++)
            all_receiver_status.raw[i] = Wire.read();
     c36:	8a e7       	ldi	r24, 0x7A	; 122
     c38:	93 e0       	ldi	r25, 0x03	; 3
     c3a:	0e 94 17 05 	call	0xa2e	; 0xa2e <TwoWire::read()>
     c3e:	89 93       	st	Y+, r24
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1010
        Wire.write(ATDD_GET_STATUS);
        Wire.endTransmission();
        delayMicroseconds(2500);
        // request 4 bytes response from atdd (si4844)
        Wire.requestFrom(SI4844_ADDRESS, 0x04);
        for (int i = 0; i < 4; i++)
     c40:	83 e0       	ldi	r24, 0x03	; 3
     c42:	cf 38       	cpi	r28, 0x8F	; 143
     c44:	d8 07       	cpc	r29, r24
     c46:	b9 f7       	brne	.-18     	; 0xc36 <SI4844::getAllReceiverInfo() [clone .constprop.26]+0x74>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1014
            all_receiver_status.raw[i] = Wire.read();
        // check response error. Exit when no error found. See page 7.
        // if INFORDY is 0, the system is not ready yet. You may need to check if CHFREQ is 0 too.
    } while ( all_receiver_status.refined.INFORDY == 0 );
     c48:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <rx+0x1>
     c4c:	84 ff       	sbrs	r24, 4
     c4e:	d7 cf       	rjmp	.-82     	; 0xbfe <SI4844::getAllReceiverInfo() [clone .constprop.26]+0x3c>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1016

    device_status.raw = all_receiver_status.raw[0];
     c50:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <rx>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1018
    return &all_receiver_status;
}
     c54:	8b e8       	ldi	r24, 0x8B	; 139
     c56:	93 e0       	ldi	r25, 0x03	; 3
     c58:	df 91       	pop	r29
     c5a:	cf 91       	pop	r28
     c5c:	1f 91       	pop	r17
     c5e:	0f 91       	pop	r16
     c60:	08 95       	ret

00000c62 <SI4844::getFrequencyInteger() [clone .constprop.25]>:
getFrequencyInteger():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1144
 * @details For example: FM, 103900 KHz (103.9 MHz); SW, 7335 KHz (7.34 MHz, 41m)   
 * @details It is useful to save memory
 * 
 * @return uint32_t current frequency in KHz.  
 */
uint32_t SI4844::getFrequencyInteger(void)
     c62:	cf 92       	push	r12
     c64:	df 92       	push	r13
     c66:	ef 92       	push	r14
     c68:	ff 92       	push	r15
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1146
{
    this->getAllReceiverInfo();
     c6a:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <SI4844::getAllReceiverInfo() [clone .constprop.26]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1151
    int addFactor = 0;
    int multFactor = 1;
    // Check CHFREQ bit[15] MSB = 1
    // See Page 15 of Si48XX ATDD PROGRAMMING GUIDE
    if (all_receiver_status.refined.BANDMODE == 0)
     c6e:	90 91 8c 03 	lds	r25, 0x038C	; 0x80038c <rx+0x2>
     c72:	90 7c       	andi	r25, 0xC0	; 192
     c74:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <rx+0x3>
     c78:	91 11       	cpse	r25, r1
     c7a:	54 c0       	rjmp	.+168    	; 0xd24 <SI4844::getFrequencyInteger() [clone .constprop.25]+0xc2>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1154
    {
        multFactor = 100;
        if (all_receiver_status.refined.d1 & 0b00001000)
     c7c:	98 2f       	mov	r25, r24
     c7e:	92 95       	swap	r25
     c80:	9f 70       	andi	r25, 0x0F	; 15
     c82:	87 ff       	sbrs	r24, 7
     c84:	64 c0       	rjmp	.+200    	; 0xd4e <SI4844::getFrequencyInteger() [clone .constprop.25]+0xec>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1156
        {
            all_receiver_status.refined.d1 &= 0b11110111;
     c86:	97 70       	andi	r25, 0x07	; 7
     c88:	92 95       	swap	r25
     c8a:	90 7f       	andi	r25, 0xF0	; 240
     c8c:	8f 70       	andi	r24, 0x0F	; 15
     c8e:	89 2b       	or	r24, r25
     c90:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <rx+0x3>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1153
    int multFactor = 1;
    // Check CHFREQ bit[15] MSB = 1
    // See Page 15 of Si48XX ATDD PROGRAMMING GUIDE
    if (all_receiver_status.refined.BANDMODE == 0)
    {
        multFactor = 100;
     c94:	a4 e6       	ldi	r26, 0x64	; 100
     c96:	b0 e0       	ldi	r27, 0x00	; 0
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1157
        if (all_receiver_status.refined.d1 & 0b00001000)
        {
            all_receiver_status.refined.d1 &= 0b11110111;
            addFactor = 50;
     c98:	e2 e3       	ldi	r30, 0x32	; 50
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1172
        }
    }

    uint32_t f;

    f = (all_receiver_status.refined.d4);
     c9c:	20 91 8e 03 	lds	r18, 0x038E	; 0x80038e <rx+0x4>
     ca0:	62 2f       	mov	r22, r18
     ca2:	6f 70       	andi	r22, 0x0F	; 15
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1173
    f += (all_receiver_status.refined.d3) * 10;
     ca4:	22 95       	swap	r18
     ca6:	2f 70       	andi	r18, 0x0F	; 15
     ca8:	7a e0       	ldi	r23, 0x0A	; 10
     caa:	27 9f       	mul	r18, r23
     cac:	90 01       	movw	r18, r0
     cae:	11 24       	eor	r1, r1
     cb0:	03 2e       	mov	r0, r19
     cb2:	00 0c       	add	r0, r0
     cb4:	44 0b       	sbc	r20, r20
     cb6:	55 0b       	sbc	r21, r21
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1174
    f += (all_receiver_status.refined.d2) * 100;
     cb8:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <rx+0x3>
     cbc:	89 2f       	mov	r24, r25
     cbe:	8f 70       	andi	r24, 0x0F	; 15
     cc0:	74 e6       	ldi	r23, 0x64	; 100
     cc2:	87 9f       	mul	r24, r23
     cc4:	60 01       	movw	r12, r0
     cc6:	11 24       	eor	r1, r1
     cc8:	0d 2c       	mov	r0, r13
     cca:	00 0c       	add	r0, r0
     ccc:	ee 08       	sbc	r14, r14
     cce:	ff 08       	sbc	r15, r15
     cd0:	2c 0d       	add	r18, r12
     cd2:	3d 1d       	adc	r19, r13
     cd4:	4e 1d       	adc	r20, r14
     cd6:	5f 1d       	adc	r21, r15
     cd8:	26 0f       	add	r18, r22
     cda:	31 1d       	adc	r19, r1
     cdc:	41 1d       	adc	r20, r1
     cde:	51 1d       	adc	r21, r1
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1175
    f += (all_receiver_status.refined.d1) * 1000;
     ce0:	92 95       	swap	r25
     ce2:	9f 70       	andi	r25, 0x0F	; 15
     ce4:	68 ee       	ldi	r22, 0xE8	; 232
     ce6:	73 e0       	ldi	r23, 0x03	; 3
     ce8:	96 9f       	mul	r25, r22
     cea:	60 01       	movw	r12, r0
     cec:	97 9f       	mul	r25, r23
     cee:	d0 0c       	add	r13, r0
     cf0:	11 24       	eor	r1, r1
     cf2:	0d 2c       	mov	r0, r13
     cf4:	00 0c       	add	r0, r0
     cf6:	ee 08       	sbc	r14, r14
     cf8:	ff 08       	sbc	r15, r15
     cfa:	2c 0d       	add	r18, r12
     cfc:	3d 1d       	adc	r19, r13
     cfe:	4e 1d       	adc	r20, r14
     d00:	5f 1d       	adc	r21, r15
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1177

    data_from_device = false;
     d02:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <_ZL16data_from_device.lto_priv.55>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1179

    return (f * multFactor + addFactor);
     d06:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <__mulshisi3>
     d0a:	6f 01       	movw	r12, r30
     d0c:	ff 0f       	add	r31, r31
     d0e:	ee 08       	sbc	r14, r14
     d10:	ff 08       	sbc	r15, r15
     d12:	6c 0d       	add	r22, r12
     d14:	7d 1d       	adc	r23, r13
     d16:	8e 1d       	adc	r24, r14
     d18:	9f 1d       	adc	r25, r15
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1180
}
     d1a:	ff 90       	pop	r15
     d1c:	ef 90       	pop	r14
     d1e:	df 90       	pop	r13
     d20:	cf 90       	pop	r12
     d22:	08 95       	ret
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1148
 */
uint32_t SI4844::getFrequencyInteger(void)
{
    this->getAllReceiverInfo();
    int addFactor = 0;
    int multFactor = 1;
     d24:	a1 e0       	ldi	r26, 0x01	; 1
     d26:	b0 e0       	ldi	r27, 0x00	; 0
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1160
        {
            all_receiver_status.refined.d1 &= 0b11110111;
            addFactor = 50;
        }
    }
    else if (all_receiver_status.refined.BANDMODE == 2)
     d28:	90 38       	cpi	r25, 0x80	; 128
     d2a:	99 f4       	brne	.+38     	; 0xd52 <SI4844::getFrequencyInteger() [clone .constprop.25]+0xf0>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1163
    {
        multFactor = 10;
        if (all_receiver_status.refined.d1 & 0b00001000)
     d2c:	98 2f       	mov	r25, r24
     d2e:	92 95       	swap	r25
     d30:	9f 70       	andi	r25, 0x0F	; 15
     d32:	87 ff       	sbrs	r24, 7
     d34:	11 c0       	rjmp	.+34     	; 0xd58 <SI4844::getFrequencyInteger() [clone .constprop.25]+0xf6>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1165
        {
            all_receiver_status.refined.d1 &= 0b11110111;   
     d36:	97 70       	andi	r25, 0x07	; 7
     d38:	92 95       	swap	r25
     d3a:	90 7f       	andi	r25, 0xF0	; 240
     d3c:	8f 70       	andi	r24, 0x0F	; 15
     d3e:	89 2b       	or	r24, r25
     d40:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <rx+0x3>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1162
            addFactor = 50;
        }
    }
    else if (all_receiver_status.refined.BANDMODE == 2)
    {
        multFactor = 10;
     d44:	aa e0       	ldi	r26, 0x0A	; 10
     d46:	b0 e0       	ldi	r27, 0x00	; 0
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1166
        if (all_receiver_status.refined.d1 & 0b00001000)
        {
            all_receiver_status.refined.d1 &= 0b11110111;   
            addFactor = 5;
     d48:	e5 e0       	ldi	r30, 0x05	; 5
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	a7 cf       	rjmp	.-178    	; 0xc9c <SI4844::getFrequencyInteger() [clone .constprop.25]+0x3a>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1153
    int multFactor = 1;
    // Check CHFREQ bit[15] MSB = 1
    // See Page 15 of Si48XX ATDD PROGRAMMING GUIDE
    if (all_receiver_status.refined.BANDMODE == 0)
    {
        multFactor = 100;
     d4e:	a4 e6       	ldi	r26, 0x64	; 100
     d50:	b0 e0       	ldi	r27, 0x00	; 0
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1147
 * @return uint32_t current frequency in KHz.  
 */
uint32_t SI4844::getFrequencyInteger(void)
{
    this->getAllReceiverInfo();
    int addFactor = 0;
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	e0 e0       	ldi	r30, 0x00	; 0
     d56:	a2 cf       	rjmp	.-188    	; 0xc9c <SI4844::getFrequencyInteger() [clone .constprop.25]+0x3a>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1162
            addFactor = 50;
        }
    }
    else if (all_receiver_status.refined.BANDMODE == 2)
    {
        multFactor = 10;
     d58:	aa e0       	ldi	r26, 0x0A	; 10
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	fa cf       	rjmp	.-12     	; 0xd52 <SI4844::getFrequencyInteger() [clone .constprop.25]+0xf0>

00000d5e <SI4844::waitToSend() [clone .constprop.20]>:
waitToSend():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:746
/**
 * @ingroup BF
 * @brief Wait for the ATDD become Clear to Send. 
 * @details Waits for CTS status
 */
inline void SI4844::waitToSend()
     d5e:	cf 93       	push	r28
     d60:	df 93       	push	r29
beginTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:196
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
     d62:	d1 e0       	ldi	r29, 0x01	; 1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:198
  // set address of targeted slave
  txAddress = address;
     d64:	c1 e1       	ldi	r28, 0x11	; 17
_ZN6SI484413isClearToSendEv.isra.4():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:731
 * @return true 
 * @return false 
 */
bool SI4844::isClearToSend(void)
{
    delayMicroseconds(2000);
     d66:	80 ed       	ldi	r24, 0xD0	; 208
     d68:	97 e0       	ldi	r25, 0x07	; 7
     d6a:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <delayMicroseconds>
beginTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:196
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
     d6e:	d0 93 90 02 	sts	0x0290, r29	; 0x800290 <TwoWire::transmitting>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:198
  // set address of targeted slave
  txAddress = address;
     d72:	c0 93 b2 02 	sts	0x02B2, r28	; 0x8002b2 <TwoWire::txAddress>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:200
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     d76:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <TwoWire::txBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:201
  txBufferLength = 0;
     d7a:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <TwoWire::txBufferLength>
_ZN6SI484413isClearToSendEv.isra.4():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:733
    Wire.beginTransmission(SI4844_ADDRESS);
    Wire.write(ATDD_GET_STATUS);
     d7e:	80 ee       	ldi	r24, 0xE0	; 224
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	0e 94 8d 05 	call	0xb1a	; 0xb1a <TwoWire::write(int) [clone .constprop.30]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:734
    Wire.endTransmission();
     d86:	0e 94 2d 01 	call	0x25a	; 0x25a <TwoWire::endTransmission() [clone .constprop.31]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:735
    delayMicroseconds(2000);
     d8a:	80 ed       	ldi	r24, 0xD0	; 208
     d8c:	97 e0       	ldi	r25, 0x07	; 7
     d8e:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <delayMicroseconds>
twi_readFrom():
     d92:	61 e0       	ldi	r22, 0x01	; 1
     d94:	81 e1       	ldi	r24, 0x11	; 17
     d96:	0e 94 ed 00 	call	0x1da	; 0x1da <twi_readFrom.part.0.constprop.39>
requestFrom():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:120
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
     d9a:	10 92 8f 02 	sts	0x028F, r1	; 0x80028f <TwoWire::rxBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:121
  rxBufferLength = read;
     d9e:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <TwoWire::rxBufferLength>
_ZN6SI484413isClearToSendEv.isra.4():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:737
    Wire.requestFrom(SI4844_ADDRESS, 1);
    all_receiver_status.raw[0] = Wire.read();
     da2:	8a e7       	ldi	r24, 0x7A	; 122
     da4:	93 e0       	ldi	r25, 0x03	; 3
     da6:	0e 94 17 05 	call	0xa2e	; 0xa2e <TwoWire::read()>
     daa:	80 93 8b 03 	sts	0x038B, r24	; 0x80038b <rx+0x1>
waitToSend():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:749
 * @details Waits for CTS status
 */
inline void SI4844::waitToSend()
{

    while (!isClearToSend())
     dae:	87 ff       	sbrs	r24, 7
     db0:	da cf       	rjmp	.-76     	; 0xd66 <SI4844::waitToSend() [clone .constprop.20]+0x8>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:751
        ;
}
     db2:	df 91       	pop	r29
     db4:	cf 91       	pop	r28
     db6:	08 95       	ret

00000db8 <SI4844::setVolume(unsigned char) [clone .part.5] [clone .constprop.18]>:
_ZN6SI48449setVolumeEh.part.5():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:822
 * @brief Sets the volume level. 
 * @details Sets a value to the audio volume.
 * @see Table 4, Si48XX ATDD PROGRAMMING GUIDE; AN610; page 11
 * @param byte volumeLevel (domain: 0 to 63) 
 */
void SI4844::setVolume(byte volumeLavel)
     db8:	cf 93       	push	r28
     dba:	c8 2f       	mov	r28, r24
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:827
{
    if (volumeLavel > 63)
        return;

    waitToSend();
     dbc:	0e 94 af 06 	call	0xd5e	; 0xd5e <SI4844::waitToSend() [clone .constprop.20]>
setProperty():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:62
    si4844_property property;
    si4844_property param;

    property.value = propertyNumber;
    param.value = parameter;
    waitToSend();
     dc0:	0e 94 af 06 	call	0xd5e	; 0xd5e <SI4844::waitToSend() [clone .constprop.20]>
beginTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:196
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <TwoWire::transmitting>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:198
  // set address of targeted slave
  txAddress = address;
     dca:	81 e1       	ldi	r24, 0x11	; 17
     dcc:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <TwoWire::txAddress>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:200
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     dd0:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <TwoWire::txBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:201
  txBufferLength = 0;
     dd4:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <TwoWire::txBufferLength>
setProperty():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:64
    Wire.beginTransmission(SI4844_ADDRESS);
    Wire.write(SET_PROPERTY);
     dd8:	82 e1       	ldi	r24, 0x12	; 18
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	0e 94 8d 05 	call	0xb1a	; 0xb1a <TwoWire::write(int) [clone .constprop.30]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:65
    Wire.write(0x00);
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	0e 94 8d 05 	call	0xb1a	; 0xb1a <TwoWire::write(int) [clone .constprop.30]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:66
    Wire.write(property.raw.byteHigh); // Send property - High byte - most significant first
     de8:	60 e4       	ldi	r22, 0x40	; 64
     dea:	8a e7       	ldi	r24, 0x7A	; 122
     dec:	93 e0       	ldi	r25, 0x03	; 3
     dee:	0e 94 5e 05 	call	0xabc	; 0xabc <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:67
    Wire.write(property.raw.byteLow);  // Send property - Low byte - less significant after
     df2:	60 e0       	ldi	r22, 0x00	; 0
     df4:	8a e7       	ldi	r24, 0x7A	; 122
     df6:	93 e0       	ldi	r25, 0x03	; 3
     df8:	0e 94 5e 05 	call	0xabc	; 0xabc <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:68
    Wire.write(param.raw.byteHigh);    // Send the argments. High Byte - Most significant first
     dfc:	60 e0       	ldi	r22, 0x00	; 0
     dfe:	8a e7       	ldi	r24, 0x7A	; 122
     e00:	93 e0       	ldi	r25, 0x03	; 3
     e02:	0e 94 5e 05 	call	0xabc	; 0xabc <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:69
    Wire.write(param.raw.byteLow);     // Send the argments. Low Byte - Less significant after
     e06:	6c 2f       	mov	r22, r28
     e08:	8a e7       	ldi	r24, 0x7A	; 122
     e0a:	93 e0       	ldi	r25, 0x03	; 3
     e0c:	0e 94 5e 05 	call	0xabc	; 0xabc <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:70
    Wire.endTransmission();
     e10:	0e 94 2d 01 	call	0x25a	; 0x25a <TwoWire::endTransmission() [clone .constprop.31]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:71
    delayMicroseconds(550);
     e14:	86 e2       	ldi	r24, 0x26	; 38
     e16:	92 e0       	ldi	r25, 0x02	; 2
     e18:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <delayMicroseconds>
_ZN6SI48449setVolumeEh.part.5():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:830
        return;

    waitToSend();
    setProperty(RX_VOLUME, volumeLavel);

    this->volume = volumeLavel;
     e1c:	c0 93 b8 03 	sts	0x03B8, r28	; 0x8003b8 <rx+0x2e>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:831
}
     e20:	cf 91       	pop	r28
     e22:	08 95       	ret

00000e24 <SI4844::setBandSlideSwitch() [clone .constprop.11]>:
setBandSlideSwitch():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:625
 * @see See Table 8. Pre-defined Band Table in Si48XX ATDD PROGRAMMING GUIDE; AN610; pages 17 and 18  
 * @param band  band index number. 
 * @see Si4822/26/27/40/44 A NTENNA , SCHEMATIC , LAYOUT, AND DESIGN GUIDELINES 
 * @todo The functions setBand and setBandSlideSwitch will be rewritten with the goal of improving the final code.
 */
void SI4844::setBandSlideSwitch()
     e24:	8f 92       	push	r8
     e26:	9f 92       	push	r9
     e28:	af 92       	push	r10
     e2a:	bf 92       	push	r11
     e2c:	cf 92       	push	r12
     e2e:	df 92       	push	r13
     e30:	ef 92       	push	r14
     e32:	ff 92       	push	r15
     e34:	0f 93       	push	r16
     e36:	1f 93       	push	r17
     e38:	cf 93       	push	r28
     e3a:	df 93       	push	r29
     e3c:	00 d0       	rcall	.+0      	; 0xe3e <SI4844::setBandSlideSwitch() [clone .constprop.11]+0x1a>
     e3e:	00 d0       	rcall	.+0      	; 0xe40 <SI4844::setBandSlideSwitch() [clone .constprop.11]+0x1c>
     e40:	00 d0       	rcall	.+0      	; 0xe42 <SI4844::setBandSlideSwitch() [clone .constprop.11]+0x1e>
     e42:	1f 92       	push	r1
     e44:	cd b7       	in	r28, 0x3d	; 61
     e46:	de b7       	in	r29, 0x3e	; 62
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:628
{
    
    this->getAllReceiverInfo();
     e48:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <SI4844::getAllReceiverInfo() [clone .constprop.26]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:629
    uint8_t bandIndex = this->all_receiver_status.refined.BANDIDX;
     e4c:	10 91 8c 03 	lds	r17, 0x038C	; 0x80038c <rx+0x2>
     e50:	1f 73       	andi	r17, 0x3F	; 63
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:632

   // If band mode changed, reset the device. 
   if (all_receiver_status.refined.HOSTRST == 1) {
     e52:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <rx+0x1>
     e56:	86 fd       	sbrc	r24, 6
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:633
       this->reset();
     e58:	0e 94 9a 05 	call	0xb34	; 0xb34 <SI4844::reset() [clone .constprop.12]>
findBand():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/BandList.h:77
      }
    }

    // Find a custom band by its bandIdx and return its pointer
    BandNode* findBand(int8_t bandIdx) {
      BandNode* current = head;
     e5c:	e0 91 a4 03 	lds	r30, 0x03A4	; 0x8003a4 <rx+0x1a>
     e60:	f0 91 a5 03 	lds	r31, 0x03A5	; 0x8003a5 <rx+0x1b>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/BandList.h:78
      while (current) {
     e64:	30 97       	sbiw	r30, 0x00	; 0
     e66:	41 f0       	breq	.+16     	; 0xe78 <SI4844::setBandSlideSwitch() [clone .constprop.11]+0x54>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/BandList.h:79
        if (current->bandIdx == bandIdx) return current; // Return the pointer if found
     e68:	80 81       	ld	r24, Z
     e6a:	18 17       	cp	r17, r24
     e6c:	09 f4       	brne	.+2      	; 0xe70 <SI4844::setBandSlideSwitch() [clone .constprop.11]+0x4c>
     e6e:	5b c0       	rjmp	.+182    	; 0xf26 <SI4844::setBandSlideSwitch() [clone .constprop.11]+0x102>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/BandList.h:80
        current = current->next; // Move to the next node
     e70:	02 84       	ldd	r0, Z+10	; 0x0a
     e72:	f3 85       	ldd	r31, Z+11	; 0x0b
     e74:	e0 2d       	mov	r30, r0
     e76:	f6 cf       	rjmp	.-20     	; 0xe64 <SI4844::setBandSlideSwitch() [clone .constprop.11]+0x40>
setPredefinedBand():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:508

void SI4844::setPredefinedBand(uint8_t bandIdx) {

    si4844_arg_band_index rxBandSetup; 

    this->currentBand = bandIdx;
     e78:	10 93 9c 03 	sts	0x039C, r17	; 0x80039c <rx+0x12>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:510

    data_from_device = false;
     e7c:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <_ZL16data_from_device.lto_priv.55>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:512

    rxBandSetup.refined.XOSCEN = this->xoscen;
     e80:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <rx+0x13>
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	80 fb       	bst	r24, 0
     e88:	67 f9       	bld	r22, 7
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:513
    rxBandSetup.refined.XOWAIT = this->xowait;
     e8a:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <rx+0x14>
     e8e:	80 fb       	bst	r24, 0
     e90:	66 f9       	bld	r22, 6
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:514
    rxBandSetup.refined.BANDIDX = this->currentBand;
     e92:	60 7c       	andi	r22, 0xC0	; 192
     e94:	16 2b       	or	r17, r22
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:515
    waitToSend();
     e96:	0e 94 af 06 	call	0xd5e	; 0xd5e <SI4844::waitToSend() [clone .constprop.20]>
beginTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:196
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <TwoWire::transmitting>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:198
  // set address of targeted slave
  txAddress = address;
     ea0:	81 e1       	ldi	r24, 0x11	; 17
     ea2:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <TwoWire::txAddress>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:200
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     ea6:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <TwoWire::txBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:201
  txBufferLength = 0;
     eaa:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <TwoWire::txBufferLength>
setPredefinedBand():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:517
    Wire.beginTransmission(SI4844_ADDRESS);
    Wire.write(ATDD_POWER_UP);
     eae:	81 ee       	ldi	r24, 0xE1	; 225
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	0e 94 8d 05 	call	0xb1a	; 0xb1a <TwoWire::write(int) [clone .constprop.30]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:518
    Wire.write(rxBandSetup.raw);
     eb6:	61 2f       	mov	r22, r17
setUserDefinedBand():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:571
    Wire.write(customband.raw[1]);
    Wire.write(customband.raw[2]);
    Wire.write(customband.raw[3]);
    Wire.write(customband.raw[4]);
    Wire.write(customband.raw[5]);
    Wire.write(customband.raw[6]);
     eb8:	8a e7       	ldi	r24, 0x7A	; 122
     eba:	93 e0       	ldi	r25, 0x03	; 3
     ebc:	0e 94 5e 05 	call	0xabc	; 0xabc <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:572
    Wire.endTransmission();
     ec0:	0e 94 2d 01 	call	0x25a	; 0x25a <TwoWire::endTransmission() [clone .constprop.31]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:573
    delayMicroseconds(2500);
     ec4:	84 ec       	ldi	r24, 0xC4	; 196
     ec6:	99 e0       	ldi	r25, 0x09	; 9
     ec8:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <delayMicroseconds>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:574
    waitInterrupt();
     ecc:	0e 94 95 05 	call	0xb2a	; 0xb2a <SI4844::waitInterrupt() [clone .isra.2]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:575
    delayMicroseconds(2500);
     ed0:	84 ec       	ldi	r24, 0xC4	; 196
     ed2:	99 e0       	ldi	r25, 0x09	; 9
     ed4:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <delayMicroseconds>
waitDetectFrequency():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:760
 * @ingroup BF
 * @brief Wait for the ATDD detect a valid frequency (frequency not zero). 
 */
void SI4844::waitDetectFrequency() {
    do { 
        delay(1);
     ed8:	61 e0       	ldi	r22, 0x01	; 1
     eda:	70 e0       	ldi	r23, 0x00	; 0
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	0e 94 12 03 	call	0x624	; 0x624 <delay>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:761
        this->getAllReceiverInfo();
     ee4:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <SI4844::getAllReceiverInfo() [clone .constprop.26]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:762
    } while ( (all_receiver_status.raw[2] | all_receiver_status.raw[3]) == 0  );   
     ee8:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <rx+0x3>
     eec:	90 91 8e 03 	lds	r25, 0x038E	; 0x80038e <rx+0x4>
     ef0:	89 2b       	or	r24, r25
     ef2:	91 f3       	breq	.-28     	; 0xed8 <SI4844::setBandSlideSwitch() [clone .constprop.11]+0xb4>
setBandSlideSwitch():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:646
        // if the current band is a custom band, sets the new parameters for the band.
        this->setUserDefinedBand(bandIndex, bandNode->bottomFrequency, bandNode->topFrequency, bandNode->space);
    }
     
    this->waitDetectFrequency(); 
    this->setVolume(this->volume);
     ef4:	80 91 b8 03 	lds	r24, 0x03B8	; 0x8003b8 <rx+0x2e>
setVolume():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:824
 * @see Table 4, Si48XX ATDD PROGRAMMING GUIDE; AN610; page 11
 * @param byte volumeLevel (domain: 0 to 63) 
 */
void SI4844::setVolume(byte volumeLavel)
{
    if (volumeLavel > 63)
     ef8:	80 34       	cpi	r24, 0x40	; 64
     efa:	08 f0       	brcs	.+2      	; 0xefe <SI4844::setBandSlideSwitch() [clone .constprop.11]+0xda>
     efc:	64 c0       	rjmp	.+200    	; 0xfc6 <SI4844::setBandSlideSwitch() [clone .constprop.11]+0x1a2>
setBandSlideSwitch():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:648
    }
     
    this->waitDetectFrequency(); 
    this->setVolume(this->volume);

}
     efe:	27 96       	adiw	r28, 0x07	; 7
     f00:	0f b6       	in	r0, 0x3f	; 63
     f02:	f8 94       	cli
     f04:	de bf       	out	0x3e, r29	; 62
     f06:	0f be       	out	0x3f, r0	; 63
     f08:	cd bf       	out	0x3d, r28	; 61
     f0a:	df 91       	pop	r29
     f0c:	cf 91       	pop	r28
     f0e:	1f 91       	pop	r17
     f10:	0f 91       	pop	r16
     f12:	ff 90       	pop	r15
     f14:	ef 90       	pop	r14
     f16:	df 90       	pop	r13
     f18:	cf 90       	pop	r12
     f1a:	bf 90       	pop	r11
     f1c:	af 90       	pop	r10
     f1e:	9f 90       	pop	r9
     f20:	8f 90       	pop	r8
setVolume():
     f22:	0c 94 dc 06 	jmp	0xdb8	; 0xdb8 <SI4844::setVolume(unsigned char) [clone .part.5] [clone .constprop.18]>
setBandSlideSwitch():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:642
    BandNode *bandNode = this->findCustomBand(bandIndex);
    if ( bandNode  == nullptr )  {   
        this->setPredefinedBand(bandIndex);
    } else {
        // if the current band is a custom band, sets the new parameters for the band.
        this->setUserDefinedBand(bandIndex, bandNode->bottomFrequency, bandNode->topFrequency, bandNode->space);
     f26:	01 85       	ldd	r16, Z+9	; 0x09
     f28:	c5 80       	ldd	r12, Z+5	; 0x05
     f2a:	d6 80       	ldd	r13, Z+6	; 0x06
     f2c:	e7 80       	ldd	r14, Z+7	; 0x07
     f2e:	f0 84       	ldd	r15, Z+8	; 0x08
     f30:	81 80       	ldd	r8, Z+1	; 0x01
     f32:	92 80       	ldd	r9, Z+2	; 0x02
     f34:	a3 80       	ldd	r10, Z+3	; 0x03
     f36:	b4 80       	ldd	r11, Z+4	; 0x04
setUserDefinedBand():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:543
 */
void SI4844::setUserDefinedBand(int8_t bandIdx, uint32_t bottomFrequency, uint32_t topFrequency, uint8_t space ) {

    SI4844_arg_band customband;

    this->currentBand = bandIdx;
     f38:	10 93 9c 03 	sts	0x039C, r17	; 0x80039c <rx+0x12>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:546

    // Now we can customize the band.
    data_from_device = false;
     f3c:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <_ZL16data_from_device.lto_priv.55>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:547
    customband.refined.BANDIDX = bandIdx;
     f40:	69 81       	ldd	r22, Y+1	; 0x01
     f42:	60 7c       	andi	r22, 0xC0	; 192
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:548
    customband.refined.XOSCEN = this->xoscen;
     f44:	61 2b       	or	r22, r17
     f46:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <rx+0x13>
     f4a:	80 fb       	bst	r24, 0
     f4c:	67 f9       	bld	r22, 7
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:549
    customband.refined.XOWAIT = this->xowait;
     f4e:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <rx+0x14>
     f52:	80 fb       	bst	r24, 0
     f54:	66 f9       	bld	r22, 6
     f56:	69 83       	std	Y+1, r22	; 0x01
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:558
    customband.refined.BANDTOP_LOW = lowByte(topFrequency);
    customband.refined.CHSPC = space;
    customband.refined.DFBAND = 0; 
    customband.refined.UNI_AM = 0;
    customband.refined.TVFREQ = 0;
    customband.refined.DUMMY = 0;
     f58:	1f 82       	std	Y+7, r1	; 0x07
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:561

    // Wait until rady to send a command
    waitToSend();
     f5a:	0e 94 af 06 	call	0xd5e	; 0xd5e <SI4844::waitToSend() [clone .constprop.20]>
beginTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:196
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <TwoWire::transmitting>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:198
  // set address of targeted slave
  txAddress = address;
     f64:	81 e1       	ldi	r24, 0x11	; 17
     f66:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <TwoWire::txAddress>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:200
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     f6a:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <TwoWire::txBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:201
  txBufferLength = 0;
     f6e:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <TwoWire::txBufferLength>
setUserDefinedBand():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:564

    Wire.beginTransmission(SI4844_ADDRESS);
    Wire.write(ATDD_POWER_UP);
     f72:	81 ee       	ldi	r24, 0xE1	; 225
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	0e 94 8d 05 	call	0xb1a	; 0xb1a <TwoWire::write(int) [clone .constprop.30]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:565
    Wire.write(customband.raw[0]);
     f7a:	69 81       	ldd	r22, Y+1	; 0x01
     f7c:	8a e7       	ldi	r24, 0x7A	; 122
     f7e:	93 e0       	ldi	r25, 0x03	; 3
     f80:	0e 94 5e 05 	call	0xabc	; 0xabc <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:550
    // Now we can customize the band.
    data_from_device = false;
    customband.refined.BANDIDX = bandIdx;
    customband.refined.XOSCEN = this->xoscen;
    customband.refined.XOWAIT = this->xowait;
    customband.refined.BANDBOT_HIGH = highByte(bottomFrequency);
     f84:	99 27       	eor	r25, r25
     f86:	8b 2d       	mov	r24, r11
     f88:	7a 2d       	mov	r23, r10
     f8a:	69 2d       	mov	r22, r9
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:566
    waitToSend();

    Wire.beginTransmission(SI4844_ADDRESS);
    Wire.write(ATDD_POWER_UP);
    Wire.write(customband.raw[0]);
    Wire.write(customband.raw[1]);
     f8c:	8a e7       	ldi	r24, 0x7A	; 122
     f8e:	93 e0       	ldi	r25, 0x03	; 3
     f90:	0e 94 5e 05 	call	0xabc	; 0xabc <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:567
    Wire.write(customband.raw[2]);
     f94:	68 2d       	mov	r22, r8
     f96:	8a e7       	ldi	r24, 0x7A	; 122
     f98:	93 e0       	ldi	r25, 0x03	; 3
     f9a:	0e 94 5e 05 	call	0xabc	; 0xabc <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:552
    customband.refined.BANDIDX = bandIdx;
    customband.refined.XOSCEN = this->xoscen;
    customband.refined.XOWAIT = this->xowait;
    customband.refined.BANDBOT_HIGH = highByte(bottomFrequency);
    customband.refined.BANDBOT_LOW = lowByte(bottomFrequency);
    customband.refined.BANDTOP_HIGH = highByte(topFrequency);
     f9e:	99 27       	eor	r25, r25
     fa0:	8f 2d       	mov	r24, r15
     fa2:	7e 2d       	mov	r23, r14
     fa4:	6d 2d       	mov	r22, r13
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:568
    Wire.beginTransmission(SI4844_ADDRESS);
    Wire.write(ATDD_POWER_UP);
    Wire.write(customband.raw[0]);
    Wire.write(customband.raw[1]);
    Wire.write(customband.raw[2]);
    Wire.write(customband.raw[3]);
     fa6:	8a e7       	ldi	r24, 0x7A	; 122
     fa8:	93 e0       	ldi	r25, 0x03	; 3
     faa:	0e 94 5e 05 	call	0xabc	; 0xabc <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:569
    Wire.write(customband.raw[4]);
     fae:	6c 2d       	mov	r22, r12
     fb0:	8a e7       	ldi	r24, 0x7A	; 122
     fb2:	93 e0       	ldi	r25, 0x03	; 3
     fb4:	0e 94 5e 05 	call	0xabc	; 0xabc <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:570
    Wire.write(customband.raw[5]);
     fb8:	60 2f       	mov	r22, r16
     fba:	8a e7       	ldi	r24, 0x7A	; 122
     fbc:	93 e0       	ldi	r25, 0x03	; 3
     fbe:	0e 94 5e 05 	call	0xabc	; 0xabc <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:571
    Wire.write(customband.raw[6]);
     fc2:	6f 81       	ldd	r22, Y+7	; 0x07
     fc4:	79 cf       	rjmp	.-270    	; 0xeb8 <SI4844::setBandSlideSwitch() [clone .constprop.11]+0x94>
setBandSlideSwitch():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:648
    }
     
    this->waitDetectFrequency(); 
    this->setVolume(this->volume);

}
     fc6:	27 96       	adiw	r28, 0x07	; 7
     fc8:	0f b6       	in	r0, 0x3f	; 63
     fca:	f8 94       	cli
     fcc:	de bf       	out	0x3e, r29	; 62
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	cd bf       	out	0x3d, r28	; 61
     fd2:	df 91       	pop	r29
     fd4:	cf 91       	pop	r28
     fd6:	1f 91       	pop	r17
     fd8:	0f 91       	pop	r16
     fda:	ff 90       	pop	r15
     fdc:	ef 90       	pop	r14
     fde:	df 90       	pop	r13
     fe0:	cf 90       	pop	r12
     fe2:	bf 90       	pop	r11
     fe4:	af 90       	pop	r10
     fe6:	9f 90       	pop	r9
     fe8:	8f 90       	pop	r8
     fea:	08 95       	ret

00000fec <Print::print(char const*) [clone .constprop.41]>:
write():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     fec:	00 97       	sbiw	r24, 0x00	; 0
     fee:	69 f0       	breq	.+26     	; 0x100a <Print::print(char const*) [clone .constprop.41]+0x1e>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.h:54
      return write((const uint8_t *)str, strlen(str));
     ff0:	fc 01       	movw	r30, r24
     ff2:	01 90       	ld	r0, Z+
     ff4:	00 20       	and	r0, r0
     ff6:	e9 f7       	brne	.-6      	; 0xff2 <Print::print(char const*) [clone .constprop.41]+0x6>
     ff8:	31 97       	sbiw	r30, 0x01	; 1
     ffa:	af 01       	movw	r20, r30
     ffc:	48 1b       	sub	r20, r24
     ffe:	59 0b       	sbc	r21, r25
    1000:	bc 01       	movw	r22, r24
    1002:	8a eb       	ldi	r24, 0xBA	; 186
    1004:	93 e0       	ldi	r25, 0x03	; 3
    1006:	0c 94 49 03 	jmp	0x692	; 0x692 <Print::write(unsigned char const*, unsigned int)>
print():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:65
}

size_t Print::print(const char str[])
{
  return write(str);
}
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	08 95       	ret

00001010 <String::~String()>:
__base_dtor ():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  if(buffer)
    1010:	fc 01       	movw	r30, r24
    1012:	80 81       	ld	r24, Z
    1014:	91 81       	ldd	r25, Z+1	; 0x01
    1016:	00 97       	sbiw	r24, 0x00	; 0
    1018:	11 f0       	breq	.+4      	; 0x101e <String::~String()+0xe>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:125
    free(buffer);
    101a:	0c 94 62 0f 	jmp	0x1ec4	; 0x1ec4 <free>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:126
}
    101e:	08 95       	ret

00001020 <String::reserve(unsigned int)>:
reserve():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:147
  buffer = NULL;
  capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
    1020:	0f 93       	push	r16
    1022:	1f 93       	push	r17
    1024:	cf 93       	push	r28
    1026:	df 93       	push	r29
    1028:	ec 01       	movw	r28, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:148
  if (buffer && capacity >= size) return 1;
    102a:	88 81       	ld	r24, Y
    102c:	99 81       	ldd	r25, Y+1	; 0x01
    102e:	00 97       	sbiw	r24, 0x00	; 0
    1030:	59 f0       	breq	.+22     	; 0x1048 <String::reserve(unsigned int)+0x28>
    1032:	2a 81       	ldd	r18, Y+2	; 0x02
    1034:	3b 81       	ldd	r19, Y+3	; 0x03
    1036:	26 17       	cp	r18, r22
    1038:	37 07       	cpc	r19, r23
    103a:	30 f0       	brcs	.+12     	; 0x1048 <String::reserve(unsigned int)+0x28>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:150
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
    103c:	81 e0       	ldi	r24, 0x01	; 1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:154
    return 1;
  }
  return 0;
}
    103e:	df 91       	pop	r29
    1040:	cf 91       	pop	r28
    1042:	1f 91       	pop	r17
    1044:	0f 91       	pop	r16
    1046:	08 95       	ret
    1048:	8b 01       	movw	r16, r22
changeBuffer():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:158

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
  char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    104a:	6f 5f       	subi	r22, 0xFF	; 255
    104c:	7f 4f       	sbci	r23, 0xFF	; 255
    104e:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <realloc>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:159
  if (newbuffer) {
    1052:	00 97       	sbiw	r24, 0x00	; 0
    1054:	59 f0       	breq	.+22     	; 0x106c <String::reserve(unsigned int)+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:160
    buffer = newbuffer;
    1056:	99 83       	std	Y+1, r25	; 0x01
    1058:	88 83       	st	Y, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:161
    capacity = maxStrLen;
    105a:	1b 83       	std	Y+3, r17	; 0x03
    105c:	0a 83       	std	Y+2, r16	; 0x02
reserve():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:150

unsigned char String::reserve(unsigned int size)
{
  if (buffer && capacity >= size) return 1;
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
    105e:	2c 81       	ldd	r18, Y+4	; 0x04
    1060:	3d 81       	ldd	r19, Y+5	; 0x05
    1062:	23 2b       	or	r18, r19
    1064:	59 f7       	brne	.-42     	; 0x103c <String::reserve(unsigned int)+0x1c>
    1066:	fc 01       	movw	r30, r24
    1068:	10 82       	st	Z, r1
    106a:	e8 cf       	rjmp	.-48     	; 0x103c <String::reserve(unsigned int)+0x1c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:153
    return 1;
  }
  return 0;
    106c:	80 e0       	ldi	r24, 0x00	; 0
    106e:	e7 cf       	rjmp	.-50     	; 0x103e <String::reserve(unsigned int)+0x1e>

00001070 <String::String(char const*)>:
__base_ctor ():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:28

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    1070:	ef 92       	push	r14
    1072:	ff 92       	push	r15
    1074:	0f 93       	push	r16
    1076:	1f 93       	push	r17
    1078:	cf 93       	push	r28
    107a:	df 93       	push	r29
    107c:	ec 01       	movw	r28, r24
    107e:	7b 01       	movw	r14, r22
_ZN6String4initEv():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:134
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
    1080:	19 82       	std	Y+1, r1	; 0x01
    1082:	18 82       	st	Y, r1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:135
  capacity = 0;
    1084:	1b 82       	std	Y+3, r1	; 0x03
    1086:	1a 82       	std	Y+2, r1	; 0x02
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:136
  len = 0;
    1088:	1d 82       	std	Y+5, r1	; 0x05
    108a:	1c 82       	std	Y+4, r1	; 0x04
__base_ctor ():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:31
/*********************************************/

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
    108c:	fb 01       	movw	r30, r22
    108e:	01 90       	ld	r0, Z+
    1090:	00 20       	and	r0, r0
    1092:	e9 f7       	brne	.-6      	; 0x108e <String::String(char const*)+0x1e>
    1094:	31 97       	sbiw	r30, 0x01	; 1
    1096:	8f 01       	movw	r16, r30
    1098:	06 1b       	sub	r16, r22
    109a:	17 0b       	sbc	r17, r23
copy():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:173
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
  if (!reserve(length)) {
    109c:	b8 01       	movw	r22, r16
    109e:	0e 94 10 08 	call	0x1020	; 0x1020 <String::reserve(unsigned int)>
    10a2:	28 81       	ld	r18, Y
    10a4:	39 81       	ldd	r19, Y+1	; 0x01
    10a6:	81 11       	cpse	r24, r1
    10a8:	13 c0       	rjmp	.+38     	; 0x10d0 <String::String(char const*)+0x60>
invalidate():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:141
  len = 0;
}

void String::invalidate(void)
{
  if (buffer) free(buffer);
    10aa:	21 15       	cp	r18, r1
    10ac:	31 05       	cpc	r19, r1
    10ae:	19 f0       	breq	.+6      	; 0x10b6 <String::String(char const*)+0x46>
    10b0:	c9 01       	movw	r24, r18
    10b2:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <free>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:142
  buffer = NULL;
    10b6:	19 82       	std	Y+1, r1	; 0x01
    10b8:	18 82       	st	Y, r1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:143
  capacity = len = 0;
    10ba:	1d 82       	std	Y+5, r1	; 0x05
    10bc:	1c 82       	std	Y+4, r1	; 0x04
    10be:	1b 82       	std	Y+3, r1	; 0x03
    10c0:	1a 82       	std	Y+2, r1	; 0x02
__base_ctor ():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:32

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
}
    10c2:	df 91       	pop	r29
    10c4:	cf 91       	pop	r28
    10c6:	1f 91       	pop	r17
    10c8:	0f 91       	pop	r16
    10ca:	ff 90       	pop	r15
    10cc:	ef 90       	pop	r14
    10ce:	08 95       	ret
copy():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:177
{
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
    10d0:	1d 83       	std	Y+5, r17	; 0x05
    10d2:	0c 83       	std	Y+4, r16	; 0x04
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:178
  strcpy(buffer, cstr);
    10d4:	b7 01       	movw	r22, r14
    10d6:	c9 01       	movw	r24, r18
__base_ctor ():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:32

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
}
    10d8:	df 91       	pop	r29
    10da:	cf 91       	pop	r28
    10dc:	1f 91       	pop	r17
    10de:	0f 91       	pop	r16
    10e0:	ff 90       	pop	r15
    10e2:	ef 90       	pop	r14
copy():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:178
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
  strcpy(buffer, cstr);
    10e4:	0c 94 b1 10 	jmp	0x2162	; 0x2162 <strcpy>

000010e8 <String::operator=(char const*) [clone .part.3]>:
_ZN6StringaSEPKc.part.3():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:239
  if (this != &rval) move(rval);
  return *this;
}
#endif

String & String::operator = (const char *cstr)
    10e8:	ef 92       	push	r14
    10ea:	ff 92       	push	r15
    10ec:	0f 93       	push	r16
    10ee:	1f 93       	push	r17
    10f0:	cf 93       	push	r28
    10f2:	df 93       	push	r29
    10f4:	ec 01       	movw	r28, r24
    10f6:	7b 01       	movw	r14, r22
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:241
{
  if (cstr) copy(cstr, strlen(cstr));
    10f8:	fb 01       	movw	r30, r22
    10fa:	01 90       	ld	r0, Z+
    10fc:	00 20       	and	r0, r0
    10fe:	e9 f7       	brne	.-6      	; 0x10fa <String::operator=(char const*) [clone .part.3]+0x12>
    1100:	31 97       	sbiw	r30, 0x01	; 1
    1102:	8f 01       	movw	r16, r30
    1104:	06 1b       	sub	r16, r22
    1106:	17 0b       	sbc	r17, r23
copy():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:173
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
  if (!reserve(length)) {
    1108:	b8 01       	movw	r22, r16
    110a:	0e 94 10 08 	call	0x1020	; 0x1020 <String::reserve(unsigned int)>
    110e:	28 81       	ld	r18, Y
    1110:	39 81       	ldd	r19, Y+1	; 0x01
    1112:	81 11       	cpse	r24, r1
    1114:	13 c0       	rjmp	.+38     	; 0x113c <String::operator=(char const*) [clone .part.3]+0x54>
invalidate():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:141
  len = 0;
}

void String::invalidate(void)
{
  if (buffer) free(buffer);
    1116:	21 15       	cp	r18, r1
    1118:	31 05       	cpc	r19, r1
    111a:	19 f0       	breq	.+6      	; 0x1122 <String::operator=(char const*) [clone .part.3]+0x3a>
    111c:	c9 01       	movw	r24, r18
    111e:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <free>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:142
  buffer = NULL;
    1122:	19 82       	std	Y+1, r1	; 0x01
    1124:	18 82       	st	Y, r1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:143
  capacity = len = 0;
    1126:	1d 82       	std	Y+5, r1	; 0x05
    1128:	1c 82       	std	Y+4, r1	; 0x04
    112a:	1b 82       	std	Y+3, r1	; 0x03
    112c:	1a 82       	std	Y+2, r1	; 0x02
_ZN6StringaSEPKc.part.3():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:245
{
  if (cstr) copy(cstr, strlen(cstr));
  else invalidate();
  
  return *this;
}
    112e:	df 91       	pop	r29
    1130:	cf 91       	pop	r28
    1132:	1f 91       	pop	r17
    1134:	0f 91       	pop	r16
    1136:	ff 90       	pop	r15
    1138:	ef 90       	pop	r14
    113a:	08 95       	ret
copy():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:177
{
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
    113c:	1d 83       	std	Y+5, r17	; 0x05
    113e:	0c 83       	std	Y+4, r16	; 0x04
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:178
  strcpy(buffer, cstr);
    1140:	b7 01       	movw	r22, r14
    1142:	c9 01       	movw	r24, r18
_ZN6StringaSEPKc.part.3():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:245
{
  if (cstr) copy(cstr, strlen(cstr));
  else invalidate();
  
  return *this;
}
    1144:	df 91       	pop	r29
    1146:	cf 91       	pop	r28
    1148:	1f 91       	pop	r17
    114a:	0f 91       	pop	r16
    114c:	ff 90       	pop	r15
    114e:	ef 90       	pop	r14
copy():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:178
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
  strcpy(buffer, cstr);
    1150:	0c 94 b1 10 	jmp	0x2162	; 0x2162 <strcpy>

00001154 <showStatus()>:
showStatus():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:117
}

uint32_t oldFrequency = 0L;
uint8_t oldStationIndicator = 99;

void showStatus() {
    1154:	8f 92       	push	r8
    1156:	9f 92       	push	r9
    1158:	af 92       	push	r10
    115a:	bf 92       	push	r11
    115c:	ff 92       	push	r15
    115e:	0f 93       	push	r16
    1160:	1f 93       	push	r17
    1162:	cf 93       	push	r28
    1164:	df 93       	push	r29
    1166:	cd b7       	in	r28, 0x3d	; 61
    1168:	de b7       	in	r29, 0x3e	; 62
    116a:	62 97       	sbiw	r28, 0x12	; 18
    116c:	0f b6       	in	r0, 0x3f	; 63
    116e:	f8 94       	cli
    1170:	de bf       	out	0x3e, r29	; 62
    1172:	0f be       	out	0x3f, r0	; 63
    1174:	cd bf       	out	0x3d, r28	; 61
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:119

  String unit, freqDisplay, stereo;
    1176:	66 e5       	ldi	r22, 0x56	; 86
    1178:	71 e0       	ldi	r23, 0x01	; 1
    117a:	ce 01       	movw	r24, r28
    117c:	01 96       	adiw	r24, 0x01	; 1
    117e:	0e 94 38 08 	call	0x1070	; 0x1070 <String::String(char const*)>
    1182:	66 e5       	ldi	r22, 0x56	; 86
    1184:	71 e0       	ldi	r23, 0x01	; 1
    1186:	ce 01       	movw	r24, r28
    1188:	07 96       	adiw	r24, 0x07	; 7
    118a:	0e 94 38 08 	call	0x1070	; 0x1070 <String::String(char const*)>
    118e:	66 e5       	ldi	r22, 0x56	; 86
    1190:	71 e0       	ldi	r23, 0x01	; 1
    1192:	ce 01       	movw	r24, r28
    1194:	0d 96       	adiw	r24, 0x0d	; 13
    1196:	0e 94 38 08 	call	0x1070	; 0x1070 <String::String(char const*)>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:121

  uint32_t currentFrequency = rx.getFrequencyInteger(); 
    119a:	0e 94 31 06 	call	0xc62	; 0xc62 <SI4844::getFrequencyInteger() [clone .constprop.25]>
_ZN6SI484425getStatusStationIndicatorEv():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.h:509
   * @ingroup GB1 
   * @brief Gets Station Indicator.
   * @details **Call getStatus or getAllReceiverInfo before calling this function** 
   * @return 0 = Invalid Station; 1 = Valid Station
   */
  inline uint16_t  getStatusStationIndicator() { return device_status.refined.STATION; };
    119e:	f0 90 8a 03 	lds	r15, 0x038A	; 0x80038a <rx>
    11a2:	f3 fa       	bst	r15, 3
    11a4:	ff 24       	eor	r15, r15
    11a6:	f0 f8       	bld	r15, 0
showStatus():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:124
  uint8_t currentStationIndicator = rx.getStatusStationIndicator();

  if ( oldFrequency == currentFrequency &&  oldStationIndicator == currentStationIndicator) return;
    11a8:	80 90 84 02 	lds	r8, 0x0284	; 0x800284 <oldFrequency>
    11ac:	90 90 85 02 	lds	r9, 0x0285	; 0x800285 <oldFrequency+0x1>
    11b0:	a0 90 86 02 	lds	r10, 0x0286	; 0x800286 <oldFrequency+0x2>
    11b4:	b0 90 87 02 	lds	r11, 0x0287	; 0x800287 <oldFrequency+0x3>
    11b8:	86 16       	cp	r8, r22
    11ba:	97 06       	cpc	r9, r23
    11bc:	a8 06       	cpc	r10, r24
    11be:	b9 06       	cpc	r11, r25
    11c0:	29 f4       	brne	.+10     	; 0x11cc <showStatus()+0x78>
    11c2:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <oldStationIndicator>
    11c6:	2f 15       	cp	r18, r15
    11c8:	09 f4       	brne	.+2      	; 0x11cc <showStatus()+0x78>
    11ca:	94 c0       	rjmp	.+296    	; 0x12f4 <showStatus()+0x1a0>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:126
  
  oldFrequency = currentFrequency; 
    11cc:	60 93 84 02 	sts	0x0284, r22	; 0x800284 <oldFrequency>
    11d0:	70 93 85 02 	sts	0x0285, r23	; 0x800285 <oldFrequency+0x1>
    11d4:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <oldFrequency+0x2>
    11d8:	90 93 87 02 	sts	0x0287, r25	; 0x800287 <oldFrequency+0x3>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:127
  oldStationIndicator = currentStationIndicator;
    11dc:	f0 92 04 01 	sts	0x0104, r15	; 0x800104 <oldStationIndicator>
clear():
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:178
}

/********** high level commands, for the user! */
void LiquidCrystal::clear()
{
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	0e 94 13 04 	call	0x826	; 0x826 <LiquidCrystal::command(unsigned char) [clone .constprop.49]>
/Users/rcaratti/Documents/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:179
  delayMicroseconds(2000);  // this command takes a long time!
    11e6:	80 ed       	ldi	r24, 0xD0	; 208
    11e8:	97 e0       	ldi	r25, 0x07	; 7
    11ea:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <delayMicroseconds>
showStatus():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:131

  display.clear();

  display.setCursor(0, 0);
    11ee:	60 e0       	ldi	r22, 0x00	; 0
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	0e 94 c0 04 	call	0x980	; 0x980 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.23]>
_ZN6SI484411getBandModeEv():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.h:464
   * @ingroup GB1 
   * @brief Get the Band Mode 
   * @return char*   "FM", "AM" or "SW"
   * @see getStatusBandMode()
   */
  inline char * getBandMode(){ return (char *) bandmode_table[all_receiver_status.refined.BANDMODE]; };
    11f6:	e0 91 8c 03 	lds	r30, 0x038C	; 0x80038c <rx+0x2>
    11fa:	e2 95       	swap	r30
    11fc:	e6 95       	lsr	r30
    11fe:	e6 95       	lsr	r30
    1200:	e3 70       	andi	r30, 0x03	; 3
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	ee 0f       	add	r30, r30
    1206:	ff 1f       	adc	r31, r31
    1208:	ea 55       	subi	r30, 0x5A	; 90
    120a:	fc 4f       	sbci	r31, 0xFC	; 252
showStatus():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:132
  display.print(rx.getBandMode());
    120c:	80 81       	ld	r24, Z
    120e:	91 81       	ldd	r25, Z+1	; 0x01
    1210:	0e 94 f6 07 	call	0xfec	; 0xfec <Print::print(char const*) [clone .constprop.41]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:134

  display.setCursor(12, 0);
    1214:	60 e0       	ldi	r22, 0x00	; 0
    1216:	8c e0       	ldi	r24, 0x0C	; 12
    1218:	0e 94 c0 04 	call	0x980	; 0x980 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.23]>
_ZN6SI484418getStatusBandIndexEv():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.h:569
  /** 
   * @ingroup GB1 
   * @brief Gets the current Band Index Detected.
   * @return 0~19: FM band; 20~24: AM band; 25~40: SW band
   */
  inline uint16_t  getStatusBandIndex() { return all_receiver_status.refined.BANDIDX; };
    121c:	e0 91 8c 03 	lds	r30, 0x038C	; 0x80038c <rx+0x2>
    1220:	ef 73       	andi	r30, 0x3F	; 63
showStatus():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:136
  bandIdx = rx.getStatusBandIndex();
  display.print(tabBand[bandIdx]);
    1222:	26 e0       	ldi	r18, 0x06	; 6
    1224:	e2 9f       	mul	r30, r18
    1226:	f0 01       	movw	r30, r0
    1228:	11 24       	eor	r1, r1
    122a:	ee 52       	subi	r30, 0x2E	; 46
    122c:	fc 4f       	sbci	r31, 0xFC	; 252
write():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.h:58
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
    122e:	44 81       	ldd	r20, Z+4	; 0x04
    1230:	55 81       	ldd	r21, Z+5	; 0x05
    1232:	60 81       	ld	r22, Z
    1234:	71 81       	ldd	r23, Z+1	; 0x01
    1236:	8a eb       	ldi	r24, 0xBA	; 186
    1238:	93 e0       	ldi	r25, 0x03	; 3
    123a:	0e 94 49 03 	call	0x692	; 0x692 <Print::write(unsigned char const*, unsigned int)>
showStatus():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:138

  if (rx.getFrequencyInteger() > 999) 
    123e:	0e 94 31 06 	call	0xc62	; 0xc62 <SI4844::getFrequencyInteger() [clone .constprop.25]>
    1242:	68 3e       	cpi	r22, 0xE8	; 232
    1244:	73 40       	sbci	r23, 0x03	; 3
    1246:	81 05       	cpc	r24, r1
    1248:	91 05       	cpc	r25, r1
    124a:	08 f4       	brcc	.+2      	; 0x124e <showStatus()+0xfa>
    124c:	6f c0       	rjmp	.+222    	; 0x132c <showStatus()+0x1d8>
operator=():
    124e:	69 e4       	ldi	r22, 0x49	; 73
    1250:	71 e0       	ldi	r23, 0x01	; 1
    1252:	ce 01       	movw	r24, r28
    1254:	01 96       	adiw	r24, 0x01	; 1
    1256:	0e 94 74 08 	call	0x10e8	; 0x10e8 <String::operator=(char const*) [clone .part.3]>
showStatus():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:143
    unit =  "MHZ";
  else
    unit =  "kHz";  
  
  display.setCursor(13, 1);
    125a:	61 e0       	ldi	r22, 0x01	; 1
    125c:	8d e0       	ldi	r24, 0x0D	; 13
    125e:	0e 94 c0 04 	call	0x980	; 0x980 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.23]>
write():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.h:58
    1262:	4d 81       	ldd	r20, Y+5	; 0x05
    1264:	5e 81       	ldd	r21, Y+6	; 0x06
    1266:	69 81       	ldd	r22, Y+1	; 0x01
    1268:	7a 81       	ldd	r23, Y+2	; 0x02
    126a:	8a eb       	ldi	r24, 0xBA	; 186
    126c:	93 e0       	ldi	r25, 0x03	; 3
    126e:	0e 94 49 03 	call	0x692	; 0x692 <Print::write(unsigned char const*, unsigned int)>
_ZN6SI484417getStatusBandModeEv():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.h:562
   * @ingroup GB1 
   * @brief Gets the current Band Mode
   * @return 0 = FM mode; 1 = AM mode; 2 = SW mode
   * @see getBandMode()
   */
  inline uint16_t  getStatusBandMode() { return all_receiver_status.refined.BANDMODE; };
    1272:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <rx+0x2>
    1276:	82 95       	swap	r24
    1278:	86 95       	lsr	r24
    127a:	86 95       	lsr	r24
    127c:	83 70       	andi	r24, 0x03	; 3
showStatus():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:146
  display.print(unit);

  if (rx.getStatusBandMode() == 0) {
    127e:	91 f4       	brne	.+36     	; 0x12a4 <showStatus()+0x150>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:147
    display.setCursor(0, 1);
    1280:	61 e0       	ldi	r22, 0x01	; 1
    1282:	0e 94 c0 04 	call	0x980	; 0x980 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.23]>
_ZN6SI484415getStatusStereoEv():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.h:500
   * @details Applicable to Si4840/44 parts FM function only (id does not make sense for Si4827).
   * @details **Call getStatus or getAllReceiverInfo before calling this function**  
   * @return 0 = Stereo off; 1 = Stereo on
   * @see getStereoIndicator()
   */
  inline uint16_t  getStatusStereo() { return device_status.refined.STEREO; };
    1286:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <rx>
    128a:	82 fb       	bst	r24, 2
    128c:	00 27       	eor	r16, r16
    128e:	00 f9       	bld	r16, 0
    1290:	10 e0       	ldi	r17, 0x00	; 0
showStatus():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:148
    display.print(stmo[rx.getStatusStereo()]);
    1292:	00 0f       	add	r16, r16
    1294:	11 1f       	adc	r17, r17
    1296:	f8 01       	movw	r30, r16
    1298:	eb 5e       	subi	r30, 0xEB	; 235
    129a:	fe 4f       	sbci	r31, 0xFE	; 254
    129c:	80 81       	ld	r24, Z
    129e:	91 81       	ldd	r25, Z+1	; 0x01
    12a0:	0e 94 f6 07 	call	0xfec	; 0xfec <Print::print(char const*) [clone .constprop.41]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:151
  }

  display.setCursor(7, 0); 
    12a4:	60 e0       	ldi	r22, 0x00	; 0
    12a6:	87 e0       	ldi	r24, 0x07	; 7
    12a8:	0e 94 c0 04 	call	0x980	; 0x980 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.23]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:152
  if ( currentStationIndicator != 0) {
    12ac:	ff 20       	and	r15, r15
    12ae:	09 f4       	brne	.+2      	; 0x12b2 <showStatus()+0x15e>
    12b0:	40 c0       	rjmp	.+128    	; 0x1332 <showStatus()+0x1de>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:153
      display.print((char *)"OK");
    12b2:	81 e5       	ldi	r24, 0x51	; 81
    12b4:	91 e0       	ldi	r25, 0x01	; 1
    12b6:	0e 94 f6 07 	call	0xfec	; 0xfec <Print::print(char const*) [clone .constprop.41]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:154
      digitalWrite(TUNE_LED, HIGH);
    12ba:	61 e0       	ldi	r22, 0x01	; 1
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:157
  } else { 
      display.print((char *)"  ");
      digitalWrite(TUNE_LED, LOW);
    12bc:	8a e0       	ldi	r24, 0x0A	; 10
    12be:	0e 94 65 02 	call	0x4ca	; 0x4ca <digitalWrite>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:161
  }


  display.setCursor(5, 1);
    12c2:	61 e0       	ldi	r22, 0x01	; 1
    12c4:	85 e0       	ldi	r24, 0x05	; 5
    12c6:	0e 94 c0 04 	call	0x980	; 0x980 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.23]>
getFormattedFrequency():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1470
 * @param  removeRightDigit number of less significant digits to be removed (FM mode only)
 * @return  point to char with the formatted current frequency
 */
char* SI4844::getFormattedFrequency(uint8_t removeRightDigit, uint8_t thousandsSeparator) {

    uint32_t f = this->getFrequencyInteger();
    12ca:	0e 94 31 06 	call	0xc62	; 0xc62 <SI4844::getFrequencyInteger() [clone .constprop.25]>
_ZN6SI484417getStatusBandModeEv():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.h:562
   * @ingroup GB1 
   * @brief Gets the current Band Mode
   * @return 0 = FM mode; 1 = AM mode; 2 = SW mode
   * @see getBandMode()
   */
  inline uint16_t  getStatusBandMode() { return all_receiver_status.refined.BANDMODE; };
    12ce:	20 91 8c 03 	lds	r18, 0x038C	; 0x80038c <rx+0x2>
    12d2:	22 95       	swap	r18
    12d4:	26 95       	lsr	r18
    12d6:	26 95       	lsr	r18
    12d8:	23 70       	andi	r18, 0x03	; 3
getFormattedFrequency():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1471
    if ( this->getStatusBandMode() == 0 ) { 
    12da:	89 f5       	brne	.+98     	; 0x133e <showStatus()+0x1ea>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1472
        this->convertToChar(f,this->strFormattedCurrentFrequenct,6,3,thousandsSeparator,true);
    12dc:	03 e0       	ldi	r16, 0x03	; 3
    12de:	26 e0       	ldi	r18, 0x06	; 6
    12e0:	40 eb       	ldi	r20, 0xB0	; 176
    12e2:	53 e0       	ldi	r21, 0x03	; 3
    12e4:	0e 94 8d 00 	call	0x11a	; 0x11a <SI4844::convertToChar(unsigned long, char*, unsigned char, unsigned char, unsigned char, bool) [clone .constprop.40]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1473
        strFormattedCurrentFrequenct[7-removeRightDigit] = '\0';
    12e8:	10 92 b5 03 	sts	0x03B5, r1	; 0x8003b5 <rx+0x2b>
showStatus():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:162
  display.print(rx.getFormattedFrequency(2,'.'));  
    12ec:	80 eb       	ldi	r24, 0xB0	; 176
    12ee:	93 e0       	ldi	r25, 0x03	; 3
    12f0:	0e 94 f6 07 	call	0xfec	; 0xfec <Print::print(char const*) [clone .constprop.41]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:124
  String unit, freqDisplay, stereo;

  uint32_t currentFrequency = rx.getFrequencyInteger(); 
  uint8_t currentStationIndicator = rx.getStatusStationIndicator();

  if ( oldFrequency == currentFrequency &&  oldStationIndicator == currentStationIndicator) return;
    12f4:	ce 01       	movw	r24, r28
    12f6:	0d 96       	adiw	r24, 0x0d	; 13
    12f8:	0e 94 08 08 	call	0x1010	; 0x1010 <String::~String()>
    12fc:	ce 01       	movw	r24, r28
    12fe:	07 96       	adiw	r24, 0x07	; 7
    1300:	0e 94 08 08 	call	0x1010	; 0x1010 <String::~String()>
    1304:	ce 01       	movw	r24, r28
    1306:	01 96       	adiw	r24, 0x01	; 1
    1308:	0e 94 08 08 	call	0x1010	; 0x1010 <String::~String()>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:164


  display.setCursor(5, 1);
  display.print(rx.getFormattedFrequency(2,'.'));  

}
    130c:	62 96       	adiw	r28, 0x12	; 18
    130e:	0f b6       	in	r0, 0x3f	; 63
    1310:	f8 94       	cli
    1312:	de bf       	out	0x3e, r29	; 62
    1314:	0f be       	out	0x3f, r0	; 63
    1316:	cd bf       	out	0x3d, r28	; 61
    1318:	df 91       	pop	r29
    131a:	cf 91       	pop	r28
    131c:	1f 91       	pop	r17
    131e:	0f 91       	pop	r16
    1320:	ff 90       	pop	r15
    1322:	bf 90       	pop	r11
    1324:	af 90       	pop	r10
    1326:	9f 90       	pop	r9
    1328:	8f 90       	pop	r8
    132a:	08 95       	ret
operator=():
    132c:	6d e4       	ldi	r22, 0x4D	; 77
    132e:	71 e0       	ldi	r23, 0x01	; 1
    1330:	90 cf       	rjmp	.-224    	; 0x1252 <showStatus()+0xfe>
showStatus():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:156
  display.setCursor(7, 0); 
  if ( currentStationIndicator != 0) {
      display.print((char *)"OK");
      digitalWrite(TUNE_LED, HIGH);
  } else { 
      display.print((char *)"  ");
    1332:	84 e5       	ldi	r24, 0x54	; 84
    1334:	91 e0       	ldi	r25, 0x01	; 1
    1336:	0e 94 f6 07 	call	0xfec	; 0xfec <Print::print(char const*) [clone .constprop.41]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:157
      digitalWrite(TUNE_LED, LOW);
    133a:	60 e0       	ldi	r22, 0x00	; 0
    133c:	bf cf       	rjmp	.-130    	; 0x12bc <showStatus()+0x168>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1475
    } else { 
         this->convertToChar(f,this->strFormattedCurrentFrequenct,5,(f > 999)? 2:0,'.',true);
    133e:	00 e0       	ldi	r16, 0x00	; 0
getFormattedFrequency():
    1340:	68 3e       	cpi	r22, 0xE8	; 232
    1342:	23 e0       	ldi	r18, 0x03	; 3
    1344:	72 07       	cpc	r23, r18
    1346:	81 05       	cpc	r24, r1
    1348:	91 05       	cpc	r25, r1
    134a:	08 f0       	brcs	.+2      	; 0x134e <showStatus()+0x1fa>
showStatus():
    134c:	02 e0       	ldi	r16, 0x02	; 2
getFormattedFrequency():
    134e:	25 e0       	ldi	r18, 0x05	; 5
    1350:	40 eb       	ldi	r20, 0xB0	; 176
    1352:	53 e0       	ldi	r21, 0x03	; 3
    1354:	0e 94 8d 00 	call	0x11a	; 0x11a <SI4844::convertToChar(unsigned long, char*, unsigned char, unsigned char, unsigned char, bool) [clone .constprop.40]>
    1358:	c9 cf       	rjmp	.-110    	; 0x12ec <showStatus()+0x198>

0000135a <__vector_16>:
__vector_16():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    135a:	1f 92       	push	r1
    135c:	0f 92       	push	r0
    135e:	0f b6       	in	r0, 0x3f	; 63
    1360:	0f 92       	push	r0
    1362:	11 24       	eor	r1, r1
    1364:	2f 93       	push	r18
    1366:	3f 93       	push	r19
    1368:	8f 93       	push	r24
    136a:	9f 93       	push	r25
    136c:	af 93       	push	r26
    136e:	bf 93       	push	r27
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
    1370:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <timer0_millis>
    1374:	90 91 87 03 	lds	r25, 0x0387	; 0x800387 <timer0_millis+0x1>
    1378:	a0 91 88 03 	lds	r26, 0x0388	; 0x800388 <timer0_millis+0x2>
    137c:	b0 91 89 03 	lds	r27, 0x0389	; 0x800389 <timer0_millis+0x3>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
    1380:	30 91 88 02 	lds	r19, 0x0288	; 0x800288 <timer0_fract>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
    1384:	23 e0       	ldi	r18, 0x03	; 3
    1386:	23 0f       	add	r18, r19
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
    1388:	2d 37       	cpi	r18, 0x7D	; 125
    138a:	68 f1       	brcs	.+90     	; 0x13e6 <__vector_16+0x8c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
    138c:	26 e8       	ldi	r18, 0x86	; 134
    138e:	23 0f       	add	r18, r19
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
    1390:	02 96       	adiw	r24, 0x02	; 2
    1392:	a1 1d       	adc	r26, r1
    1394:	b1 1d       	adc	r27, r1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
    1396:	20 93 88 02 	sts	0x0288, r18	; 0x800288 <timer0_fract>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
    139a:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <timer0_millis>
    139e:	90 93 87 03 	sts	0x0387, r25	; 0x800387 <timer0_millis+0x1>
    13a2:	a0 93 88 03 	sts	0x0388, r26	; 0x800388 <timer0_millis+0x2>
    13a6:	b0 93 89 03 	sts	0x0389, r27	; 0x800389 <timer0_millis+0x3>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
    13aa:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <timer0_overflow_count>
    13ae:	90 91 8a 02 	lds	r25, 0x028A	; 0x80028a <timer0_overflow_count+0x1>
    13b2:	a0 91 8b 02 	lds	r26, 0x028B	; 0x80028b <timer0_overflow_count+0x2>
    13b6:	b0 91 8c 02 	lds	r27, 0x028C	; 0x80028c <timer0_overflow_count+0x3>
    13ba:	01 96       	adiw	r24, 0x01	; 1
    13bc:	a1 1d       	adc	r26, r1
    13be:	b1 1d       	adc	r27, r1
    13c0:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <timer0_overflow_count>
    13c4:	90 93 8a 02 	sts	0x028A, r25	; 0x80028a <timer0_overflow_count+0x1>
    13c8:	a0 93 8b 02 	sts	0x028B, r26	; 0x80028b <timer0_overflow_count+0x2>
    13cc:	b0 93 8c 02 	sts	0x028C, r27	; 0x80028c <timer0_overflow_count+0x3>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:213
#endif
}
    13d0:	bf 91       	pop	r27
    13d2:	af 91       	pop	r26
    13d4:	9f 91       	pop	r25
    13d6:	8f 91       	pop	r24
    13d8:	3f 91       	pop	r19
    13da:	2f 91       	pop	r18
    13dc:	0f 90       	pop	r0
    13de:	0f be       	out	0x3f, r0	; 63
    13e0:	0f 90       	pop	r0
    13e2:	1f 90       	pop	r1
    13e4:	18 95       	reti
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
    13e6:	01 96       	adiw	r24, 0x01	; 1
    13e8:	a1 1d       	adc	r26, r1
    13ea:	b1 1d       	adc	r27, r1
    13ec:	d4 cf       	rjmp	.-88     	; 0x1396 <__vector_16+0x3c>

000013ee <__vector_2>:
__vector_2():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WInterrupts.c:489
|| defined(__AVR_ATmega48PB__)  || defined(__AVR_ATmega88__)  || defined(__AVR_ATmega88P__)  \
|| defined(__AVR_ATmega88PB__)  || defined(__AVR_ATmega168__) || defined(__AVR_ATmega168P__) \
|| defined(__AVR_ATmega168PB__) || defined(__AVR_ATmega328__) || defined(__AVR_ATmega328P__) \
|| defined(__AVR_ATmega328PB__)
  IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
  IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    13ee:	1f 92       	push	r1
    13f0:	0f 92       	push	r0
    13f2:	0f b6       	in	r0, 0x3f	; 63
    13f4:	0f 92       	push	r0
    13f6:	11 24       	eor	r1, r1
    13f8:	2f 93       	push	r18
    13fa:	3f 93       	push	r19
    13fc:	4f 93       	push	r20
    13fe:	5f 93       	push	r21
    1400:	6f 93       	push	r22
    1402:	7f 93       	push	r23
    1404:	8f 93       	push	r24
    1406:	9f 93       	push	r25
    1408:	af 93       	push	r26
    140a:	bf 93       	push	r27
    140c:	ef 93       	push	r30
    140e:	ff 93       	push	r31
    1410:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_start+0x2>
    1414:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <__data_start+0x3>
    1418:	09 95       	icall
    141a:	ff 91       	pop	r31
    141c:	ef 91       	pop	r30
    141e:	bf 91       	pop	r27
    1420:	af 91       	pop	r26
    1422:	9f 91       	pop	r25
    1424:	8f 91       	pop	r24
    1426:	7f 91       	pop	r23
    1428:	6f 91       	pop	r22
    142a:	5f 91       	pop	r21
    142c:	4f 91       	pop	r20
    142e:	3f 91       	pop	r19
    1430:	2f 91       	pop	r18
    1432:	0f 90       	pop	r0
    1434:	0f be       	out	0x3f, r0	; 63
    1436:	0f 90       	pop	r0
    1438:	1f 90       	pop	r1
    143a:	18 95       	reti

0000143c <__vector_1>:
__vector_1():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WInterrupts.c:488
#elif defined(__AVR_ATmega8__)  || defined(__AVR_ATmega48__)  || defined(__AVR_ATmega48P__)  \
|| defined(__AVR_ATmega48PB__)  || defined(__AVR_ATmega88__)  || defined(__AVR_ATmega88P__)  \
|| defined(__AVR_ATmega88PB__)  || defined(__AVR_ATmega168__) || defined(__AVR_ATmega168P__) \
|| defined(__AVR_ATmega168PB__) || defined(__AVR_ATmega328__) || defined(__AVR_ATmega328P__) \
|| defined(__AVR_ATmega328PB__)
  IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    143c:	1f 92       	push	r1
    143e:	0f 92       	push	r0
    1440:	0f b6       	in	r0, 0x3f	; 63
    1442:	0f 92       	push	r0
    1444:	11 24       	eor	r1, r1
    1446:	2f 93       	push	r18
    1448:	3f 93       	push	r19
    144a:	4f 93       	push	r20
    144c:	5f 93       	push	r21
    144e:	6f 93       	push	r22
    1450:	7f 93       	push	r23
    1452:	8f 93       	push	r24
    1454:	9f 93       	push	r25
    1456:	af 93       	push	r26
    1458:	bf 93       	push	r27
    145a:	ef 93       	push	r30
    145c:	ff 93       	push	r31
    145e:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
    1462:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
    1466:	09 95       	icall
    1468:	ff 91       	pop	r31
    146a:	ef 91       	pop	r30
    146c:	bf 91       	pop	r27
    146e:	af 91       	pop	r26
    1470:	9f 91       	pop	r25
    1472:	8f 91       	pop	r24
    1474:	7f 91       	pop	r23
    1476:	6f 91       	pop	r22
    1478:	5f 91       	pop	r21
    147a:	4f 91       	pop	r20
    147c:	3f 91       	pop	r19
    147e:	2f 91       	pop	r18
    1480:	0f 90       	pop	r0
    1482:	0f be       	out	0x3f, r0	; 63
    1484:	0f 90       	pop	r0
    1486:	1f 90       	pop	r1
    1488:	18 95       	reti

0000148a <__vector_19>:
__vector_19():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    148a:	1f 92       	push	r1
    148c:	0f 92       	push	r0
    148e:	0f b6       	in	r0, 0x3f	; 63
    1490:	0f 92       	push	r0
    1492:	11 24       	eor	r1, r1
    1494:	2f 93       	push	r18
    1496:	3f 93       	push	r19
    1498:	4f 93       	push	r20
    149a:	5f 93       	push	r21
    149c:	6f 93       	push	r22
    149e:	7f 93       	push	r23
    14a0:	8f 93       	push	r24
    14a2:	9f 93       	push	r25
    14a4:	af 93       	push	r26
    14a6:	bf 93       	push	r27
    14a8:	ef 93       	push	r30
    14aa:	ff 93       	push	r31
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    14ac:	8d ed       	ldi	r24, 0xDD	; 221
    14ae:	92 e0       	ldi	r25, 0x02	; 2
    14b0:	0e 94 c2 01 	call	0x384	; 0x384 <HardwareSerial::_tx_udr_empty_irq()>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial0.cpp:65
}
    14b4:	ff 91       	pop	r31
    14b6:	ef 91       	pop	r30
    14b8:	bf 91       	pop	r27
    14ba:	af 91       	pop	r26
    14bc:	9f 91       	pop	r25
    14be:	8f 91       	pop	r24
    14c0:	7f 91       	pop	r23
    14c2:	6f 91       	pop	r22
    14c4:	5f 91       	pop	r21
    14c6:	4f 91       	pop	r20
    14c8:	3f 91       	pop	r19
    14ca:	2f 91       	pop	r18
    14cc:	0f 90       	pop	r0
    14ce:	0f be       	out	0x3f, r0	; 63
    14d0:	0f 90       	pop	r0
    14d2:	1f 90       	pop	r1
    14d4:	18 95       	reti

000014d6 <__vector_18>:
__vector_18():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RX_vect)
  ISR(USART_RX_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    14d6:	1f 92       	push	r1
    14d8:	0f 92       	push	r0
    14da:	0f b6       	in	r0, 0x3f	; 63
    14dc:	0f 92       	push	r0
    14de:	11 24       	eor	r1, r1
    14e0:	2f 93       	push	r18
    14e2:	8f 93       	push	r24
    14e4:	9f 93       	push	r25
    14e6:	ef 93       	push	r30
    14e8:	ff 93       	push	r31
_rx_complete_irq():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    14ea:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <Serial+0x10>
    14ee:	f0 91 ee 02 	lds	r31, 0x02EE	; 0x8002ee <Serial+0x11>
    14f2:	80 81       	ld	r24, Z
    14f4:	e0 91 f3 02 	lds	r30, 0x02F3	; 0x8002f3 <Serial+0x16>
    14f8:	f0 91 f4 02 	lds	r31, 0x02F4	; 0x8002f4 <Serial+0x17>
    14fc:	82 fd       	sbrc	r24, 2
    14fe:	1b c0       	rjmp	.+54     	; 0x1536 <__vector_18+0x60>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1500:	90 81       	ld	r25, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1502:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <Serial+0x19>
    1506:	8f 5f       	subi	r24, 0xFF	; 255
    1508:	8f 73       	andi	r24, 0x3F	; 63
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    150a:	20 91 f7 02 	lds	r18, 0x02F7	; 0x8002f7 <Serial+0x1a>
    150e:	82 17       	cp	r24, r18
    1510:	41 f0       	breq	.+16     	; 0x1522 <__vector_18+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
    1512:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <Serial+0x19>
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	e3 52       	subi	r30, 0x23	; 35
    151a:	fd 4f       	sbci	r31, 0xFD	; 253
    151c:	95 8f       	std	Z+29, r25	; 0x1d
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
    151e:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <Serial+0x19>
__vector_18():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    1522:	ff 91       	pop	r31
    1524:	ef 91       	pop	r30
    1526:	9f 91       	pop	r25
    1528:	8f 91       	pop	r24
    152a:	2f 91       	pop	r18
    152c:	0f 90       	pop	r0
    152e:	0f be       	out	0x3f, r0	; 63
    1530:	0f 90       	pop	r0
    1532:	1f 90       	pop	r1
    1534:	18 95       	reti
_rx_complete_irq():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1536:	80 81       	ld	r24, Z
    1538:	f4 cf       	rjmp	.-24     	; 0x1522 <__vector_18+0x4c>

0000153a <__vector_24>:
__vector_24():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:534
  }
  return(flag);
}

ISR(TWI_vect)
{
    153a:	1f 92       	push	r1
    153c:	0f 92       	push	r0
    153e:	0f b6       	in	r0, 0x3f	; 63
    1540:	0f 92       	push	r0
    1542:	11 24       	eor	r1, r1
    1544:	2f 93       	push	r18
    1546:	3f 93       	push	r19
    1548:	4f 93       	push	r20
    154a:	5f 93       	push	r21
    154c:	6f 93       	push	r22
    154e:	7f 93       	push	r23
    1550:	8f 93       	push	r24
    1552:	9f 93       	push	r25
    1554:	af 93       	push	r26
    1556:	bf 93       	push	r27
    1558:	ef 93       	push	r30
    155a:	ff 93       	push	r31
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:535
  switch(TW_STATUS){
    155c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    1560:	88 7f       	andi	r24, 0xF8	; 248
    1562:	80 36       	cpi	r24, 0x60	; 96
    1564:	09 f4       	brne	.+2      	; 0x1568 <__vector_24+0x2e>
    1566:	4a c0       	rjmp	.+148    	; 0x15fc <__vector_24+0xc2>
    1568:	f0 f5       	brcc	.+124    	; 0x15e6 <__vector_24+0xac>
    156a:	88 32       	cpi	r24, 0x28	; 40
    156c:	09 f4       	brne	.+2      	; 0x1570 <__vector_24+0x36>
    156e:	a5 c0       	rjmp	.+330    	; 0x16ba <__vector_24+0x180>
    1570:	18 f5       	brcc	.+70     	; 0x15b8 <__vector_24+0x7e>
    1572:	80 31       	cpi	r24, 0x10	; 16
    1574:	09 f4       	brne	.+2      	; 0x1578 <__vector_24+0x3e>
    1576:	99 c0       	rjmp	.+306    	; 0x16aa <__vector_24+0x170>
    1578:	b8 f4       	brcc	.+46     	; 0x15a8 <__vector_24+0x6e>
    157a:	88 23       	and	r24, r24
    157c:	09 f4       	brne	.+2      	; 0x1580 <__vector_24+0x46>
    157e:	01 c1       	rjmp	.+514    	; 0x1782 <__vector_24+0x248>
    1580:	88 30       	cpi	r24, 0x08	; 8
    1582:	09 f4       	brne	.+2      	; 0x1586 <__vector_24+0x4c>
    1584:	92 c0       	rjmp	.+292    	; 0x16aa <__vector_24+0x170>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:696
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    1586:	ff 91       	pop	r31
    1588:	ef 91       	pop	r30
    158a:	bf 91       	pop	r27
    158c:	af 91       	pop	r26
    158e:	9f 91       	pop	r25
    1590:	8f 91       	pop	r24
    1592:	7f 91       	pop	r23
    1594:	6f 91       	pop	r22
    1596:	5f 91       	pop	r21
    1598:	4f 91       	pop	r20
    159a:	3f 91       	pop	r19
    159c:	2f 91       	pop	r18
    159e:	0f 90       	pop	r0
    15a0:	0f be       	out	0x3f, r0	; 63
    15a2:	0f 90       	pop	r0
    15a4:	1f 90       	pop	r1
    15a6:	18 95       	reti
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    15a8:	88 31       	cpi	r24, 0x18	; 24
    15aa:	09 f4       	brne	.+2      	; 0x15ae <__vector_24+0x74>
    15ac:	86 c0       	rjmp	.+268    	; 0x16ba <__vector_24+0x180>
    15ae:	80 32       	cpi	r24, 0x20	; 32
    15b0:	51 f7       	brne	.-44     	; 0x1586 <__vector_24+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:570
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    15b2:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <twi_error>
    15b6:	14 c0       	rjmp	.+40     	; 0x15e0 <__vector_24+0xa6>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    15b8:	80 34       	cpi	r24, 0x40	; 64
    15ba:	09 f4       	brne	.+2      	; 0x15be <__vector_24+0x84>
    15bc:	a3 c0       	rjmp	.+326    	; 0x1704 <__vector_24+0x1ca>
    15be:	40 f4       	brcc	.+16     	; 0x15d0 <__vector_24+0x96>
    15c0:	80 33       	cpi	r24, 0x30	; 48
    15c2:	b9 f3       	breq	.-18     	; 0x15b2 <__vector_24+0x78>
    15c4:	88 33       	cpi	r24, 0x38	; 56
    15c6:	f9 f6       	brne	.-66     	; 0x1586 <__vector_24+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:574
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    15c8:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <twi_error>
twi_reply():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    15cc:	85 ec       	ldi	r24, 0xC5	; 197
    15ce:	ba c0       	rjmp	.+372    	; 0x1744 <__vector_24+0x20a>
__vector_24():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    15d0:	80 35       	cpi	r24, 0x50	; 80
    15d2:	09 f4       	brne	.+2      	; 0x15d6 <__vector_24+0x9c>
    15d4:	87 c0       	rjmp	.+270    	; 0x16e4 <__vector_24+0x1aa>
    15d6:	88 35       	cpi	r24, 0x58	; 88
    15d8:	09 f4       	brne	.+2      	; 0x15dc <__vector_24+0xa2>
    15da:	9c c0       	rjmp	.+312    	; 0x1714 <__vector_24+0x1da>
    15dc:	88 34       	cpi	r24, 0x48	; 72
    15de:	99 f6       	brne	.-90     	; 0x1586 <__vector_24+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:693
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
    15e0:	0e 94 d6 04 	call	0x9ac	; 0x9ac <twi_stop>
    15e4:	d0 cf       	rjmp	.-96     	; 0x1586 <__vector_24+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    15e6:	88 39       	cpi	r24, 0x98	; 152
    15e8:	09 f4       	brne	.+2      	; 0x15ec <__vector_24+0xb2>
    15ea:	92 c0       	rjmp	.+292    	; 0x1710 <__vector_24+0x1d6>
    15ec:	38 f5       	brcc	.+78     	; 0x163c <__vector_24+0x102>
    15ee:	88 37       	cpi	r24, 0x78	; 120
    15f0:	29 f0       	breq	.+10     	; 0x15fc <__vector_24+0xc2>
    15f2:	50 f4       	brcc	.+20     	; 0x1608 <__vector_24+0xce>
    15f4:	88 36       	cpi	r24, 0x68	; 104
    15f6:	11 f0       	breq	.+4      	; 0x15fc <__vector_24+0xc2>
    15f8:	80 37       	cpi	r24, 0x70	; 112
    15fa:	29 f6       	brne	.-118    	; 0x1586 <__vector_24+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:616
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    15fc:	83 e0       	ldi	r24, 0x03	; 3
    15fe:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <twi_state>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:618
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1602:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <twi_rxBufferIndex>
    1606:	55 c0       	rjmp	.+170    	; 0x16b2 <__vector_24+0x178>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1608:	88 38       	cpi	r24, 0x88	; 136
    160a:	09 f4       	brne	.+2      	; 0x160e <__vector_24+0xd4>
    160c:	81 c0       	rjmp	.+258    	; 0x1710 <__vector_24+0x1d6>
    160e:	80 39       	cpi	r24, 0x90	; 144
    1610:	19 f0       	breq	.+6      	; 0x1618 <__vector_24+0xde>
    1612:	80 38       	cpi	r24, 0x80	; 128
    1614:	09 f0       	breq	.+2      	; 0x1618 <__vector_24+0xde>
    1616:	b7 cf       	rjmp	.-146    	; 0x1586 <__vector_24+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:624
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    1618:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <twi_rxBufferIndex>
    161c:	80 32       	cpi	r24, 0x20	; 32
    161e:	08 f0       	brcs	.+2      	; 0x1622 <__vector_24+0xe8>
    1620:	77 c0       	rjmp	.+238    	; 0x1710 <__vector_24+0x1d6>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:626
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1622:	e0 91 83 02 	lds	r30, 0x0283	; 0x800283 <twi_rxBufferIndex>
    1626:	81 e0       	ldi	r24, 0x01	; 1
    1628:	8e 0f       	add	r24, r30
    162a:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <twi_rxBufferIndex>
    162e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	ed 59       	subi	r30, 0x9D	; 157
    1636:	fd 4f       	sbci	r31, 0xFD	; 253
    1638:	80 83       	st	Z, r24
    163a:	3b c0       	rjmp	.+118    	; 0x16b2 <__vector_24+0x178>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    163c:	80 3b       	cpi	r24, 0xB0	; 176
    163e:	39 f0       	breq	.+14     	; 0x164e <__vector_24+0x114>
    1640:	d0 f4       	brcc	.+52     	; 0x1676 <__vector_24+0x13c>
    1642:	80 3a       	cpi	r24, 0xA0	; 160
    1644:	09 f4       	brne	.+2      	; 0x1648 <__vector_24+0x10e>
    1646:	83 c0       	rjmp	.+262    	; 0x174e <__vector_24+0x214>
    1648:	88 3a       	cpi	r24, 0xA8	; 168
    164a:	09 f0       	breq	.+2      	; 0x164e <__vector_24+0x114>
    164c:	9c cf       	rjmp	.-200    	; 0x1586 <__vector_24+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:655

    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    164e:	84 e0       	ldi	r24, 0x04	; 4
    1650:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <twi_state>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:657
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1654:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <twi_txBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:659
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1658:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <twi_txBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:662
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	e0 e0       	ldi	r30, 0x00	; 0
    1660:	09 95       	icall
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:664
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1662:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <twi_txBufferLength>
    1666:	81 11       	cpse	r24, r1
    1668:	0f c0       	rjmp	.+30     	; 0x1688 <__vector_24+0x14e>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:665
        twi_txBufferLength = 1;
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <twi_txBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:666
        twi_txBuffer[0] = 0x00;
    1670:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <twi_txBuffer>
    1674:	09 c0       	rjmp	.+18     	; 0x1688 <__vector_24+0x14e>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1676:	80 3c       	cpi	r24, 0xC0	; 192
    1678:	09 f4       	brne	.+2      	; 0x167c <__vector_24+0x142>
    167a:	a8 cf       	rjmp	.-176    	; 0x15cc <__vector_24+0x92>
    167c:	88 3c       	cpi	r24, 0xC8	; 200
    167e:	09 f4       	brne	.+2      	; 0x1682 <__vector_24+0x148>
    1680:	a5 cf       	rjmp	.-182    	; 0x15cc <__vector_24+0x92>
    1682:	88 3b       	cpi	r24, 0xB8	; 184
    1684:	09 f0       	breq	.+2      	; 0x1688 <__vector_24+0x14e>
    1686:	7f cf       	rjmp	.-258    	; 0x1586 <__vector_24+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:672
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    1688:	e0 91 62 02 	lds	r30, 0x0262	; 0x800262 <twi_txBufferIndex>
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	8e 0f       	add	r24, r30
    1690:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <twi_txBufferIndex>
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	ef 5b       	subi	r30, 0xBF	; 191
    1698:	fd 4f       	sbci	r31, 0xFD	; 253
    169a:	80 81       	ld	r24, Z
    169c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:674
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    16a0:	90 91 62 02 	lds	r25, 0x0262	; 0x800262 <twi_txBufferIndex>
    16a4:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <twi_txBufferLength>
    16a8:	31 c0       	rjmp	.+98     	; 0x170c <__vector_24+0x1d2>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:540
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    16aa:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <twi_slarw>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:550
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    16ae:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
twi_reply():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    16b2:	85 ec       	ldi	r24, 0xC5	; 197
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:423
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    16b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    16b8:	66 cf       	rjmp	.-308    	; 0x1586 <__vector_24+0x4c>
__vector_24():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:548

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
    16ba:	90 91 d7 02 	lds	r25, 0x02D7	; 0x8002d7 <twi_masterBufferIndex>
    16be:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <twi_masterBufferLength>
    16c2:	98 17       	cp	r25, r24
    16c4:	b8 f5       	brcc	.+110    	; 0x1734 <__vector_24+0x1fa>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:550
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    16c6:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <twi_masterBuffer>
    16ca:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <twi_masterBuffer+0x1>
    16ce:	e0 91 d7 02 	lds	r30, 0x02D7	; 0x8002d7 <twi_masterBufferIndex>
    16d2:	21 e0       	ldi	r18, 0x01	; 1
    16d4:	2e 0f       	add	r18, r30
    16d6:	20 93 d7 02 	sts	0x02D7, r18	; 0x8002d7 <twi_masterBufferIndex>
    16da:	e8 0f       	add	r30, r24
    16dc:	f9 2f       	mov	r31, r25
    16de:	f1 1d       	adc	r31, r1
    16e0:	80 81       	ld	r24, Z
    16e2:	e5 cf       	rjmp	.-54     	; 0x16ae <__vector_24+0x174>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:581
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    16e4:	20 91 d8 02 	lds	r18, 0x02D8	; 0x8002d8 <twi_masterBuffer>
    16e8:	30 91 d9 02 	lds	r19, 0x02D9	; 0x8002d9 <twi_masterBuffer+0x1>
    16ec:	e0 91 d7 02 	lds	r30, 0x02D7	; 0x8002d7 <twi_masterBufferIndex>
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	8e 0f       	add	r24, r30
    16f4:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <twi_masterBufferIndex>
    16f8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    16fc:	e2 0f       	add	r30, r18
    16fe:	f3 2f       	mov	r31, r19
    1700:	f1 1d       	adc	r31, r1
    1702:	80 83       	st	Z, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:585
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1704:	90 91 d7 02 	lds	r25, 0x02D7	; 0x8002d7 <twi_masterBufferIndex>
    1708:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <twi_masterBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:674
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    170c:	98 17       	cp	r25, r24
    170e:	88 f2       	brcs	.-94     	; 0x16b2 <__vector_24+0x178>
twi_reply():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:423
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1710:	85 e8       	ldi	r24, 0x85	; 133
    1712:	d0 cf       	rjmp	.-96     	; 0x16b4 <__vector_24+0x17a>
__vector_24():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:593
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1714:	20 91 d8 02 	lds	r18, 0x02D8	; 0x8002d8 <twi_masterBuffer>
    1718:	30 91 d9 02 	lds	r19, 0x02D9	; 0x8002d9 <twi_masterBuffer+0x1>
    171c:	e0 91 d7 02 	lds	r30, 0x02D7	; 0x8002d7 <twi_masterBufferIndex>
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	8e 0f       	add	r24, r30
    1724:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <twi_masterBufferIndex>
    1728:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    172c:	e2 0f       	add	r30, r18
    172e:	f3 2f       	mov	r31, r19
    1730:	f1 1d       	adc	r31, r1
    1732:	80 83       	st	Z, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:594
  if (twi_sendStop)
    1734:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <twi_sendStop>
    1738:	81 11       	cpse	r24, r1
    173a:	52 cf       	rjmp	.-348    	; 0x15e0 <__vector_24+0xa6>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:597
          twi_stop();
  else {
    twi_inRepStart = true;  // we're going to send the START
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <twi_inRepStart>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:601
    // don't enable the interrupt. We'll generate the start, but we
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1742:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1744:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
__vector_24():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:685
    case TW_ST_DATA_NACK: // received nack, we are done
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    1748:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <twi_state>
    174c:	1c cf       	rjmp	.-456    	; 0x1586 <__vector_24+0x4c>
twi_releaseBus():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:474
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    174e:	85 ec       	ldi	r24, 0xC5	; 197
    1750:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:477

  // update twi state
  twi_state = TWI_READY;
    1754:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <twi_state>
__vector_24():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:637
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    1758:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <twi_rxBufferIndex>
    175c:	80 32       	cpi	r24, 0x20	; 32
    175e:	30 f4       	brcc	.+12     	; 0x176c <__vector_24+0x232>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:638
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1760:	e0 91 83 02 	lds	r30, 0x0283	; 0x800283 <twi_rxBufferIndex>
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	ed 59       	subi	r30, 0x9D	; 157
    1768:	fd 4f       	sbci	r31, 0xFD	; 253
    176a:	10 82       	st	Z, r1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:641
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    176c:	60 91 83 02 	lds	r22, 0x0283	; 0x800283 <twi_rxBufferIndex>
    1770:	70 e0       	ldi	r23, 0x00	; 0
    1772:	83 e6       	ldi	r24, 0x63	; 99
    1774:	92 e0       	ldi	r25, 0x02	; 2
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	e0 e0       	ldi	r30, 0x00	; 0
    177a:	09 95       	icall
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:643
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    177c:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <twi_rxBufferIndex>
    1780:	02 cf       	rjmp	.-508    	; 0x1586 <__vector_24+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:692

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    1782:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <twi_error>
    1786:	2c cf       	rjmp	.-424    	; 0x15e0 <__vector_24+0xa6>

00001788 <global constructors keyed to 65535_0_SI4844_02_LCD16x2_SLIDE_SWITCH.ino.cpp.o.2651>:
_GLOBAL__I_65535_0_SI4844_02_LCD16x2_SLIDE_SWITCH.ino.cpp.o.2651():
    1788:	1f 93       	push	r17
    178a:	cf 93       	push	r28
    178c:	df 93       	push	r29
    178e:	ed ed       	ldi	r30, 0xDD	; 221
    1790:	f2 e0       	ldi	r31, 0x02	; 2
    1792:	13 82       	std	Z+3, r1	; 0x03
    1794:	12 82       	std	Z+2, r1	; 0x02
    1796:	88 ee       	ldi	r24, 0xE8	; 232
    1798:	93 e0       	ldi	r25, 0x03	; 3
    179a:	a0 e0       	ldi	r26, 0x00	; 0
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	84 83       	std	Z+4, r24	; 0x04
    17a0:	95 83       	std	Z+5, r25	; 0x05
    17a2:	a6 83       	std	Z+6, r26	; 0x06
    17a4:	b7 83       	std	Z+7, r27	; 0x07
    17a6:	2d e1       	ldi	r18, 0x1D	; 29
    17a8:	31 e0       	ldi	r19, 0x01	; 1
    17aa:	31 83       	std	Z+1, r19	; 0x01
    17ac:	20 83       	st	Z, r18
    17ae:	25 ec       	ldi	r18, 0xC5	; 197
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	35 87       	std	Z+13, r19	; 0x0d
    17b4:	24 87       	std	Z+12, r18	; 0x0c
    17b6:	24 ec       	ldi	r18, 0xC4	; 196
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	37 87       	std	Z+15, r19	; 0x0f
    17bc:	26 87       	std	Z+14, r18	; 0x0e
    17be:	20 ec       	ldi	r18, 0xC0	; 192
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	31 8b       	std	Z+17, r19	; 0x11
    17c4:	20 8b       	std	Z+16, r18	; 0x10
    17c6:	21 ec       	ldi	r18, 0xC1	; 193
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	33 8b       	std	Z+19, r19	; 0x13
    17cc:	22 8b       	std	Z+18, r18	; 0x12
    17ce:	22 ec       	ldi	r18, 0xC2	; 194
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	35 8b       	std	Z+21, r19	; 0x15
    17d4:	24 8b       	std	Z+20, r18	; 0x14
    17d6:	26 ec       	ldi	r18, 0xC6	; 198
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	37 8b       	std	Z+23, r19	; 0x17
    17dc:	26 8b       	std	Z+22, r18	; 0x16
    17de:	11 8e       	std	Z+25, r1	; 0x19
    17e0:	12 8e       	std	Z+26, r1	; 0x1a
    17e2:	13 8e       	std	Z+27, r1	; 0x1b
    17e4:	14 8e       	std	Z+28, r1	; 0x1c
    17e6:	ea e7       	ldi	r30, 0x7A	; 122
    17e8:	f3 e0       	ldi	r31, 0x03	; 3
    17ea:	13 82       	std	Z+3, r1	; 0x03
    17ec:	12 82       	std	Z+2, r1	; 0x02
    17ee:	84 83       	std	Z+4, r24	; 0x04
    17f0:	95 83       	std	Z+5, r25	; 0x05
    17f2:	a6 83       	std	Z+6, r26	; 0x06
    17f4:	b7 83       	std	Z+7, r27	; 0x07
    17f6:	8f e2       	ldi	r24, 0x2F	; 47
    17f8:	91 e0       	ldi	r25, 0x01	; 1
    17fa:	91 83       	std	Z+1, r25	; 0x01
    17fc:	80 83       	st	Z, r24
    17fe:	8f b7       	in	r24, 0x3f	; 63
    1800:	f8 94       	cli
    1802:	40 91 86 03 	lds	r20, 0x0386	; 0x800386 <timer0_millis>
    1806:	50 91 87 03 	lds	r21, 0x0387	; 0x800387 <timer0_millis+0x1>
    180a:	60 91 88 03 	lds	r22, 0x0388	; 0x800388 <timer0_millis+0x2>
    180e:	70 91 89 03 	lds	r23, 0x0389	; 0x800389 <timer0_millis+0x3>
    1812:	8f bf       	out	0x3f, r24	; 63
    1814:	67 e5       	ldi	r22, 0x57	; 87
    1816:	71 e0       	ldi	r23, 0x01	; 1
    1818:	82 ed       	ldi	r24, 0xD2	; 210
    181a:	93 e0       	ldi	r25, 0x03	; 3
    181c:	0e 94 38 08 	call	0x1070	; 0x1070 <String::String(char const*)>
    1820:	6c e5       	ldi	r22, 0x5C	; 92
    1822:	71 e0       	ldi	r23, 0x01	; 1
    1824:	88 ed       	ldi	r24, 0xD8	; 216
    1826:	93 e0       	ldi	r25, 0x03	; 3
    1828:	0e 94 38 08 	call	0x1070	; 0x1070 <String::String(char const*)>
    182c:	61 e6       	ldi	r22, 0x61	; 97
    182e:	71 e0       	ldi	r23, 0x01	; 1
    1830:	8e ed       	ldi	r24, 0xDE	; 222
    1832:	93 e0       	ldi	r25, 0x03	; 3
    1834:	0e 94 38 08 	call	0x1070	; 0x1070 <String::String(char const*)>
    1838:	66 e6       	ldi	r22, 0x66	; 102
    183a:	71 e0       	ldi	r23, 0x01	; 1
    183c:	84 ee       	ldi	r24, 0xE4	; 228
    183e:	93 e0       	ldi	r25, 0x03	; 3
    1840:	0e 94 38 08 	call	0x1070	; 0x1070 <String::String(char const*)>
    1844:	6b e6       	ldi	r22, 0x6B	; 107
    1846:	71 e0       	ldi	r23, 0x01	; 1
    1848:	8a ee       	ldi	r24, 0xEA	; 234
    184a:	93 e0       	ldi	r25, 0x03	; 3
    184c:	0e 94 38 08 	call	0x1070	; 0x1070 <String::String(char const*)>
    1850:	60 e7       	ldi	r22, 0x70	; 112
    1852:	71 e0       	ldi	r23, 0x01	; 1
    1854:	80 ef       	ldi	r24, 0xF0	; 240
    1856:	93 e0       	ldi	r25, 0x03	; 3
    1858:	0e 94 38 08 	call	0x1070	; 0x1070 <String::String(char const*)>
    185c:	65 e7       	ldi	r22, 0x75	; 117
    185e:	71 e0       	ldi	r23, 0x01	; 1
    1860:	86 ef       	ldi	r24, 0xF6	; 246
    1862:	93 e0       	ldi	r25, 0x03	; 3
    1864:	0e 94 38 08 	call	0x1070	; 0x1070 <String::String(char const*)>
    1868:	6a e7       	ldi	r22, 0x7A	; 122
    186a:	71 e0       	ldi	r23, 0x01	; 1
    186c:	8c ef       	ldi	r24, 0xFC	; 252
    186e:	93 e0       	ldi	r25, 0x03	; 3
    1870:	0e 94 38 08 	call	0x1070	; 0x1070 <String::String(char const*)>
    1874:	6f e7       	ldi	r22, 0x7F	; 127
    1876:	71 e0       	ldi	r23, 0x01	; 1
    1878:	82 e0       	ldi	r24, 0x02	; 2
    187a:	94 e0       	ldi	r25, 0x04	; 4
    187c:	0e 94 38 08 	call	0x1070	; 0x1070 <String::String(char const*)>
    1880:	64 e8       	ldi	r22, 0x84	; 132
    1882:	71 e0       	ldi	r23, 0x01	; 1
    1884:	88 e0       	ldi	r24, 0x08	; 8
    1886:	94 e0       	ldi	r25, 0x04	; 4
    1888:	0e 94 38 08 	call	0x1070	; 0x1070 <String::String(char const*)>
    188c:	69 e8       	ldi	r22, 0x89	; 137
    188e:	71 e0       	ldi	r23, 0x01	; 1
    1890:	8e e0       	ldi	r24, 0x0E	; 14
    1892:	94 e0       	ldi	r25, 0x04	; 4
    1894:	0e 94 38 08 	call	0x1070	; 0x1070 <String::String(char const*)>
    1898:	6e e8       	ldi	r22, 0x8E	; 142
    189a:	71 e0       	ldi	r23, 0x01	; 1
    189c:	84 e1       	ldi	r24, 0x14	; 20
    189e:	94 e0       	ldi	r25, 0x04	; 4
    18a0:	0e 94 38 08 	call	0x1070	; 0x1070 <String::String(char const*)>
    18a4:	63 e9       	ldi	r22, 0x93	; 147
    18a6:	71 e0       	ldi	r23, 0x01	; 1
    18a8:	8a e1       	ldi	r24, 0x1A	; 26
    18aa:	94 e0       	ldi	r25, 0x04	; 4
    18ac:	0e 94 38 08 	call	0x1070	; 0x1070 <String::String(char const*)>
    18b0:	68 e9       	ldi	r22, 0x98	; 152
    18b2:	71 e0       	ldi	r23, 0x01	; 1
    18b4:	80 e2       	ldi	r24, 0x20	; 32
    18b6:	94 e0       	ldi	r25, 0x04	; 4
    18b8:	0e 94 38 08 	call	0x1070	; 0x1070 <String::String(char const*)>
    18bc:	6d e9       	ldi	r22, 0x9D	; 157
    18be:	71 e0       	ldi	r23, 0x01	; 1
    18c0:	86 e2       	ldi	r24, 0x26	; 38
    18c2:	94 e0       	ldi	r25, 0x04	; 4
    18c4:	0e 94 38 08 	call	0x1070	; 0x1070 <String::String(char const*)>
    18c8:	62 ea       	ldi	r22, 0xA2	; 162
    18ca:	71 e0       	ldi	r23, 0x01	; 1
    18cc:	8c e2       	ldi	r24, 0x2C	; 44
    18ce:	94 e0       	ldi	r25, 0x04	; 4
    18d0:	0e 94 38 08 	call	0x1070	; 0x1070 <String::String(char const*)>
    18d4:	67 ea       	ldi	r22, 0xA7	; 167
    18d6:	71 e0       	ldi	r23, 0x01	; 1
    18d8:	82 e3       	ldi	r24, 0x32	; 50
    18da:	94 e0       	ldi	r25, 0x04	; 4
    18dc:	0e 94 38 08 	call	0x1070	; 0x1070 <String::String(char const*)>
    18e0:	6c ea       	ldi	r22, 0xAC	; 172
    18e2:	71 e0       	ldi	r23, 0x01	; 1
    18e4:	88 e3       	ldi	r24, 0x38	; 56
    18e6:	94 e0       	ldi	r25, 0x04	; 4
    18e8:	0e 94 38 08 	call	0x1070	; 0x1070 <String::String(char const*)>
    18ec:	61 eb       	ldi	r22, 0xB1	; 177
    18ee:	71 e0       	ldi	r23, 0x01	; 1
    18f0:	8e e3       	ldi	r24, 0x3E	; 62
    18f2:	94 e0       	ldi	r25, 0x04	; 4
    18f4:	0e 94 38 08 	call	0x1070	; 0x1070 <String::String(char const*)>
    18f8:	66 eb       	ldi	r22, 0xB6	; 182
    18fa:	71 e0       	ldi	r23, 0x01	; 1
    18fc:	84 e4       	ldi	r24, 0x44	; 68
    18fe:	94 e0       	ldi	r25, 0x04	; 4
    1900:	0e 94 38 08 	call	0x1070	; 0x1070 <String::String(char const*)>
    1904:	6b eb       	ldi	r22, 0xBB	; 187
    1906:	71 e0       	ldi	r23, 0x01	; 1
    1908:	8a e4       	ldi	r24, 0x4A	; 74
    190a:	94 e0       	ldi	r25, 0x04	; 4
    190c:	0e 94 38 08 	call	0x1070	; 0x1070 <String::String(char const*)>
    1910:	60 ec       	ldi	r22, 0xC0	; 192
    1912:	71 e0       	ldi	r23, 0x01	; 1
    1914:	80 e5       	ldi	r24, 0x50	; 80
    1916:	94 e0       	ldi	r25, 0x04	; 4
    1918:	0e 94 38 08 	call	0x1070	; 0x1070 <String::String(char const*)>
    191c:	65 ec       	ldi	r22, 0xC5	; 197
    191e:	71 e0       	ldi	r23, 0x01	; 1
    1920:	86 e5       	ldi	r24, 0x56	; 86
    1922:	94 e0       	ldi	r25, 0x04	; 4
    1924:	0e 94 38 08 	call	0x1070	; 0x1070 <String::String(char const*)>
    1928:	6a ec       	ldi	r22, 0xCA	; 202
    192a:	71 e0       	ldi	r23, 0x01	; 1
    192c:	8c e5       	ldi	r24, 0x5C	; 92
    192e:	94 e0       	ldi	r25, 0x04	; 4
    1930:	0e 94 38 08 	call	0x1070	; 0x1070 <String::String(char const*)>
    1934:	6f ec       	ldi	r22, 0xCF	; 207
    1936:	71 e0       	ldi	r23, 0x01	; 1
    1938:	82 e6       	ldi	r24, 0x62	; 98
    193a:	94 e0       	ldi	r25, 0x04	; 4
    193c:	0e 94 38 08 	call	0x1070	; 0x1070 <String::String(char const*)>
    1940:	64 ed       	ldi	r22, 0xD4	; 212
    1942:	71 e0       	ldi	r23, 0x01	; 1
    1944:	88 e6       	ldi	r24, 0x68	; 104
    1946:	94 e0       	ldi	r25, 0x04	; 4
    1948:	0e 94 38 08 	call	0x1070	; 0x1070 <String::String(char const*)>
    194c:	69 ed       	ldi	r22, 0xD9	; 217
    194e:	71 e0       	ldi	r23, 0x01	; 1
    1950:	8e e6       	ldi	r24, 0x6E	; 110
    1952:	94 e0       	ldi	r25, 0x04	; 4
    1954:	0e 94 38 08 	call	0x1070	; 0x1070 <String::String(char const*)>
    1958:	6e ed       	ldi	r22, 0xDE	; 222
    195a:	71 e0       	ldi	r23, 0x01	; 1
    195c:	84 e7       	ldi	r24, 0x74	; 116
    195e:	94 e0       	ldi	r25, 0x04	; 4
    1960:	0e 94 38 08 	call	0x1070	; 0x1070 <String::String(char const*)>
    1964:	63 ee       	ldi	r22, 0xE3	; 227
    1966:	71 e0       	ldi	r23, 0x01	; 1
    1968:	8a e7       	ldi	r24, 0x7A	; 122
    196a:	94 e0       	ldi	r25, 0x04	; 4
    196c:	0e 94 38 08 	call	0x1070	; 0x1070 <String::String(char const*)>
    1970:	68 ee       	ldi	r22, 0xE8	; 232
    1972:	71 e0       	ldi	r23, 0x01	; 1
    1974:	80 e8       	ldi	r24, 0x80	; 128
    1976:	94 e0       	ldi	r25, 0x04	; 4
    1978:	0e 94 38 08 	call	0x1070	; 0x1070 <String::String(char const*)>
    197c:	6d ee       	ldi	r22, 0xED	; 237
    197e:	71 e0       	ldi	r23, 0x01	; 1
    1980:	86 e8       	ldi	r24, 0x86	; 134
    1982:	94 e0       	ldi	r25, 0x04	; 4
    1984:	0e 94 38 08 	call	0x1070	; 0x1070 <String::String(char const*)>
    1988:	62 ef       	ldi	r22, 0xF2	; 242
    198a:	71 e0       	ldi	r23, 0x01	; 1
    198c:	8c e8       	ldi	r24, 0x8C	; 140
    198e:	94 e0       	ldi	r25, 0x04	; 4
    1990:	0e 94 38 08 	call	0x1070	; 0x1070 <String::String(char const*)>
    1994:	67 ef       	ldi	r22, 0xF7	; 247
    1996:	71 e0       	ldi	r23, 0x01	; 1
    1998:	82 e9       	ldi	r24, 0x92	; 146
    199a:	94 e0       	ldi	r25, 0x04	; 4
    199c:	0e 94 38 08 	call	0x1070	; 0x1070 <String::String(char const*)>
    19a0:	6c ef       	ldi	r22, 0xFC	; 252
    19a2:	71 e0       	ldi	r23, 0x01	; 1
    19a4:	88 e9       	ldi	r24, 0x98	; 152
    19a6:	94 e0       	ldi	r25, 0x04	; 4
    19a8:	0e 94 38 08 	call	0x1070	; 0x1070 <String::String(char const*)>
    19ac:	61 e0       	ldi	r22, 0x01	; 1
    19ae:	72 e0       	ldi	r23, 0x02	; 2
    19b0:	8e e9       	ldi	r24, 0x9E	; 158
    19b2:	94 e0       	ldi	r25, 0x04	; 4
    19b4:	0e 94 38 08 	call	0x1070	; 0x1070 <String::String(char const*)>
    19b8:	66 e0       	ldi	r22, 0x06	; 6
    19ba:	72 e0       	ldi	r23, 0x02	; 2
    19bc:	84 ea       	ldi	r24, 0xA4	; 164
    19be:	94 e0       	ldi	r25, 0x04	; 4
    19c0:	0e 94 38 08 	call	0x1070	; 0x1070 <String::String(char const*)>
    19c4:	6b e0       	ldi	r22, 0x0B	; 11
    19c6:	72 e0       	ldi	r23, 0x02	; 2
    19c8:	8a ea       	ldi	r24, 0xAA	; 170
    19ca:	94 e0       	ldi	r25, 0x04	; 4
    19cc:	0e 94 38 08 	call	0x1070	; 0x1070 <String::String(char const*)>
    19d0:	60 e1       	ldi	r22, 0x10	; 16
    19d2:	72 e0       	ldi	r23, 0x02	; 2
    19d4:	80 eb       	ldi	r24, 0xB0	; 176
    19d6:	94 e0       	ldi	r25, 0x04	; 4
    19d8:	0e 94 38 08 	call	0x1070	; 0x1070 <String::String(char const*)>
    19dc:	65 e1       	ldi	r22, 0x15	; 21
    19de:	72 e0       	ldi	r23, 0x02	; 2
    19e0:	86 eb       	ldi	r24, 0xB6	; 182
    19e2:	94 e0       	ldi	r25, 0x04	; 4
    19e4:	0e 94 38 08 	call	0x1070	; 0x1070 <String::String(char const*)>
    19e8:	6a e1       	ldi	r22, 0x1A	; 26
    19ea:	72 e0       	ldi	r23, 0x02	; 2
    19ec:	8c eb       	ldi	r24, 0xBC	; 188
    19ee:	94 e0       	ldi	r25, 0x04	; 4
    19f0:	0e 94 38 08 	call	0x1070	; 0x1070 <String::String(char const*)>
    19f4:	6f e1       	ldi	r22, 0x1F	; 31
    19f6:	72 e0       	ldi	r23, 0x02	; 2
    19f8:	82 ec       	ldi	r24, 0xC2	; 194
    19fa:	94 e0       	ldi	r25, 0x04	; 4
    19fc:	0e 94 38 08 	call	0x1070	; 0x1070 <String::String(char const*)>
    1a00:	ea eb       	ldi	r30, 0xBA	; 186
    1a02:	f3 e0       	ldi	r31, 0x03	; 3
    1a04:	13 82       	std	Z+3, r1	; 0x03
    1a06:	12 82       	std	Z+2, r1	; 0x02
    1a08:	81 e4       	ldi	r24, 0x41	; 65
    1a0a:	91 e0       	ldi	r25, 0x01	; 1
    1a0c:	91 83       	std	Z+1, r25	; 0x01
    1a0e:	80 83       	st	Z, r24
    1a10:	83 e0       	ldi	r24, 0x03	; 3
    1a12:	84 83       	std	Z+4, r24	; 0x04
    1a14:	8f ef       	ldi	r24, 0xFF	; 255
    1a16:	85 83       	std	Z+5, r24	; 0x05
    1a18:	8d e0       	ldi	r24, 0x0D	; 13
    1a1a:	86 83       	std	Z+6, r24	; 0x06
    1a1c:	14 e0       	ldi	r17, 0x04	; 4
    1a1e:	17 83       	std	Z+7, r17	; 0x07
    1a20:	85 e0       	ldi	r24, 0x05	; 5
    1a22:	80 87       	std	Z+8, r24	; 0x08
    1a24:	86 e0       	ldi	r24, 0x06	; 6
    1a26:	81 87       	std	Z+9, r24	; 0x09
    1a28:	87 e0       	ldi	r24, 0x07	; 7
    1a2a:	82 87       	std	Z+10, r24	; 0x0a
    1a2c:	13 86       	std	Z+11, r1	; 0x0b
    1a2e:	14 86       	std	Z+12, r1	; 0x0c
    1a30:	15 86       	std	Z+13, r1	; 0x0d
    1a32:	16 86       	std	Z+14, r1	; 0x0e
    1a34:	17 86       	std	Z+15, r1	; 0x0f
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	0e 94 19 04 	call	0x832	; 0x832 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.46]>
    1a3c:	ca e8       	ldi	r28, 0x8A	; 138
    1a3e:	d3 e0       	ldi	r29, 0x03	; 3
    1a40:	1a 8a       	std	Y+18, r1	; 0x12
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	8b 8b       	std	Y+19, r24	; 0x13
    1a46:	1c 8a       	std	Y+20, r1	; 0x14
    1a48:	80 e5       	ldi	r24, 0x50	; 80
    1a4a:	93 ec       	ldi	r25, 0xC3	; 195
    1a4c:	a0 e0       	ldi	r26, 0x00	; 0
    1a4e:	b0 e0       	ldi	r27, 0x00	; 0
    1a50:	8d 8b       	std	Y+21, r24	; 0x15
    1a52:	9e 8b       	std	Y+22, r25	; 0x16
    1a54:	af 8b       	std	Y+23, r26	; 0x17
    1a56:	b8 8f       	std	Y+24, r27	; 0x18
    1a58:	19 8e       	std	Y+25, r1	; 0x19
    1a5a:	1b 8e       	std	Y+27, r1	; 0x1b
    1a5c:	1a 8e       	std	Y+26, r1	; 0x1a
    1a5e:	86 e0       	ldi	r24, 0x06	; 6
    1a60:	eb e0       	ldi	r30, 0x0B	; 11
    1a62:	f1 e0       	ldi	r31, 0x01	; 1
    1a64:	a6 ea       	ldi	r26, 0xA6	; 166
    1a66:	b3 e0       	ldi	r27, 0x03	; 3
    1a68:	01 90       	ld	r0, Z+
    1a6a:	0d 92       	st	X+, r0
    1a6c:	8a 95       	dec	r24
    1a6e:	e1 f7       	brne	.-8      	; 0x1a68 <global constructors keyed to 65535_0_SI4844_02_LCD16x2_SLIDE_SWITCH.ino.cpp.o.2651+0x2e0>
    1a70:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <__malloc_margin+0x8>
    1a74:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <__malloc_margin+0x9>
    1a78:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <__malloc_margin+0xa>
    1a7c:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <__malloc_margin+0xb>
    1a80:	8a a3       	std	Y+34, r24	; 0x22
    1a82:	9b a3       	std	Y+35, r25	; 0x23
    1a84:	ac a3       	std	Y+36, r26	; 0x24
    1a86:	bd a3       	std	Y+37, r27	; 0x25
    1a88:	8e e1       	ldi	r24, 0x1E	; 30
    1a8a:	8e a7       	std	Y+46, r24	; 0x2e
    1a8c:	1f a7       	std	Y+47, r17	; 0x2f
    1a8e:	df 91       	pop	r29
    1a90:	cf 91       	pop	r28
    1a92:	1f 91       	pop	r17
    1a94:	08 95       	ret

00001a96 <main>:
init():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    1a96:	78 94       	sei
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    1a98:	84 b5       	in	r24, 0x24	; 36
    1a9a:	83 60       	ori	r24, 0x03	; 3
    1a9c:	84 bd       	out	0x24, r24	; 36
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    1a9e:	85 b5       	in	r24, 0x25	; 37
    1aa0:	83 60       	ori	r24, 0x03	; 3
    1aa2:	85 bd       	out	0x25, r24	; 37
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    1aa4:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
    1aa8:	81 60       	ori	r24, 0x01	; 1
    1aaa:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    1aae:	82 e0       	ldi	r24, 0x02	; 2
    1ab0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    1ab4:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    1ab8:	81 60       	ori	r24, 0x01	; 1
    1aba:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    1abe:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1ac2:	81 60       	ori	r24, 0x01	; 1
    1ac4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    1ac8:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
    1acc:	84 60       	ori	r24, 0x04	; 4
    1ace:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    1ad2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1ad6:	81 60       	ori	r24, 0x01	; 1
    1ad8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
    1adc:	87 e8       	ldi	r24, 0x87	; 135
    1ade:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    1ae2:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
setup():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:98

SI4844 rx;

void setup() {

  pinMode(TUNE_LED, OUTPUT);
    1ae6:	61 e0       	ldi	r22, 0x01	; 1
    1ae8:	8a e0       	ldi	r24, 0x0A	; 10
    1aea:	0e 94 b1 02 	call	0x562	; 0x562 <pinMode>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:100

  display.begin(16, 2);
    1aee:	82 e0       	ldi	r24, 0x02	; 2
    1af0:	0e 94 19 04 	call	0x832	; 0x832 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.46]>
setupSlideSwitch():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:192
 * @param hightClockSpeed hight I2C clock speed to be used by the system (optional - default 50000 - 50kHz).
 */
void SI4844::setupSlideSwitch(uint16_t resetPin, int interruptPin, uint32_t hightClockSpeed )
{
    // UNDER CONSTRUCTION
    this->resetPin = resetPin;
    1af4:	8c e0       	ldi	r24, 0x0C	; 12
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	90 93 99 03 	sts	0x0399, r25	; 0x800399 <rx+0xf>
    1afc:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <rx+0xe>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:193
    this->interruptPin = interruptPin;
    1b00:	82 e0       	ldi	r24, 0x02	; 2
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	90 93 9b 03 	sts	0x039B, r25	; 0x80039b <rx+0x11>
    1b08:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <rx+0x10>
_ZN6SI484413setClockSpeedEj():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.h:315
  /**
   * @ingroup BF
   * @brief Sets hight clock speed to be used on I2C bus
   * @param clock (10000 = 10kHz; 50000 = 50kHz; 100000 = 100kHz ... )
   */
  inline void setClockSpeed(uint16_t clock) { this->clockSpeed = clock; }; 
    1b0c:	80 e5       	ldi	r24, 0x50	; 80
    1b0e:	93 ec       	ldi	r25, 0xC3	; 195
    1b10:	a0 e0       	ldi	r26, 0x00	; 0
    1b12:	b0 e0       	ldi	r27, 0x00	; 0
    1b14:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <rx+0x15>
    1b18:	90 93 a0 03 	sts	0x03A0, r25	; 0x8003a0 <rx+0x16>
    1b1c:	a0 93 a1 03 	sts	0x03A1, r26	; 0x8003a1 <rx+0x17>
    1b20:	b0 93 a2 03 	sts	0x03A2, r27	; 0x8003a2 <rx+0x18>
setupSlideSwitch():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:200
    setClockSpeed(hightClockSpeed);

    // Arduino interrupt setup.
    // if interruptPin parameter is < 0, it means the interrupt is being controlled by the user of this library
    if (interruptPin != -1 ) {
        pinMode(interruptPin, INPUT);
    1b24:	60 e0       	ldi	r22, 0x00	; 0
    1b26:	82 e0       	ldi	r24, 0x02	; 2
    1b28:	0e 94 b1 02 	call	0x562	; 0x562 <pinMode>
attachInterrupt():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WInterrupts.c:66

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode)
{
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS)
  {
    intFunc[interruptNum] = userFunc;
    1b2c:	84 e4       	ldi	r24, 0x44	; 68
    1b2e:	93 e0       	ldi	r25, 0x03	; 3
    1b30:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    1b34:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WInterrupts.c:231
      #elif defined(__AVR_ATmega48__) || defined(__AVR_ATmega48P__)  || defined(__AVR_ATmega48PB__)  \
      || defined(__AVR_ATmega88__)    || defined(__AVR_ATmega88P__)  || defined(__AVR_ATmega88PB__)  \
      || defined(__AVR_ATmega168__)   || defined(__AVR_ATmega168P__) || defined(__AVR_ATmega168PB__) \
      || defined(__AVR_ATmega328__)   || defined(__AVR_ATmega328P__) || defined(__AVR_ATmega328PB__)
        case 0:
          EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
    1b38:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    1b3c:	83 60       	ori	r24, 0x03	; 3
    1b3e:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WInterrupts.c:232
          EIMSK |= (1 << INT0);
    1b42:	e8 9a       	sbi	0x1d, 0	; 29
setupSlideSwitch():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:204
        attachInterrupt(digitalPinToInterrupt(interruptPin), interrupt_hundler, RISING);
    }

    pinMode(resetPin, OUTPUT);
    1b44:	61 e0       	ldi	r22, 0x01	; 1
    1b46:	8c e0       	ldi	r24, 0x0C	; 12
    1b48:	0e 94 b1 02 	call	0x562	; 0x562 <pinMode>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:205
    digitalWrite(resetPin, HIGH);
    1b4c:	61 e0       	ldi	r22, 0x01	; 1
    1b4e:	8c e0       	ldi	r24, 0x0C	; 12
    1b50:	0e 94 65 02 	call	0x4ca	; 0x4ca <digitalWrite>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:206
    delay(1);    
    1b54:	61 e0       	ldi	r22, 0x01	; 1
    1b56:	70 e0       	ldi	r23, 0x00	; 0
    1b58:	80 e0       	ldi	r24, 0x00	; 0
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	0e 94 12 03 	call	0x624	; 0x624 <delay>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:207
    data_from_device = false;    
    1b60:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <_ZL16data_from_device.lto_priv.55>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:212
    
    // Step 1: Reset and Prepare the Device
    //      1. The system controller resets the ATDD device and releases the  RSTb  pin.
    //      2. The system controller waits until the first  IRQ  is received, indicating that the ATDD device is ready to receive commands.   
    this->reset(); // Step 1 - Reset and Prepare the Device
    1b64:	0e 94 9a 05 	call	0xb34	; 0xb34 <SI4844::reset() [clone .constprop.12]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:216

    // Step 2: Obtain Device Status
    //      3. The system controller sends the  ATDD_GET_STATUS  command to retrieve the ATDD device status.    
    this->getStatus();
    1b68:	0e 94 bb 05 	call	0xb76	; 0xb76 <SI4844::getStatus() [clone .constprop.10]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:217
    if ( device_status.refined.BCFG0 != 0) {
    1b6c:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <rx>
    1b70:	80 ff       	sbrs	r24, 0
    1b72:	03 c0       	rjmp	.+6      	; 0x1b7a <main+0xe4>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:218
        system_error = 51;  // The hardware is configured to "MCU detects the band" and you are trying "ATDD device detects the band"
    1b74:	83 e3       	ldi	r24, 0x33	; 51
    1b76:	80 93 a3 03 	sts	0x03A3, r24	; 0x8003a3 <rx+0x19>
powerUp():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:408
 * @details Moves the SI4844 device from power down to power up 
 * @see Si48XX ATDD PROGRAMMING GUIDE; AN610; page 45
 */
void SI4844::powerUp(void)
{
    data_from_device = false;    
    1b7a:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <_ZL16data_from_device.lto_priv.55>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:410

    this->currentBand = 0;
    1b7e:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <rx+0x12>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:414

    si4844_arg_band_index rxBandSetup; 

    rxBandSetup.refined.XOSCEN = this->xoscen;
    1b82:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <rx+0x13>
    1b86:	c0 e0       	ldi	r28, 0x00	; 0
    1b88:	80 fb       	bst	r24, 0
    1b8a:	c7 f9       	bld	r28, 7
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:415
    rxBandSetup.refined.XOWAIT = this->xowait;
    1b8c:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <rx+0x14>
    1b90:	80 fb       	bst	r24, 0
    1b92:	c6 f9       	bld	r28, 6
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:416
    rxBandSetup.refined.BANDIDX = this->currentBand;
    1b94:	c0 7c       	andi	r28, 0xC0	; 192
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:418

    waitToSend();
    1b96:	0e 94 af 06 	call	0xd5e	; 0xd5e <SI4844::waitToSend() [clone .constprop.20]>
beginTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:196
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <TwoWire::transmitting>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:198
  // set address of targeted slave
  txAddress = address;
    1ba0:	81 e1       	ldi	r24, 0x11	; 17
    1ba2:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <TwoWire::txAddress>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:200
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    1ba6:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <TwoWire::txBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:201
  txBufferLength = 0;
    1baa:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <TwoWire::txBufferLength>
powerUp():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:421

    Wire.beginTransmission(SI4844_ADDRESS);
    Wire.write(ATDD_POWER_UP);
    1bae:	81 ee       	ldi	r24, 0xE1	; 225
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	0e 94 8d 05 	call	0xb1a	; 0xb1a <TwoWire::write(int) [clone .constprop.30]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:422
    Wire.write(rxBandSetup.raw);
    1bb6:	6c 2f       	mov	r22, r28
    1bb8:	8a e7       	ldi	r24, 0x7A	; 122
    1bba:	93 e0       	ldi	r25, 0x03	; 3
    1bbc:	0e 94 5e 05 	call	0xabc	; 0xabc <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:423
    Wire.endTransmission();
    1bc0:	0e 94 2d 01 	call	0x25a	; 0x25a <TwoWire::endTransmission() [clone .constprop.31]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:425

    delayMicroseconds(2500);
    1bc4:	84 ec       	ldi	r24, 0xC4	; 196
    1bc6:	99 e0       	ldi	r25, 0x09	; 9
    1bc8:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <delayMicroseconds>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:426
    this->waitInterrupt();
    1bcc:	0e 94 95 05 	call	0xb2a	; 0xb2a <SI4844::waitInterrupt() [clone .isra.2]>
setupSlideSwitch():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:230
    this->powerUp();

    // Step 5 and Step 6: Retrieve Updated Status and  real Frequency Detection
    // 6. The system controller sends the  ATDD_GET_STATUS  command to obtain the latest status.
    do { 
        delay(1);
    1bd0:	61 e0       	ldi	r22, 0x01	; 1
    1bd2:	70 e0       	ldi	r23, 0x00	; 0
    1bd4:	80 e0       	ldi	r24, 0x00	; 0
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	0e 94 12 03 	call	0x624	; 0x624 <delay>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:231
        this->getStatus();
    1bdc:	0e 94 bb 05 	call	0xb76	; 0xb76 <SI4844::getStatus() [clone .constprop.10]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:232
    } while (device_status.refined.INFORDY == 0);   
    1be0:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <rx>
    1be4:	84 ff       	sbrs	r24, 4
    1be6:	f4 cf       	rjmp	.-24     	; 0x1bd0 <main+0x13a>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:236


    // Step 6: Set to the real band selected by the user via Slide Switch; Frequency Detection; etc
    this->setBandSlideSwitch();
    1be8:	0e 94 12 07 	call	0xe24	; 0xe24 <SI4844::setBandSlideSwitch() [clone .constprop.11]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:238

    this->setVolume(this->volume);
    1bec:	80 91 b8 03 	lds	r24, 0x03B8	; 0x8003b8 <rx+0x2e>
setVolume():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:824
 * @see Table 4, Si48XX ATDD PROGRAMMING GUIDE; AN610; page 11
 * @param byte volumeLevel (domain: 0 to 63) 
 */
void SI4844::setVolume(byte volumeLavel)
{
    if (volumeLavel > 63)
    1bf0:	80 34       	cpi	r24, 0x40	; 64
    1bf2:	10 f4       	brcc	.+4      	; 0x1bf8 <main+0x162>
    1bf4:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <SI4844::setVolume(unsigned char) [clone .part.5] [clone .constprop.18]>
    1bf8:	8a e3       	ldi	r24, 0x3A	; 58
    1bfa:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <SI4844::setVolume(unsigned char) [clone .part.5] [clone .constprop.18]>
setup():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:108
  // rx.setCrystalOscillatorStabilizationWaitTime(1);
  rx.setupSlideSwitch(RESET_PIN, INTERRUPT_PIN);

  // You must calibrate the default volume
  rx.setVolume(58);
  delay(100);
    1bfe:	64 e6       	ldi	r22, 0x64	; 100
    1c00:	70 e0       	ldi	r23, 0x00	; 0
    1c02:	80 e0       	ldi	r24, 0x00	; 0
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	0e 94 12 03 	call	0x624	; 0x624 <delay>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:110
    
  showStatus();
    1c0a:	0e 94 aa 08 	call	0x1154	; 0x1154 <showStatus()>
serialEventRun():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1c0e:	c0 e0       	ldi	r28, 0x00	; 0
    1c10:	d0 e0       	ldi	r29, 0x00	; 0
loop():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:176
void loop() {

  if (rx.hasStatusChanged()) {
    if (rx.hasBandChanged()) {
      oldFrequency = 0;
      oldStationIndicator = 99;
    1c12:	13 e6       	ldi	r17, 0x63	; 99
hasStatusChanged():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1194
 *
 *  @return true or false  
 */
bool SI4844::hasStatusChanged(void)
{
    return data_from_device;
    1c14:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <_ZL16data_from_device.lto_priv.55>
loop():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:173
/**
 * Main loop
 */
void loop() {

  if (rx.hasStatusChanged()) {
    1c18:	88 23       	and	r24, r24
    1c1a:	c9 f0       	breq	.+50     	; 0x1c4e <main+0x1b8>
hasBandChanged():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1205
 * @details When the Slide Switch is moved by the user, the system have to process it
 *
 *  @return True if the user moved the Slide Switch
 */
bool SI4844::hasBandChanged(void) {
    this->getAllReceiverInfo();
    1c1c:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <SI4844::getAllReceiverInfo() [clone .constprop.26]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1206
    return ( all_receiver_status.refined.BANDIDX != this->currentBand);
    1c20:	20 91 8c 03 	lds	r18, 0x038C	; 0x80038c <rx+0x2>
    1c24:	2f 73       	andi	r18, 0x3F	; 63
    1c26:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <rx+0x12>
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
loop():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:174
    if (rx.hasBandChanged()) {
    1c2c:	28 17       	cp	r18, r24
    1c2e:	19 06       	cpc	r1, r25
    1c30:	61 f0       	breq	.+24     	; 0x1c4a <main+0x1b4>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:175
      oldFrequency = 0;
    1c32:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <oldFrequency>
    1c36:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <oldFrequency+0x1>
    1c3a:	10 92 86 02 	sts	0x0286, r1	; 0x800286 <oldFrequency+0x2>
    1c3e:	10 92 87 02 	sts	0x0287, r1	; 0x800287 <oldFrequency+0x3>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:176
      oldStationIndicator = 99;
    1c42:	10 93 04 01 	sts	0x0104, r17	; 0x800104 <oldStationIndicator>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:177
      rx.setBandSlideSwitch();
    1c46:	0e 94 12 07 	call	0xe24	; 0xe24 <SI4844::setBandSlideSwitch() [clone .constprop.11]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:180
    }

    showStatus();  
    1c4a:	0e 94 aa 08 	call	0x1154	; 0x1154 <showStatus()>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:183
  }

  delay(50);
    1c4e:	62 e3       	ldi	r22, 0x32	; 50
    1c50:	70 e0       	ldi	r23, 0x00	; 0
    1c52:	80 e0       	ldi	r24, 0x00	; 0
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	0e 94 12 03 	call	0x624	; 0x624 <delay>
serialEventRun():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:67
    1c5a:	20 97       	sbiw	r28, 0x00	; 0
    1c5c:	d9 f2       	breq	.-74     	; 0x1c14 <main+0x17e>
    1c5e:	0e 94 51 02 	call	0x4a2	; 0x4a2 <Serial0_available()>
    1c62:	88 23       	and	r24, r24
    1c64:	b9 f2       	breq	.-82     	; 0x1c14 <main+0x17e>
    1c66:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1c6a:	d4 cf       	rjmp	.-88     	; 0x1c14 <main+0x17e>

00001c6c <_GLOBAL__sub_D_elapsedButton>:
_GLOBAL__sub_D_elapsedButton():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:184
}
    1c6c:	cf 93       	push	r28
    1c6e:	df 93       	push	r29
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:83

/*
   Pre-defined Band Table - See the SI48XX ATDD - PROGRAMMING GUIDE page 17.
*/

String tabBand[] = { "FM01", "FM02", "FM03", "FM04", "FM05", "FM06", "FM07", "FM08", "FM09", "FM10", "FM11", "FM12", "FM13", "FM14", "FM15", "FM16", "FM17", "FM18", "FM19", "FM20",
    1c70:	c8 ec       	ldi	r28, 0xC8	; 200
    1c72:	d4 e0       	ldi	r29, 0x04	; 4
__static_initialization_and_destruction_0():
    1c74:	26 97       	sbiw	r28, 0x06	; 6
    1c76:	ce 01       	movw	r24, r28
    1c78:	0e 94 08 08 	call	0x1010	; 0x1010 <String::~String()>
    1c7c:	83 e0       	ldi	r24, 0x03	; 3
    1c7e:	c2 3d       	cpi	r28, 0xD2	; 210
    1c80:	d8 07       	cpc	r29, r24
    1c82:	c1 f7       	brne	.-16     	; 0x1c74 <_GLOBAL__sub_D_elapsedButton+0x8>
_GLOBAL__sub_D_elapsedButton():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH/SI4844_02_LCD16x2_SLIDE_SWITCH.ino:184

    showStatus();  
  }

  delay(50);
}
    1c84:	df 91       	pop	r29
    1c86:	cf 91       	pop	r28
    1c88:	08 95       	ret

00001c8a <__muluhisi3>:
__muluhisi3():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    1c8a:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <__umulhisi3>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    1c8e:	a5 9f       	mul	r26, r21
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    1c90:	90 0d       	add	r25, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    1c92:	b4 9f       	mul	r27, r20
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    1c94:	90 0d       	add	r25, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    1c96:	a4 9f       	mul	r26, r20
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    1c98:	80 0d       	add	r24, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    1c9a:	91 1d       	adc	r25, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    1c9c:	11 24       	eor	r1, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    1c9e:	08 95       	ret

00001ca0 <__prologue_saves__>:
__prologue_saves__():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2169
    1ca0:	2f 92       	push	r2
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2170
    1ca2:	3f 92       	push	r3
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2171
    1ca4:	4f 92       	push	r4
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2172
    1ca6:	5f 92       	push	r5
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2173
    1ca8:	6f 92       	push	r6
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2174
    1caa:	7f 92       	push	r7
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2175
    1cac:	8f 92       	push	r8
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2176
    1cae:	9f 92       	push	r9
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2177
    1cb0:	af 92       	push	r10
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2178
    1cb2:	bf 92       	push	r11
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2179
    1cb4:	cf 92       	push	r12
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2180
    1cb6:	df 92       	push	r13
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2181
    1cb8:	ef 92       	push	r14
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2182
    1cba:	ff 92       	push	r15
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2183
    1cbc:	0f 93       	push	r16
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2184
    1cbe:	1f 93       	push	r17
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2185
    1cc0:	cf 93       	push	r28
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2186
    1cc2:	df 93       	push	r29
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2200
    1cc4:	cd b7       	in	r28, 0x3d	; 61
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2201
    1cc6:	de b7       	in	r29, 0x3e	; 62
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2202
    1cc8:	ca 1b       	sub	r28, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2203
    1cca:	db 0b       	sbc	r29, r27
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2204
    1ccc:	0f b6       	in	r0, 0x3f	; 63
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2205
    1cce:	f8 94       	cli
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2206
    1cd0:	de bf       	out	0x3e, r29	; 62
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2207
    1cd2:	0f be       	out	0x3f, r0	; 63
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2208
    1cd4:	cd bf       	out	0x3d, r28	; 61
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2211
    1cd6:	09 94       	ijmp

00001cd8 <__epilogue_restores__>:
__epilogue_restores__():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2222
    1cd8:	2a 88       	ldd	r2, Y+18	; 0x12
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2223
    1cda:	39 88       	ldd	r3, Y+17	; 0x11
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2224
    1cdc:	48 88       	ldd	r4, Y+16	; 0x10
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2225
    1cde:	5f 84       	ldd	r5, Y+15	; 0x0f
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2226
    1ce0:	6e 84       	ldd	r6, Y+14	; 0x0e
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2227
    1ce2:	7d 84       	ldd	r7, Y+13	; 0x0d
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2228
    1ce4:	8c 84       	ldd	r8, Y+12	; 0x0c
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2229
    1ce6:	9b 84       	ldd	r9, Y+11	; 0x0b
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2230
    1ce8:	aa 84       	ldd	r10, Y+10	; 0x0a
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2231
    1cea:	b9 84       	ldd	r11, Y+9	; 0x09
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2232
    1cec:	c8 84       	ldd	r12, Y+8	; 0x08
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2233
    1cee:	df 80       	ldd	r13, Y+7	; 0x07
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2234
    1cf0:	ee 80       	ldd	r14, Y+6	; 0x06
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2235
    1cf2:	fd 80       	ldd	r15, Y+5	; 0x05
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2236
    1cf4:	0c 81       	ldd	r16, Y+4	; 0x04
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2237
    1cf6:	1b 81       	ldd	r17, Y+3	; 0x03
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2238
    1cf8:	aa 81       	ldd	r26, Y+2	; 0x02
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2252
    1cfa:	b9 81       	ldd	r27, Y+1	; 0x01
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2253
    1cfc:	ce 0f       	add	r28, r30
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2254
    1cfe:	d1 1d       	adc	r29, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2255
    1d00:	0f b6       	in	r0, 0x3f	; 63
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2256
    1d02:	f8 94       	cli
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2257
    1d04:	de bf       	out	0x3e, r29	; 62
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2258
    1d06:	0f be       	out	0x3f, r0	; 63
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2259
    1d08:	cd bf       	out	0x3d, r28	; 61
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2260
    1d0a:	ed 01       	movw	r28, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2263
    1d0c:	08 95       	ret

00001d0e <__umulhisi3>:
__umulhisi3():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    1d0e:	a2 9f       	mul	r26, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    1d10:	b0 01       	movw	r22, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    1d12:	b3 9f       	mul	r27, r19
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    1d14:	c0 01       	movw	r24, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    1d16:	a3 9f       	mul	r26, r19
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    1d18:	70 0d       	add	r23, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    1d1a:	81 1d       	adc	r24, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    1d1c:	11 24       	eor	r1, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    1d1e:	91 1d       	adc	r25, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    1d20:	b2 9f       	mul	r27, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    1d22:	70 0d       	add	r23, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    1d24:	81 1d       	adc	r24, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    1d26:	11 24       	eor	r1, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    1d28:	91 1d       	adc	r25, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    1d2a:	08 95       	ret

00001d2c <__udivmodsi4>:
__udivmodsi4():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    1d2c:	a1 e2       	ldi	r26, 0x21	; 33
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    1d2e:	1a 2e       	mov	r1, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    1d30:	aa 1b       	sub	r26, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    1d32:	bb 1b       	sub	r27, r27
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    1d34:	fd 01       	movw	r30, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    1d36:	0d c0       	rjmp	.+26     	; 0x1d52 <__udivmodsi4_ep>

00001d38 <__udivmodsi4_loop>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    1d38:	aa 1f       	adc	r26, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    1d3a:	bb 1f       	adc	r27, r27
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    1d3c:	ee 1f       	adc	r30, r30
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    1d3e:	ff 1f       	adc	r31, r31
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    1d40:	a2 17       	cp	r26, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    1d42:	b3 07       	cpc	r27, r19
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    1d44:	e4 07       	cpc	r30, r20
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    1d46:	f5 07       	cpc	r31, r21
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    1d48:	20 f0       	brcs	.+8      	; 0x1d52 <__udivmodsi4_ep>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    1d4a:	a2 1b       	sub	r26, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    1d4c:	b3 0b       	sbc	r27, r19
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    1d4e:	e4 0b       	sbc	r30, r20
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    1d50:	f5 0b       	sbc	r31, r21

00001d52 <__udivmodsi4_ep>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    1d52:	66 1f       	adc	r22, r22
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    1d54:	77 1f       	adc	r23, r23
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    1d56:	88 1f       	adc	r24, r24
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    1d58:	99 1f       	adc	r25, r25
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    1d5a:	1a 94       	dec	r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    1d5c:	69 f7       	brne	.-38     	; 0x1d38 <__udivmodsi4_loop>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    1d5e:	60 95       	com	r22
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    1d60:	70 95       	com	r23
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    1d62:	80 95       	com	r24
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    1d64:	90 95       	com	r25
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    1d66:	9b 01       	movw	r18, r22
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    1d68:	ac 01       	movw	r20, r24
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    1d6a:	bd 01       	movw	r22, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    1d6c:	cf 01       	movw	r24, r30
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    1d6e:	08 95       	ret

00001d70 <__mulshisi3>:
__mulshisi3():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:603
    1d70:	b7 ff       	sbrs	r27, 7
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:605
    1d72:	0c 94 45 0e 	jmp	0x1c8a	; 0x1c8a <__muluhisi3>

00001d76 <__mulohisi3>:
__mulohisi3():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:613
    1d76:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <__muluhisi3>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:615
    1d7a:	82 1b       	sub	r24, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:616
    1d7c:	93 0b       	sbc	r25, r19
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:617
    1d7e:	08 95       	ret

00001d80 <__tablejump2__>:
__tablejump2__():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    1d80:	ee 0f       	add	r30, r30
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    1d82:	ff 1f       	adc	r31, r31
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    1d84:	05 90       	lpm	r0, Z+
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    1d86:	f4 91       	lpm	r31, Z
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    1d88:	e0 2d       	mov	r30, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    1d8a:	09 94       	ijmp

00001d8c <malloc>:
malloc():
    1d8c:	0f 93       	push	r16
    1d8e:	1f 93       	push	r17
    1d90:	cf 93       	push	r28
    1d92:	df 93       	push	r29
    1d94:	82 30       	cpi	r24, 0x02	; 2
    1d96:	91 05       	cpc	r25, r1
    1d98:	10 f4       	brcc	.+4      	; 0x1d9e <malloc+0x12>
    1d9a:	82 e0       	ldi	r24, 0x02	; 2
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	e0 91 ca 04 	lds	r30, 0x04CA	; 0x8004ca <__flp>
    1da2:	f0 91 cb 04 	lds	r31, 0x04CB	; 0x8004cb <__flp+0x1>
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	20 e0       	ldi	r18, 0x00	; 0
    1daa:	b0 e0       	ldi	r27, 0x00	; 0
    1dac:	a0 e0       	ldi	r26, 0x00	; 0
    1dae:	30 97       	sbiw	r30, 0x00	; 0
    1db0:	99 f4       	brne	.+38     	; 0x1dd8 <malloc+0x4c>
    1db2:	21 15       	cp	r18, r1
    1db4:	31 05       	cpc	r19, r1
    1db6:	09 f4       	brne	.+2      	; 0x1dba <malloc+0x2e>
    1db8:	4a c0       	rjmp	.+148    	; 0x1e4e <malloc+0xc2>
    1dba:	28 1b       	sub	r18, r24
    1dbc:	39 0b       	sbc	r19, r25
    1dbe:	24 30       	cpi	r18, 0x04	; 4
    1dc0:	31 05       	cpc	r19, r1
    1dc2:	d8 f5       	brcc	.+118    	; 0x1e3a <malloc+0xae>
    1dc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc6:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc8:	61 15       	cp	r22, r1
    1dca:	71 05       	cpc	r23, r1
    1dcc:	89 f1       	breq	.+98     	; 0x1e30 <malloc+0xa4>
    1dce:	fb 01       	movw	r30, r22
    1dd0:	93 83       	std	Z+3, r25	; 0x03
    1dd2:	82 83       	std	Z+2, r24	; 0x02
    1dd4:	fe 01       	movw	r30, r28
    1dd6:	11 c0       	rjmp	.+34     	; 0x1dfa <malloc+0x6e>
    1dd8:	40 81       	ld	r20, Z
    1dda:	51 81       	ldd	r21, Z+1	; 0x01
    1ddc:	02 81       	ldd	r16, Z+2	; 0x02
    1dde:	13 81       	ldd	r17, Z+3	; 0x03
    1de0:	48 17       	cp	r20, r24
    1de2:	59 07       	cpc	r21, r25
    1de4:	e0 f0       	brcs	.+56     	; 0x1e1e <malloc+0x92>
    1de6:	48 17       	cp	r20, r24
    1de8:	59 07       	cpc	r21, r25
    1dea:	99 f4       	brne	.+38     	; 0x1e12 <malloc+0x86>
    1dec:	10 97       	sbiw	r26, 0x00	; 0
    1dee:	61 f0       	breq	.+24     	; 0x1e08 <malloc+0x7c>
    1df0:	12 96       	adiw	r26, 0x02	; 2
    1df2:	0c 93       	st	X, r16
    1df4:	12 97       	sbiw	r26, 0x02	; 2
    1df6:	13 96       	adiw	r26, 0x03	; 3
    1df8:	1c 93       	st	X, r17
    1dfa:	32 96       	adiw	r30, 0x02	; 2
    1dfc:	cf 01       	movw	r24, r30
    1dfe:	df 91       	pop	r29
    1e00:	cf 91       	pop	r28
    1e02:	1f 91       	pop	r17
    1e04:	0f 91       	pop	r16
    1e06:	08 95       	ret
    1e08:	00 93 ca 04 	sts	0x04CA, r16	; 0x8004ca <__flp>
    1e0c:	10 93 cb 04 	sts	0x04CB, r17	; 0x8004cb <__flp+0x1>
    1e10:	f4 cf       	rjmp	.-24     	; 0x1dfa <malloc+0x6e>
    1e12:	21 15       	cp	r18, r1
    1e14:	31 05       	cpc	r19, r1
    1e16:	51 f0       	breq	.+20     	; 0x1e2c <malloc+0xa0>
    1e18:	42 17       	cp	r20, r18
    1e1a:	53 07       	cpc	r21, r19
    1e1c:	38 f0       	brcs	.+14     	; 0x1e2c <malloc+0xa0>
    1e1e:	a9 01       	movw	r20, r18
    1e20:	db 01       	movw	r26, r22
    1e22:	9a 01       	movw	r18, r20
    1e24:	bd 01       	movw	r22, r26
    1e26:	df 01       	movw	r26, r30
    1e28:	f8 01       	movw	r30, r16
    1e2a:	c1 cf       	rjmp	.-126    	; 0x1dae <malloc+0x22>
    1e2c:	ef 01       	movw	r28, r30
    1e2e:	f9 cf       	rjmp	.-14     	; 0x1e22 <malloc+0x96>
    1e30:	90 93 cb 04 	sts	0x04CB, r25	; 0x8004cb <__flp+0x1>
    1e34:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__flp>
    1e38:	cd cf       	rjmp	.-102    	; 0x1dd4 <malloc+0x48>
    1e3a:	fe 01       	movw	r30, r28
    1e3c:	e2 0f       	add	r30, r18
    1e3e:	f3 1f       	adc	r31, r19
    1e40:	81 93       	st	Z+, r24
    1e42:	91 93       	st	Z+, r25
    1e44:	22 50       	subi	r18, 0x02	; 2
    1e46:	31 09       	sbc	r19, r1
    1e48:	39 83       	std	Y+1, r19	; 0x01
    1e4a:	28 83       	st	Y, r18
    1e4c:	d7 cf       	rjmp	.-82     	; 0x1dfc <malloc+0x70>
    1e4e:	20 91 c8 04 	lds	r18, 0x04C8	; 0x8004c8 <__brkval>
    1e52:	30 91 c9 04 	lds	r19, 0x04C9	; 0x8004c9 <__brkval+0x1>
    1e56:	23 2b       	or	r18, r19
    1e58:	41 f4       	brne	.+16     	; 0x1e6a <malloc+0xde>
    1e5a:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <__malloc_heap_start>
    1e5e:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <__malloc_heap_start+0x1>
    1e62:	30 93 c9 04 	sts	0x04C9, r19	; 0x8004c9 <__brkval+0x1>
    1e66:	20 93 c8 04 	sts	0x04C8, r18	; 0x8004c8 <__brkval>
    1e6a:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <__malloc_heap_end>
    1e6e:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <__malloc_heap_end+0x1>
    1e72:	21 15       	cp	r18, r1
    1e74:	31 05       	cpc	r19, r1
    1e76:	41 f4       	brne	.+16     	; 0x1e88 <malloc+0xfc>
    1e78:	2d b7       	in	r18, 0x3d	; 61
    1e7a:	3e b7       	in	r19, 0x3e	; 62
    1e7c:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <__malloc_margin>
    1e80:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <__malloc_margin+0x1>
    1e84:	24 1b       	sub	r18, r20
    1e86:	35 0b       	sbc	r19, r21
    1e88:	e0 91 c8 04 	lds	r30, 0x04C8	; 0x8004c8 <__brkval>
    1e8c:	f0 91 c9 04 	lds	r31, 0x04C9	; 0x8004c9 <__brkval+0x1>
    1e90:	e2 17       	cp	r30, r18
    1e92:	f3 07       	cpc	r31, r19
    1e94:	a0 f4       	brcc	.+40     	; 0x1ebe <malloc+0x132>
    1e96:	2e 1b       	sub	r18, r30
    1e98:	3f 0b       	sbc	r19, r31
    1e9a:	28 17       	cp	r18, r24
    1e9c:	39 07       	cpc	r19, r25
    1e9e:	78 f0       	brcs	.+30     	; 0x1ebe <malloc+0x132>
    1ea0:	ac 01       	movw	r20, r24
    1ea2:	4e 5f       	subi	r20, 0xFE	; 254
    1ea4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ea6:	24 17       	cp	r18, r20
    1ea8:	35 07       	cpc	r19, r21
    1eaa:	48 f0       	brcs	.+18     	; 0x1ebe <malloc+0x132>
    1eac:	4e 0f       	add	r20, r30
    1eae:	5f 1f       	adc	r21, r31
    1eb0:	50 93 c9 04 	sts	0x04C9, r21	; 0x8004c9 <__brkval+0x1>
    1eb4:	40 93 c8 04 	sts	0x04C8, r20	; 0x8004c8 <__brkval>
    1eb8:	81 93       	st	Z+, r24
    1eba:	91 93       	st	Z+, r25
    1ebc:	9f cf       	rjmp	.-194    	; 0x1dfc <malloc+0x70>
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	e0 e0       	ldi	r30, 0x00	; 0
    1ec2:	9c cf       	rjmp	.-200    	; 0x1dfc <malloc+0x70>

00001ec4 <free>:
free():
    1ec4:	cf 93       	push	r28
    1ec6:	df 93       	push	r29
    1ec8:	00 97       	sbiw	r24, 0x00	; 0
    1eca:	e9 f0       	breq	.+58     	; 0x1f06 <free+0x42>
    1ecc:	fc 01       	movw	r30, r24
    1ece:	32 97       	sbiw	r30, 0x02	; 2
    1ed0:	13 82       	std	Z+3, r1	; 0x03
    1ed2:	12 82       	std	Z+2, r1	; 0x02
    1ed4:	a0 91 ca 04 	lds	r26, 0x04CA	; 0x8004ca <__flp>
    1ed8:	b0 91 cb 04 	lds	r27, 0x04CB	; 0x8004cb <__flp+0x1>
    1edc:	ed 01       	movw	r28, r26
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	10 97       	sbiw	r26, 0x00	; 0
    1ee4:	a1 f4       	brne	.+40     	; 0x1f0e <free+0x4a>
    1ee6:	20 81       	ld	r18, Z
    1ee8:	31 81       	ldd	r19, Z+1	; 0x01
    1eea:	82 0f       	add	r24, r18
    1eec:	93 1f       	adc	r25, r19
    1eee:	20 91 c8 04 	lds	r18, 0x04C8	; 0x8004c8 <__brkval>
    1ef2:	30 91 c9 04 	lds	r19, 0x04C9	; 0x8004c9 <__brkval+0x1>
    1ef6:	28 17       	cp	r18, r24
    1ef8:	39 07       	cpc	r19, r25
    1efa:	09 f0       	breq	.+2      	; 0x1efe <free+0x3a>
    1efc:	61 c0       	rjmp	.+194    	; 0x1fc0 <free+0xfc>
    1efe:	f0 93 c9 04 	sts	0x04C9, r31	; 0x8004c9 <__brkval+0x1>
    1f02:	e0 93 c8 04 	sts	0x04C8, r30	; 0x8004c8 <__brkval>
    1f06:	df 91       	pop	r29
    1f08:	cf 91       	pop	r28
    1f0a:	08 95       	ret
    1f0c:	ea 01       	movw	r28, r20
    1f0e:	ce 17       	cp	r28, r30
    1f10:	df 07       	cpc	r29, r31
    1f12:	e8 f5       	brcc	.+122    	; 0x1f8e <free+0xca>
    1f14:	4a 81       	ldd	r20, Y+2	; 0x02
    1f16:	5b 81       	ldd	r21, Y+3	; 0x03
    1f18:	9e 01       	movw	r18, r28
    1f1a:	41 15       	cp	r20, r1
    1f1c:	51 05       	cpc	r21, r1
    1f1e:	b1 f7       	brne	.-20     	; 0x1f0c <free+0x48>
    1f20:	e9 01       	movw	r28, r18
    1f22:	fb 83       	std	Y+3, r31	; 0x03
    1f24:	ea 83       	std	Y+2, r30	; 0x02
    1f26:	49 91       	ld	r20, Y+
    1f28:	59 91       	ld	r21, Y+
    1f2a:	c4 0f       	add	r28, r20
    1f2c:	d5 1f       	adc	r29, r21
    1f2e:	ec 17       	cp	r30, r28
    1f30:	fd 07       	cpc	r31, r29
    1f32:	61 f4       	brne	.+24     	; 0x1f4c <free+0x88>
    1f34:	80 81       	ld	r24, Z
    1f36:	91 81       	ldd	r25, Z+1	; 0x01
    1f38:	02 96       	adiw	r24, 0x02	; 2
    1f3a:	84 0f       	add	r24, r20
    1f3c:	95 1f       	adc	r25, r21
    1f3e:	e9 01       	movw	r28, r18
    1f40:	99 83       	std	Y+1, r25	; 0x01
    1f42:	88 83       	st	Y, r24
    1f44:	82 81       	ldd	r24, Z+2	; 0x02
    1f46:	93 81       	ldd	r25, Z+3	; 0x03
    1f48:	9b 83       	std	Y+3, r25	; 0x03
    1f4a:	8a 83       	std	Y+2, r24	; 0x02
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	e0 e0       	ldi	r30, 0x00	; 0
    1f50:	12 96       	adiw	r26, 0x02	; 2
    1f52:	8d 91       	ld	r24, X+
    1f54:	9c 91       	ld	r25, X
    1f56:	13 97       	sbiw	r26, 0x03	; 3
    1f58:	00 97       	sbiw	r24, 0x00	; 0
    1f5a:	b9 f5       	brne	.+110    	; 0x1fca <free+0x106>
    1f5c:	2d 91       	ld	r18, X+
    1f5e:	3c 91       	ld	r19, X
    1f60:	11 97       	sbiw	r26, 0x01	; 1
    1f62:	cd 01       	movw	r24, r26
    1f64:	02 96       	adiw	r24, 0x02	; 2
    1f66:	82 0f       	add	r24, r18
    1f68:	93 1f       	adc	r25, r19
    1f6a:	20 91 c8 04 	lds	r18, 0x04C8	; 0x8004c8 <__brkval>
    1f6e:	30 91 c9 04 	lds	r19, 0x04C9	; 0x8004c9 <__brkval+0x1>
    1f72:	28 17       	cp	r18, r24
    1f74:	39 07       	cpc	r19, r25
    1f76:	39 f6       	brne	.-114    	; 0x1f06 <free+0x42>
    1f78:	30 97       	sbiw	r30, 0x00	; 0
    1f7a:	51 f5       	brne	.+84     	; 0x1fd0 <free+0x10c>
    1f7c:	10 92 cb 04 	sts	0x04CB, r1	; 0x8004cb <__flp+0x1>
    1f80:	10 92 ca 04 	sts	0x04CA, r1	; 0x8004ca <__flp>
    1f84:	b0 93 c9 04 	sts	0x04C9, r27	; 0x8004c9 <__brkval+0x1>
    1f88:	a0 93 c8 04 	sts	0x04C8, r26	; 0x8004c8 <__brkval>
    1f8c:	bc cf       	rjmp	.-136    	; 0x1f06 <free+0x42>
    1f8e:	d3 83       	std	Z+3, r29	; 0x03
    1f90:	c2 83       	std	Z+2, r28	; 0x02
    1f92:	40 81       	ld	r20, Z
    1f94:	51 81       	ldd	r21, Z+1	; 0x01
    1f96:	84 0f       	add	r24, r20
    1f98:	95 1f       	adc	r25, r21
    1f9a:	c8 17       	cp	r28, r24
    1f9c:	d9 07       	cpc	r29, r25
    1f9e:	61 f4       	brne	.+24     	; 0x1fb8 <free+0xf4>
    1fa0:	4e 5f       	subi	r20, 0xFE	; 254
    1fa2:	5f 4f       	sbci	r21, 0xFF	; 255
    1fa4:	88 81       	ld	r24, Y
    1fa6:	99 81       	ldd	r25, Y+1	; 0x01
    1fa8:	48 0f       	add	r20, r24
    1faa:	59 1f       	adc	r21, r25
    1fac:	51 83       	std	Z+1, r21	; 0x01
    1fae:	40 83       	st	Z, r20
    1fb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb2:	9b 81       	ldd	r25, Y+3	; 0x03
    1fb4:	93 83       	std	Z+3, r25	; 0x03
    1fb6:	82 83       	std	Z+2, r24	; 0x02
    1fb8:	21 15       	cp	r18, r1
    1fba:	31 05       	cpc	r19, r1
    1fbc:	09 f0       	breq	.+2      	; 0x1fc0 <free+0xfc>
    1fbe:	b0 cf       	rjmp	.-160    	; 0x1f20 <free+0x5c>
    1fc0:	f0 93 cb 04 	sts	0x04CB, r31	; 0x8004cb <__flp+0x1>
    1fc4:	e0 93 ca 04 	sts	0x04CA, r30	; 0x8004ca <__flp>
    1fc8:	9e cf       	rjmp	.-196    	; 0x1f06 <free+0x42>
    1fca:	fd 01       	movw	r30, r26
    1fcc:	dc 01       	movw	r26, r24
    1fce:	c0 cf       	rjmp	.-128    	; 0x1f50 <free+0x8c>
    1fd0:	13 82       	std	Z+3, r1	; 0x03
    1fd2:	12 82       	std	Z+2, r1	; 0x02
    1fd4:	d7 cf       	rjmp	.-82     	; 0x1f84 <free+0xc0>

00001fd6 <realloc>:
realloc():
    1fd6:	b0 e0       	ldi	r27, 0x00	; 0
    1fd8:	a0 e0       	ldi	r26, 0x00	; 0
    1fda:	e1 ef       	ldi	r30, 0xF1	; 241
    1fdc:	ff e0       	ldi	r31, 0x0F	; 15
    1fde:	0c 94 52 0e 	jmp	0x1ca4	; 0x1ca4 <__prologue_saves__+0x4>
    1fe2:	8c 01       	movw	r16, r24
    1fe4:	00 97       	sbiw	r24, 0x00	; 0
    1fe6:	51 f4       	brne	.+20     	; 0x1ffc <realloc+0x26>
    1fe8:	cb 01       	movw	r24, r22
    1fea:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <malloc>
    1fee:	8c 01       	movw	r16, r24
    1ff0:	c8 01       	movw	r24, r16
    1ff2:	cd b7       	in	r28, 0x3d	; 61
    1ff4:	de b7       	in	r29, 0x3e	; 62
    1ff6:	e0 e1       	ldi	r30, 0x10	; 16
    1ff8:	0c 94 6e 0e 	jmp	0x1cdc	; 0x1cdc <__epilogue_restores__+0x4>
    1ffc:	fc 01       	movw	r30, r24
    1ffe:	e6 0f       	add	r30, r22
    2000:	f7 1f       	adc	r31, r23
    2002:	9c 01       	movw	r18, r24
    2004:	22 50       	subi	r18, 0x02	; 2
    2006:	31 09       	sbc	r19, r1
    2008:	e2 17       	cp	r30, r18
    200a:	f3 07       	cpc	r31, r19
    200c:	08 f4       	brcc	.+2      	; 0x2010 <realloc+0x3a>
    200e:	9d c0       	rjmp	.+314    	; 0x214a <realloc+0x174>
    2010:	d9 01       	movw	r26, r18
    2012:	cd 91       	ld	r28, X+
    2014:	dc 91       	ld	r29, X
    2016:	11 97       	sbiw	r26, 0x01	; 1
    2018:	c6 17       	cp	r28, r22
    201a:	d7 07       	cpc	r29, r23
    201c:	98 f0       	brcs	.+38     	; 0x2044 <realloc+0x6e>
    201e:	c5 30       	cpi	r28, 0x05	; 5
    2020:	d1 05       	cpc	r29, r1
    2022:	30 f3       	brcs	.-52     	; 0x1ff0 <realloc+0x1a>
    2024:	ce 01       	movw	r24, r28
    2026:	04 97       	sbiw	r24, 0x04	; 4
    2028:	86 17       	cp	r24, r22
    202a:	97 07       	cpc	r25, r23
    202c:	08 f3       	brcs	.-62     	; 0x1ff0 <realloc+0x1a>
    202e:	c6 1b       	sub	r28, r22
    2030:	d7 0b       	sbc	r29, r23
    2032:	22 97       	sbiw	r28, 0x02	; 2
    2034:	c1 93       	st	Z+, r28
    2036:	d1 93       	st	Z+, r29
    2038:	6d 93       	st	X+, r22
    203a:	7c 93       	st	X, r23
    203c:	cf 01       	movw	r24, r30
    203e:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <free>
    2042:	d6 cf       	rjmp	.-84     	; 0x1ff0 <realloc+0x1a>
    2044:	5b 01       	movw	r10, r22
    2046:	ac 1a       	sub	r10, r28
    2048:	bd 0a       	sbc	r11, r29
    204a:	4c 01       	movw	r8, r24
    204c:	8c 0e       	add	r8, r28
    204e:	9d 1e       	adc	r9, r29
    2050:	a0 91 ca 04 	lds	r26, 0x04CA	; 0x8004ca <__flp>
    2054:	b0 91 cb 04 	lds	r27, 0x04CB	; 0x8004cb <__flp+0x1>
    2058:	51 2c       	mov	r5, r1
    205a:	41 2c       	mov	r4, r1
    205c:	f1 2c       	mov	r15, r1
    205e:	e1 2c       	mov	r14, r1
    2060:	10 97       	sbiw	r26, 0x00	; 0
    2062:	31 f5       	brne	.+76     	; 0x20b0 <realloc+0xda>
    2064:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <__brkval>
    2068:	90 91 c9 04 	lds	r25, 0x04C9	; 0x8004c9 <__brkval+0x1>
    206c:	88 15       	cp	r24, r8
    206e:	99 05       	cpc	r25, r9
    2070:	09 f0       	breq	.+2      	; 0x2074 <realloc+0x9e>
    2072:	5c c0       	rjmp	.+184    	; 0x212c <realloc+0x156>
    2074:	46 16       	cp	r4, r22
    2076:	57 06       	cpc	r5, r23
    2078:	08 f0       	brcs	.+2      	; 0x207c <realloc+0xa6>
    207a:	58 c0       	rjmp	.+176    	; 0x212c <realloc+0x156>
    207c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__malloc_heap_end>
    2080:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <__malloc_heap_end+0x1>
    2084:	00 97       	sbiw	r24, 0x00	; 0
    2086:	41 f4       	brne	.+16     	; 0x2098 <realloc+0xc2>
    2088:	8d b7       	in	r24, 0x3d	; 61
    208a:	9e b7       	in	r25, 0x3e	; 62
    208c:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <__malloc_margin>
    2090:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <__malloc_margin+0x1>
    2094:	84 1b       	sub	r24, r20
    2096:	95 0b       	sbc	r25, r21
    2098:	e8 17       	cp	r30, r24
    209a:	f9 07       	cpc	r31, r25
    209c:	08 f0       	brcs	.+2      	; 0x20a0 <realloc+0xca>
    209e:	55 c0       	rjmp	.+170    	; 0x214a <realloc+0x174>
    20a0:	f0 93 c9 04 	sts	0x04C9, r31	; 0x8004c9 <__brkval+0x1>
    20a4:	e0 93 c8 04 	sts	0x04C8, r30	; 0x8004c8 <__brkval>
    20a8:	f9 01       	movw	r30, r18
    20aa:	71 83       	std	Z+1, r23	; 0x01
    20ac:	60 83       	st	Z, r22
    20ae:	a0 cf       	rjmp	.-192    	; 0x1ff0 <realloc+0x1a>
    20b0:	8d 91       	ld	r24, X+
    20b2:	9c 91       	ld	r25, X
    20b4:	11 97       	sbiw	r26, 0x01	; 1
    20b6:	12 96       	adiw	r26, 0x02	; 2
    20b8:	6c 90       	ld	r6, X
    20ba:	12 97       	sbiw	r26, 0x02	; 2
    20bc:	13 96       	adiw	r26, 0x03	; 3
    20be:	7c 90       	ld	r7, X
    20c0:	13 97       	sbiw	r26, 0x03	; 3
    20c2:	a8 15       	cp	r26, r8
    20c4:	b9 05       	cpc	r27, r9
    20c6:	59 f5       	brne	.+86     	; 0x211e <realloc+0x148>
    20c8:	6c 01       	movw	r12, r24
    20ca:	42 e0       	ldi	r20, 0x02	; 2
    20cc:	c4 0e       	add	r12, r20
    20ce:	d1 1c       	adc	r13, r1
    20d0:	ca 14       	cp	r12, r10
    20d2:	db 04       	cpc	r13, r11
    20d4:	20 f1       	brcs	.+72     	; 0x211e <realloc+0x148>
    20d6:	ac 01       	movw	r20, r24
    20d8:	4a 19       	sub	r20, r10
    20da:	5b 09       	sbc	r21, r11
    20dc:	da 01       	movw	r26, r20
    20de:	12 96       	adiw	r26, 0x02	; 2
    20e0:	15 97       	sbiw	r26, 0x05	; 5
    20e2:	80 f0       	brcs	.+32     	; 0x2104 <realloc+0x12e>
    20e4:	62 82       	std	Z+2, r6	; 0x02
    20e6:	73 82       	std	Z+3, r7	; 0x03
    20e8:	51 83       	std	Z+1, r21	; 0x01
    20ea:	40 83       	st	Z, r20
    20ec:	d9 01       	movw	r26, r18
    20ee:	6d 93       	st	X+, r22
    20f0:	7c 93       	st	X, r23
    20f2:	e1 14       	cp	r14, r1
    20f4:	f1 04       	cpc	r15, r1
    20f6:	71 f0       	breq	.+28     	; 0x2114 <realloc+0x13e>
    20f8:	d7 01       	movw	r26, r14
    20fa:	13 96       	adiw	r26, 0x03	; 3
    20fc:	fc 93       	st	X, r31
    20fe:	ee 93       	st	-X, r30
    2100:	12 97       	sbiw	r26, 0x02	; 2
    2102:	76 cf       	rjmp	.-276    	; 0x1ff0 <realloc+0x1a>
    2104:	22 96       	adiw	r28, 0x02	; 2
    2106:	8c 0f       	add	r24, r28
    2108:	9d 1f       	adc	r25, r29
    210a:	f9 01       	movw	r30, r18
    210c:	91 83       	std	Z+1, r25	; 0x01
    210e:	80 83       	st	Z, r24
    2110:	f3 01       	movw	r30, r6
    2112:	ef cf       	rjmp	.-34     	; 0x20f2 <realloc+0x11c>
    2114:	f0 93 cb 04 	sts	0x04CB, r31	; 0x8004cb <__flp+0x1>
    2118:	e0 93 ca 04 	sts	0x04CA, r30	; 0x8004ca <__flp>
    211c:	69 cf       	rjmp	.-302    	; 0x1ff0 <realloc+0x1a>
    211e:	48 16       	cp	r4, r24
    2120:	59 06       	cpc	r5, r25
    2122:	08 f4       	brcc	.+2      	; 0x2126 <realloc+0x150>
    2124:	2c 01       	movw	r4, r24
    2126:	7d 01       	movw	r14, r26
    2128:	d3 01       	movw	r26, r6
    212a:	9a cf       	rjmp	.-204    	; 0x2060 <realloc+0x8a>
    212c:	cb 01       	movw	r24, r22
    212e:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <malloc>
    2132:	7c 01       	movw	r14, r24
    2134:	00 97       	sbiw	r24, 0x00	; 0
    2136:	49 f0       	breq	.+18     	; 0x214a <realloc+0x174>
    2138:	ae 01       	movw	r20, r28
    213a:	b8 01       	movw	r22, r16
    213c:	0e 94 a8 10 	call	0x2150	; 0x2150 <memcpy>
    2140:	c8 01       	movw	r24, r16
    2142:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <free>
    2146:	87 01       	movw	r16, r14
    2148:	53 cf       	rjmp	.-346    	; 0x1ff0 <realloc+0x1a>
    214a:	10 e0       	ldi	r17, 0x00	; 0
    214c:	00 e0       	ldi	r16, 0x00	; 0
    214e:	50 cf       	rjmp	.-352    	; 0x1ff0 <realloc+0x1a>

00002150 <memcpy>:
memcpy():
    2150:	fb 01       	movw	r30, r22
    2152:	dc 01       	movw	r26, r24
    2154:	02 c0       	rjmp	.+4      	; 0x215a <memcpy+0xa>
    2156:	01 90       	ld	r0, Z+
    2158:	0d 92       	st	X+, r0
    215a:	41 50       	subi	r20, 0x01	; 1
    215c:	50 40       	sbci	r21, 0x00	; 0
    215e:	d8 f7       	brcc	.-10     	; 0x2156 <memcpy+0x6>
    2160:	08 95       	ret

00002162 <strcpy>:
strcpy():
    2162:	fb 01       	movw	r30, r22
    2164:	dc 01       	movw	r26, r24
    2166:	01 90       	ld	r0, Z+
    2168:	0d 92       	st	X+, r0
    216a:	00 20       	and	r0, r0
    216c:	e1 f7       	brne	.-8      	; 0x2166 <strcpy+0x4>
    216e:	08 95       	ret

00002170 <__do_global_dtors>:
__do_global_dtors():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    2170:	10 e0       	ldi	r17, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    2172:	c2 e6       	ldi	r28, 0x62	; 98
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    2174:	d0 e0       	ldi	r29, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    2176:	04 c0       	rjmp	.+8      	; 0x2180 <__do_global_dtors+0x10>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    2178:	fe 01       	movw	r30, r28
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    217a:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <__tablejump2__>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    217e:	21 96       	adiw	r28, 0x01	; 1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    2180:	c3 36       	cpi	r28, 0x63	; 99
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    2182:	d1 07       	cpc	r29, r17
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    2184:	c9 f7       	brne	.-14     	; 0x2178 <__do_global_dtors+0x8>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    2186:	f8 94       	cli

00002188 <__stop_program>:
__stop_program():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    2188:	ff cf       	rjmp	.-2      	; 0x2188 <__stop_program>

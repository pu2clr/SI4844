
/Users/rcaratti/Library/Caches/arduino/sketches/E04419EBCDB05788C5A4A74546F6A4A9/SI4844_01_OLED_SLIDE_SWITCH.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 21 09 	jmp	0x1242	; 0x1242 <__dtors_end>
       4:	0c 94 f1 1c 	jmp	0x39e2	; 0x39e2 <__vector_1>
       8:	0c 94 ca 1c 	jmp	0x3994	; 0x3994 <__vector_2>
       c:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      10:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      14:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      18:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      1c:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      20:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      24:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      28:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      2c:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      30:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      34:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      38:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      3c:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      40:	0c 94 80 1c 	jmp	0x3900	; 0x3900 <__vector_16>
      44:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      48:	0c 94 3e 1d 	jmp	0x3a7c	; 0x3a7c <__vector_18>
      4c:	0c 94 18 1d 	jmp	0x3a30	; 0x3a30 <__vector_19>
      50:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      54:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      58:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      5c:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      60:	0c 94 70 1d 	jmp	0x3ae0	; 0x3ae0 <__vector_24>
      64:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>

00000068 <__trampolines_end>:
__trampolines_start():
      68:	00 00       	nop
      6a:	01 01       	movw	r0, r2
      6c:	04 00       	.word	0x0004	; ????
      6e:	00 01       	movw	r0, r0
      70:	00 01       	movw	r0, r0
      72:	01 0e       	add	r0, r17
      74:	00 00       	nop
      76:	02 00       	.word	0x0002	; ????
      78:	06 0b       	sbc	r16, r22
      7a:	07 01       	movw	r0, r14
      7c:	f5 0b       	sbc	r31, r21
      7e:	00 06       	cpc	r0, r16
      80:	0b 07       	cpc	r16, r27
      82:	01 f5       	brne	.+64     	; 0xc4 <__trampolines_end+0x5c>
      84:	14 00       	.word	0x0014	; ????
      86:	06 0b       	sbc	r16, r22
      88:	07 01       	movw	r0, r14
      8a:	f5 1d       	adc	r31, r5
      8c:	00 06       	cpc	r0, r16
      8e:	0b 07       	cpc	r16, r27
      90:	01 f5       	brne	.+64     	; 0xd2 <__trampolines_end+0x6a>
      92:	26 00       	.word	0x0026	; ????
      94:	06 0b       	sbc	r16, r22
      96:	07 01       	movw	r0, r14
      98:	f5 2f       	mov	r31, r21
      9a:	00 06       	cpc	r0, r16
      9c:	0b 07       	cpc	r16, r27
      9e:	01 f5       	brne	.+64     	; 0xe0 <__trampolines_end+0x78>
      a0:	38 00       	.word	0x0038	; ????
      a2:	06 0b       	sbc	r16, r22
      a4:	07 01       	movw	r0, r14
      a6:	f5 41       	sbci	r31, 0x15	; 21
      a8:	00 06       	cpc	r0, r16
      aa:	0b 07       	cpc	r16, r27
      ac:	01 f5       	brne	.+64     	; 0xee <__trampolines_end+0x86>
      ae:	4a 00       	.word	0x004a	; ????
      b0:	06 0b       	sbc	r16, r22
      b2:	07 01       	movw	r0, r14
      b4:	f5 53       	subi	r31, 0x35	; 53
      b6:	00 06       	cpc	r0, r16
      b8:	0b 07       	cpc	r16, r27
      ba:	01 f5       	brne	.+64     	; 0xfc <__trampolines_end+0x94>
      bc:	5c 00       	.word	0x005c	; ????
      be:	06 0b       	sbc	r16, r22
      c0:	07 01       	movw	r0, r14
      c2:	f5 65       	ori	r31, 0x55	; 85
      c4:	00 0a       	sbc	r0, r16
      c6:	02 0e       	add	r0, r18
      c8:	02 f7       	brpl	.-64     	; 0x8a <__trampolines_end+0x22>
      ca:	68 00       	.word	0x0068	; ????
      cc:	03 02       	muls	r16, r19
      ce:	01 ff       	sbrs	r16, 1
      d0:	fe 69       	ori	r31, 0x9E	; 158
      d2:	00 06       	cpc	r0, r16
      d4:	0b 07       	cpc	r16, r27
      d6:	01 f5       	brne	.+64     	; 0x118 <__trampolines_end+0xb0>
      d8:	72 00       	.word	0x0072	; ????
      da:	0a 10       	cpse	r0, r10
      dc:	0e 02       	muls	r16, r30
      de:	f0 86       	std	Z+8, r15	; 0x08
      e0:	00 02       	muls	r16, r16
      e2:	0e 0e       	add	r0, r30
      e4:	0a f1       	brmi	.+66     	; 0x128 <__trampolines_end+0xc0>
      e6:	8a 00       	.word	0x008a	; ????
      e8:	0a 10       	cpse	r0, r10
      ea:	0e 02       	muls	r16, r30
      ec:	f0 9e       	mul	r15, r16
      ee:	00 0a       	sbc	r0, r16
      f0:	10 0e       	add	r1, r16
      f2:	02 f0       	brmi	.+0      	; 0xf4 <__trampolines_end+0x8c>
      f4:	b2 00       	.word	0x00b2	; ????
      f6:	0a 0e       	add	r0, r26
      f8:	0e 02       	muls	r16, r30
      fa:	f1 c4       	rjmp	.+2530   	; 0xade <__stack+0x1df>
      fc:	00 0a       	sbc	r0, r16
      fe:	10 0e       	add	r1, r16
     100:	02 f0       	brmi	.+0      	; 0x102 <__trampolines_end+0x9a>
     102:	d8 00       	.word	0x00d8	; ????
     104:	0a 10       	cpse	r0, r10
     106:	0e 02       	muls	r16, r30
     108:	f0 ec       	ldi	r31, 0xC0	; 192
     10a:	00 0a       	sbc	r0, r16
     10c:	0f 0e       	add	r0, r31
     10e:	02 f0       	brmi	.+0      	; 0x110 <__trampolines_end+0xa8>
     110:	ff 00       	.word	0x00ff	; ????
     112:	0a 10       	cpse	r0, r10
     114:	0e 02       	muls	r16, r30
     116:	f0 13       	cpse	r31, r16
     118:	01 0a       	sbc	r0, r17
     11a:	10 0e       	add	r1, r16
     11c:	02 f0       	brmi	.+0      	; 0x11e <__trampolines_end+0xb6>
     11e:	27 01       	movw	r4, r14
     120:	03 08       	sbc	r0, r3
     122:	04 01       	movw	r0, r8
     124:	f4 2a       	or	r15, r20
     126:	01 06       	cpc	r0, r17
     128:	0b 07       	cpc	r16, r27
     12a:	01 f5       	brne	.+64     	; 0x16c <__trampolines_end+0x104>
     12c:	33 01       	movw	r6, r6
     12e:	06 0b       	sbc	r16, r22
     130:	07 01       	movw	r0, r14
     132:	f5 3c       	cpi	r31, 0xC5	; 197
     134:	01 06       	cpc	r0, r17
     136:	0b 07       	cpc	r16, r27
     138:	01 f5       	brne	.+64     	; 0x17a <__trampolines_end+0x112>
     13a:	45 01       	movw	r8, r10
     13c:	06 0b       	sbc	r16, r22
     13e:	07 01       	movw	r0, r14
     140:	f5 4e       	sbci	r31, 0xE5	; 229
     142:	01 06       	cpc	r0, r17
     144:	0b 07       	cpc	r16, r27
     146:	01 f5       	brne	.+64     	; 0x188 <__trampolines_end+0x120>
     148:	57 01       	movw	r10, r14
     14a:	06 0b       	sbc	r16, r22
     14c:	07 01       	movw	r0, r14
     14e:	f5 60       	ori	r31, 0x05	; 5
     150:	01 0a       	sbc	r0, r17
     152:	0f 0e       	add	r0, r31
     154:	02 f0       	brmi	.+0      	; 0x156 <__trampolines_end+0xee>
     156:	73 01       	movw	r14, r6
     158:	0a 0f       	add	r16, r26
     15a:	0e 02       	muls	r16, r30
     15c:	f1 86       	std	Z+9, r15	; 0x09
     15e:	01 0a       	sbc	r0, r17
     160:	09 0e       	add	r0, r25
     162:	02 f7       	brpl	.-64     	; 0x124 <__trampolines_end+0xbc>
     164:	92 01       	movw	r18, r4
     166:	0a 0f       	add	r16, r26
     168:	0e 02       	muls	r16, r30
     16a:	f1 a5       	ldd	r31, Z+41	; 0x29
     16c:	01 0a       	sbc	r0, r17
     16e:	10 0e       	add	r1, r16
     170:	02 f0       	brmi	.+0      	; 0x172 <__trampolines_end+0x10a>
     172:	b9 01       	movw	r22, r18
     174:	0a 0f       	add	r16, r26
     176:	0e 02       	muls	r16, r30
     178:	f0 cc       	rjmp	.-1568   	; 0xfffffb5a <__eeprom_end+0xff7efb5a>
     17a:	01 0a       	sbc	r0, r17
     17c:	10 0e       	add	r1, r16
     17e:	02 f0       	brmi	.+0      	; 0x180 <__trampolines_end+0x118>
     180:	e0 01       	movw	r28, r0
     182:	0a 0e       	add	r0, r26
     184:	0e 02       	muls	r16, r30
     186:	f1 f2       	breq	.-68     	; 0x144 <__trampolines_end+0xdc>
     188:	01 02       	muls	r16, r17
     18a:	07 0e       	add	r0, r23
     18c:	0a f8       	.word	0xf80a	; ????
     18e:	f4 01       	movw	r30, r8
     190:	0a 0f       	add	r16, r26
     192:	0e 02       	muls	r16, r30
     194:	f1 07       	cpc	r31, r17
     196:	02 0a       	sbc	r0, r18
     198:	0f 0e       	add	r0, r31
     19a:	02 f0       	brmi	.+0      	; 0x19c <__trampolines_end+0x134>
     19c:	1a 02       	muls	r17, r26
     19e:	0a 0f       	add	r16, r26
     1a0:	0e 02       	muls	r16, r30
     1a2:	f1 2d       	mov	r31, r1
     1a4:	02 0a       	sbc	r0, r18
     1a6:	0f 0e       	add	r0, r31
     1a8:	02 f0       	brmi	.+0      	; 0x1aa <__trampolines_end+0x142>
     1aa:	40 02       	muls	r20, r16
     1ac:	0a 08       	sbc	r0, r10
     1ae:	0e 02       	muls	r16, r30
     1b0:	f7 4a       	sbci	r31, 0xA7	; 167
     1b2:	02 0a       	sbc	r0, r18
     1b4:	09 0e       	add	r0, r25
     1b6:	02 f7       	brpl	.-64     	; 0x178 <__trampolines_end+0x110>
     1b8:	56 02       	muls	r21, r22
     1ba:	0a 0f       	add	r16, r26
     1bc:	0e 02       	muls	r16, r30
     1be:	f0 69       	ori	r31, 0x90	; 144
     1c0:	02 0a       	sbc	r0, r18
     1c2:	0f 0e       	add	r0, r31
     1c4:	02 f0       	brmi	.+0      	; 0x1c6 <__trampolines_end+0x15e>
     1c6:	7c 02       	muls	r23, r28
     1c8:	0a 08       	sbc	r0, r10
     1ca:	0e 02       	muls	r16, r30
     1cc:	f7 86       	std	Z+15, r15	; 0x0f
     1ce:	02 0a       	sbc	r0, r18
     1d0:	0f 0e       	add	r0, r31
     1d2:	02 f1       	brmi	.+64     	; 0x214 <__trampolines_end+0x1ac>
     1d4:	99 02       	muls	r25, r25
     1d6:	0a 0f       	add	r16, r26
     1d8:	0e 02       	muls	r16, r30
     1da:	f1 ac       	ldd	r15, Z+57	; 0x39
     1dc:	02 0a       	sbc	r0, r18
     1de:	08 0e       	add	r0, r24
     1e0:	02 f8       	bld	r0, 2
     1e2:	b6 02       	muls	r27, r22
     1e4:	0a 0f       	add	r16, r26
     1e6:	0e 02       	muls	r16, r30
     1e8:	f1 c9       	rjmp	.-3102   	; 0xfffff5cc <__eeprom_end+0xff7ef5cc>
     1ea:	02 0a       	sbc	r0, r18
     1ec:	0f 0e       	add	r0, r31
     1ee:	02 f1       	brmi	.+64     	; 0x230 <__trampolines_end+0x1c8>
     1f0:	dc 02       	muls	r29, r28
     1f2:	0a 0e       	add	r0, r26
     1f4:	0e 02       	muls	r16, r30
     1f6:	f1 ee       	ldi	r31, 0xE1	; 225
     1f8:	02 0a       	sbc	r0, r18
     1fa:	0f 0e       	add	r0, r31
     1fc:	02 f1       	brmi	.+64     	; 0x23e <__trampolines_end+0x1d6>
     1fe:	01 03       	mulsu	r16, r17
     200:	0a 10       	cpse	r0, r10
     202:	0e 02       	muls	r16, r30
     204:	f0 15       	cp	r31, r0
     206:	03 06       	cpc	r0, r19
     208:	0b 07       	cpc	r16, r27
     20a:	01 f5       	brne	.+64     	; 0x24c <__trampolines_end+0x1e4>
     20c:	1e 03       	fmul	r17, r22
     20e:	06 0b       	sbc	r16, r22
     210:	07 01       	movw	r0, r14
     212:	f5 27       	eor	r31, r21
     214:	03 06       	cpc	r0, r19
     216:	0b 07       	cpc	r16, r27
     218:	01 f5       	brne	.+64     	; 0x25a <__trampolines_end+0x1f2>
     21a:	30 03       	mulsu	r19, r16
     21c:	06 0b       	sbc	r16, r22
     21e:	07 01       	movw	r0, r14
     220:	f5 39       	cpi	r31, 0x95	; 149
     222:	03 06       	cpc	r0, r19
     224:	0b 07       	cpc	r16, r27
     226:	01 f5       	brne	.+64     	; 0x268 <__trampolines_end+0x200>
     228:	42 03       	mulsu	r20, r18
     22a:	06 0b       	sbc	r16, r22
     22c:	07 01       	movw	r0, r14
     22e:	f5 4b       	sbci	r31, 0xB5	; 181
     230:	03 0a       	sbc	r0, r19
     232:	0f 0e       	add	r0, r31
     234:	02 f0       	brmi	.+0      	; 0x236 <__trampolines_end+0x1ce>
     236:	5e 03       	fmul	r21, r22
     238:	0a 0f       	add	r16, r26
     23a:	0e 02       	muls	r16, r30
     23c:	f1 71       	andi	r31, 0x11	; 17
     23e:	03 0a       	sbc	r0, r19
     240:	09 0e       	add	r0, r25
     242:	02 f7       	brpl	.-64     	; 0x204 <__trampolines_end+0x19c>
     244:	7d 03       	fmul	r23, r21
     246:	0a 0f       	add	r16, r26
     248:	0e 02       	muls	r16, r30
     24a:	f1 90       	ld	r15, Z+
     24c:	03 0a       	sbc	r0, r19
     24e:	10 0e       	add	r1, r16
     250:	02 f0       	brmi	.+0      	; 0x252 <__trampolines_end+0x1ea>
     252:	a4 03       	fmuls	r18, r20
     254:	0a 0f       	add	r16, r26
     256:	0e 02       	muls	r16, r30
     258:	f0 b7       	in	r31, 0x30	; 48
     25a:	03 0a       	sbc	r0, r19
     25c:	10 0e       	add	r1, r16
     25e:	02 f0       	brmi	.+0      	; 0x260 <__trampolines_end+0x1f8>
     260:	cb 03       	fmulsu	r20, r19
     262:	0a 0e       	add	r0, r26
     264:	0e 02       	muls	r16, r30
     266:	f1 dd       	rcall	.-1054   	; 0xfffffe4a <__eeprom_end+0xff7efe4a>
     268:	03 02       	muls	r16, r19
     26a:	07 0e       	add	r0, r23
     26c:	0a f8       	.word	0xf80a	; ????
     26e:	df 03       	fmulsu	r21, r23
     270:	0a 0f       	add	r16, r26
     272:	0e 02       	muls	r16, r30
     274:	f1 f2       	breq	.-68     	; 0x232 <__trampolines_end+0x1ca>
     276:	03 0a       	sbc	r0, r19
     278:	0f 0e       	add	r0, r31
     27a:	02 f0       	brmi	.+0      	; 0x27c <__trampolines_end+0x214>
     27c:	05 04       	cpc	r0, r5
     27e:	0a 0f       	add	r16, r26
     280:	0e 02       	muls	r16, r30
     282:	f1 18       	sub	r15, r1
     284:	04 0a       	sbc	r0, r20
     286:	0f 0e       	add	r0, r31
     288:	02 f0       	brmi	.+0      	; 0x28a <__trampolines_end+0x222>
     28a:	2b 04       	cpc	r2, r11
     28c:	0a 08       	sbc	r0, r10
     28e:	0e 02       	muls	r16, r30
     290:	f7 35       	cpi	r31, 0x57	; 87
     292:	04 0a       	sbc	r0, r20
     294:	09 0e       	add	r0, r25
     296:	02 f7       	brpl	.-64     	; 0x258 <__trampolines_end+0x1f0>
     298:	41 04       	cpc	r4, r1
     29a:	0a 0f       	add	r16, r26
     29c:	0e 02       	muls	r16, r30
     29e:	f0 54       	subi	r31, 0x40	; 64
     2a0:	04 0a       	sbc	r0, r20
     2a2:	0f 0e       	add	r0, r31
     2a4:	02 f0       	brmi	.+0      	; 0x2a6 <__trampolines_end+0x23e>
     2a6:	67 04       	cpc	r6, r7
     2a8:	0a 08       	sbc	r0, r10
     2aa:	0e 02       	muls	r16, r30
     2ac:	f7 71       	andi	r31, 0x17	; 23
     2ae:	04 0a       	sbc	r0, r20
     2b0:	0f 0e       	add	r0, r31
     2b2:	02 f1       	brmi	.+64     	; 0x2f4 <__trampolines_end+0x28c>
     2b4:	84 04       	cpc	r8, r4
     2b6:	0a 0f       	add	r16, r26
     2b8:	0e 02       	muls	r16, r30
     2ba:	f1 97       	sbiw	r30, 0x31	; 49
     2bc:	04 0a       	sbc	r0, r20
     2be:	08 0e       	add	r0, r24
     2c0:	02 f8       	bld	r0, 2
     2c2:	a1 04       	cpc	r10, r1
     2c4:	0a 0f       	add	r16, r26
     2c6:	0e 02       	muls	r16, r30
     2c8:	f1 b4       	in	r15, 0x21	; 33
     2ca:	04 0a       	sbc	r0, r20
     2cc:	0f 0e       	add	r0, r31
     2ce:	02 f1       	brmi	.+64     	; 0x310 <DSEG7_Classic_Regular_16Bitmaps+0x16>
     2d0:	c7 04       	cpc	r12, r7
     2d2:	0a 0e       	add	r0, r26
     2d4:	0e 02       	muls	r16, r30
     2d6:	f1 d9       	rcall	.-3102   	; 0xfffff6ba <__eeprom_end+0xff7ef6ba>
     2d8:	04 0a       	sbc	r0, r20
     2da:	0f 0e       	add	r0, r31
     2dc:	02 f1       	brmi	.+64     	; 0x31e <DSEG7_Classic_Regular_16Bitmaps+0x24>
     2de:	ec 04       	cpc	r14, r12
     2e0:	0a 10       	cpse	r0, r10
     2e2:	0e 02       	muls	r16, r30
     2e4:	f0 00       	.word	0x00f0	; ????
     2e6:	05 06       	cpc	r0, r21
     2e8:	0b 07       	cpc	r16, r27
     2ea:	01 f5       	brne	.+64     	; 0x32c <DSEG7_Classic_Regular_16Bitmaps+0x32>
     2ec:	09 05       	cpc	r16, r9
     2ee:	06 0b       	sbc	r16, r22
     2f0:	07 01       	movw	r0, r14
     2f2:	f5 12       	cpse	r15, r21
     2f4:	05 06       	cpc	r0, r21
     2f6:	0b 07       	cpc	r16, r27
     2f8:	01 f5       	brne	.+64     	; 0x33a <DSEG7_Classic_Regular_16Bitmaps+0x40>

000002fa <DSEG7_Classic_Regular_16Bitmaps>:
     2fa:	00 00 fa 28 a2 8a 28 a2 8a 2f 80 fa 28 a2 8a 28     ...(..(../..(..(
     30a:	a2 8a 2f 80 fa 28 a2 8a 28 a2 8a 2f 80 fa 28 a2     ../..(..(../..(.
     31a:	8a 28 a2 8a 2f 80 fa 28 a2 8a 28 a2 8a 2f 80 fa     .(../..(..(../..
     32a:	28 a2 8a 28 a2 8a 2f 80 fa 28 a2 8a 28 a2 8a 2f     (..(../..(..(../
     33a:	80 fa 28 a2 8a 28 a2 8a 2f 80 fa 28 a2 8a 28 a2     ..(..(../..(..(.
     34a:	8a 2f 80 fa 28 a2 8a 28 a2 8a 2f 80 fa 28 a2 8a     ./..(..(../..(..
     35a:	28 a2 8a 2f 80 7f 1f c0 d8 fa 28 a2 8a 28 a2 8a     (../......(..(..
     36a:	2f 80 ff a0 28 0a 02 80 a0 28 08 00 00 20 28 0a     /...(....(... (.
     37a:	02 80 a0 28 0b fe aa a0 aa a0 ff 80 20 08 02 00     ...(........ ...
     38a:	80 20 09 fc 7f 20 08 02 00 80 20 08 03 fe ff 80     . ... .... .....
     39a:	20 08 02 00 80 20 09 fc 7f 00 20 08 02 00 80 20      .... .... .... 
     3aa:	0b fe 80 a0 28 0a 02 80 a0 27 f1 fc 00 80 20 08     ....(....'.... .
     3ba:	02 00 80 20 ff a0 08 02 00 80 20 08 01 fc 7f 00     ... ...... .....
     3ca:	20 08 02 00 80 20 0b fe ff a0 08 02 00 80 20 08      .... ........ .
     3da:	01 fc 7f 20 28 0a 02 80 a0 28 0b fe ff a0 28 0a     ... (....(....(.
     3ea:	02 80 a0 28 08 00 00 00 20 08 02 00 80 20 08 ff     ...(.... .... ..
     3fa:	a0 28 0a 02 80 a0 28 09 fc 7f 20 28 0a 02 80 a0     .(....(... (....
     40a:	28 0b fe ff a0 28 0a 02 80 a0 28 09 fc 7f 00 20     (....(....(.... 
     41a:	08 02 00 80 20 0b fe d0 00 06 fa 28 a2 8a 28 a2     .... ......(..(.
     42a:	8a 2f 80 fa 28 a2 8a 28 a2 8a 2f 80 fa 28 a2 8a     ./..(..(../..(..
     43a:	28 a2 8a 2f 80 fa 28 a2 8a 28 a2 8a 2f 80 fa 28     (../..(..(../..(
     44a:	a2 8a 28 a2 8a 2f 80 fa 28 a2 8a 28 a2 8a 2f 80     ..(../..(..(../.
     45a:	ff a0 28 0a 02 80 a0 28 09 fc 7f 20 28 0a 02 80     ..(....(... (...
     46a:	a0 28 08 80 20 08 02 00 80 20 07 f1 fc 80 a0 28     .(.. .... .....(
     47a:	0a 02 80 a0 2f f8 7f 1f c8 02 00 80 20 08 02 00     ..../....... ...
     48a:	ff 80 00 80 20 08 02 00 80 27 f1 fc 80 a0 28 0a     .... ....'....(.
     49a:	02 80 a0 2f f8 ff a0 08 02 00 80 20 08 01 fc 7f     .../....... ....
     4aa:	20 08 02 00 80 20 08 03 fe ff a0 08 02 00 80 20      .... ......... 
     4ba:	08 01 fc 7f 20 08 02 00 80 20 08 00 ff a0 08 02     .... .... ......
     4ca:	00 80 20 08 00 00 00 20 28 0a 02 80 a0 28 0b fe     .. .... (....(..
     4da:	80 20 08 02 00 80 20 07 f1 fc 80 a0 28 0a 02 80     . .... .....(...
     4ea:	a0 20 2a a8 00 80 20 08 02 00 80 20 00 00 80 a0     . *... .... ....
     4fa:	28 0a 02 80 a0 2f f8 ff a0 08 02 00 80 20 08 01     (..../....... ..
     50a:	fc 7f 20 28 0a 02 80 a0 28 08 80 20 08 02 00 80     .. (....(.. ....
     51a:	20 00 00 00 80 20 08 02 00 80 20 0f f8 ff a0 28      .... .... ....(
     52a:	0a 02 80 a0 28 08 00 00 20 28 0a 02 80 a0 28 08     ....(... (....(.
     53a:	7f 1f c8 0a 02 80 a0 28 0a 02 7f 1f c8 0a 02 80     .......(........
     54a:	a0 28 0a 02 ff 80 ff a0 28 0a 02 80 a0 28 09 fc     .(......(....(..
     55a:	7f 20 08 02 00 80 20 08 00 ff a0 28 0a 02 80 a0     . .... ....(....
     56a:	28 09 fc 7f 00 20 08 02 00 80 20 08 7f 1f c8 02     (.... .... .....
     57a:	00 80 20 08 02 00 80 20 08 02 00 80 20 07 f1 fc     .. .... .... ...
     58a:	00 80 20 08 02 00 80 2f f8 80 20 08 02 00 80 20     .. ..../.. .... 
     59a:	07 f1 fc 80 20 08 02 00 80 20 0f f8 00 20 28 0a     .... .... ... (.
     5aa:	02 80 a0 28 0b fe 80 a0 28 0a 02 80 a0 20 00 00     ...(....(.... ..
     5ba:	80 a0 28 0a 02 80 a0 2f f8 80 a0 28 0a 02 80 a0     ..(..../...(....
     5ca:	27 f1 fc 80 a0 28 0a 02 80 a0 2f f8 80 a0 28 0a     '....(..../...(.
     5da:	02 80 a0 27 f1 fc 80 a0 28 0a 02 80 a0 20 80 a0     ...'....(.... ..
     5ea:	28 0a 02 80 a0 27 f1 fc 00 80 20 08 02 00 80 2f     (....'.... ..../
     5fa:	f8 ff 80 20 08 02 00 80 20 08 00 00 20 08 02 00     ... .... ... ...
     60a:	80 20 08 03 fe fa 28 a2 8a 28 a2 8a 2f 80 fa 28     . ....(..(../..(
     61a:	a2 8a 28 a2 8a 2f 80 fa 28 a2 8a 28 a2 8a 2f 80     ..(../..(..(../.
     62a:	fa 28 a2 8a 28 a2 8a 2f 80 fa 28 a2 8a 28 a2 8a     .(..(../..(..(..
     63a:	2f 80 fa 28 a2 8a 28 a2 8a 2f 80 ff a0 28 0a 02     /..(..(../...(..
     64a:	80 a0 28 09 fc 7f 20 28 0a 02 80 a0 28 08 80 20     ..(... (....(.. 
     65a:	08 02 00 80 20 07 f1 fc 80 a0 28 0a 02 80 a0 2f     .... .....(..../
     66a:	f8 7f 1f c8 02 00 80 20 08 02 00 ff 80 00 80 20     ....... ....... 
     67a:	08 02 00 80 27 f1 fc 80 a0 28 0a 02 80 a0 2f f8     ....'....(..../.
     68a:	ff a0 08 02 00 80 20 08 01 fc 7f 20 08 02 00 80     ...... .... ....
     69a:	20 08 03 fe ff a0 08 02 00 80 20 08 01 fc 7f 20      ......... .... 
     6aa:	08 02 00 80 20 08 00 ff a0 08 02 00 80 20 08 00     .... ........ ..
     6ba:	00 00 20 28 0a 02 80 a0 28 0b fe 80 20 08 02 00     .. (....(... ...
     6ca:	80 20 07 f1 fc 80 a0 28 0a 02 80 a0 20 2a a8 00     . .....(.... *..
     6da:	80 20 08 02 00 80 20 00 00 80 a0 28 0a 02 80 a0     . .... ....(....
     6ea:	2f f8 ff a0 08 02 00 80 20 08 01 fc 7f 20 28 0a     /....... .... (.
     6fa:	02 80 a0 28 08 80 20 08 02 00 80 20 00 00 00 80     ...(.. .... ....
     70a:	20 08 02 00 80 20 0f f8 ff a0 28 0a 02 80 a0 28      .... ....(....(
     71a:	08 00 00 20 28 0a 02 80 a0 28 08 7f 1f c8 0a 02     ... (....(......
     72a:	80 a0 28 0a 02 7f 1f c8 0a 02 80 a0 28 0a 02 ff     ..(.........(...
     73a:	80 ff a0 28 0a 02 80 a0 28 09 fc 7f 20 08 02 00     ...(....(... ...
     74a:	80 20 08 00 ff a0 28 0a 02 80 a0 28 09 fc 7f 00     . ....(....(....
     75a:	20 08 02 00 80 20 08 7f 1f c8 02 00 80 20 08 02      .... ....... ..
     76a:	00 80 20 08 02 00 80 20 07 f1 fc 00 80 20 08 02     .. .... ..... ..
     77a:	00 80 2f f8 80 20 08 02 00 80 20 07 f1 fc 80 20     ../.. .... .... 
     78a:	08 02 00 80 20 0f f8 00 20 28 0a 02 80 a0 28 0b     .... ... (....(.
     79a:	fe 80 a0 28 0a 02 80 a0 20 00 00 80 a0 28 0a 02     ...(.... ....(..
     7aa:	80 a0 2f f8 80 a0 28 0a 02 80 a0 27 f1 fc 80 a0     ../...(....'....
     7ba:	28 0a 02 80 a0 2f f8 80 a0 28 0a 02 80 a0 27 f1     (..../...(....'.
     7ca:	fc 80 a0 28 0a 02 80 a0 20 80 a0 28 0a 02 80 a0     ...(.... ..(....
     7da:	27 f1 fc 00 80 20 08 02 00 80 2f f8 ff 80 20 08     '.... ..../... .
     7ea:	02 00 80 20 08 00 00 20 08 02 00 80 20 08 03 fe     ... ... .... ...
     7fa:	fa 28 a2 8a 28 a2 8a 2f 80 fa 28 a2 8a 28 a2 8a     .(..(../..(..(..
     80a:	2f 80 fa 28 a2 8a 28 a2 8a 2f 80                    /..(..(../.

00000815 <Adafruit_SSD1306::display()::dlist1>:
     815:	22 00 ff 21 00                                      "..!.

0000081a <DSEG7_Classic_Regular_16>:
     81a:	fa 02 68 00 20 00 7e 00 12                          ..h. .~..

00000823 <font>:
     823:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
     833:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
     843:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
     853:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
     863:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
     873:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
     883:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
     893:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
     8a3:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
     8b3:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
     8c3:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     8d3:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     8e3:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
     8f3:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
     903:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
     913:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
     923:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
     933:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
     943:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
     953:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
     963:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
     973:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     983:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
     993:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     9a3:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     9b3:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
     9c3:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     9d3:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
     9e3:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
     9f3:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
     a03:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
     a13:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
     a23:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
     a33:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
     a43:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
     a53:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
     a63:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
     a73:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
     a83:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
     a93:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
     aa3:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
     ab3:	55 55 79 41 22 54 54 78 42 21 55 54 78 40 20 54     UUyA"TTxB!UTx@ T
     ac3:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
     ad3:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
     ae3:	42 00 01 45 7c 40 7d 12 11 12 7d f0 28 25 28 f0     B..E|@}...}.(%(.
     af3:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
     b03:	49 49 49 32 3a 44 44 44 3a 32 4a 48 48 30 3a 41     III2:DDD:2JHH0:A
     b13:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 3d 42 42     A!z:B@ x....}=BB
     b23:	42 3d 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     B==@@@=<$.$$H~IC
     b33:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
     b43:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
     b53:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
     b63:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
     b73:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
     b83:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
     b93:	55 00 55 00 55 aa 55 aa 55 aa ff 55 ff 55 ff 00     U.U.U.U.U..U.U..
     ba3:	00 00 ff 00 10 10 10 ff 00 14 14 14 ff 00 10 10     ................
     bb3:	ff 00 ff 10 10 f0 10 f0 14 14 14 fc 00 14 14 f7     ................
     bc3:	00 ff 00 00 ff 00 ff 14 14 f4 04 fc 14 14 17 10     ................
     bd3:	1f 10 10 1f 10 1f 14 14 14 1f 00 10 10 10 f0 00     ................
     be3:	00 00 00 1f 10 10 10 10 1f 10 10 10 10 f0 10 00     ................
     bf3:	00 00 ff 10 10 10 10 10 10 10 10 10 ff 10 00 00     ................
     c03:	00 ff 14 00 00 ff 00 ff 00 00 1f 10 17 00 00 fc     ................
     c13:	04 f4 14 14 17 10 17 14 14 f4 04 f4 00 00 ff 00     ................
     c23:	f7 14 14 14 14 14 14 14 f7 00 f7 14 14 14 17 14     ................
     c33:	10 10 1f 10 1f 14 14 14 f4 14 10 10 f0 10 f0 00     ................
     c43:	00 1f 10 1f 00 00 00 1f 14 00 00 00 fc 14 00 00     ................
     c53:	f0 10 f0 10 10 ff 10 ff 14 14 14 ff 14 10 10 10     ................
     c63:	1f 00 00 00 00 f0 10 ff ff ff ff ff f0 f0 f0 f0     ................
     c73:	f0 ff ff ff 00 00 00 00 00 ff ff 0f 0f 0f 0f 0f     ................
     c83:	38 44 44 38 44 fc 4a 4a 4a 34 7e 02 02 06 06 02     8DD8D.JJJ4~.....
     c93:	7e 02 7e 02 63 55 49 41 63 38 44 44 3c 04 40 7e     ~.~.cUIAc8DD<.@~
     ca3:	20 1e 20 06 02 7e 02 02 99 a5 e7 a5 99 1c 2a 49      . ..~........*I
     cb3:	2a 1c 4c 72 01 72 4c 30 4a 4d 4d 30 30 48 78 48     *.Lr.rL0JMM00HxH
     cc3:	30 bc 62 5a 46 3d 3e 49 49 49 00 7e 01 01 01 7e     0.bZF=>III.~...~
     cd3:	2a 2a 2a 2a 2a 44 44 5f 44 44 40 51 4a 44 40 40     *****DD_DD@QJD@@
     ce3:	44 4a 51 40 00 00 ff 01 03 e0 80 ff 00 00 08 08     DJQ@............
     cf3:	6b 6b 08 36 12 36 24 36 06 0f 09 0f 06 00 00 18     kk.6.6$6........
     d03:	18 00 00 00 10 10 00 30 40 ff 01 01 00 1f 01 01     .......0@.......
     d13:	1e 00 19 1d 17 12 00 3c 3c 3c 3c 00 00 00 00 00     .......<<<<.....

00000d23 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)::postmask>:
     d23:	00 01 03 07 0f 1f 3f 7f                             ......?.

00000d2b <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)::premask>:
     d2b:	00 80 c0 e0 f0 f8 fc fe                             ........

00000d33 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)::init5>:
     d33:	db 40 a4 a6 2e af                                   .@....

00000d39 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)::init3>:
     d39:	20 00 a1 c8                                          ...

00000d3d <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)::init2>:
     d3d:	d3 00 40 8d                                         ..@.

00000d41 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)::init1>:
     d41:	ae d5 80 a8                                         ....

00000d45 <splash2_data>:
     d45:	00 00 60 00 00 00 00 00 00 00 00 00 00 00 00 00     ..`.............
     d55:	00 e0 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
     d65:	e0 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f0     ................
	...
     d81:	00 03 f0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     d91:	07 f0 00 00 00 00 00 00 00 00 00 00 00 00 00 07     ................
     da1:	f8 00 00 00 00 00 00 00 00 00 00 00 00 00 0f f8     ................
     db1:	00 00 00 03 c0 00 7e 00 00 01 e0 00 7f 0f f8 00     ......~.........
     dc1:	00 00 03 c0 00 fe 00 00 01 e0 00 ff ef f8 00 00     ................
     dd1:	00 03 c0 00 fe 00 00 01 e0 00 ff ff f8 00 00 00     ................
     de1:	03 c0 00 f0 00 00 00 0f 00 7f fe 7f c0 00 00 03     ................
     df1:	c0 00 f0 00 00 00 0f 00 3f fe 7f f8 3f f1 fb cf     ........?...?...
     e01:	fc fe f3 bc 3d ef e0 1f fe 7f ff 7f fb ff df fe     ....=...........
     e11:	fe ff bc 3d ef e0 1f c6 ff ff 7f fb ff df fe fe     ...=............
     e21:	ff bc 3d ef e0 0f e3 c7 fe 78 7b c3 de 1e f0 ff     ..=......x{.....
     e31:	bc 3d ef 00 07 ff 87 fc 78 7b c3 de 1e f0 f8 3c     .=......x{.....<
     e41:	3d ef 00 01 ff ff f0 00 7b c3 c0 1e f0 f0 3c 3d     =.......{.....<=
     e51:	ef 00 01 f3 7f e0 3f fb c3 cf fe f0 f0 3c 3d ef     ......?......<=.
     e61:	00 03 e3 3f 80 7f fb c3 df fe f0 f0 3c 3d ef 00     ...?........<=..
     e71:	07 e7 3c 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 07     ..<.x{.....<=...
     e81:	ff be 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 07 ff     ...x{.....<=....
     e91:	fe 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 0f ff fe     ..x{.....<=.....
     ea1:	00 7f fb ff df fe f0 f0 3f fd ef e0 0f ff ff 00     ........?.......
     eb1:	7f fb ff df fe f0 f0 3f fd ef e0 0f f9 ff 00 3e     .......?.......>
     ec1:	79 f9 cf 9e f0 f0 1f 3d e7 e0 1f f1 ff 00 00 00     y......=........
	...
     ed9:	00 1f 80 ff 00 7f ff ff ff ff ff ff ff ff ff e0     ................
     ee9:	1c 00 7f 00 7f ff ff ff fe b4 6d 88 8d 18 e0 00     ..........m.....
     ef9:	00 1f 00 7f ff ff ff fe 95 ad 7d b5 77 e0 00 00     ..........}.w...
     f09:	0f 00 7f ff ff ff fe a5 ad 9d 8d 19 e0 00 00 06     ................
     f19:	00 7f ff ff ff fe b5 ad ed b5 7e e0                 ..........~.

00000f25 <splash1_data>:
     f25:	00 00 00 00 00 01 80 00 00 00 00 00 00 00 00 00     ................
     f35:	03 80 00 00 00 00 00 00 00 00 00 07 c0 00 00 00     ................
     f45:	00 00 00 00 00 00 07 c0 00 00 00 00 00 00 00 00     ................
     f55:	00 0f c0 00 00 00 00 00 00 00 00 00 1f e0 00 00     ................
     f65:	00 00 00 00 00 00 00 1f e0 00 00 00 00 00 00 00     ................
     f75:	00 00 3f e0 00 00 00 00 00 00 00 00 00 3f f0 00     ..?..........?..
	...
     f8d:	7f f0 00 00 00 00 00 00 00 1f f8 7f f0 00 00 00     ................
     f9d:	00 00 00 00 3f fe 7f f0 00 00 00 00 00 00 00 3f     ....?..........?
     fad:	ff 7f f0 00 00 00 00 00 00 00 1f ff fb e0 00 00     ................
     fbd:	00 00 00 00 00 0f ff f9 ff c0 00 00 00 00 00 00     ................
     fcd:	0f ff f9 ff f8 00 00 00 00 00 00 07 ff f1 ff ff     ................
     fdd:	00 00 00 00 00 00 03 fc 73 ff ff 80 00 00 00 00     ........s.......
     fed:	00 01 fe 3f ff ff 80 00 00 00 00 00 00 ff 1e 0f     ...?............
     ffd:	ff 00 00 00 00 00 00 00 7f fe 1f fc 00 00 00 00     ................
    100d:	00 00 00 3f ff ff f8 00 00 00 00 00 00 00 0f df     ...?............
    101d:	ff e0 00 00 00 00 00 00 00 1f 19 ff c0 00 00 00     ................
    102d:	00 00 00 00 3f 3c ff 00 00 00 00 00 00 00 00 7e     ....?<.........~
    103d:	7c f8 00 00 00 00 00 00 00 00 7f fe 7c 00 00 00     |...........|...
    104d:	00 00 00 00 00 ff ff fc 00 00 00 00 00 00 00 00     ................
    105d:	ff ff fe 00 00 00 00 00 00 00 00 ff ff fe 00 00     ................
    106d:	00 00 00 00 00 01 ff ef fe 00 00 00 00 00 00 00     ................
    107d:	01 ff cf fe 00 00 00 00 00 00 00 03 ff 07 fe 00     ................
    108d:	00 00 00 00 00 00 03 fc 07 fe 00 00 00 00 00 00     ................
    109d:	00 03 f0 03 fe 00 00 00 00 00 00 00 01 80 00 fe     ................
	...
    10b5:	00 00 7e 00 00 00 00 00 00 00 00 00 00 3e 00 00     ..~..........>..
	...
    10cd:	0c 00 00 00 00 00 00 07 80 00 fc 00 00 03 c0 00     ................
    10dd:	00 00 07 80 01 fc 00 00 03 c0 00 00 00 07 80 01     ................
    10ed:	fc 00 00 03 c0 00 00 00 07 80 01 e0 00 00 00 1e     ................
    10fd:	00 00 00 07 80 01 e0 00 00 00 1e 00 7f e3 f7 9f     ................
    110d:	f9 fd e7 78 7b df c0 ff f7 ff bf fd fd ff 78 7b     ...x{.........x{
    111d:	df c0 ff f7 ff bf fd fd ff 78 7b df c0 f0 f7 87     .........x{.....
    112d:	bc 3d e1 ff 78 7b de 00 f0 f7 87 bc 3d e1 f0 78     .=..x{......=..x
    113d:	7b de 00 00 f7 87 80 3d e1 e0 78 7b de 00 7f f7     {......=..x{....
    114d:	87 9f fd e1 e0 78 7b de 00 ff f7 87 bf fd e1 e0     .....x{.........
    115d:	78 7b de 00 f0 f7 87 bc 3d e1 e0 78 7b de 00 f0     x{......=..x{...
    116d:	f7 87 bc 3d e1 e0 78 7b de 00 f0 f7 87 bc 3d e1     ...=..x{......=.
    117d:	e0 78 7b de 00 ff f7 ff bf fd e1 e0 7f fb df c0     .x{.............
    118d:	ff f7 ff bf fd e1 e0 7f fb df c0 7c f3 f3 9f 3d     ...........|...=
    119d:	e1 e0 3e 7b cf c0 00 00 00 00 00 00 00 00 00 00     ..>{............
    11ad:	00 ff ff ff ff ff ff ff ff ff ff c0 ff ff ff ff     ................
    11bd:	fd 68 db 11 1a 31 c0 ff ff ff ff fd 2b 5a fb 6a     .h...1......+Z.j
    11cd:	ef c0 ff ff ff ff fd 4b 5b 3b 1a 33 c0 ff ff ff     .......K[;.3....
    11dd:	ff fd 6b 5b db 6a fd c0                             ..k[.j..

000011e5 <port_to_mode_PGM>:
    11e5:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000011ef <port_to_output_PGM>:
    11ef:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000011f9 <digital_pin_to_port_PGM>:
    11f9:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
    1209:	03 03 03 03 02 02 03                                .......

00001210 <digital_pin_to_bit_mask_PGM>:
    1210:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
    1220:	04 08 10 20 40 80 40                                ... @.@

00001227 <digital_pin_to_timer_PGM>:
    1227:	00 00 00 09 00 03 02 00 00 04 05 08 00 00 00 00     ................
    1237:	00 00 00 00 00 00 00                                .......

0000123e <__ctors_start>:
__ctors_start():
    123e:	9b 1e       	adc	r9, r27

00001240 <__ctors_end>:
__dtors_start():
    1240:	7d 23       	and	r23, r29

00001242 <__dtors_end>:
__dtors_end():
    1242:	11 24       	eor	r1, r1
    1244:	1f be       	out	0x3f, r1	; 63
    1246:	cf ef       	ldi	r28, 0xFF	; 255
    1248:	d8 e0       	ldi	r29, 0x08	; 8
    124a:	de bf       	out	0x3e, r29	; 62
    124c:	cd bf       	out	0x3d, r28	; 61

0000124e <__do_clear_bss>:
__do_clear_bss():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
    124e:	25 e0       	ldi	r18, 0x05	; 5
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
    1250:	ac e4       	ldi	r26, 0x4C	; 76
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
    1252:	b2 e0       	ldi	r27, 0x02	; 2
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
    1254:	01 c0       	rjmp	.+2      	; 0x1258 <.do_clear_bss_start>

00001256 <.do_clear_bss_loop>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
    1256:	1d 92       	st	X+, r1

00001258 <.do_clear_bss_start>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
    1258:	a8 30       	cpi	r26, 0x08	; 8
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
    125a:	b2 07       	cpc	r27, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
    125c:	e1 f7       	brne	.-8      	; 0x1256 <.do_clear_bss_loop>

0000125e <__do_copy_data>:
__do_copy_data():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
    125e:	12 e0       	ldi	r17, 0x02	; 2
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
    1260:	a0 e0       	ldi	r26, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
    1262:	b1 e0       	ldi	r27, 0x01	; 1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
    1264:	ec e4       	ldi	r30, 0x4C	; 76
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
    1266:	fc e4       	ldi	r31, 0x4C	; 76
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
    1268:	02 c0       	rjmp	.+4      	; 0x126e <__do_copy_data+0x10>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
    126a:	05 90       	lpm	r0, Z+
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
    126c:	0d 92       	st	X+, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
    126e:	ac 34       	cpi	r26, 0x4C	; 76
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
    1270:	b1 07       	cpc	r27, r17
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
    1272:	d9 f7       	brne	.-10     	; 0x126a <__do_copy_data+0xc>

00001274 <__do_global_ctors>:
__do_global_ctors():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
    1274:	19 e0       	ldi	r17, 0x09	; 9
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
    1276:	c0 e2       	ldi	r28, 0x20	; 32
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
    1278:	d9 e0       	ldi	r29, 0x09	; 9
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
    127a:	04 c0       	rjmp	.+8      	; 0x1284 <__do_global_ctors+0x10>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
    127c:	21 97       	sbiw	r28, 0x01	; 1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
    127e:	fe 01       	movw	r30, r28
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
    1280:	0e 94 15 24 	call	0x482a	; 0x482a <__tablejump2__>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
    1284:	cf 31       	cpi	r28, 0x1F	; 31
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
    1286:	d1 07       	cpc	r29, r17
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
    1288:	c9 f7       	brne	.-14     	; 0x127c <__do_global_ctors+0x8>
    128a:	0e 94 3c 20 	call	0x4078	; 0x4078 <main>
    128e:	0c 94 19 26 	jmp	0x4c32	; 0x4c32 <__do_global_dtors>

00001292 <__bad_interrupt>:
__vector_22():
    1292:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001296 <TwoWire::beginTransmission(unsigned char) [clone .constprop.51]>:
beginTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:196
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    1296:	91 e0       	ldi	r25, 0x01	; 1
    1298:	90 93 f4 02 	sts	0x02F4, r25	; 0x8002f4 <TwoWire::transmitting>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:198
  // set address of targeted slave
  txAddress = address;
    129c:	80 93 f3 02 	sts	0x02F3, r24	; 0x8002f3 <TwoWire::txAddress>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:200
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    12a0:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <TwoWire::txBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:201
  txBufferLength = 0;
    12a4:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <TwoWire::txBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:202
}
    12a8:	08 95       	ret

000012aa <SI4844::convertToChar(unsigned long, char*, unsigned char, unsigned char, unsigned char, bool) [clone .constprop.42]>:
convertToChar():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1430
 * @param len final string size (in bytes)
 * @param dot the decimal or thousand separator position
 * @param separator symbol "." or ","
 * @param remove_leading_zeros if true removes up to two leading zeros (default is true)
 */
void SI4844::convertToChar(uint32_t value, char *strValue, uint8_t len, uint8_t dot, uint8_t separator, bool remove_leading_zeros)
    12aa:	4f 92       	push	r4
    12ac:	5f 92       	push	r5
    12ae:	6f 92       	push	r6
    12b0:	7f 92       	push	r7
    12b2:	af 92       	push	r10
    12b4:	bf 92       	push	r11
    12b6:	cf 92       	push	r12
    12b8:	df 92       	push	r13
    12ba:	ef 92       	push	r14
    12bc:	ff 92       	push	r15
    12be:	0f 93       	push	r16
    12c0:	1f 93       	push	r17
    12c2:	cf 93       	push	r28
    12c4:	df 93       	push	r29
    12c6:	dc 01       	movw	r26, r24
    12c8:	cb 01       	movw	r24, r22
    12ca:	ea 01       	movw	r28, r20
    12cc:	e2 2e       	mov	r14, r18
    12ce:	f1 2c       	mov	r15, r1
    12d0:	e4 0e       	add	r14, r20
    12d2:	f5 1e       	adc	r15, r21
    12d4:	67 01       	movw	r12, r14
    12d6:	57 01       	movw	r10, r14
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1435
{
    char d;
    for (int i = (len - 1); i >= 0; i--)
    {
        d = value % 10;
    12d8:	2a e0       	ldi	r18, 0x0A	; 10
    12da:	42 2e       	mov	r4, r18
    12dc:	51 2c       	mov	r5, r1
    12de:	61 2c       	mov	r6, r1
    12e0:	71 2c       	mov	r7, r1
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1436
        value = value / 10;
    12e2:	bc 01       	movw	r22, r24
    12e4:	cd 01       	movw	r24, r26
    12e6:	a3 01       	movw	r20, r6
    12e8:	92 01       	movw	r18, r4
    12ea:	0e 94 eb 23 	call	0x47d6	; 0x47d6 <__udivmodsi4>
    12ee:	da 01       	movw	r26, r20
    12f0:	c9 01       	movw	r24, r18
    12f2:	f5 01       	movw	r30, r10
    12f4:	31 97       	sbiw	r30, 0x01	; 1
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1437
        strValue[i] = d + 48;
    12f6:	60 5d       	subi	r22, 0xD0	; 208
    12f8:	60 83       	st	Z, r22
    12fa:	22 e0       	ldi	r18, 0x02	; 2
    12fc:	a2 1a       	sub	r10, r18
    12fe:	b1 08       	sbc	r11, r1
    1300:	95 01       	movw	r18, r10
    1302:	2c 1b       	sub	r18, r28
    1304:	3d 0b       	sbc	r19, r29
    1306:	5f 01       	movw	r10, r30
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1433
 * @param remove_leading_zeros if true removes up to two leading zeros (default is true)
 */
void SI4844::convertToChar(uint32_t value, char *strValue, uint8_t len, uint8_t dot, uint8_t separator, bool remove_leading_zeros)
{
    char d;
    for (int i = (len - 1); i >= 0; i--)
    1308:	37 ff       	sbrs	r19, 7
    130a:	eb cf       	rjmp	.-42     	; 0x12e2 <SI4844::convertToChar(unsigned long, char*, unsigned char, unsigned char, unsigned char, bool) [clone .constprop.42]+0x38>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1439
    {
        d = value % 10;
        value = value / 10;
        strValue[i] = d + 48;
    }
    strValue[len] = '\0';
    130c:	f7 01       	movw	r30, r14
    130e:	10 82       	st	Z, r1
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1440
    if (dot > 0)
    1310:	00 23       	and	r16, r16
    1312:	99 f0       	breq	.+38     	; 0x133a <SI4844::convertToChar(unsigned long, char*, unsigned char, unsigned char, unsigned char, bool) [clone .constprop.42]+0x90>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1442
    {
        for (int i = len; i >= dot; i--)
    1314:	10 e0       	ldi	r17, 0x00	; 0
    1316:	c6 01       	movw	r24, r12
    1318:	8c 1b       	sub	r24, r28
    131a:	9d 0b       	sbc	r25, r29
    131c:	80 17       	cp	r24, r16
    131e:	91 07       	cpc	r25, r17
    1320:	3c f0       	brlt	.+14     	; 0x1330 <SI4844::convertToChar(unsigned long, char*, unsigned char, unsigned char, unsigned char, bool) [clone .constprop.42]+0x86>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1444
        {
            strValue[i + 1] = strValue[i];
    1322:	f6 01       	movw	r30, r12
    1324:	80 81       	ld	r24, Z
    1326:	81 83       	std	Z+1, r24	; 0x01
    1328:	f1 e0       	ldi	r31, 0x01	; 1
    132a:	cf 1a       	sub	r12, r31
    132c:	d1 08       	sbc	r13, r1
    132e:	f3 cf       	rjmp	.-26     	; 0x1316 <SI4844::convertToChar(unsigned long, char*, unsigned char, unsigned char, unsigned char, bool) [clone .constprop.42]+0x6c>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1446
        }
        strValue[dot] = separator;
    1330:	0c 0f       	add	r16, r28
    1332:	1d 1f       	adc	r17, r29
    1334:	8e e2       	ldi	r24, 0x2E	; 46
    1336:	f8 01       	movw	r30, r16
    1338:	80 83       	st	Z, r24
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1451
    }

    if (remove_leading_zeros)
    {
        if (strValue[0] == '0')
    133a:	88 81       	ld	r24, Y
    133c:	80 33       	cpi	r24, 0x30	; 48
    133e:	31 f4       	brne	.+12     	; 0x134c <SI4844::convertToChar(unsigned long, char*, unsigned char, unsigned char, unsigned char, bool) [clone .constprop.42]+0xa2>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1453
        {
            strValue[0] = ' ';
    1340:	80 e2       	ldi	r24, 0x20	; 32
    1342:	88 83       	st	Y, r24
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1454
            if (strValue[1] == '0')
    1344:	99 81       	ldd	r25, Y+1	; 0x01
    1346:	90 33       	cpi	r25, 0x30	; 48
    1348:	09 f4       	brne	.+2      	; 0x134c <SI4844::convertToChar(unsigned long, char*, unsigned char, unsigned char, unsigned char, bool) [clone .constprop.42]+0xa2>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1455
                strValue[1] = ' ';
    134a:	89 83       	std	Y+1, r24	; 0x01
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1458
        }
    }
}
    134c:	df 91       	pop	r29
    134e:	cf 91       	pop	r28
    1350:	1f 91       	pop	r17
    1352:	0f 91       	pop	r16
    1354:	ff 90       	pop	r15
    1356:	ef 90       	pop	r14
    1358:	df 90       	pop	r13
    135a:	cf 90       	pop	r12
    135c:	bf 90       	pop	r11
    135e:	af 90       	pop	r10
    1360:	7f 90       	pop	r7
    1362:	6f 90       	pop	r6
    1364:	5f 90       	pop	r5
    1366:	4f 90       	pop	r4
    1368:	08 95       	ret

0000136a <twi_readFrom.part.0.constprop.41>:
twi_readFrom.part.0():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:160
 *          data: pointer to byte array
 *          length: number of bytes to read into array
 *          sendStop: Boolean indicating whether to send a stop at the end
 * Output   number of bytes read
 */
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
    136a:	98 2f       	mov	r25, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:177
        twi_handleTimeout(twi_do_reset_on_timeout);
        return 0;
      }
    }
  #else
    while(TWI_READY != twi_state){
    136c:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <twi_state>
    1370:	81 11       	cpse	r24, r1
    1372:	fc cf       	rjmp	.-8      	; 0x136c <twi_readFrom.part.0.constprop.41+0x2>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:181
      continue;
    }
  #endif
  twi_state = TWI_MRX;
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <twi_state>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:182
  twi_sendStop = sendStop;
    137a:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <twi_sendStop>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:184
  // reset error state (0xFF.. no error occurred)
  twi_error = 0xFF;
    137e:	2f ef       	ldi	r18, 0xFF	; 255
    1380:	20 93 ee 02 	sts	0x02EE, r18	; 0x8002ee <twi_error>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:187

  // initialize buffer iteration vars
  twi_masterBuffer = data;
    1384:	28 ec       	ldi	r18, 0xC8	; 200
    1386:	32 e0       	ldi	r19, 0x02	; 2
    1388:	30 93 ed 02 	sts	0x02ED, r19	; 0x8002ed <twi_masterBuffer+0x1>
    138c:	20 93 ec 02 	sts	0x02EC, r18	; 0x8002ec <twi_masterBuffer>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:188
  twi_masterBufferIndex = 0;
    1390:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <twi_masterBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:189
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    1394:	2f ef       	ldi	r18, 0xFF	; 255
    1396:	26 0f       	add	r18, r22
    1398:	20 93 ea 02 	sts	0x02EA, r18	; 0x8002ea <twi_masterBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:197
  // Therefore we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    139c:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <twi_slarw>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:198
  twi_slarw |= address << 1;
    13a0:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <twi_slarw>
    13a4:	99 0f       	add	r25, r25
    13a6:	98 2b       	or	r25, r24
    13a8:	90 93 e9 02 	sts	0x02E9, r25	; 0x8002e9 <twi_slarw>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:200

  if (true == twi_inRepStart) {
    13ac:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <twi_inRepStart>
    13b0:	81 30       	cpi	r24, 0x01	; 1
    13b2:	c9 f4       	brne	.+50     	; 0x13e6 <twi_readFrom.part.0.constprop.41+0x7c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:207
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // Remember, we're dealing with an ASYNC ISR
    13b4:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <twi_inRepStart>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:219
          return 0;
        }
      } while(TWCR & _BV(TWWC));
    #else
      do {
        TWDR = twi_slarw;
    13b8:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <twi_slarw>
    13bc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:220
      } while(TWCR & _BV(TWWC));
    13c0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    13c4:	83 fd       	sbrc	r24, 3
    13c6:	f8 cf       	rjmp	.-16     	; 0x13b8 <twi_readFrom.part.0.constprop.41+0x4e>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:222
    #endif
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
    13c8:	85 ec       	ldi	r24, 0xC5	; 197
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:226
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    13ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:238
        twi_handleTimeout(twi_do_reset_on_timeout);
        return 0;
      }
    }
  #else
    while(TWI_MRX == twi_state){
    13ce:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <twi_state>
    13d2:	81 30       	cpi	r24, 0x01	; 1
    13d4:	e1 f3       	breq	.-8      	; 0x13ce <twi_readFrom.part.0.constprop.41+0x64>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:243
      continue;
    }
  #endif

  if (twi_masterBufferIndex < length)
    13d6:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <twi_masterBufferIndex>
    13da:	86 17       	cp	r24, r22
    13dc:	10 f4       	brcc	.+4      	; 0x13e2 <twi_readFrom.part.0.constprop.41+0x78>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:244
    length = twi_masterBufferIndex;
    13de:	60 91 eb 02 	lds	r22, 0x02EB	; 0x8002eb <twi_masterBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:247

  return length;
}
    13e2:	86 2f       	mov	r24, r22
    13e4:	08 95       	ret
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:226
    #endif
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    13e6:	85 ee       	ldi	r24, 0xE5	; 229
    13e8:	f0 cf       	rjmp	.-32     	; 0x13ca <twi_readFrom.part.0.constprop.41+0x60>

000013ea <Adafruit_GFX::startWrite()>:
flush():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:326
}

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
    13ea:	08 95       	ret

000013ec <HardwareSerial::availableForWrite()>:
availableForWrite():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:195
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    13ec:	fc 01       	movw	r30, r24
    13ee:	53 8d       	ldd	r21, Z+27	; 0x1b
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:196
    tail = _tx_buffer_tail;
    13f0:	44 8d       	ldd	r20, Z+28	; 0x1c
    13f2:	25 2f       	mov	r18, r21
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	84 2f       	mov	r24, r20
    13f8:	90 e0       	ldi	r25, 0x00	; 0
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:198
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    13fa:	82 1b       	sub	r24, r18
    13fc:	93 0b       	sbc	r25, r19
    13fe:	54 17       	cp	r21, r20
    1400:	10 f0       	brcs	.+4      	; 0x1406 <HardwareSerial::availableForWrite()+0x1a>
    1402:	cf 96       	adiw	r24, 0x3f	; 63
    1404:	08 95       	ret
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:199
  return tail - head - 1;
    1406:	01 97       	sbiw	r24, 0x01	; 1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:200
}
    1408:	08 95       	ret

0000140a <HardwareSerial::read()>:
read():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:178
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
    140a:	fc 01       	movw	r30, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:180
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    140c:	91 8d       	ldd	r25, Z+25	; 0x19
    140e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1410:	98 17       	cp	r25, r24
    1412:	61 f0       	breq	.+24     	; 0x142c <HardwareSerial::read()+0x22>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:183
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1414:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1416:	ae 0f       	add	r26, r30
    1418:	bf 2f       	mov	r27, r31
    141a:	b1 1d       	adc	r27, r1
    141c:	5d 96       	adiw	r26, 0x1d	; 29
    141e:	8c 91       	ld	r24, X
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:184
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1420:	92 8d       	ldd	r25, Z+26	; 0x1a
    1422:	9f 5f       	subi	r25, 0xFF	; 255
    1424:	9f 73       	andi	r25, 0x3F	; 63
    1426:	92 8f       	std	Z+26, r25	; 0x1a
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:185
    return c;
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	08 95       	ret
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:181

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    142c:	8f ef       	ldi	r24, 0xFF	; 255
    142e:	9f ef       	ldi	r25, 0xFF	; 255
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:187
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1430:	08 95       	ret

00001432 <HardwareSerial::peek()>:
peek():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:169
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
    1432:	fc 01       	movw	r30, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:170
  if (_rx_buffer_head == _rx_buffer_tail) {
    1434:	91 8d       	ldd	r25, Z+25	; 0x19
    1436:	82 8d       	ldd	r24, Z+26	; 0x1a
    1438:	98 17       	cp	r25, r24
    143a:	31 f0       	breq	.+12     	; 0x1448 <HardwareSerial::peek()+0x16>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:173
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    143c:	82 8d       	ldd	r24, Z+26	; 0x1a
    143e:	e8 0f       	add	r30, r24
    1440:	f1 1d       	adc	r31, r1
    1442:	85 8d       	ldd	r24, Z+29	; 0x1d
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	08 95       	ret
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:171
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1448:	8f ef       	ldi	r24, 0xFF	; 255
    144a:	9f ef       	ldi	r25, 0xFF	; 255
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:175
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    144c:	08 95       	ret

0000144e <HardwareSerial::available()>:
available():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:164
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    144e:	fc 01       	movw	r30, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:165
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1450:	91 8d       	ldd	r25, Z+25	; 0x19
    1452:	22 8d       	ldd	r18, Z+26	; 0x1a
    1454:	89 2f       	mov	r24, r25
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	80 5c       	subi	r24, 0xC0	; 192
    145a:	9f 4f       	sbci	r25, 0xFF	; 255
    145c:	82 1b       	sub	r24, r18
    145e:	91 09       	sbc	r25, r1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:166
}
    1460:	8f 73       	andi	r24, 0x3F	; 63
    1462:	99 27       	eor	r25, r25
    1464:	08 95       	ret

00001466 <HardwareSerial::_tx_udr_empty_irq()>:
_tx_udr_empty_irq():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1466:	fc 01       	movw	r30, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1468:	a4 8d       	ldd	r26, Z+28	; 0x1c
    146a:	a8 0f       	add	r26, r24
    146c:	b9 2f       	mov	r27, r25
    146e:	b1 1d       	adc	r27, r1
    1470:	a3 5a       	subi	r26, 0xA3	; 163
    1472:	bf 4f       	sbci	r27, 0xFF	; 255
    1474:	2c 91       	ld	r18, X
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1476:	84 8d       	ldd	r24, Z+28	; 0x1c
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	01 96       	adiw	r24, 0x01	; 1
    147c:	8f 73       	andi	r24, 0x3F	; 63
    147e:	99 27       	eor	r25, r25
    1480:	84 8f       	std	Z+28, r24	; 0x1c
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:96

  *_udr = c;
    1482:	a6 89       	ldd	r26, Z+22	; 0x16
    1484:	b7 89       	ldd	r27, Z+23	; 0x17
    1486:	2c 93       	st	X, r18
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:104
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

  #ifdef MPCM0
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1488:	a0 89       	ldd	r26, Z+16	; 0x10
    148a:	b1 89       	ldd	r27, Z+17	; 0x11
    148c:	8c 91       	ld	r24, X
    148e:	83 70       	andi	r24, 0x03	; 3
    1490:	80 64       	ori	r24, 0x40	; 64
    1492:	8c 93       	st	X, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:109
  #else
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
  #endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    1494:	93 8d       	ldd	r25, Z+27	; 0x1b
    1496:	84 8d       	ldd	r24, Z+28	; 0x1c
    1498:	98 13       	cpse	r25, r24
    149a:	06 c0       	rjmp	.+12     	; 0x14a8 <HardwareSerial::_tx_udr_empty_irq()+0x42>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
    149c:	02 88       	ldd	r0, Z+18	; 0x12
    149e:	f3 89       	ldd	r31, Z+19	; 0x13
    14a0:	e0 2d       	mov	r30, r0
    14a2:	80 81       	ld	r24, Z
    14a4:	8f 7d       	andi	r24, 0xDF	; 223
    14a6:	80 83       	st	Z, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:113
  }
}
    14a8:	08 95       	ret

000014aa <HardwareSerial::write(unsigned char)>:
write():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:223
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    14aa:	ef 92       	push	r14
    14ac:	ff 92       	push	r15
    14ae:	0f 93       	push	r16
    14b0:	1f 93       	push	r17
    14b2:	cf 93       	push	r28
    14b4:	df 93       	push	r29
    14b6:	ec 01       	movw	r28, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:224
  _written = true;
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	88 8f       	std	Y+24, r24	; 0x18
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:229
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    14bc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    14be:	8c 8d       	ldd	r24, Y+28	; 0x1c
    14c0:	98 13       	cpse	r25, r24
    14c2:	1a c0       	rjmp	.+52     	; 0x14f8 <HardwareSerial::write(unsigned char)+0x4e>
    14c4:	e8 89       	ldd	r30, Y+16	; 0x10
    14c6:	f9 89       	ldd	r31, Y+17	; 0x11
    14c8:	80 81       	ld	r24, Z
    14ca:	85 ff       	sbrs	r24, 5
    14cc:	15 c0       	rjmp	.+42     	; 0x14f8 <HardwareSerial::write(unsigned char)+0x4e>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:238
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    14ce:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
/Users/rcaratti/Library/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    14d0:	f8 94       	cli
write():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:239
      *_udr = c;
    14d2:	ee 89       	ldd	r30, Y+22	; 0x16
    14d4:	ff 89       	ldd	r31, Y+23	; 0x17
    14d6:	60 83       	st	Z, r22
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:241
      #ifdef MPCM0
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    14d8:	e8 89       	ldd	r30, Y+16	; 0x10
    14da:	f9 89       	ldd	r31, Y+17	; 0x11
    14dc:	80 81       	ld	r24, Z
    14de:	83 70       	andi	r24, 0x03	; 3
    14e0:	80 64       	ori	r24, 0x40	; 64
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:271
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    *_ucsrb |= _BV(UDRIE0);
    14e2:	80 83       	st	Z, r24
__iRestore():
/Users/rcaratti/Library/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    14e4:	9f bf       	out	0x3f, r25	; 63
write():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:275
  }
  
  return 1;
}
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	df 91       	pop	r29
    14ec:	cf 91       	pop	r28
    14ee:	1f 91       	pop	r17
    14f0:	0f 91       	pop	r16
    14f2:	ff 90       	pop	r15
    14f4:	ef 90       	pop	r14
    14f6:	08 95       	ret
    14f8:	f6 2e       	mov	r15, r22
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:248
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
      #endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    14fa:	0b 8d       	ldd	r16, Y+27	; 0x1b
    14fc:	10 e0       	ldi	r17, 0x00	; 0
    14fe:	0f 5f       	subi	r16, 0xFF	; 255
    1500:	1f 4f       	sbci	r17, 0xFF	; 255
    1502:	0f 73       	andi	r16, 0x3F	; 63
    1504:	11 27       	eor	r17, r17
    1506:	e0 2e       	mov	r14, r16
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:252

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1508:	8c 8d       	ldd	r24, Y+28	; 0x1c
    150a:	8e 11       	cpse	r24, r14
    150c:	0c c0       	rjmp	.+24     	; 0x1526 <HardwareSerial::write(unsigned char)+0x7c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:253
    if (bit_is_clear(SREG, SREG_I)) {
    150e:	0f b6       	in	r0, 0x3f	; 63
    1510:	07 fc       	sbrc	r0, 7
    1512:	fa cf       	rjmp	.-12     	; 0x1508 <HardwareSerial::write(unsigned char)+0x5e>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:258
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1514:	e8 89       	ldd	r30, Y+16	; 0x10
    1516:	f9 89       	ldd	r31, Y+17	; 0x11
    1518:	80 81       	ld	r24, Z
    151a:	85 ff       	sbrs	r24, 5
    151c:	f5 cf       	rjmp	.-22     	; 0x1508 <HardwareSerial::write(unsigned char)+0x5e>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:259
        _tx_udr_empty_irq();
    151e:	ce 01       	movw	r24, r28
    1520:	0e 94 33 0a 	call	0x1466	; 0x1466 <HardwareSerial::_tx_udr_empty_irq()>
    1524:	f1 cf       	rjmp	.-30     	; 0x1508 <HardwareSerial::write(unsigned char)+0x5e>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:265
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1526:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1528:	ec 0f       	add	r30, r28
    152a:	fd 2f       	mov	r31, r29
    152c:	f1 1d       	adc	r31, r1
    152e:	e3 5a       	subi	r30, 0xA3	; 163
    1530:	ff 4f       	sbci	r31, 0xFF	; 255
    1532:	f0 82       	st	Z, r15
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:269
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1534:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
/Users/rcaratti/Library/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1536:	f8 94       	cli
write():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:270
    _tx_buffer_head = i;
    1538:	0b 8f       	std	Y+27, r16	; 0x1b
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:271
    *_ucsrb |= _BV(UDRIE0);
    153a:	ea 89       	ldd	r30, Y+18	; 0x12
    153c:	fb 89       	ldd	r31, Y+19	; 0x13
    153e:	80 81       	ld	r24, Z
    1540:	80 62       	ori	r24, 0x20	; 32
    1542:	cf cf       	rjmp	.-98     	; 0x14e2 <HardwareSerial::write(unsigned char)+0x38>

00001544 <HardwareSerial::flush()>:
flush():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:203
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1544:	cf 93       	push	r28
    1546:	df 93       	push	r29
    1548:	ec 01       	movw	r28, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:207
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    154a:	88 8d       	ldd	r24, Y+24	; 0x18
    154c:	88 23       	and	r24, r24
    154e:	b9 f0       	breq	.+46     	; 0x157e <HardwareSerial::flush()+0x3a>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:210
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1550:	aa 89       	ldd	r26, Y+18	; 0x12
    1552:	bb 89       	ldd	r27, Y+19	; 0x13
    1554:	e8 89       	ldd	r30, Y+16	; 0x10
    1556:	f9 89       	ldd	r31, Y+17	; 0x11
    1558:	8c 91       	ld	r24, X
    155a:	85 fd       	sbrc	r24, 5
    155c:	03 c0       	rjmp	.+6      	; 0x1564 <HardwareSerial::flush()+0x20>
    155e:	80 81       	ld	r24, Z
    1560:	86 fd       	sbrc	r24, 6
    1562:	0d c0       	rjmp	.+26     	; 0x157e <HardwareSerial::flush()+0x3a>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:211
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1564:	0f b6       	in	r0, 0x3f	; 63
    1566:	07 fc       	sbrc	r0, 7
    1568:	f7 cf       	rjmp	.-18     	; 0x1558 <HardwareSerial::flush()+0x14>
    156a:	8c 91       	ld	r24, X
    156c:	85 ff       	sbrs	r24, 5
    156e:	f2 cf       	rjmp	.-28     	; 0x1554 <HardwareSerial::flush()+0x10>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:215
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
    1570:	80 81       	ld	r24, Z
    1572:	85 ff       	sbrs	r24, 5
    1574:	ed cf       	rjmp	.-38     	; 0x1550 <HardwareSerial::flush()+0xc>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:216
        _tx_udr_empty_irq();
    1576:	ce 01       	movw	r24, r28
    1578:	0e 94 33 0a 	call	0x1466	; 0x1466 <HardwareSerial::_tx_udr_empty_irq()>
    157c:	e9 cf       	rjmp	.-46     	; 0x1550 <HardwareSerial::flush()+0xc>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:220
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    157e:	df 91       	pop	r29
    1580:	cf 91       	pop	r28
    1582:	08 95       	ret

00001584 <Serial0_available()>:
Serial0_available():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1584:	85 ef       	ldi	r24, 0xF5	; 245
    1586:	92 e0       	ldi	r25, 0x02	; 2
    1588:	0e 94 27 0a 	call	0x144e	; 0x144e <HardwareSerial::available()>
    158c:	21 e0       	ldi	r18, 0x01	; 1
    158e:	89 2b       	or	r24, r25
    1590:	09 f4       	brne	.+2      	; 0x1594 <Serial0_available()+0x10>
    1592:	20 e0       	ldi	r18, 0x00	; 0
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
}
    1594:	82 2f       	mov	r24, r18
    1596:	08 95       	ret

00001598 <serialEventRun()>:
serialEventRun():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1598:	80 e0       	ldi	r24, 0x00	; 0
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	89 2b       	or	r24, r25
    159e:	29 f0       	breq	.+10     	; 0x15aa <serialEventRun()+0x12>
    15a0:	0e 94 c2 0a 	call	0x1584	; 0x1584 <Serial0_available()>
    15a4:	81 11       	cpse	r24, r1
    15a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:78
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
    15aa:	08 95       	ret

000015ac <digitalWrite>:
digitalWrite():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:189
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
  uint8_t timer = digitalPinToTimer(pin);
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	fc 01       	movw	r30, r24
    15b0:	e9 5d       	subi	r30, 0xD9	; 217
    15b2:	fd 4e       	sbci	r31, 0xED	; 237
    15b4:	24 91       	lpm	r18, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    15b6:	fc 01       	movw	r30, r24
    15b8:	e0 5f       	subi	r30, 0xF0	; 240
    15ba:	fd 4e       	sbci	r31, 0xED	; 237
    15bc:	34 91       	lpm	r19, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    15be:	fc 01       	movw	r30, r24
    15c0:	e7 50       	subi	r30, 0x07	; 7
    15c2:	fe 4e       	sbci	r31, 0xEE	; 238
    15c4:	e4 91       	lpm	r30, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    15c6:	ee 23       	and	r30, r30
    15c8:	c9 f0       	breq	.+50     	; 0x15fc <digitalWrite+0x50>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    15ca:	22 23       	and	r18, r18
    15cc:	39 f0       	breq	.+14     	; 0x15dc <digitalWrite+0x30>
turnOffPWM():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    15ce:	24 30       	cpi	r18, 0x04	; 4
    15d0:	01 f1       	breq	.+64     	; 0x1612 <digitalWrite+0x66>
    15d2:	a8 f4       	brcc	.+42     	; 0x15fe <digitalWrite+0x52>
    15d4:	22 30       	cpi	r18, 0x02	; 2
    15d6:	69 f1       	breq	.+90     	; 0x1632 <digitalWrite+0x86>
    15d8:	23 30       	cpi	r18, 0x03	; 3
    15da:	79 f1       	breq	.+94     	; 0x163a <digitalWrite+0x8e>
digitalWrite():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:200

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);

  out = portOutputRegister(port);
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	ee 0f       	add	r30, r30
    15e0:	ff 1f       	adc	r31, r31
    15e2:	e1 51       	subi	r30, 0x11	; 17
    15e4:	fe 4e       	sbci	r31, 0xEE	; 238
    15e6:	a5 91       	lpm	r26, Z+
    15e8:	b4 91       	lpm	r27, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    15ea:	8f b7       	in	r24, 0x3f	; 63
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:203
  cli();
    15ec:	f8 94       	cli
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    15ee:	ec 91       	ld	r30, X
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    15f0:	61 11       	cpse	r22, r1
    15f2:	26 c0       	rjmp	.+76     	; 0x1640 <digitalWrite+0x94>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    15f4:	30 95       	com	r19
    15f6:	3e 23       	and	r19, r30
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    15f8:	3c 93       	st	X, r19
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    15fa:	8f bf       	out	0x3f, r24	; 63
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:212
}
    15fc:	08 95       	ret
turnOffPWM():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    15fe:	28 30       	cpi	r18, 0x08	; 8
    1600:	71 f0       	breq	.+28     	; 0x161e <digitalWrite+0x72>
    1602:	29 30       	cpi	r18, 0x09	; 9
    1604:	91 f0       	breq	.+36     	; 0x162a <digitalWrite+0x7e>
    1606:	25 30       	cpi	r18, 0x05	; 5
    1608:	49 f7       	brne	.-46     	; 0x15dc <digitalWrite+0x30>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    160a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    160e:	8f 7d       	andi	r24, 0xDF	; 223
    1610:	03 c0       	rjmp	.+6      	; 0x1618 <digitalWrite+0x6c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:82
  switch (timer)
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    1612:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1616:	8f 77       	andi	r24, 0x7F	; 127
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    1618:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    161c:	df cf       	rjmp	.-66     	; 0x15dc <digitalWrite+0x30>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
    161e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1622:	8f 77       	andi	r24, 0x7F	; 127
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    1624:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1628:	d9 cf       	rjmp	.-78     	; 0x15dc <digitalWrite+0x30>
    162a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    162e:	8f 7d       	andi	r24, 0xDF	; 223
    1630:	f9 cf       	rjmp	.-14     	; 0x1624 <digitalWrite+0x78>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
    1632:	84 b5       	in	r24, 0x24	; 36
    1634:	8f 77       	andi	r24, 0x7F	; 127
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    1636:	84 bd       	out	0x24, r24	; 36
    1638:	d1 cf       	rjmp	.-94     	; 0x15dc <digitalWrite+0x30>
    163a:	84 b5       	in	r24, 0x24	; 36
    163c:	8f 7d       	andi	r24, 0xDF	; 223
    163e:	fb cf       	rjmp	.-10     	; 0x1636 <digitalWrite+0x8a>
digitalWrite():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    1640:	3e 2b       	or	r19, r30
    1642:	da cf       	rjmp	.-76     	; 0x15f8 <digitalWrite+0x4c>

00001644 <pinMode>:
pinMode():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1644:	cf 93       	push	r28
    1646:	df 93       	push	r29
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	fc 01       	movw	r30, r24
    164c:	e0 5f       	subi	r30, 0xF0	; 240
    164e:	fd 4e       	sbci	r31, 0xED	; 237
    1650:	24 91       	lpm	r18, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    1652:	87 50       	subi	r24, 0x07	; 7
    1654:	9e 4e       	sbci	r25, 0xEE	; 238
    1656:	fc 01       	movw	r30, r24
    1658:	84 91       	lpm	r24, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    165a:	88 23       	and	r24, r24
    165c:	d1 f0       	breq	.+52     	; 0x1692 <pinMode+0x4e>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	88 0f       	add	r24, r24
    1662:	99 1f       	adc	r25, r25
    1664:	fc 01       	movw	r30, r24
    1666:	eb 51       	subi	r30, 0x1B	; 27
    1668:	fe 4e       	sbci	r31, 0xEE	; 238
    166a:	a5 91       	lpm	r26, Z+
    166c:	b4 91       	lpm	r27, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    166e:	fc 01       	movw	r30, r24
    1670:	e1 51       	subi	r30, 0x11	; 17
    1672:	fe 4e       	sbci	r31, 0xEE	; 238
    1674:	c5 91       	lpm	r28, Z+
    1676:	d4 91       	lpm	r29, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    1678:	61 11       	cpse	r22, r1
    167a:	0e c0       	rjmp	.+28     	; 0x1698 <pinMode+0x54>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    167c:	9f b7       	in	r25, 0x3f	; 63
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:43
    cli();
    167e:	f8 94       	cli
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    1680:	8c 91       	ld	r24, X
    1682:	e2 2f       	mov	r30, r18
    1684:	e0 95       	com	r30
    1686:	8e 23       	and	r24, r30
    1688:	8c 93       	st	X, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    168a:	28 81       	ld	r18, Y
    168c:	e2 23       	and	r30, r18
    168e:	e8 83       	st	Y, r30
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:46
    SREG = oldSREG;
    1690:	9f bf       	out	0x3f, r25	; 63
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    1692:	df 91       	pop	r29
    1694:	cf 91       	pop	r28
    1696:	08 95       	ret
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:54
    cli();
    *reg &= ~bit;
    *out |= bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    1698:	8f b7       	in	r24, 0x3f	; 63
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:55
    cli();
    169a:	f8 94       	cli
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    169c:	ec 91       	ld	r30, X
    169e:	e2 2b       	or	r30, r18
    16a0:	ec 93       	st	X, r30
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    16a2:	8f bf       	out	0x3f, r24	; 63
    16a4:	f6 cf       	rjmp	.-20     	; 0x1692 <pinMode+0x4e>

000016a6 <delayMicroseconds>:
delayMicroseconds():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:624
  if (us <= 1) return; //  = 3 cycles, (4 when true)

  // the following loop takes 1/4 of a microsecond (4 cycles)
  // per iteration, so execute it four times for each microsecond of
  // delay requested.
  us <<= 2; // x4 us, = 4 cycles
    16a6:	88 0f       	add	r24, r24
    16a8:	99 1f       	adc	r25, r25
    16aa:	88 0f       	add	r24, r24
    16ac:	99 1f       	adc	r25, r25
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:629

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // to 2nd us is at least 8 so we can substract 5
  us -= 5; // = 2 cycles,
    16ae:	05 97       	sbiw	r24, 0x05	; 5
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
    16b0:	01 97       	sbiw	r24, 0x01	; 1
    16b2:	f1 f7       	brne	.-4      	; 0x16b0 <delayMicroseconds+0xa>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    16b4:	08 95       	ret

000016b6 <micros>:
micros():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
    16b6:	3f b7       	in	r19, 0x3f	; 63
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
    16b8:	f8 94       	cli
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
    16ba:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <timer0_overflow_count>
    16be:	90 91 c2 02 	lds	r25, 0x02C2	; 0x8002c2 <timer0_overflow_count+0x1>
    16c2:	a0 91 c3 02 	lds	r26, 0x02C3	; 0x8002c3 <timer0_overflow_count+0x2>
    16c6:	b0 91 c4 02 	lds	r27, 0x02C4	; 0x8002c4 <timer0_overflow_count+0x3>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
    16ca:	26 b5       	in	r18, 0x26	; 38
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
    16cc:	a8 9b       	sbis	0x15, 0	; 21
    16ce:	05 c0       	rjmp	.+10     	; 0x16da <micros+0x24>
    16d0:	2f 3f       	cpi	r18, 0xFF	; 255
    16d2:	19 f0       	breq	.+6      	; 0x16da <micros+0x24>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
    16d4:	01 96       	adiw	r24, 0x01	; 1
    16d6:	a1 1d       	adc	r26, r1
    16d8:	b1 1d       	adc	r27, r1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
    16da:	3f bf       	out	0x3f, r19	; 63
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
    16dc:	ba 2f       	mov	r27, r26
    16de:	a9 2f       	mov	r26, r25
    16e0:	98 2f       	mov	r25, r24
    16e2:	88 27       	eor	r24, r24
    16e4:	bc 01       	movw	r22, r24
    16e6:	cd 01       	movw	r24, r26
    16e8:	62 0f       	add	r22, r18
    16ea:	71 1d       	adc	r23, r1
    16ec:	81 1d       	adc	r24, r1
    16ee:	91 1d       	adc	r25, r1
    16f0:	42 e0       	ldi	r20, 0x02	; 2
    16f2:	66 0f       	add	r22, r22
    16f4:	77 1f       	adc	r23, r23
    16f6:	88 1f       	adc	r24, r24
    16f8:	99 1f       	adc	r25, r25
    16fa:	4a 95       	dec	r20
    16fc:	d1 f7       	brne	.-12     	; 0x16f2 <micros+0x3c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
    16fe:	08 95       	ret

00001700 <delay>:
delay():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
    1700:	8f 92       	push	r8
    1702:	9f 92       	push	r9
    1704:	af 92       	push	r10
    1706:	bf 92       	push	r11
    1708:	cf 92       	push	r12
    170a:	df 92       	push	r13
    170c:	ef 92       	push	r14
    170e:	ff 92       	push	r15
    1710:	4b 01       	movw	r8, r22
    1712:	5c 01       	movw	r10, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
    1714:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <micros>
    1718:	6b 01       	movw	r12, r22
    171a:	7c 01       	movw	r14, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:401

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    171c:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <micros>
    1720:	6c 19       	sub	r22, r12
    1722:	7d 09       	sbc	r23, r13
    1724:	8e 09       	sbc	r24, r14
    1726:	9f 09       	sbc	r25, r15
    1728:	68 3e       	cpi	r22, 0xE8	; 232
    172a:	73 40       	sbci	r23, 0x03	; 3
    172c:	81 05       	cpc	r24, r1
    172e:	91 05       	cpc	r25, r1
    1730:	a8 f3       	brcs	.-22     	; 0x171c <delay+0x1c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:402
      ms--;
    1732:	21 e0       	ldi	r18, 0x01	; 1
    1734:	82 1a       	sub	r8, r18
    1736:	91 08       	sbc	r9, r1
    1738:	a1 08       	sbc	r10, r1
    173a:	b1 08       	sbc	r11, r1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:403
      start += 1000UL;
    173c:	88 ee       	ldi	r24, 0xE8	; 232
    173e:	c8 0e       	add	r12, r24
    1740:	83 e0       	ldi	r24, 0x03	; 3
    1742:	d8 1e       	adc	r13, r24
    1744:	e1 1c       	adc	r14, r1
    1746:	f1 1c       	adc	r15, r1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    1748:	81 14       	cp	r8, r1
    174a:	91 04       	cpc	r9, r1
    174c:	a1 04       	cpc	r10, r1
    174e:	b1 04       	cpc	r11, r1
    1750:	29 f7       	brne	.-54     	; 0x171c <delay+0x1c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
    1752:	ff 90       	pop	r15
    1754:	ef 90       	pop	r14
    1756:	df 90       	pop	r13
    1758:	cf 90       	pop	r12
    175a:	bf 90       	pop	r11
    175c:	af 90       	pop	r10
    175e:	9f 90       	pop	r9
    1760:	8f 90       	pop	r8
    1762:	08 95       	ret

00001764 <interrupt_hundler()>:
interrupt_hundler():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:41
#ifdef ESP8266    // if the controller is ESP8266, add IRAM_ATTR.
  IRAM_ATTR 
#endif
void interrupt_hundler()
{
   data_from_device = true;
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <_ZL16data_from_device.lto_priv.64>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:42
}
    176a:	08 95       	ret

0000176c <TwoWire::onRequestService()>:
onRequestService():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:366
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
  txBufferLength = 0;
  // alert user program
  user_onRequest();
}
    176c:	08 95       	ret

0000176e <TwoWire::onReceiveService(unsigned char*, int)>:
onReceiveService():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:351
  // set rx iterator vars
  rxBufferIndex = 0;
  rxBufferLength = numBytes;
  // alert user program
  user_onReceive(numBytes);
}
    176e:	08 95       	ret

00001770 <nothing>:
nothing():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WInterrupts.c:36

#include "wiring_private.h"

static void nothing(void)
{
}
    1770:	08 95       	ret

00001772 <Print::write(unsigned char const*, unsigned int)>:
write():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    1772:	af 92       	push	r10
    1774:	bf 92       	push	r11
    1776:	cf 92       	push	r12
    1778:	df 92       	push	r13
    177a:	ef 92       	push	r14
    177c:	ff 92       	push	r15
    177e:	0f 93       	push	r16
    1780:	1f 93       	push	r17
    1782:	cf 93       	push	r28
    1784:	df 93       	push	r29
    1786:	6c 01       	movw	r12, r24
    1788:	7b 01       	movw	r14, r22
    178a:	8b 01       	movw	r16, r22
    178c:	04 0f       	add	r16, r20
    178e:	15 1f       	adc	r17, r21
    1790:	eb 01       	movw	r28, r22
    1792:	5e 01       	movw	r10, r28
    1794:	ae 18       	sub	r10, r14
    1796:	bf 08       	sbc	r11, r15
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
    1798:	c0 17       	cp	r28, r16
    179a:	d1 07       	cpc	r29, r17
    179c:	59 f0       	breq	.+22     	; 0x17b4 <Print::write(unsigned char const*, unsigned int)+0x42>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
    179e:	69 91       	ld	r22, Y+
    17a0:	d6 01       	movw	r26, r12
    17a2:	ed 91       	ld	r30, X+
    17a4:	fc 91       	ld	r31, X
    17a6:	01 90       	ld	r0, Z+
    17a8:	f0 81       	ld	r31, Z
    17aa:	e0 2d       	mov	r30, r0
    17ac:	c6 01       	movw	r24, r12
    17ae:	09 95       	icall
    17b0:	89 2b       	or	r24, r25
    17b2:	79 f7       	brne	.-34     	; 0x1792 <Print::write(unsigned char const*, unsigned int)+0x20>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
    17b4:	c5 01       	movw	r24, r10
    17b6:	df 91       	pop	r29
    17b8:	cf 91       	pop	r28
    17ba:	1f 91       	pop	r17
    17bc:	0f 91       	pop	r16
    17be:	ff 90       	pop	r15
    17c0:	ef 90       	pop	r14
    17c2:	df 90       	pop	r13
    17c4:	cf 90       	pop	r12
    17c6:	bf 90       	pop	r11
    17c8:	af 90       	pop	r10
    17ca:	08 95       	ret

000017cc <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]>:
_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij.part.9():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:850
    @return None (void).
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y,
    17cc:	ef 92       	push	r14
    17ce:	ff 92       	push	r15
    17d0:	0f 93       	push	r16
    17d2:	1f 93       	push	r17
    17d4:	cf 93       	push	r28
    17d6:	df 93       	push	r29
    17d8:	ec 01       	movw	r28, r24
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:853
                                             int16_t __h, uint16_t color) {

  if ((x >= 0) && (x < WIDTH)) { // X coord in bounds?
    17da:	ec 80       	ldd	r14, Y+4	; 0x04
    17dc:	fd 80       	ldd	r15, Y+5	; 0x05
    17de:	6e 15       	cp	r22, r14
    17e0:	7f 05       	cpc	r23, r15
    17e2:	0c f0       	brlt	.+2      	; 0x17e6 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0x1a>
    17e4:	70 c0       	rjmp	.+224    	; 0x18c6 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0xfa>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:854
    if (__y < 0) {               // Clip top
    17e6:	57 ff       	sbrs	r21, 7
    17e8:	04 c0       	rjmp	.+8      	; 0x17f2 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0x26>
    17ea:	24 0f       	add	r18, r20
    17ec:	35 1f       	adc	r19, r21
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:856
      __h += __y;
      __y = 0;
    17ee:	50 e0       	ldi	r21, 0x00	; 0
    17f0:	40 e0       	ldi	r20, 0x00	; 0
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:858
    }
    if ((__y + __h) > HEIGHT) { // Clip bottom
    17f2:	8e 81       	ldd	r24, Y+6	; 0x06
    17f4:	9f 81       	ldd	r25, Y+7	; 0x07
    17f6:	fa 01       	movw	r30, r20
    17f8:	e2 0f       	add	r30, r18
    17fa:	f3 1f       	adc	r31, r19
    17fc:	8e 17       	cp	r24, r30
    17fe:	9f 07       	cpc	r25, r31
    1800:	1c f4       	brge	.+6      	; 0x1808 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0x3c>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:859
      __h = (HEIGHT - __y);
    1802:	9c 01       	movw	r18, r24
    1804:	24 1b       	sub	r18, r20
    1806:	35 0b       	sbc	r19, r21
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:861
    }
    if (__h > 0) { // Proceed only if height is now positive
    1808:	12 16       	cp	r1, r18
    180a:	13 06       	cpc	r1, r19
    180c:	0c f0       	brlt	.+2      	; 0x1810 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0x44>
    180e:	5b c0       	rjmp	.+182    	; 0x18c6 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0xfa>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:864
      // this display doesn't need ints for coordinates,
      // use local byte registers for faster juggling
      uint8_t y = __y, h = __h;
    1810:	92 2f       	mov	r25, r18
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:865
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
    1812:	84 2f       	mov	r24, r20
    1814:	86 95       	lsr	r24
    1816:	86 95       	lsr	r24
    1818:	86 95       	lsr	r24
    181a:	8e 9d       	mul	r24, r14
    181c:	d0 01       	movw	r26, r0
    181e:	8f 9d       	mul	r24, r15
    1820:	b0 0d       	add	r27, r0
    1822:	11 24       	eor	r1, r1
    1824:	6a 0f       	add	r22, r26
    1826:	7b 1f       	adc	r23, r27
    1828:	af 8d       	ldd	r26, Y+31	; 0x1f
    182a:	b8 a1       	ldd	r27, Y+32	; 0x20
    182c:	a6 0f       	add	r26, r22
    182e:	b7 1f       	adc	r27, r23
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:868

      // do the first partial byte, if necessary - this requires some masking
      uint8_t mod = (y & 7);
    1830:	47 70       	andi	r20, 0x07	; 7
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:869
      if (mod) {
    1832:	49 f1       	breq	.+82     	; 0x1886 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0xba>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:871
        // mask off the high n bits we want to set
        mod = 8 - mod;
    1834:	88 e0       	ldi	r24, 0x08	; 8
    1836:	84 1b       	sub	r24, r20
    1838:	48 2f       	mov	r20, r24
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:877
        // note - lookup table results in a nearly 10% performance
        // improvement in fill* functions
        // uint8_t mask = ~(0xFF >> mod);
        static const uint8_t PROGMEM premask[8] = {0x00, 0x80, 0xC0, 0xE0,
                                                   0xF0, 0xF8, 0xFC, 0xFE};
        uint8_t mask = pgm_read_byte(&premask[mod]);
    183a:	68 2f       	mov	r22, r24
    183c:	70 e0       	ldi	r23, 0x00	; 0
    183e:	fb 01       	movw	r30, r22
    1840:	e5 5d       	subi	r30, 0xD5	; 213
    1842:	f2 4f       	sbci	r31, 0xF2	; 242
    1844:	e4 91       	lpm	r30, Z
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:879
        // adjust the mask if we're not going to reach the end of this byte
        if (h < mod)
    1846:	28 17       	cp	r18, r24
    1848:	08 f0       	brcs	.+2      	; 0x184c <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0x80>
    184a:	63 c0       	rjmp	.+198    	; 0x1912 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0x146>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:880
          mask &= (0XFF >> (mod - h));
    184c:	62 1b       	sub	r22, r18
    184e:	71 09       	sbc	r23, r1
    1850:	2f ef       	ldi	r18, 0xFF	; 255
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	02 c0       	rjmp	.+4      	; 0x185a <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0x8e>
    1856:	35 95       	asr	r19
    1858:	27 95       	ror	r18
    185a:	6a 95       	dec	r22
    185c:	e2 f7       	brpl	.-8      	; 0x1856 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0x8a>
    185e:	e2 23       	and	r30, r18
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:882

        switch (color) {
    1860:	01 30       	cpi	r16, 0x01	; 1
    1862:	11 05       	cpc	r17, r1
    1864:	39 f0       	breq	.+14     	; 0x1874 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0xa8>
    1866:	b0 f1       	brcs	.+108    	; 0x18d4 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0x108>
    1868:	02 30       	cpi	r16, 0x02	; 2
    186a:	11 05       	cpc	r17, r1
    186c:	61 f5       	brne	.+88     	; 0x18c6 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0xfa>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:890
          break;
        case SSD1306_BLACK:
          *pBuf &= ~mask;
          break;
        case SSD1306_INVERSE:
          *pBuf ^= mask;
    186e:	8c 91       	ld	r24, X
    1870:	e8 27       	eor	r30, r24
    1872:	02 c0       	rjmp	.+4      	; 0x1878 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0xac>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:884
        if (h < mod)
          mask &= (0XFF >> (mod - h));

        switch (color) {
        case SSD1306_WHITE:
          *pBuf |= mask;
    1874:	8c 91       	ld	r24, X
    1876:	e8 2b       	or	r30, r24
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:890
          break;
        case SSD1306_BLACK:
          *pBuf &= ~mask;
          break;
        case SSD1306_INVERSE:
          *pBuf ^= mask;
    1878:	ec 93       	st	X, r30
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:896
          break;
        }
        pBuf += WIDTH;
      }

      if (h >= mod) { // More to go?
    187a:	94 17       	cp	r25, r20
    187c:	20 f1       	brcs	.+72     	; 0x18c6 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0xfa>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:893
          break;
        case SSD1306_INVERSE:
          *pBuf ^= mask;
          break;
        }
        pBuf += WIDTH;
    187e:	2c 81       	ldd	r18, Y+4	; 0x04
    1880:	3d 81       	ldd	r19, Y+5	; 0x05
    1882:	a2 0f       	add	r26, r18
    1884:	b3 1f       	adc	r27, r19
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:897
      }

      if (h >= mod) { // More to go?
        h -= mod;
    1886:	e9 2f       	mov	r30, r25
    1888:	e4 1b       	sub	r30, r20
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:899
        // Write solid bytes while we can - effectively 8 rows at a time
        if (h >= 8) {
    188a:	e8 30       	cpi	r30, 0x08	; 8
    188c:	78 f0       	brcs	.+30     	; 0x18ac <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0xe0>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:900
          if (color == SSD1306_INVERSE) {
    188e:	02 30       	cpi	r16, 0x02	; 2
    1890:	11 05       	cpc	r17, r1
    1892:	21 f5       	brne	.+72     	; 0x18dc <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0x110>
    1894:	8e 2f       	mov	r24, r30
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:904
            // separate copy of the code so we don't impact performance of
            // black/white write version with an extra comparison per loop
            do {
              *pBuf ^= 0xFF; // Invert byte
    1896:	9c 91       	ld	r25, X
    1898:	90 95       	com	r25
    189a:	9c 93       	st	X, r25
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:905
              pBuf += WIDTH; // Advance pointer 8 rows
    189c:	2c 81       	ldd	r18, Y+4	; 0x04
    189e:	3d 81       	ldd	r19, Y+5	; 0x05
    18a0:	a2 0f       	add	r26, r18
    18a2:	b3 1f       	adc	r27, r19
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:906
              h -= 8;        // Subtract 8 rows from height
    18a4:	88 50       	subi	r24, 0x08	; 8
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:907
            } while (h >= 8);
    18a6:	88 30       	cpi	r24, 0x08	; 8
    18a8:	b0 f7       	brcc	.-20     	; 0x1896 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0xca>
    18aa:	e7 70       	andi	r30, 0x07	; 7
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:919
              h -= 8;        // Subtract 8 rows from height
            } while (h >= 8);
          }
        }

        if (h) { // Do the final partial byte, if necessary
    18ac:	ee 23       	and	r30, r30
    18ae:	59 f0       	breq	.+22     	; 0x18c6 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0xfa>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:928
          // uint8_t mask = (1 << mod) - 1;
          // note - lookup table results in a nearly 10% performance
          // improvement in fill* functions
          static const uint8_t PROGMEM postmask[8] = {0x00, 0x01, 0x03, 0x07,
                                                      0x0F, 0x1F, 0x3F, 0x7F};
          uint8_t mask = pgm_read_byte(&postmask[mod]);
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	ed 5d       	subi	r30, 0xDD	; 221
    18b4:	f2 4f       	sbci	r31, 0xF2	; 242
    18b6:	e4 91       	lpm	r30, Z
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:929
          switch (color) {
    18b8:	01 30       	cpi	r16, 0x01	; 1
    18ba:	11 05       	cpc	r17, r1
    18bc:	f9 f0       	breq	.+62     	; 0x18fc <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0x130>
    18be:	10 f1       	brcs	.+68     	; 0x1904 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0x138>
    18c0:	02 30       	cpi	r16, 0x02	; 2
    18c2:	11 05       	cpc	r17, r1
    18c4:	19 f1       	breq	.+70     	; 0x190c <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0x140>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:944
          }
        }
      }
    } // endif positive height
  }   // endif x in bounds
}
    18c6:	df 91       	pop	r29
    18c8:	cf 91       	pop	r28
    18ca:	1f 91       	pop	r17
    18cc:	0f 91       	pop	r16
    18ce:	ff 90       	pop	r15
    18d0:	ef 90       	pop	r14
    18d2:	08 95       	ret
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:887
        switch (color) {
        case SSD1306_WHITE:
          *pBuf |= mask;
          break;
        case SSD1306_BLACK:
          *pBuf &= ~mask;
    18d4:	e0 95       	com	r30
    18d6:	8c 91       	ld	r24, X
    18d8:	e8 23       	and	r30, r24
    18da:	ce cf       	rjmp	.-100    	; 0x1878 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0xac>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:910
              pBuf += WIDTH; // Advance pointer 8 rows
              h -= 8;        // Subtract 8 rows from height
            } while (h >= 8);
          } else {
            // store a local value to work with
            uint8_t val = (color != SSD1306_BLACK) ? 255 : 0;
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	01 15       	cp	r16, r1
    18e0:	11 05       	cpc	r17, r1
    18e2:	09 f4       	brne	.+2      	; 0x18e6 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0x11a>
    18e4:	80 e0       	ldi	r24, 0x00	; 0
    18e6:	81 95       	neg	r24
    18e8:	9e 2f       	mov	r25, r30
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:912
            do {
              *pBuf = val;   // Set byte
    18ea:	8c 93       	st	X, r24
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:913
              pBuf += WIDTH; // Advance pointer 8 rows
    18ec:	2c 81       	ldd	r18, Y+4	; 0x04
    18ee:	3d 81       	ldd	r19, Y+5	; 0x05
    18f0:	a2 0f       	add	r26, r18
    18f2:	b3 1f       	adc	r27, r19
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:914
              h -= 8;        // Subtract 8 rows from height
    18f4:	98 50       	subi	r25, 0x08	; 8
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:915
            } while (h >= 8);
    18f6:	98 30       	cpi	r25, 0x08	; 8
    18f8:	c0 f7       	brcc	.-16     	; 0x18ea <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0x11e>
    18fa:	d7 cf       	rjmp	.-82     	; 0x18aa <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0xde>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:931
          static const uint8_t PROGMEM postmask[8] = {0x00, 0x01, 0x03, 0x07,
                                                      0x0F, 0x1F, 0x3F, 0x7F};
          uint8_t mask = pgm_read_byte(&postmask[mod]);
          switch (color) {
          case SSD1306_WHITE:
            *pBuf |= mask;
    18fc:	8c 91       	ld	r24, X
    18fe:	e8 2b       	or	r30, r24
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:937
            break;
          case SSD1306_BLACK:
            *pBuf &= ~mask;
            break;
          case SSD1306_INVERSE:
            *pBuf ^= mask;
    1900:	ec 93       	st	X, r30
    1902:	e1 cf       	rjmp	.-62     	; 0x18c6 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0xfa>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:934
          switch (color) {
          case SSD1306_WHITE:
            *pBuf |= mask;
            break;
          case SSD1306_BLACK:
            *pBuf &= ~mask;
    1904:	e0 95       	com	r30
    1906:	8c 91       	ld	r24, X
    1908:	e8 23       	and	r30, r24
    190a:	fa cf       	rjmp	.-12     	; 0x1900 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0x134>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:937
            break;
          case SSD1306_INVERSE:
            *pBuf ^= mask;
    190c:	8c 91       	ld	r24, X
    190e:	e8 27       	eor	r30, r24
    1910:	f7 cf       	rjmp	.-18     	; 0x1900 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0x134>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:882
        uint8_t mask = pgm_read_byte(&premask[mod]);
        // adjust the mask if we're not going to reach the end of this byte
        if (h < mod)
          mask &= (0XFF >> (mod - h));

        switch (color) {
    1912:	01 30       	cpi	r16, 0x01	; 1
    1914:	11 05       	cpc	r17, r1
    1916:	09 f4       	brne	.+2      	; 0x191a <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0x14e>
    1918:	ad cf       	rjmp	.-166    	; 0x1874 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0xa8>
    191a:	e0 f2       	brcs	.-72     	; 0x18d4 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0x108>
    191c:	02 30       	cpi	r16, 0x02	; 2
    191e:	11 05       	cpc	r17, r1
    1920:	09 f4       	brne	.+2      	; 0x1924 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0x158>
    1922:	a5 cf       	rjmp	.-182    	; 0x186e <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0xa2>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:893
          break;
        case SSD1306_INVERSE:
          *pBuf ^= mask;
          break;
        }
        pBuf += WIDTH;
    1924:	ae 0d       	add	r26, r14
    1926:	bf 1d       	adc	r27, r15
    1928:	ae cf       	rjmp	.-164    	; 0x1886 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0xba>

0000192a <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int) [clone .part.8]>:
_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij.part.8():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:751
    @return None (void).
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w,
    192a:	0f 93       	push	r16
    192c:	1f 93       	push	r17
    192e:	cf 93       	push	r28
    1930:	df 93       	push	r29
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:755
                                             uint16_t color) {

  if ((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
    if (x < 0) {                  // Clip left
    1932:	77 ff       	sbrs	r23, 7
    1934:	04 c0       	rjmp	.+8      	; 0x193e <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int) [clone .part.8]+0x14>
    1936:	26 0f       	add	r18, r22
    1938:	37 1f       	adc	r19, r23
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:757
      w += x;
      x = 0;
    193a:	70 e0       	ldi	r23, 0x00	; 0
    193c:	60 e0       	ldi	r22, 0x00	; 0
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:759
    }
    if ((x + w) > WIDTH) { // Clip right
    193e:	dc 01       	movw	r26, r24
    1940:	14 96       	adiw	r26, 0x04	; 4
    1942:	cd 91       	ld	r28, X+
    1944:	dc 91       	ld	r29, X
    1946:	fb 01       	movw	r30, r22
    1948:	e2 0f       	add	r30, r18
    194a:	f3 1f       	adc	r31, r19
    194c:	ce 17       	cp	r28, r30
    194e:	df 07       	cpc	r29, r31
    1950:	1c f4       	brge	.+6      	; 0x1958 <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int) [clone .part.8]+0x2e>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:760
      w = (WIDTH - x);
    1952:	9e 01       	movw	r18, r28
    1954:	26 1b       	sub	r18, r22
    1956:	37 0b       	sbc	r19, r23
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:762
    }
    if (w > 0) { // Proceed only if width is positive
    1958:	12 16       	cp	r1, r18
    195a:	13 06       	cpc	r1, r19
    195c:	4c f5       	brge	.+82     	; 0x19b0 <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int) [clone .part.8]+0x86>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:763
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x], mask = 1 << (y & 7);
    195e:	fa 01       	movw	r30, r20
    1960:	57 fd       	sbrc	r21, 7
    1962:	37 96       	adiw	r30, 0x07	; 7
    1964:	a3 e0       	ldi	r26, 0x03	; 3
    1966:	f5 95       	asr	r31
    1968:	e7 95       	ror	r30
    196a:	aa 95       	dec	r26
    196c:	e1 f7       	brne	.-8      	; 0x1966 <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int) [clone .part.8]+0x3c>
    196e:	ec 9f       	mul	r30, r28
    1970:	d0 01       	movw	r26, r0
    1972:	ed 9f       	mul	r30, r29
    1974:	b0 0d       	add	r27, r0
    1976:	fc 9f       	mul	r31, r28
    1978:	b0 0d       	add	r27, r0
    197a:	11 24       	eor	r1, r1
    197c:	6a 0f       	add	r22, r26
    197e:	7b 1f       	adc	r23, r27
    1980:	dc 01       	movw	r26, r24
    1982:	5f 96       	adiw	r26, 0x1f	; 31
    1984:	ed 91       	ld	r30, X+
    1986:	fc 91       	ld	r31, X
    1988:	e6 0f       	add	r30, r22
    198a:	f7 1f       	adc	r31, r23
    198c:	47 70       	andi	r20, 0x07	; 7
    198e:	55 27       	eor	r21, r21
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	01 c0       	rjmp	.+2      	; 0x1998 <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int) [clone .part.8]+0x6e>
    1996:	88 0f       	add	r24, r24
    1998:	4a 95       	dec	r20
    199a:	ea f7       	brpl	.-6      	; 0x1996 <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int) [clone .part.8]+0x6c>
    199c:	48 2f       	mov	r20, r24
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:764
      switch (color) {
    199e:	01 30       	cpi	r16, 0x01	; 1
    19a0:	11 05       	cpc	r17, r1
    19a2:	59 f0       	breq	.+22     	; 0x19ba <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int) [clone .part.8]+0x90>
    19a4:	a8 f0       	brcs	.+42     	; 0x19d0 <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int) [clone .part.8]+0xa6>
    19a6:	2e 0f       	add	r18, r30
    19a8:	3f 1f       	adc	r19, r31
    19aa:	02 30       	cpi	r16, 0x02	; 2
    19ac:	11 05       	cpc	r17, r1
    19ae:	e1 f0       	breq	.+56     	; 0x19e8 <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int) [clone .part.8]+0xbe>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:784
        };
        break;
      }
    }
  }
}
    19b0:	df 91       	pop	r29
    19b2:	cf 91       	pop	r28
    19b4:	1f 91       	pop	r17
    19b6:	0f 91       	pop	r16
    19b8:	08 95       	ret
    19ba:	2e 0f       	add	r18, r30
    19bc:	3f 1f       	adc	r19, r31
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:766
    }
    if (w > 0) { // Proceed only if width is positive
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x], mask = 1 << (y & 7);
      switch (color) {
      case SSD1306_WHITE:
        while (w--) {
    19be:	e2 17       	cp	r30, r18
    19c0:	f3 07       	cpc	r31, r19
    19c2:	b1 f3       	breq	.-20     	; 0x19b0 <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int) [clone .part.8]+0x86>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:767
          *pBuf++ |= mask;
    19c4:	81 91       	ld	r24, Z+
    19c6:	df 01       	movw	r26, r30
    19c8:	11 97       	sbiw	r26, 0x01	; 1
    19ca:	84 2b       	or	r24, r20
    19cc:	8c 93       	st	X, r24
    19ce:	f7 cf       	rjmp	.-18     	; 0x19be <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int) [clone .part.8]+0x94>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:771
        };
        break;
      case SSD1306_BLACK:
        mask = ~mask;
    19d0:	80 95       	com	r24
    19d2:	2e 0f       	add	r18, r30
    19d4:	3f 1f       	adc	r19, r31
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:772
        while (w--) {
    19d6:	e2 17       	cp	r30, r18
    19d8:	f3 07       	cpc	r31, r19
    19da:	51 f3       	breq	.-44     	; 0x19b0 <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int) [clone .part.8]+0x86>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:773
          *pBuf++ &= mask;
    19dc:	91 91       	ld	r25, Z+
    19de:	df 01       	movw	r26, r30
    19e0:	11 97       	sbiw	r26, 0x01	; 1
    19e2:	98 23       	and	r25, r24
    19e4:	9c 93       	st	X, r25
    19e6:	f7 cf       	rjmp	.-18     	; 0x19d6 <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int) [clone .part.8]+0xac>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:777
        };
        break;
      case SSD1306_INVERSE:
        while (w--) {
    19e8:	e2 17       	cp	r30, r18
    19ea:	f3 07       	cpc	r31, r19
    19ec:	09 f3       	breq	.-62     	; 0x19b0 <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int) [clone .part.8]+0x86>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:778
          *pBuf++ ^= mask;
    19ee:	81 91       	ld	r24, Z+
    19f0:	df 01       	movw	r26, r30
    19f2:	11 97       	sbiw	r26, 0x01	; 1
    19f4:	84 27       	eor	r24, r20
    19f6:	8c 93       	st	X, r24
    19f8:	f7 cf       	rjmp	.-18     	; 0x19e8 <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int) [clone .part.8]+0xbe>

000019fa <Adafruit_SSD1306::drawFastVLine(int, int, int, unsigned int)>:
drawFastVLine():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:803
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h,
                                     uint16_t color) {
    19fa:	0f 93       	push	r16
    19fc:	1f 93       	push	r17
    19fe:	fa 01       	movw	r30, r20
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:805
  bool bSwap = false;
  switch (rotation) {
    1a00:	dc 01       	movw	r26, r24
    1a02:	56 96       	adiw	r26, 0x16	; 22
    1a04:	4c 91       	ld	r20, X
    1a06:	56 97       	sbiw	r26, 0x16	; 22
    1a08:	42 30       	cpi	r20, 0x02	; 2
    1a0a:	e9 f0       	breq	.+58     	; 0x1a46 <Adafruit_SSD1306::drawFastVLine(int, int, int, unsigned int)+0x4c>
    1a0c:	43 30       	cpi	r20, 0x03	; 3
    1a0e:	a1 f1       	breq	.+104    	; 0x1a78 <Adafruit_SSD1306::drawFastVLine(int, int, int, unsigned int)+0x7e>
    1a10:	41 30       	cpi	r20, 0x01	; 1
    1a12:	61 f5       	brne	.+88     	; 0x1a6c <Adafruit_SSD1306::drawFastVLine(int, int, int, unsigned int)+0x72>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:811
  case 1:
    // 90 degree rotation, swap x & y for rotation,
    // then invert x and adjust x for h (now to become w)
    bSwap = true;
    ssd1306_swap(x, y);
    x = WIDTH - x - 1;
    1a14:	14 96       	adiw	r26, 0x04	; 4
    1a16:	4d 91       	ld	r20, X+
    1a18:	5c 91       	ld	r21, X
    1a1a:	da 01       	movw	r26, r20
    1a1c:	ae 1b       	sub	r26, r30
    1a1e:	bf 0b       	sbc	r27, r31
    1a20:	fd 01       	movw	r30, r26
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:812
    x -= (h - 1);
    1a22:	e2 1b       	sub	r30, r18
    1a24:	f3 0b       	sbc	r31, r19
drawFastHLineInternal():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:754
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w,
                                             uint16_t color) {

  if ((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
    1a26:	77 fd       	sbrc	r23, 7
    1a28:	0b c0       	rjmp	.+22     	; 0x1a40 <Adafruit_SSD1306::drawFastVLine(int, int, int, unsigned int)+0x46>
    1a2a:	dc 01       	movw	r26, r24
    1a2c:	16 96       	adiw	r26, 0x06	; 6
    1a2e:	4d 91       	ld	r20, X+
    1a30:	5c 91       	ld	r21, X
    1a32:	64 17       	cp	r22, r20
    1a34:	75 07       	cpc	r23, r21
    1a36:	24 f4       	brge	.+8      	; 0x1a40 <Adafruit_SSD1306::drawFastVLine(int, int, int, unsigned int)+0x46>
    1a38:	ab 01       	movw	r20, r22
    1a3a:	bf 01       	movw	r22, r30
    1a3c:	0e 94 95 0c 	call	0x192a	; 0x192a <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int) [clone .part.8]>
drawFastVLine():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:832

  if (bSwap)
    drawFastHLineInternal(x, y, h, color);
  else
    drawFastVLineInternal(x, y, h, color);
}
    1a40:	1f 91       	pop	r17
    1a42:	0f 91       	pop	r16
    1a44:	08 95       	ret
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:816
    x = WIDTH - x - 1;
    x -= (h - 1);
    break;
  case 2:
    // 180 degree rotation, invert x and y, then shift y around for height.
    x = WIDTH - x - 1;
    1a46:	14 96       	adiw	r26, 0x04	; 4
    1a48:	4d 91       	ld	r20, X+
    1a4a:	5c 91       	ld	r21, X
    1a4c:	da 01       	movw	r26, r20
    1a4e:	a6 1b       	sub	r26, r22
    1a50:	b7 0b       	sbc	r27, r23
    1a52:	bd 01       	movw	r22, r26
    1a54:	61 50       	subi	r22, 0x01	; 1
    1a56:	71 09       	sbc	r23, r1
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:817
    y = HEIGHT - y - 1;
    1a58:	dc 01       	movw	r26, r24
    1a5a:	16 96       	adiw	r26, 0x06	; 6
    1a5c:	4d 91       	ld	r20, X+
    1a5e:	5c 91       	ld	r21, X
    1a60:	da 01       	movw	r26, r20
    1a62:	ae 1b       	sub	r26, r30
    1a64:	bf 0b       	sbc	r27, r31
    1a66:	fd 01       	movw	r30, r26
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:818
    y -= (h - 1);
    1a68:	e2 1b       	sub	r30, r18
    1a6a:	f3 0b       	sbc	r31, r19
drawFastVLineInternal():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:853
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y,
                                             int16_t __h, uint16_t color) {

  if ((x >= 0) && (x < WIDTH)) { // X coord in bounds?
    1a6c:	77 fd       	sbrc	r23, 7
    1a6e:	e8 cf       	rjmp	.-48     	; 0x1a40 <Adafruit_SSD1306::drawFastVLine(int, int, int, unsigned int)+0x46>
    1a70:	af 01       	movw	r20, r30
    1a72:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]>
    1a76:	e4 cf       	rjmp	.-56     	; 0x1a40 <Adafruit_SSD1306::drawFastVLine(int, int, int, unsigned int)+0x46>
drawFastVLine():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:824
    break;
  case 3:
    // 270 degree rotation, swap x & y for rotation, then invert y
    bSwap = true;
    ssd1306_swap(x, y);
    y = HEIGHT - y - 1;
    1a78:	16 96       	adiw	r26, 0x06	; 6
    1a7a:	4d 91       	ld	r20, X+
    1a7c:	5c 91       	ld	r21, X
    1a7e:	da 01       	movw	r26, r20
    1a80:	a6 1b       	sub	r26, r22
    1a82:	b7 0b       	sbc	r27, r23
    1a84:	bd 01       	movw	r22, r26
    1a86:	61 50       	subi	r22, 0x01	; 1
    1a88:	71 09       	sbc	r23, r1
    1a8a:	cd cf       	rjmp	.-102    	; 0x1a26 <Adafruit_SSD1306::drawFastVLine(int, int, int, unsigned int)+0x2c>

00001a8c <Adafruit_SSD1306::drawFastHLine(int, int, int, unsigned int)>:
drawFastHLine():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:703
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w,
                                     uint16_t color) {
    1a8c:	0f 93       	push	r16
    1a8e:	1f 93       	push	r17
    1a90:	fa 01       	movw	r30, r20
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:705
  bool bSwap = false;
  switch (rotation) {
    1a92:	dc 01       	movw	r26, r24
    1a94:	56 96       	adiw	r26, 0x16	; 22
    1a96:	4c 91       	ld	r20, X
    1a98:	56 97       	sbiw	r26, 0x16	; 22
    1a9a:	42 30       	cpi	r20, 0x02	; 2
    1a9c:	a9 f0       	breq	.+42     	; 0x1ac8 <Adafruit_SSD1306::drawFastHLine(int, int, int, unsigned int)+0x3c>
    1a9e:	43 30       	cpi	r20, 0x03	; 3
    1aa0:	91 f1       	breq	.+100    	; 0x1b06 <Adafruit_SSD1306::drawFastHLine(int, int, int, unsigned int)+0x7a>
    1aa2:	41 30       	cpi	r20, 0x01	; 1
    1aa4:	19 f5       	brne	.+70     	; 0x1aec <Adafruit_SSD1306::drawFastHLine(int, int, int, unsigned int)+0x60>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:710
  case 1:
    // 90 degree rotation, swap x & y for rotation, then invert x
    bSwap = true;
    ssd1306_swap(x, y);
    x = WIDTH - x - 1;
    1aa6:	14 96       	adiw	r26, 0x04	; 4
    1aa8:	4d 91       	ld	r20, X+
    1aaa:	5c 91       	ld	r21, X
    1aac:	da 01       	movw	r26, r20
    1aae:	ae 1b       	sub	r26, r30
    1ab0:	bf 0b       	sbc	r27, r31
    1ab2:	fd 01       	movw	r30, r26
    1ab4:	31 97       	sbiw	r30, 0x01	; 1
drawFastVLineInternal():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:853
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y,
                                             int16_t __h, uint16_t color) {

  if ((x >= 0) && (x < WIDTH)) { // X coord in bounds?
    1ab6:	f7 fd       	sbrc	r31, 7
    1ab8:	04 c0       	rjmp	.+8      	; 0x1ac2 <Adafruit_SSD1306::drawFastHLine(int, int, int, unsigned int)+0x36>
    1aba:	ab 01       	movw	r20, r22
    1abc:	bf 01       	movw	r22, r30
    1abe:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]>
drawFastHLine():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:732

  if (bSwap)
    drawFastVLineInternal(x, y, w, color);
  else
    drawFastHLineInternal(x, y, w, color);
}
    1ac2:	1f 91       	pop	r17
    1ac4:	0f 91       	pop	r16
    1ac6:	08 95       	ret
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:715
    x = WIDTH - x - 1;
    break;
  case 2:
    // 180 degree rotation, invert x and y, then shift y around for height.
    x = WIDTH - x - 1;
    y = HEIGHT - y - 1;
    1ac8:	16 96       	adiw	r26, 0x06	; 6
    1aca:	4d 91       	ld	r20, X+
    1acc:	5c 91       	ld	r21, X
    1ace:	da 01       	movw	r26, r20
    1ad0:	ae 1b       	sub	r26, r30
    1ad2:	bf 0b       	sbc	r27, r31
    1ad4:	fd 01       	movw	r30, r26
    1ad6:	31 97       	sbiw	r30, 0x01	; 1
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:714
    ssd1306_swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    // 180 degree rotation, invert x and y, then shift y around for height.
    x = WIDTH - x - 1;
    1ad8:	dc 01       	movw	r26, r24
    1ada:	14 96       	adiw	r26, 0x04	; 4
    1adc:	4d 91       	ld	r20, X+
    1ade:	5c 91       	ld	r21, X
    1ae0:	da 01       	movw	r26, r20
    1ae2:	a6 1b       	sub	r26, r22
    1ae4:	b7 0b       	sbc	r27, r23
    1ae6:	bd 01       	movw	r22, r26
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:716
    y = HEIGHT - y - 1;
    x -= (w - 1);
    1ae8:	62 1b       	sub	r22, r18
    1aea:	73 0b       	sbc	r23, r19
drawFastHLineInternal():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:754
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w,
                                             uint16_t color) {

  if ((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
    1aec:	f7 fd       	sbrc	r31, 7
    1aee:	e9 cf       	rjmp	.-46     	; 0x1ac2 <Adafruit_SSD1306::drawFastHLine(int, int, int, unsigned int)+0x36>
    1af0:	dc 01       	movw	r26, r24
    1af2:	16 96       	adiw	r26, 0x06	; 6
    1af4:	4d 91       	ld	r20, X+
    1af6:	5c 91       	ld	r21, X
    1af8:	e4 17       	cp	r30, r20
    1afa:	f5 07       	cpc	r31, r21
    1afc:	14 f7       	brge	.-60     	; 0x1ac2 <Adafruit_SSD1306::drawFastHLine(int, int, int, unsigned int)+0x36>
    1afe:	af 01       	movw	r20, r30
    1b00:	0e 94 95 0c 	call	0x192a	; 0x192a <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int) [clone .part.8]>
    1b04:	de cf       	rjmp	.-68     	; 0x1ac2 <Adafruit_SSD1306::drawFastHLine(int, int, int, unsigned int)+0x36>
drawFastHLine():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:723
  case 3:
    // 270 degree rotation, swap x & y for rotation,
    // then invert y and adjust y for w (not to become h)
    bSwap = true;
    ssd1306_swap(x, y);
    y = HEIGHT - y - 1;
    1b06:	16 96       	adiw	r26, 0x06	; 6
    1b08:	4d 91       	ld	r20, X+
    1b0a:	5c 91       	ld	r21, X
    1b0c:	da 01       	movw	r26, r20
    1b0e:	a6 1b       	sub	r26, r22
    1b10:	b7 0b       	sbc	r27, r23
    1b12:	bd 01       	movw	r22, r26
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:724
    y -= (w - 1);
    1b14:	62 1b       	sub	r22, r18
    1b16:	73 0b       	sbc	r23, r19
    1b18:	ce cf       	rjmp	.-100    	; 0x1ab6 <Adafruit_SSD1306::drawFastHLine(int, int, int, unsigned int)+0x2a>

00001b1a <Adafruit_SSD1306::drawPixel(int, int, unsigned int)>:
drawPixel():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:644
    @return None (void).
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
    1b1a:	fc 01       	movw	r30, r24
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:645
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
    1b1c:	77 fd       	sbrc	r23, 7
    1b1e:	64 c0       	rjmp	.+200    	; 0x1be8 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0xce>
    1b20:	80 85       	ldd	r24, Z+8	; 0x08
    1b22:	91 85       	ldd	r25, Z+9	; 0x09
    1b24:	68 17       	cp	r22, r24
    1b26:	79 07       	cpc	r23, r25
    1b28:	0c f0       	brlt	.+2      	; 0x1b2c <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x12>
    1b2a:	5e c0       	rjmp	.+188    	; 0x1be8 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0xce>
    1b2c:	57 fd       	sbrc	r21, 7
    1b2e:	5c c0       	rjmp	.+184    	; 0x1be8 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0xce>
    1b30:	82 85       	ldd	r24, Z+10	; 0x0a
    1b32:	93 85       	ldd	r25, Z+11	; 0x0b
    1b34:	48 17       	cp	r20, r24
    1b36:	59 07       	cpc	r21, r25
    1b38:	0c f0       	brlt	.+2      	; 0x1b3c <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x22>
    1b3a:	56 c0       	rjmp	.+172    	; 0x1be8 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0xce>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:647
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch (getRotation()) {
    1b3c:	86 89       	ldd	r24, Z+22	; 0x16
    1b3e:	82 30       	cpi	r24, 0x02	; 2
    1b40:	b1 f0       	breq	.+44     	; 0x1b6e <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x54>
    1b42:	83 30       	cpi	r24, 0x03	; 3
    1b44:	29 f1       	breq	.+74     	; 0x1b90 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x76>
    1b46:	81 30       	cpi	r24, 0x01	; 1
    1b48:	41 f4       	brne	.+16     	; 0x1b5a <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x40>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:650
    case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
    1b4a:	84 81       	ldd	r24, Z+4	; 0x04
    1b4c:	95 81       	ldd	r25, Z+5	; 0x05
    1b4e:	84 1b       	sub	r24, r20
    1b50:	95 0b       	sbc	r25, r21
    1b52:	ab 01       	movw	r20, r22
    1b54:	bc 01       	movw	r22, r24
    1b56:	61 50       	subi	r22, 0x01	; 1
    1b58:	71 09       	sbc	r23, r1
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:661
    case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch (color) {
    1b5a:	21 30       	cpi	r18, 0x01	; 1
    1b5c:	31 05       	cpc	r19, r1
    1b5e:	09 f1       	breq	.+66     	; 0x1ba2 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x88>
    1b60:	08 f4       	brcc	.+2      	; 0x1b64 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x4a>
    1b62:	43 c0       	rjmp	.+134    	; 0x1bea <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0xd0>
    1b64:	22 30       	cpi	r18, 0x02	; 2
    1b66:	31 05       	cpc	r19, r1
    1b68:	09 f4       	brne	.+2      	; 0x1b6c <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x52>
    1b6a:	63 c0       	rjmp	.+198    	; 0x1c32 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x118>
    1b6c:	08 95       	ret
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:653
    case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
      break;
    case 2:
      x = WIDTH - x - 1;
    1b6e:	84 81       	ldd	r24, Z+4	; 0x04
    1b70:	95 81       	ldd	r25, Z+5	; 0x05
    1b72:	dc 01       	movw	r26, r24
    1b74:	a6 1b       	sub	r26, r22
    1b76:	b7 0b       	sbc	r27, r23
    1b78:	bd 01       	movw	r22, r26
    1b7a:	61 50       	subi	r22, 0x01	; 1
    1b7c:	71 09       	sbc	r23, r1
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:654
      y = HEIGHT - y - 1;
    1b7e:	86 81       	ldd	r24, Z+6	; 0x06
    1b80:	97 81       	ldd	r25, Z+7	; 0x07
    1b82:	dc 01       	movw	r26, r24
    1b84:	a4 1b       	sub	r26, r20
    1b86:	b5 0b       	sbc	r27, r21
    1b88:	ad 01       	movw	r20, r26
    1b8a:	41 50       	subi	r20, 0x01	; 1
    1b8c:	51 09       	sbc	r21, r1
    1b8e:	e5 cf       	rjmp	.-54     	; 0x1b5a <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x40>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:658
      break;
    case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
    1b90:	86 81       	ldd	r24, Z+6	; 0x06
    1b92:	97 81       	ldd	r25, Z+7	; 0x07
    1b94:	86 1b       	sub	r24, r22
    1b96:	97 0b       	sbc	r25, r23
    1b98:	ba 01       	movw	r22, r20
    1b9a:	ac 01       	movw	r20, r24
    1b9c:	41 50       	subi	r20, 0x01	; 1
    1b9e:	51 09       	sbc	r21, r1
    1ba0:	dc cf       	rjmp	.-72     	; 0x1b5a <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x40>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:663
      break;
    }
    switch (color) {
    case SSD1306_WHITE:
      buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
    1ba2:	ca 01       	movw	r24, r20
    1ba4:	57 fd       	sbrc	r21, 7
    1ba6:	07 96       	adiw	r24, 0x07	; 7
    1ba8:	a3 e0       	ldi	r26, 0x03	; 3
    1baa:	95 95       	asr	r25
    1bac:	87 95       	ror	r24
    1bae:	aa 95       	dec	r26
    1bb0:	e1 f7       	brne	.-8      	; 0x1baa <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x90>
    1bb2:	a4 81       	ldd	r26, Z+4	; 0x04
    1bb4:	b5 81       	ldd	r27, Z+5	; 0x05
    1bb6:	8a 9f       	mul	r24, r26
    1bb8:	90 01       	movw	r18, r0
    1bba:	8b 9f       	mul	r24, r27
    1bbc:	30 0d       	add	r19, r0
    1bbe:	9a 9f       	mul	r25, r26
    1bc0:	30 0d       	add	r19, r0
    1bc2:	11 24       	eor	r1, r1
    1bc4:	62 0f       	add	r22, r18
    1bc6:	73 1f       	adc	r23, r19
    1bc8:	07 8c       	ldd	r0, Z+31	; 0x1f
    1bca:	f0 a1       	ldd	r31, Z+32	; 0x20
    1bcc:	e0 2d       	mov	r30, r0
    1bce:	e6 0f       	add	r30, r22
    1bd0:	f7 1f       	adc	r31, r23
    1bd2:	47 70       	andi	r20, 0x07	; 7
    1bd4:	55 27       	eor	r21, r21
    1bd6:	21 e0       	ldi	r18, 0x01	; 1
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	01 c0       	rjmp	.+2      	; 0x1bde <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0xc4>
    1bdc:	22 0f       	add	r18, r18
    1bde:	4a 95       	dec	r20
    1be0:	ea f7       	brpl	.-6      	; 0x1bdc <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0xc2>
    1be2:	80 81       	ld	r24, Z
    1be4:	82 2b       	or	r24, r18
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:669
      break;
    case SSD1306_BLACK:
      buffer[x + (y / 8) * WIDTH] &= ~(1 << (y & 7));
      break;
    case SSD1306_INVERSE:
      buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
    1be6:	80 83       	st	Z, r24
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:673
      break;
    }
  }
}
    1be8:	08 95       	ret
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:666
    switch (color) {
    case SSD1306_WHITE:
      buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
      break;
    case SSD1306_BLACK:
      buffer[x + (y / 8) * WIDTH] &= ~(1 << (y & 7));
    1bea:	ca 01       	movw	r24, r20
    1bec:	57 fd       	sbrc	r21, 7
    1bee:	07 96       	adiw	r24, 0x07	; 7
    1bf0:	33 e0       	ldi	r19, 0x03	; 3
    1bf2:	95 95       	asr	r25
    1bf4:	87 95       	ror	r24
    1bf6:	3a 95       	dec	r19
    1bf8:	e1 f7       	brne	.-8      	; 0x1bf2 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0xd8>
    1bfa:	a4 81       	ldd	r26, Z+4	; 0x04
    1bfc:	b5 81       	ldd	r27, Z+5	; 0x05
    1bfe:	8a 9f       	mul	r24, r26
    1c00:	90 01       	movw	r18, r0
    1c02:	8b 9f       	mul	r24, r27
    1c04:	30 0d       	add	r19, r0
    1c06:	9a 9f       	mul	r25, r26
    1c08:	30 0d       	add	r19, r0
    1c0a:	11 24       	eor	r1, r1
    1c0c:	62 0f       	add	r22, r18
    1c0e:	73 1f       	adc	r23, r19
    1c10:	07 8c       	ldd	r0, Z+31	; 0x1f
    1c12:	f0 a1       	ldd	r31, Z+32	; 0x20
    1c14:	e0 2d       	mov	r30, r0
    1c16:	e6 0f       	add	r30, r22
    1c18:	f7 1f       	adc	r31, r23
    1c1a:	47 70       	andi	r20, 0x07	; 7
    1c1c:	55 27       	eor	r21, r21
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	01 c0       	rjmp	.+2      	; 0x1c26 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x10c>
    1c24:	88 0f       	add	r24, r24
    1c26:	4a 95       	dec	r20
    1c28:	ea f7       	brpl	.-6      	; 0x1c24 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x10a>
    1c2a:	80 95       	com	r24
    1c2c:	90 81       	ld	r25, Z
    1c2e:	89 23       	and	r24, r25
    1c30:	da cf       	rjmp	.-76     	; 0x1be6 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0xcc>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:669
      break;
    case SSD1306_INVERSE:
      buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
    1c32:	ca 01       	movw	r24, r20
    1c34:	57 fd       	sbrc	r21, 7
    1c36:	07 96       	adiw	r24, 0x07	; 7
    1c38:	23 e0       	ldi	r18, 0x03	; 3
    1c3a:	95 95       	asr	r25
    1c3c:	87 95       	ror	r24
    1c3e:	2a 95       	dec	r18
    1c40:	e1 f7       	brne	.-8      	; 0x1c3a <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x120>
    1c42:	a4 81       	ldd	r26, Z+4	; 0x04
    1c44:	b5 81       	ldd	r27, Z+5	; 0x05
    1c46:	8a 9f       	mul	r24, r26
    1c48:	90 01       	movw	r18, r0
    1c4a:	8b 9f       	mul	r24, r27
    1c4c:	30 0d       	add	r19, r0
    1c4e:	9a 9f       	mul	r25, r26
    1c50:	30 0d       	add	r19, r0
    1c52:	11 24       	eor	r1, r1
    1c54:	62 0f       	add	r22, r18
    1c56:	73 1f       	adc	r23, r19
    1c58:	07 8c       	ldd	r0, Z+31	; 0x1f
    1c5a:	f0 a1       	ldd	r31, Z+32	; 0x20
    1c5c:	e0 2d       	mov	r30, r0
    1c5e:	e6 0f       	add	r30, r22
    1c60:	f7 1f       	adc	r31, r23
    1c62:	47 70       	andi	r20, 0x07	; 7
    1c64:	55 27       	eor	r21, r21
    1c66:	21 e0       	ldi	r18, 0x01	; 1
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	01 c0       	rjmp	.+2      	; 0x1c6e <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x154>
    1c6c:	22 0f       	add	r18, r18
    1c6e:	4a 95       	dec	r20
    1c70:	ea f7       	brpl	.-6      	; 0x1c6c <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x152>
    1c72:	80 81       	ld	r24, Z
    1c74:	82 27       	eor	r24, r18
    1c76:	b7 cf       	rjmp	.-146    	; 0x1be6 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0xcc>

00001c78 <SPIClass::endTransaction()>:
endTransaction():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/SPI/src/SPI.h:287
      #endif
      {
        SREG = interruptSave;
      }
    }
  }
    1c78:	08 95       	ret

00001c7a <SPIClass::transfer(unsigned char)>:
transfer():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/SPI/src/SPI.h:212
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
    1c7a:	8e bd       	out	0x2e, r24	; 46
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/SPI/src/SPI.h:219
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
    1c7c:	00 00       	nop
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/SPI/src/SPI.h:220
    while (!(SPSR & _BV(SPIF))) ; // wait
    1c7e:	0d b4       	in	r0, 0x2d	; 45
    1c80:	07 fe       	sbrs	r0, 7
    1c82:	fd cf       	rjmp	.-6      	; 0x1c7e <SPIClass::transfer(unsigned char)+0x4>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/SPI/src/SPI.h:221
    return SPDR;
    1c84:	8e b5       	in	r24, 0x2e	; 46
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/SPI/src/SPI.h:222
  }
    1c86:	08 95       	ret

00001c88 <SPIClass::beginTransaction(SPISettings)>:
beginTransaction():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/SPI/src/SPI.h:206
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
    1c88:	8c bd       	out	0x2c, r24	; 44
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/SPI/src/SPI.h:207
    SPSR = settings.spsr;
    1c8a:	9d bd       	out	0x2d, r25	; 45
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/SPI/src/SPI.h:208
  }
    1c8c:	08 95       	ret

00001c8e <Adafruit_GFX::invertDisplay(bool)>:
invertDisplay():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1543
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(bool i) {
  // Do nothing, must be subclassed if supported by hardware
  (void)i; // disable -Wunused-parameter warning
}
    1c8e:	08 95       	ret

00001c90 <Adafruit_GFX::setRotation(unsigned char)>:
setRotation():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1316
/*!
    @brief      Set rotation setting for display
    @param  x   0 thru 3 corresponding to 4 cardinal rotations
*/
/**************************************************************************/
void Adafruit_GFX::setRotation(uint8_t x) {
    1c90:	fc 01       	movw	r30, r24
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1317
  rotation = (x & 3);
    1c92:	63 70       	andi	r22, 0x03	; 3
    1c94:	66 8b       	std	Z+22, r22	; 0x16
    1c96:	84 81       	ldd	r24, Z+4	; 0x04
    1c98:	95 81       	ldd	r25, Z+5	; 0x05
    1c9a:	26 81       	ldd	r18, Z+6	; 0x06
    1c9c:	37 81       	ldd	r19, Z+7	; 0x07
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1318
  switch (rotation) {
    1c9e:	61 30       	cpi	r22, 0x01	; 1
    1ca0:	39 f0       	breq	.+14     	; 0x1cb0 <Adafruit_GFX::setRotation(unsigned char)+0x20>
    1ca2:	63 30       	cpi	r22, 0x03	; 3
    1ca4:	29 f0       	breq	.+10     	; 0x1cb0 <Adafruit_GFX::setRotation(unsigned char)+0x20>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1321
  case 0:
  case 2:
    _width = WIDTH;
    1ca6:	91 87       	std	Z+9, r25	; 0x09
    1ca8:	80 87       	std	Z+8, r24	; 0x08
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1322
    _height = HEIGHT;
    1caa:	33 87       	std	Z+11, r19	; 0x0b
    1cac:	22 87       	std	Z+10, r18	; 0x0a
    1cae:	08 95       	ret
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1326
    break;
  case 1:
  case 3:
    _width = HEIGHT;
    1cb0:	31 87       	std	Z+9, r19	; 0x09
    1cb2:	20 87       	std	Z+8, r18	; 0x08
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1327
    _height = WIDTH;
    1cb4:	93 87       	std	Z+11, r25	; 0x0b
    1cb6:	82 87       	std	Z+10, r24	; 0x0a
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1330
    break;
  }
}
    1cb8:	08 95       	ret

00001cba <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)>:
drawChar():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1136
    @param    size_y  Font magnification level in Y-axis, 1 is 'original' size
*/
/**************************************************************************/
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
                            uint16_t color, uint16_t bg, uint8_t size_x,
                            uint8_t size_y) {
    1cba:	2f 92       	push	r2
    1cbc:	3f 92       	push	r3
    1cbe:	4f 92       	push	r4
    1cc0:	5f 92       	push	r5
    1cc2:	6f 92       	push	r6
    1cc4:	7f 92       	push	r7
    1cc6:	8f 92       	push	r8
    1cc8:	9f 92       	push	r9
    1cca:	af 92       	push	r10
    1ccc:	bf 92       	push	r11
    1cce:	cf 92       	push	r12
    1cd0:	df 92       	push	r13
    1cd2:	ef 92       	push	r14
    1cd4:	ff 92       	push	r15
    1cd6:	0f 93       	push	r16
    1cd8:	1f 93       	push	r17
    1cda:	cf 93       	push	r28
    1cdc:	df 93       	push	r29
    1cde:	cd b7       	in	r28, 0x3d	; 61
    1ce0:	de b7       	in	r29, 0x3e	; 62
    1ce2:	6a 97       	sbiw	r28, 0x1a	; 26
    1ce4:	0f b6       	in	r0, 0x3f	; 63
    1ce6:	f8 94       	cli
    1ce8:	de bf       	out	0x3e, r29	; 62
    1cea:	0f be       	out	0x3f, r0	; 63
    1cec:	cd bf       	out	0x3d, r28	; 61
    1cee:	9a 8f       	std	Y+26, r25	; 0x1a
    1cf0:	89 8f       	std	Y+25, r24	; 0x19
    1cf2:	7a 83       	std	Y+2, r23	; 0x02
    1cf4:	69 83       	std	Y+1, r22	; 0x01
    1cf6:	4a 01       	movw	r8, r20
    1cf8:	d2 2e       	mov	r13, r18
    1cfa:	18 87       	std	Y+8, r17	; 0x08
    1cfc:	0f 83       	std	Y+7, r16	; 0x07
    1cfe:	37 01       	movw	r6, r14
    1d00:	bc 2c       	mov	r11, r12
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1138

  if (!gfxFont) { // 'Classic' built-in font
    1d02:	dc 01       	movw	r26, r24
    1d04:	59 96       	adiw	r26, 0x19	; 25
    1d06:	2d 91       	ld	r18, X+
    1d08:	3c 91       	ld	r19, X
    1d0a:	5a 97       	sbiw	r26, 0x1a	; 26
    1d0c:	21 15       	cp	r18, r1
    1d0e:	31 05       	cpc	r19, r1
    1d10:	09 f0       	breq	.+2      	; 0x1d14 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x5a>
    1d12:	15 c1       	rjmp	.+554    	; 0x1f3e <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x284>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1140

    if ((x >= _width) ||              // Clip right
    1d14:	18 96       	adiw	r26, 0x08	; 8
    1d16:	8d 91       	ld	r24, X+
    1d18:	9c 91       	ld	r25, X
    1d1a:	19 97       	sbiw	r26, 0x09	; 9
    1d1c:	68 17       	cp	r22, r24
    1d1e:	79 07       	cpc	r23, r25
    1d20:	0c f0       	brlt	.+2      	; 0x1d24 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x6a>
    1d22:	d7 c1       	rjmp	.+942    	; 0x20d2 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x418>
    1d24:	1a 96       	adiw	r26, 0x0a	; 10
    1d26:	8d 91       	ld	r24, X+
    1d28:	9c 91       	ld	r25, X
    1d2a:	48 17       	cp	r20, r24
    1d2c:	59 07       	cpc	r21, r25
    1d2e:	0c f0       	brlt	.+2      	; 0x1d32 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x78>
    1d30:	d0 c1       	rjmp	.+928    	; 0x20d2 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x418>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1142
        (y >= _height) ||             // Clip bottom
        ((x + 6 * size_x - 1) < 0) || // Clip left
    1d32:	4c 2c       	mov	r4, r12
    1d34:	51 2c       	mov	r5, r1
    1d36:	b6 e0       	ldi	r27, 0x06	; 6
    1d38:	cb 9e       	mul	r12, r27
    1d3a:	60 0d       	add	r22, r0
    1d3c:	71 1d       	adc	r23, r1
    1d3e:	11 24       	eor	r1, r1
    1d40:	7c 87       	std	Y+12, r23	; 0x0c
    1d42:	6b 87       	std	Y+11, r22	; 0x0b
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1141
                            uint8_t size_y) {

  if (!gfxFont) { // 'Classic' built-in font

    if ((x >= _width) ||              // Clip right
        (y >= _height) ||             // Clip bottom
    1d44:	16 16       	cp	r1, r22
    1d46:	17 06       	cpc	r1, r23
    1d48:	0c f0       	brlt	.+2      	; 0x1d4c <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x92>
    1d4a:	c3 c1       	rjmp	.+902    	; 0x20d2 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x418>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1143
        ((x + 6 * size_x - 1) < 0) || // Clip left
        ((y + 8 * size_y - 1) < 0))   // Clip top
    1d4c:	ea 2d       	mov	r30, r10
    1d4e:	f0 e0       	ldi	r31, 0x00	; 0
    1d50:	fa 87       	std	Y+10, r31	; 0x0a
    1d52:	e9 87       	std	Y+9, r30	; 0x09
    1d54:	93 e0       	ldi	r25, 0x03	; 3
    1d56:	ee 0f       	add	r30, r30
    1d58:	ff 1f       	adc	r31, r31
    1d5a:	9a 95       	dec	r25
    1d5c:	e1 f7       	brne	.-8      	; 0x1d56 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x9c>
    1d5e:	f8 8b       	std	Y+16, r31	; 0x10
    1d60:	ef 87       	std	Y+15, r30	; 0x0f
    1d62:	cf 01       	movw	r24, r30
    1d64:	84 0f       	add	r24, r20
    1d66:	95 1f       	adc	r25, r21
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1142

  if (!gfxFont) { // 'Classic' built-in font

    if ((x >= _width) ||              // Clip right
        (y >= _height) ||             // Clip bottom
        ((x + 6 * size_x - 1) < 0) || // Clip left
    1d68:	18 16       	cp	r1, r24
    1d6a:	19 06       	cpc	r1, r25
    1d6c:	0c f0       	brlt	.+2      	; 0x1d70 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0xb6>
    1d6e:	b1 c1       	rjmp	.+866    	; 0x20d2 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x418>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1146
        ((y + 8 * size_y - 1) < 0))   // Clip top
      return;

    if (!_cp437 && (c >= 176))
    1d70:	a9 8d       	ldd	r26, Y+25	; 0x19
    1d72:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1d74:	58 96       	adiw	r26, 0x18	; 24
    1d76:	8c 91       	ld	r24, X
    1d78:	81 11       	cpse	r24, r1
    1d7a:	04 c0       	rjmp	.+8      	; 0x1d84 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0xca>
    1d7c:	bf ea       	ldi	r27, 0xAF	; 175
    1d7e:	bd 15       	cp	r27, r13
    1d80:	08 f4       	brcc	.+2      	; 0x1d84 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0xca>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1147
      c++; // Handle 'classic' charset behavior
    1d82:	d3 94       	inc	r13
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1149

    startWrite();
    1d84:	a9 8d       	ldd	r26, Y+25	; 0x19
    1d86:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1d88:	ed 91       	ld	r30, X+
    1d8a:	fc 91       	ld	r31, X
    1d8c:	11 97       	sbiw	r26, 0x01	; 1
    1d8e:	02 84       	ldd	r0, Z+10	; 0x0a
    1d90:	f3 85       	ldd	r31, Z+11	; 0x0b
    1d92:	e0 2d       	mov	r30, r0
    1d94:	cd 01       	movw	r24, r26
    1d96:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1151
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
    1d98:	b5 e0       	ldi	r27, 0x05	; 5
    1d9a:	db 9e       	mul	r13, r27
    1d9c:	c0 01       	movw	r24, r0
    1d9e:	11 24       	eor	r1, r1
    1da0:	e9 81       	ldd	r30, Y+1	; 0x01
    1da2:	fa 81       	ldd	r31, Y+2	; 0x02
    1da4:	fc 83       	std	Y+4, r31	; 0x04
    1da6:	eb 83       	std	Y+3, r30	; 0x03
    1da8:	31 2c       	mov	r3, r1
    1daa:	21 2c       	mov	r2, r1
    1dac:	9c 01       	movw	r18, r24
    1dae:	2d 5d       	subi	r18, 0xDD	; 221
    1db0:	37 4f       	sbci	r19, 0xF7	; 247
    1db2:	38 8f       	std	Y+24, r19	; 0x18
    1db4:	2f 8b       	std	Y+23, r18	; 0x17
    1db6:	4a 2d       	mov	r20, r10
    1db8:	50 e0       	ldi	r21, 0x00	; 0
    1dba:	5e 8b       	std	Y+22, r21	; 0x16
    1dbc:	4d 8b       	std	Y+21, r20	; 0x15
    1dbe:	ef 89       	ldd	r30, Y+23	; 0x17
    1dc0:	f8 8d       	ldd	r31, Y+24	; 0x18
    1dc2:	e2 0d       	add	r30, r2
    1dc4:	f3 1d       	adc	r31, r3
    1dc6:	44 91       	lpm	r20, Z
    1dc8:	9e 82       	std	Y+6, r9	; 0x06
    1dca:	8d 82       	std	Y+5, r8	; 0x05
    1dcc:	d1 2c       	mov	r13, r1
    1dce:	c1 2c       	mov	r12, r1
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1161
          else
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y,
                          color);
        } else if (bg != color) {
          if (size_x == 1 && size_y == 1)
            writePixel(x + i, y + j, bg);
    1dd0:	69 81       	ldd	r22, Y+1	; 0x01
    1dd2:	7a 81       	ldd	r23, Y+2	; 0x02
    1dd4:	62 0d       	add	r22, r2
    1dd6:	73 1d       	adc	r23, r3
    1dd8:	7a 8b       	std	Y+18, r23	; 0x12
    1dda:	69 8b       	std	Y+17, r22	; 0x11
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1153

    startWrite();
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
        if (line & 1) {
    1ddc:	84 2f       	mov	r24, r20
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	9c 8b       	std	Y+20, r25	; 0x14
    1de2:	8b 8b       	std	Y+19, r24	; 0x13
    1de4:	e9 8d       	ldd	r30, Y+25	; 0x19
    1de6:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1de8:	a0 81       	ld	r26, Z
    1dea:	b1 81       	ldd	r27, Z+1	; 0x01
    1dec:	40 ff       	sbrs	r20, 0
    1dee:	82 c0       	rjmp	.+260    	; 0x1ef4 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x23a>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1154
          if (size_x == 1 && size_y == 1)
    1df0:	f1 e0       	ldi	r31, 0x01	; 1
    1df2:	bf 12       	cpse	r11, r31
    1df4:	6f c0       	rjmp	.+222    	; 0x1ed4 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x21a>
    1df6:	af 12       	cpse	r10, r31
    1df8:	6d c0       	rjmp	.+218    	; 0x1ed4 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x21a>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1155
            writePixel(x + i, y + j, color);
    1dfa:	1c 96       	adiw	r26, 0x0c	; 12
    1dfc:	ed 91       	ld	r30, X+
    1dfe:	fc 91       	ld	r31, X
    1e00:	2f 81       	ldd	r18, Y+7	; 0x07
    1e02:	38 85       	ldd	r19, Y+8	; 0x08
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1161
          else
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y,
                          color);
        } else if (bg != color) {
          if (size_x == 1 && size_y == 1)
            writePixel(x + i, y + j, bg);
    1e04:	a4 01       	movw	r20, r8
    1e06:	4c 0d       	add	r20, r12
    1e08:	5d 1d       	adc	r21, r13
    1e0a:	69 89       	ldd	r22, Y+17	; 0x11
    1e0c:	7a 89       	ldd	r23, Y+18	; 0x12
    1e0e:	89 8d       	ldd	r24, Y+25	; 0x19
    1e10:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1e12:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1152
      c++; // Handle 'classic' charset behavior

    startWrite();
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
    1e14:	eb 89       	ldd	r30, Y+19	; 0x13
    1e16:	fc 89       	ldd	r31, Y+20	; 0x14
    1e18:	f5 95       	asr	r31
    1e1a:	e7 95       	ror	r30
    1e1c:	4e 2f       	mov	r20, r30
    1e1e:	5f ef       	ldi	r21, 0xFF	; 255
    1e20:	c5 1a       	sub	r12, r21
    1e22:	d5 0a       	sbc	r13, r21
    1e24:	6d 81       	ldd	r22, Y+5	; 0x05
    1e26:	7e 81       	ldd	r23, Y+6	; 0x06
    1e28:	8d 89       	ldd	r24, Y+21	; 0x15
    1e2a:	9e 89       	ldd	r25, Y+22	; 0x16
    1e2c:	68 0f       	add	r22, r24
    1e2e:	79 1f       	adc	r23, r25
    1e30:	7e 83       	std	Y+6, r23	; 0x06
    1e32:	6d 83       	std	Y+5, r22	; 0x05
    1e34:	98 e0       	ldi	r25, 0x08	; 8
    1e36:	c9 16       	cp	r12, r25
    1e38:	d1 04       	cpc	r13, r1
    1e3a:	81 f6       	brne	.-96     	; 0x1ddc <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x122>
    1e3c:	af ef       	ldi	r26, 0xFF	; 255
    1e3e:	2a 1a       	sub	r2, r26
    1e40:	3a 0a       	sbc	r3, r26
    1e42:	eb 81       	ldd	r30, Y+3	; 0x03
    1e44:	fc 81       	ldd	r31, Y+4	; 0x04
    1e46:	e4 0d       	add	r30, r4
    1e48:	f5 1d       	adc	r31, r5
    1e4a:	fc 83       	std	Y+4, r31	; 0x04
    1e4c:	eb 83       	std	Y+3, r30	; 0x03
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1150

    if (!_cp437 && (c >= 176))
      c++; // Handle 'classic' charset behavior

    startWrite();
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
    1e4e:	f5 e0       	ldi	r31, 0x05	; 5
    1e50:	2f 16       	cp	r2, r31
    1e52:	31 04       	cpc	r3, r1
    1e54:	09 f0       	breq	.+2      	; 0x1e58 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x19e>
    1e56:	b3 cf       	rjmp	.-154    	; 0x1dbe <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x104>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1167
          else
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
        }
      }
    }
    if (bg != color) { // If opaque, draw vertical line for last column
    1e58:	2f 81       	ldd	r18, Y+7	; 0x07
    1e5a:	38 85       	ldd	r19, Y+8	; 0x08
    1e5c:	26 15       	cp	r18, r6
    1e5e:	37 05       	cpc	r19, r7
    1e60:	b9 f0       	breq	.+46     	; 0x1e90 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x1d6>
    1e62:	a9 8d       	ldd	r26, Y+25	; 0x19
    1e64:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1e66:	ed 91       	ld	r30, X+
    1e68:	fc 91       	ld	r31, X
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1168
      if (size_x == 1 && size_y == 1)
    1e6a:	b1 e0       	ldi	r27, 0x01	; 1
    1e6c:	bb 12       	cpse	r11, r27
    1e6e:	57 c0       	rjmp	.+174    	; 0x1f1e <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x264>
    1e70:	ab 12       	cpse	r10, r27
    1e72:	55 c0       	rjmp	.+170    	; 0x1f1e <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x264>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1169
        writeFastVLine(x + 5, y, 8, bg);
    1e74:	69 81       	ldd	r22, Y+1	; 0x01
    1e76:	7a 81       	ldd	r23, Y+2	; 0x02
    1e78:	6b 5f       	subi	r22, 0xFB	; 251
    1e7a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e7c:	00 88       	ldd	r0, Z+16	; 0x10
    1e7e:	f1 89       	ldd	r31, Z+17	; 0x11
    1e80:	e0 2d       	mov	r30, r0
    1e82:	83 01       	movw	r16, r6
    1e84:	28 e0       	ldi	r18, 0x08	; 8
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	a4 01       	movw	r20, r8
    1e8a:	89 8d       	ldd	r24, Y+25	; 0x19
    1e8c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1e8e:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1232
          }
        }
        bits <<= 1;
      }
    }
    endWrite();
    1e90:	a9 8d       	ldd	r26, Y+25	; 0x19
    1e92:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1e94:	ed 91       	ld	r30, X+
    1e96:	fc 91       	ld	r31, X
    1e98:	11 97       	sbiw	r26, 0x01	; 1
    1e9a:	06 88       	ldd	r0, Z+22	; 0x16
    1e9c:	f7 89       	ldd	r31, Z+23	; 0x17
    1e9e:	e0 2d       	mov	r30, r0
    1ea0:	cd 01       	movw	r24, r26
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1235

  } // End classic vs custom font
}
    1ea2:	6a 96       	adiw	r28, 0x1a	; 26
    1ea4:	0f b6       	in	r0, 0x3f	; 63
    1ea6:	f8 94       	cli
    1ea8:	de bf       	out	0x3e, r29	; 62
    1eaa:	0f be       	out	0x3f, r0	; 63
    1eac:	cd bf       	out	0x3d, r28	; 61
    1eae:	df 91       	pop	r29
    1eb0:	cf 91       	pop	r28
    1eb2:	1f 91       	pop	r17
    1eb4:	0f 91       	pop	r16
    1eb6:	ff 90       	pop	r15
    1eb8:	ef 90       	pop	r14
    1eba:	df 90       	pop	r13
    1ebc:	cf 90       	pop	r12
    1ebe:	bf 90       	pop	r11
    1ec0:	af 90       	pop	r10
    1ec2:	9f 90       	pop	r9
    1ec4:	8f 90       	pop	r8
    1ec6:	7f 90       	pop	r7
    1ec8:	6f 90       	pop	r6
    1eca:	5f 90       	pop	r5
    1ecc:	4f 90       	pop	r4
    1ece:	3f 90       	pop	r3
    1ed0:	2f 90       	pop	r2
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1232
          }
        }
        bits <<= 1;
      }
    }
    endWrite();
    1ed2:	09 94       	ijmp
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1157
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
        if (line & 1) {
          if (size_x == 1 && size_y == 1)
            writePixel(x + i, y + j, color);
          else
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y,
    1ed4:	1e 96       	adiw	r26, 0x0e	; 14
    1ed6:	ed 91       	ld	r30, X+
    1ed8:	fc 91       	ld	r31, X
    1eda:	ef 80       	ldd	r14, Y+7	; 0x07
    1edc:	f8 84       	ldd	r15, Y+8	; 0x08
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1163
                          color);
        } else if (bg != color) {
          if (size_x == 1 && size_y == 1)
            writePixel(x + i, y + j, bg);
          else
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
    1ede:	09 85       	ldd	r16, Y+9	; 0x09
    1ee0:	1a 85       	ldd	r17, Y+10	; 0x0a
    1ee2:	92 01       	movw	r18, r4
    1ee4:	4d 81       	ldd	r20, Y+5	; 0x05
    1ee6:	5e 81       	ldd	r21, Y+6	; 0x06
    1ee8:	6b 81       	ldd	r22, Y+3	; 0x03
    1eea:	7c 81       	ldd	r23, Y+4	; 0x04
    1eec:	89 8d       	ldd	r24, Y+25	; 0x19
    1eee:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1ef0:	09 95       	icall
    1ef2:	90 cf       	rjmp	.-224    	; 0x1e14 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x15a>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1159
          if (size_x == 1 && size_y == 1)
            writePixel(x + i, y + j, color);
          else
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y,
                          color);
        } else if (bg != color) {
    1ef4:	2f 81       	ldd	r18, Y+7	; 0x07
    1ef6:	38 85       	ldd	r19, Y+8	; 0x08
    1ef8:	26 15       	cp	r18, r6
    1efa:	37 05       	cpc	r19, r7
    1efc:	09 f4       	brne	.+2      	; 0x1f00 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x246>
    1efe:	8a cf       	rjmp	.-236    	; 0x1e14 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x15a>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1160
          if (size_x == 1 && size_y == 1)
    1f00:	31 e0       	ldi	r19, 0x01	; 1
    1f02:	b3 12       	cpse	r11, r19
    1f04:	07 c0       	rjmp	.+14     	; 0x1f14 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x25a>
    1f06:	a3 12       	cpse	r10, r19
    1f08:	05 c0       	rjmp	.+10     	; 0x1f14 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x25a>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1161
            writePixel(x + i, y + j, bg);
    1f0a:	1c 96       	adiw	r26, 0x0c	; 12
    1f0c:	ed 91       	ld	r30, X+
    1f0e:	fc 91       	ld	r31, X
    1f10:	93 01       	movw	r18, r6
    1f12:	78 cf       	rjmp	.-272    	; 0x1e04 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x14a>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1163
          else
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
    1f14:	1e 96       	adiw	r26, 0x0e	; 14
    1f16:	ed 91       	ld	r30, X+
    1f18:	fc 91       	ld	r31, X
    1f1a:	73 01       	movw	r14, r6
    1f1c:	e0 cf       	rjmp	.-64     	; 0x1ede <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x224>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1171
    }
    if (bg != color) { // If opaque, draw vertical line for last column
      if (size_x == 1 && size_y == 1)
        writeFastVLine(x + 5, y, 8, bg);
      else
        writeFillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
    1f1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f20:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f22:	64 19       	sub	r22, r4
    1f24:	75 09       	sbc	r23, r5
    1f26:	06 84       	ldd	r0, Z+14	; 0x0e
    1f28:	f7 85       	ldd	r31, Z+15	; 0x0f
    1f2a:	e0 2d       	mov	r30, r0
    1f2c:	73 01       	movw	r14, r6
    1f2e:	0f 85       	ldd	r16, Y+15	; 0x0f
    1f30:	18 89       	ldd	r17, Y+16	; 0x10
    1f32:	92 01       	movw	r18, r4
    1f34:	a4 01       	movw	r20, r8
    1f36:	89 8d       	ldd	r24, Y+25	; 0x19
    1f38:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1f3a:	09 95       	icall
    1f3c:	a9 cf       	rjmp	.-174    	; 0x1e90 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x1d6>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1181

    // Character is assumed previously filtered by write() to eliminate
    // newlines, returns, non-printable characters, etc.  Calling
    // drawChar() directly with 'bad' characters of font may cause mayhem!

    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
    1f3e:	f9 01       	movw	r30, r18
    1f40:	34 96       	adiw	r30, 0x04	; 4
    1f42:	94 91       	lpm	r25, Z
pgm_read_glyph_ptr():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:67
#define pgm_read_pointer(addr) ((void *)pgm_read_word(addr))
#endif

inline GFXglyph *pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c) {
#ifdef __AVR__
  return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    1f44:	32 97       	sbiw	r30, 0x02	; 2
    1f46:	45 91       	lpm	r20, Z+
    1f48:	54 91       	lpm	r21, Z
drawChar():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1181

    // Character is assumed previously filtered by write() to eliminate
    // newlines, returns, non-printable characters, etc.  Calling
    // drawChar() directly with 'bad' characters of font may cause mayhem!

    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
    1f4a:	d9 1a       	sub	r13, r25
pgm_read_glyph_ptr():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:67
#define pgm_read_pointer(addr) ((void *)pgm_read_word(addr))
#endif

inline GFXglyph *pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c) {
#ifdef __AVR__
  return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    1f4c:	b7 e0       	ldi	r27, 0x07	; 7
    1f4e:	db 9e       	mul	r13, r27
    1f50:	40 0d       	add	r20, r0
    1f52:	51 1d       	adc	r21, r1
    1f54:	11 24       	eor	r1, r1
_Z19pgm_read_bitmap_ptrPK7GFXfont():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:79
#endif //__AVR__
}

inline uint8_t *pgm_read_bitmap_ptr(const GFXfont *gfxFont) {
#ifdef __AVR__
  return (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);
    1f56:	f9 01       	movw	r30, r18
    1f58:	25 91       	lpm	r18, Z+
    1f5a:	34 91       	lpm	r19, Z
    1f5c:	3c 8b       	std	Y+20, r19	; 0x14
    1f5e:	2b 8b       	std	Y+19, r18	; 0x13
drawChar():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1185

    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
    GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c);
    uint8_t *bitmap = pgm_read_bitmap_ptr(gfxFont);

    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
    1f60:	fa 01       	movw	r30, r20
    1f62:	25 90       	lpm	r2, Z+
    1f64:	34 90       	lpm	r3, Z
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1186
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
    1f66:	fa 01       	movw	r30, r20
    1f68:	32 96       	adiw	r30, 0x02	; 2
    1f6a:	74 90       	lpm	r7, Z
    1f6c:	31 96       	adiw	r30, 0x01	; 1
    1f6e:	34 91       	lpm	r19, Z
    1f70:	39 8b       	std	Y+17, r19	; 0x11
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1187
    int8_t xo = pgm_read_byte(&glyph->xOffset),
    1f72:	32 96       	adiw	r30, 0x02	; 2
    1f74:	64 90       	lpm	r6, Z
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1188
           yo = pgm_read_byte(&glyph->yOffset);
    1f76:	31 96       	adiw	r30, 0x01	; 1
    1f78:	44 90       	lpm	r4, Z
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1192
    uint8_t xx, yy, bits = 0, bit = 0;
    int16_t xo16 = 0, yo16 = 0;

    if (size_x > 1 || size_y > 1) {
    1f7a:	41 e0       	ldi	r20, 0x01	; 1
    1f7c:	4c 15       	cp	r20, r12
    1f7e:	18 f0       	brcs	.+6      	; 0x1f86 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x2cc>
    1f80:	4a 15       	cp	r20, r10
    1f82:	08 f0       	brcs	.+2      	; 0x1f86 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x2cc>
    1f84:	7f c0       	rjmp	.+254    	; 0x2084 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3ca>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1193
      xo16 = xo;
    1f86:	66 2d       	mov	r22, r6
    1f88:	06 2c       	mov	r0, r6
    1f8a:	00 0c       	add	r0, r0
    1f8c:	77 0b       	sbc	r23, r23
    1f8e:	7c 83       	std	Y+4, r23	; 0x04
    1f90:	6b 83       	std	Y+3, r22	; 0x03
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1194
      yo16 = yo;
    1f92:	84 2d       	mov	r24, r4
    1f94:	04 2c       	mov	r0, r4
    1f96:	00 0c       	add	r0, r0
    1f98:	99 0b       	sbc	r25, r25
    1f9a:	9e 83       	std	Y+6, r25	; 0x06
    1f9c:	8d 83       	std	Y+5, r24	; 0x05
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1215
    // only creates a new set of problems.  Have an idea to work around
    // this (a canvas object type for MCUs that can afford the RAM and
    // displays supporting setAddrWindow() and pushColors()), but haven't
    // implemented this yet.

    startWrite();
    1f9e:	a9 8d       	ldd	r26, Y+25	; 0x19
    1fa0:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1fa2:	ed 91       	ld	r30, X+
    1fa4:	fc 91       	ld	r31, X
    1fa6:	11 97       	sbiw	r26, 0x01	; 1
    1fa8:	02 84       	ldd	r0, Z+10	; 0x0a
    1faa:	f3 85       	ldd	r31, Z+11	; 0x0b
    1fac:	e0 2d       	mov	r30, r0
    1fae:	cd 01       	movw	r24, r26
    1fb0:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1189

    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
    int8_t xo = pgm_read_byte(&glyph->xOffset),
           yo = pgm_read_byte(&glyph->yOffset);
    uint8_t xx, yy, bits = 0, bit = 0;
    1fb2:	51 2c       	mov	r5, r1
    1fb4:	d1 2c       	mov	r13, r1
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1216
    // this (a canvas object type for MCUs that can afford the RAM and
    // displays supporting setAddrWindow() and pushColors()), but haven't
    // implemented this yet.

    startWrite();
    for (yy = 0; yy < h; yy++) {
    1fb6:	c1 2c       	mov	r12, r1
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1225
        }
        if (bits & 0x80) {
          if (size_x == 1 && size_y == 1) {
            writePixel(x + xo + xx, y + yo + yy, color);
          } else {
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
    1fb8:	ea 2d       	mov	r30, r10
    1fba:	f0 e0       	ldi	r31, 0x00	; 0
    1fbc:	fa 87       	std	Y+10, r31	; 0x0a
    1fbe:	e9 87       	std	Y+9, r30	; 0x09
    1fc0:	2b 2d       	mov	r18, r11
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	3c 87       	std	Y+12, r19	; 0x0c
    1fc6:	2b 87       	std	Y+11, r18	; 0x0b
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1223
        if (!(bit++ & 7)) {
          bits = pgm_read_byte(&bitmap[bo++]);
        }
        if (bits & 0x80) {
          if (size_x == 1 && size_y == 1) {
            writePixel(x + xo + xx, y + yo + yy, color);
    1fc8:	a4 01       	movw	r20, r8
    1fca:	44 0d       	add	r20, r4
    1fcc:	51 1d       	adc	r21, r1
    1fce:	47 fc       	sbrc	r4, 7
    1fd0:	5a 95       	dec	r21
    1fd2:	58 8f       	std	Y+24, r21	; 0x18
    1fd4:	4f 8b       	std	Y+23, r20	; 0x17
    1fd6:	69 81       	ldd	r22, Y+1	; 0x01
    1fd8:	7a 81       	ldd	r23, Y+2	; 0x02
    1fda:	66 0d       	add	r22, r6
    1fdc:	71 1d       	adc	r23, r1
    1fde:	67 fc       	sbrc	r6, 7
    1fe0:	7a 95       	dec	r23
    1fe2:	7e 87       	std	Y+14, r23	; 0x0e
    1fe4:	6d 87       	std	Y+13, r22	; 0x0d
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1216
    // this (a canvas object type for MCUs that can afford the RAM and
    // displays supporting setAddrWindow() and pushColors()), but haven't
    // implemented this yet.

    startWrite();
    for (yy = 0; yy < h; yy++) {
    1fe6:	79 89       	ldd	r23, Y+17	; 0x11
    1fe8:	c7 16       	cp	r12, r23
    1fea:	08 f0       	brcs	.+2      	; 0x1fee <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x334>
    1fec:	51 cf       	rjmp	.-350    	; 0x1e90 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x1d6>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1225
        }
        if (bits & 0x80) {
          if (size_x == 1 && size_y == 1) {
            writePixel(x + xo + xx, y + yo + yy, color);
          } else {
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
    1fee:	2c 2d       	mov	r18, r12
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	4d 81       	ldd	r20, Y+5	; 0x05
    1ff4:	5e 81       	ldd	r21, Y+6	; 0x06
    1ff6:	42 0f       	add	r20, r18
    1ff8:	53 1f       	adc	r21, r19
    1ffa:	a9 85       	ldd	r26, Y+9	; 0x09
    1ffc:	ba 85       	ldd	r27, Y+10	; 0x0a
    1ffe:	4a 9f       	mul	r20, r26
    2000:	c0 01       	movw	r24, r0
    2002:	4b 9f       	mul	r20, r27
    2004:	90 0d       	add	r25, r0
    2006:	5a 9f       	mul	r21, r26
    2008:	90 0d       	add	r25, r0
    200a:	11 24       	eor	r1, r1
    200c:	fc 01       	movw	r30, r24
    200e:	e8 0d       	add	r30, r8
    2010:	f9 1d       	adc	r31, r9
    2012:	f8 8b       	std	Y+16, r31	; 0x10
    2014:	ef 87       	std	Y+15, r30	; 0x0f
    2016:	85 2d       	mov	r24, r5
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1217
    // displays supporting setAddrWindow() and pushColors()), but haven't
    // implemented this yet.

    startWrite();
    for (yy = 0; yy < h; yy++) {
      for (xx = 0; xx < w; xx++) {
    2018:	61 2c       	mov	r6, r1
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1223
        if (!(bit++ & 7)) {
          bits = pgm_read_byte(&bitmap[bo++]);
        }
        if (bits & 0x80) {
          if (size_x == 1 && size_y == 1) {
            writePixel(x + xo + xx, y + yo + yy, color);
    201a:	4f 89       	ldd	r20, Y+23	; 0x17
    201c:	58 8d       	ldd	r21, Y+24	; 0x18
    201e:	42 0f       	add	r20, r18
    2020:	53 1f       	adc	r21, r19
    2022:	5e 8b       	std	Y+22, r21	; 0x16
    2024:	4d 8b       	std	Y+21, r20	; 0x15
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1217
    // displays supporting setAddrWindow() and pushColors()), but haven't
    // implemented this yet.

    startWrite();
    for (yy = 0; yy < h; yy++) {
      for (xx = 0; xx < w; xx++) {
    2026:	67 14       	cp	r6, r7
    2028:	08 f0       	brcs	.+2      	; 0x202c <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x372>
    202a:	50 c0       	rjmp	.+160    	; 0x20cc <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x412>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1218
        if (!(bit++ & 7)) {
    202c:	44 24       	eor	r4, r4
    202e:	43 94       	inc	r4
    2030:	48 0e       	add	r4, r24
    2032:	87 70       	andi	r24, 0x07	; 7
    2034:	41 f4       	brne	.+16     	; 0x2046 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x38c>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1219
          bits = pgm_read_byte(&bitmap[bo++]);
    2036:	c1 01       	movw	r24, r2
    2038:	01 96       	adiw	r24, 0x01	; 1
    203a:	eb 89       	ldd	r30, Y+19	; 0x13
    203c:	fc 89       	ldd	r31, Y+20	; 0x14
    203e:	e2 0d       	add	r30, r2
    2040:	f3 1d       	adc	r31, r3
    2042:	d4 90       	lpm	r13, Z
    2044:	1c 01       	movw	r2, r24
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1221
        }
        if (bits & 0x80) {
    2046:	d7 fe       	sbrs	r13, 7
    2048:	19 c0       	rjmp	.+50     	; 0x207c <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3c2>
    204a:	a9 8d       	ldd	r26, Y+25	; 0x19
    204c:	ba 8d       	ldd	r27, Y+26	; 0x1a
    204e:	ed 91       	ld	r30, X+
    2050:	fc 91       	ld	r31, X
    2052:	66 2d       	mov	r22, r6
    2054:	70 e0       	ldi	r23, 0x00	; 0
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1222
          if (size_x == 1 && size_y == 1) {
    2056:	b1 e0       	ldi	r27, 0x01	; 1
    2058:	bb 12       	cpse	r11, r27
    205a:	19 c0       	rjmp	.+50     	; 0x208e <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3d4>
    205c:	ab 12       	cpse	r10, r27
    205e:	17 c0       	rjmp	.+46     	; 0x208e <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3d4>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1223
            writePixel(x + xo + xx, y + yo + yy, color);
    2060:	2d 85       	ldd	r18, Y+13	; 0x0d
    2062:	3e 85       	ldd	r19, Y+14	; 0x0e
    2064:	62 0f       	add	r22, r18
    2066:	73 1f       	adc	r23, r19
    2068:	04 84       	ldd	r0, Z+12	; 0x0c
    206a:	f5 85       	ldd	r31, Z+13	; 0x0d
    206c:	e0 2d       	mov	r30, r0
    206e:	2f 81       	ldd	r18, Y+7	; 0x07
    2070:	38 85       	ldd	r19, Y+8	; 0x08
    2072:	4d 89       	ldd	r20, Y+21	; 0x15
    2074:	5e 89       	ldd	r21, Y+22	; 0x16
    2076:	89 8d       	ldd	r24, Y+25	; 0x19
    2078:	9a 8d       	ldd	r25, Y+26	; 0x1a
    207a:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1229
          } else {
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
                          size_x, size_y, color);
          }
        }
        bits <<= 1;
    207c:	dd 0c       	add	r13, r13
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1217
    // displays supporting setAddrWindow() and pushColors()), but haven't
    // implemented this yet.

    startWrite();
    for (yy = 0; yy < h; yy++) {
      for (xx = 0; xx < w; xx++) {
    207e:	63 94       	inc	r6
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1218
        if (!(bit++ & 7)) {
    2080:	84 2d       	mov	r24, r4
    2082:	d1 cf       	rjmp	.-94     	; 0x2026 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x36c>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1190
    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
    int8_t xo = pgm_read_byte(&glyph->xOffset),
           yo = pgm_read_byte(&glyph->yOffset);
    uint8_t xx, yy, bits = 0, bit = 0;
    int16_t xo16 = 0, yo16 = 0;
    2084:	1e 82       	std	Y+6, r1	; 0x06
    2086:	1d 82       	std	Y+5, r1	; 0x05
    2088:	1c 82       	std	Y+4, r1	; 0x04
    208a:	1b 82       	std	Y+3, r1	; 0x03
    208c:	88 cf       	rjmp	.-240    	; 0x1f9e <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x2e4>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1225
        }
        if (bits & 0x80) {
          if (size_x == 1 && size_y == 1) {
            writePixel(x + xo + xx, y + yo + yy, color);
          } else {
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
    208e:	4b 81       	ldd	r20, Y+3	; 0x03
    2090:	5c 81       	ldd	r21, Y+4	; 0x04
    2092:	64 0f       	add	r22, r20
    2094:	75 1f       	adc	r23, r21
    2096:	ab 85       	ldd	r26, Y+11	; 0x0b
    2098:	bc 85       	ldd	r27, Y+12	; 0x0c
    209a:	6a 9f       	mul	r22, r26
    209c:	c0 01       	movw	r24, r0
    209e:	6b 9f       	mul	r22, r27
    20a0:	90 0d       	add	r25, r0
    20a2:	7a 9f       	mul	r23, r26
    20a4:	90 0d       	add	r25, r0
    20a6:	11 24       	eor	r1, r1
    20a8:	69 81       	ldd	r22, Y+1	; 0x01
    20aa:	7a 81       	ldd	r23, Y+2	; 0x02
    20ac:	68 0f       	add	r22, r24
    20ae:	79 1f       	adc	r23, r25
    20b0:	06 84       	ldd	r0, Z+14	; 0x0e
    20b2:	f7 85       	ldd	r31, Z+15	; 0x0f
    20b4:	e0 2d       	mov	r30, r0
    20b6:	ef 80       	ldd	r14, Y+7	; 0x07
    20b8:	f8 84       	ldd	r15, Y+8	; 0x08
    20ba:	09 85       	ldd	r16, Y+9	; 0x09
    20bc:	1a 85       	ldd	r17, Y+10	; 0x0a
    20be:	9d 01       	movw	r18, r26
    20c0:	4f 85       	ldd	r20, Y+15	; 0x0f
    20c2:	58 89       	ldd	r21, Y+16	; 0x10
    20c4:	89 8d       	ldd	r24, Y+25	; 0x19
    20c6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    20c8:	09 95       	icall
    20ca:	d8 cf       	rjmp	.-80     	; 0x207c <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3c2>
    20cc:	57 0c       	add	r5, r7
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1216
    // this (a canvas object type for MCUs that can afford the RAM and
    // displays supporting setAddrWindow() and pushColors()), but haven't
    // implemented this yet.

    startWrite();
    for (yy = 0; yy < h; yy++) {
    20ce:	c3 94       	inc	r12
    20d0:	8a cf       	rjmp	.-236    	; 0x1fe6 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x32c>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1235
      }
    }
    endWrite();

  } // End classic vs custom font
}
    20d2:	6a 96       	adiw	r28, 0x1a	; 26
    20d4:	0f b6       	in	r0, 0x3f	; 63
    20d6:	f8 94       	cli
    20d8:	de bf       	out	0x3e, r29	; 62
    20da:	0f be       	out	0x3f, r0	; 63
    20dc:	cd bf       	out	0x3d, r28	; 61
    20de:	df 91       	pop	r29
    20e0:	cf 91       	pop	r28
    20e2:	1f 91       	pop	r17
    20e4:	0f 91       	pop	r16
    20e6:	ff 90       	pop	r15
    20e8:	ef 90       	pop	r14
    20ea:	df 90       	pop	r13
    20ec:	cf 90       	pop	r12
    20ee:	bf 90       	pop	r11
    20f0:	af 90       	pop	r10
    20f2:	9f 90       	pop	r9
    20f4:	8f 90       	pop	r8
    20f6:	7f 90       	pop	r7
    20f8:	6f 90       	pop	r6
    20fa:	5f 90       	pop	r5
    20fc:	4f 90       	pop	r4
    20fe:	3f 90       	pop	r3
    2100:	2f 90       	pop	r2
    2102:	08 95       	ret

00002104 <Adafruit_GFX::write(unsigned char)>:
write():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1242
/*!
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t Adafruit_GFX::write(uint8_t c) {
    2104:	8f 92       	push	r8
    2106:	9f 92       	push	r9
    2108:	af 92       	push	r10
    210a:	cf 92       	push	r12
    210c:	ef 92       	push	r14
    210e:	ff 92       	push	r15
    2110:	0f 93       	push	r16
    2112:	1f 93       	push	r17
    2114:	cf 93       	push	r28
    2116:	df 93       	push	r29
    2118:	ec 01       	movw	r28, r24
    211a:	26 2f       	mov	r18, r22
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1243
  if (!gfxFont) { // 'Classic' built-in font
    211c:	89 8d       	ldd	r24, Y+25	; 0x19
    211e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2120:	00 97       	sbiw	r24, 0x00	; 0
    2122:	09 f0       	breq	.+2      	; 0x2126 <Adafruit_GFX::write(unsigned char)+0x22>
    2124:	51 c0       	rjmp	.+162    	; 0x21c8 <Adafruit_GFX::write(unsigned char)+0xc4>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1245

    if (c == '\n') {              // Newline?
    2126:	6a 30       	cpi	r22, 0x0A	; 10
    2128:	d1 f4       	brne	.+52     	; 0x215e <Adafruit_GFX::write(unsigned char)+0x5a>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1246
      cursor_x = 0;               // Reset x to zero,
    212a:	1d 86       	std	Y+13, r1	; 0x0d
    212c:	1c 86       	std	Y+12, r1	; 0x0c
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1247
      cursor_y += textsize_y * 8; // advance y one line
    212e:	8d 89       	ldd	r24, Y+21	; 0x15
    2130:	48 e0       	ldi	r20, 0x08	; 8
    2132:	84 9f       	mul	r24, r20
    2134:	90 01       	movw	r18, r0
    2136:	11 24       	eor	r1, r1
    2138:	8e 85       	ldd	r24, Y+14	; 0x0e
    213a:	9f 85       	ldd	r25, Y+15	; 0x0f
    213c:	82 0f       	add	r24, r18
    213e:	93 1f       	adc	r25, r19
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1262

  } else { // Custom font

    if (c == '\n') {
      cursor_x = 0;
      cursor_y +=
    2140:	9f 87       	std	Y+15, r25	; 0x0f
    2142:	8e 87       	std	Y+14, r24	; 0x0e
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1286
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
      }
    }
  }
  return 1;
}
    2144:	81 e0       	ldi	r24, 0x01	; 1
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	df 91       	pop	r29
    214a:	cf 91       	pop	r28
    214c:	1f 91       	pop	r17
    214e:	0f 91       	pop	r16
    2150:	ff 90       	pop	r15
    2152:	ef 90       	pop	r14
    2154:	cf 90       	pop	r12
    2156:	af 90       	pop	r10
    2158:	9f 90       	pop	r9
    215a:	8f 90       	pop	r8
    215c:	08 95       	ret
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1248
  if (!gfxFont) { // 'Classic' built-in font

    if (c == '\n') {              // Newline?
      cursor_x = 0;               // Reset x to zero,
      cursor_y += textsize_y * 8; // advance y one line
    } else if (c != '\r') {       // Ignore carriage returns
    215e:	6d 30       	cpi	r22, 0x0D	; 13
    2160:	89 f3       	breq	.-30     	; 0x2144 <Adafruit_GFX::write(unsigned char)+0x40>
    2162:	cc 88       	ldd	r12, Y+20	; 0x14
    2164:	ad 88       	ldd	r10, Y+21	; 0x15
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1249
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
    2166:	8f 89       	ldd	r24, Y+23	; 0x17
    2168:	88 23       	and	r24, r24
    216a:	c1 f0       	breq	.+48     	; 0x219c <Adafruit_GFX::write(unsigned char)+0x98>
    216c:	8c 85       	ldd	r24, Y+12	; 0x0c
    216e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2170:	36 e0       	ldi	r19, 0x06	; 6
    2172:	c3 9e       	mul	r12, r19
    2174:	80 0d       	add	r24, r0
    2176:	91 1d       	adc	r25, r1
    2178:	11 24       	eor	r1, r1
    217a:	48 85       	ldd	r20, Y+8	; 0x08
    217c:	59 85       	ldd	r21, Y+9	; 0x09
    217e:	48 17       	cp	r20, r24
    2180:	59 07       	cpc	r21, r25
    2182:	64 f4       	brge	.+24     	; 0x219c <Adafruit_GFX::write(unsigned char)+0x98>
    2184:	4e 85       	ldd	r20, Y+14	; 0x0e
    2186:	5f 85       	ldd	r21, Y+15	; 0x0f
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1250
        cursor_x = 0;                                       // Reset x to zero,
    2188:	1d 86       	std	Y+13, r1	; 0x0d
    218a:	1c 86       	std	Y+12, r1	; 0x0c
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1251
        cursor_y += textsize_y * 8; // advance y one line
    218c:	38 e0       	ldi	r19, 0x08	; 8
    218e:	a3 9e       	mul	r10, r19
    2190:	c0 01       	movw	r24, r0
    2192:	11 24       	eor	r1, r1
    2194:	84 0f       	add	r24, r20
    2196:	95 1f       	adc	r25, r21
    2198:	9f 87       	std	Y+15, r25	; 0x0f
    219a:	8e 87       	std	Y+14, r24	; 0x0e
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1253
      }
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
    219c:	ea 88       	ldd	r14, Y+18	; 0x12
    219e:	fb 88       	ldd	r15, Y+19	; 0x13
    21a0:	08 89       	ldd	r16, Y+16	; 0x10
    21a2:	19 89       	ldd	r17, Y+17	; 0x11
    21a4:	4e 85       	ldd	r20, Y+14	; 0x0e
    21a6:	5f 85       	ldd	r21, Y+15	; 0x0f
    21a8:	6c 85       	ldd	r22, Y+12	; 0x0c
    21aa:	7d 85       	ldd	r23, Y+13	; 0x0d
    21ac:	ce 01       	movw	r24, r28
    21ae:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1255
               textsize_y);
      cursor_x += textsize_x * 6; // Advance x one char
    21b2:	2c 89       	ldd	r18, Y+20	; 0x14
    21b4:	8c 85       	ldd	r24, Y+12	; 0x0c
    21b6:	9d 85       	ldd	r25, Y+13	; 0x0d
    21b8:	46 e0       	ldi	r20, 0x06	; 6
    21ba:	24 9f       	mul	r18, r20
    21bc:	80 0d       	add	r24, r0
    21be:	91 1d       	adc	r25, r1
    21c0:	11 24       	eor	r1, r1
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1280
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
                   textsize_y);
        }
        cursor_x +=
    21c2:	9d 87       	std	Y+13, r25	; 0x0d
    21c4:	8c 87       	std	Y+12, r24	; 0x0c
    21c6:	be cf       	rjmp	.-132    	; 0x2144 <Adafruit_GFX::write(unsigned char)+0x40>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1260
      cursor_x += textsize_x * 6; // Advance x one char
    }

  } else { // Custom font

    if (c == '\n') {
    21c8:	6a 30       	cpi	r22, 0x0A	; 10
    21ca:	69 f4       	brne	.+26     	; 0x21e6 <Adafruit_GFX::write(unsigned char)+0xe2>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1261
      cursor_x = 0;
    21cc:	1d 86       	std	Y+13, r1	; 0x0d
    21ce:	1c 86       	std	Y+12, r1	; 0x0c
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1263
      cursor_y +=
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    21d0:	fc 01       	movw	r30, r24
    21d2:	38 96       	adiw	r30, 0x08	; 8
    21d4:	e4 91       	lpm	r30, Z
    21d6:	2d 89       	ldd	r18, Y+21	; 0x15
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1262

  } else { // Custom font

    if (c == '\n') {
      cursor_x = 0;
      cursor_y +=
    21d8:	8e 85       	ldd	r24, Y+14	; 0x0e
    21da:	9f 85       	ldd	r25, Y+15	; 0x0f
    21dc:	e2 9f       	mul	r30, r18
    21de:	80 0d       	add	r24, r0
    21e0:	91 1d       	adc	r25, r1
    21e2:	11 24       	eor	r1, r1
    21e4:	ad cf       	rjmp	.-166    	; 0x2140 <Adafruit_GFX::write(unsigned char)+0x3c>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1264
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    } else if (c != '\r') {
    21e6:	6d 30       	cpi	r22, 0x0D	; 13
    21e8:	09 f4       	brne	.+2      	; 0x21ec <Adafruit_GFX::write(unsigned char)+0xe8>
    21ea:	ac cf       	rjmp	.-168    	; 0x2144 <Adafruit_GFX::write(unsigned char)+0x40>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1265
      uint8_t first = pgm_read_byte(&gfxFont->first);
    21ec:	fc 01       	movw	r30, r24
    21ee:	34 96       	adiw	r30, 0x04	; 4
    21f0:	34 91       	lpm	r19, Z
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1266
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
    21f2:	63 17       	cp	r22, r19
    21f4:	08 f4       	brcc	.+2      	; 0x21f8 <Adafruit_GFX::write(unsigned char)+0xf4>
    21f6:	a6 cf       	rjmp	.-180    	; 0x2144 <Adafruit_GFX::write(unsigned char)+0x40>
    21f8:	32 96       	adiw	r30, 0x02	; 2
    21fa:	e4 91       	lpm	r30, Z
    21fc:	e6 17       	cp	r30, r22
    21fe:	08 f4       	brcc	.+2      	; 0x2202 <Adafruit_GFX::write(unsigned char)+0xfe>
    2200:	a1 cf       	rjmp	.-190    	; 0x2144 <Adafruit_GFX::write(unsigned char)+0x40>
pgm_read_glyph_ptr():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:67
#define pgm_read_pointer(addr) ((void *)pgm_read_word(addr))
#endif

inline GFXglyph *pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c) {
#ifdef __AVR__
  return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    2202:	fc 01       	movw	r30, r24
    2204:	32 96       	adiw	r30, 0x02	; 2
    2206:	85 90       	lpm	r8, Z+
    2208:	94 90       	lpm	r9, Z
write():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1267
      cursor_y +=
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    } else if (c != '\r') {
      uint8_t first = pgm_read_byte(&gfxFont->first);
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
    220a:	46 2f       	mov	r20, r22
    220c:	43 1b       	sub	r20, r19
    220e:	34 2f       	mov	r19, r20
pgm_read_glyph_ptr():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:67
#define pgm_read_pointer(addr) ((void *)pgm_read_word(addr))
#endif

inline GFXglyph *pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c) {
#ifdef __AVR__
  return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    2210:	47 e0       	ldi	r20, 0x07	; 7
    2212:	34 9f       	mul	r19, r20
    2214:	80 0c       	add	r8, r0
    2216:	91 1c       	adc	r9, r1
    2218:	11 24       	eor	r1, r1
write():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1268
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    } else if (c != '\r') {
      uint8_t first = pgm_read_byte(&gfxFont->first);
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
        uint8_t w = pgm_read_byte(&glyph->width),
    221a:	f4 01       	movw	r30, r8
    221c:	32 96       	adiw	r30, 0x02	; 2
    221e:	34 91       	lpm	r19, Z
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1269
                h = pgm_read_byte(&glyph->height);
    2220:	31 96       	adiw	r30, 0x01	; 1
    2222:	e4 91       	lpm	r30, Z
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1270
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
    2224:	33 23       	and	r19, r19
    2226:	a9 f1       	breq	.+106    	; 0x2292 <Adafruit_GFX::write(unsigned char)+0x18e>
    2228:	ee 23       	and	r30, r30
    222a:	99 f1       	breq	.+102    	; 0x2292 <Adafruit_GFX::write(unsigned char)+0x18e>
    222c:	cc 88       	ldd	r12, Y+20	; 0x14
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1271
          int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
    222e:	f4 01       	movw	r30, r8
    2230:	35 96       	adiw	r30, 0x05	; 5
    2232:	e4 91       	lpm	r30, Z
    2234:	ad 88       	ldd	r10, Y+21	; 0x15
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1272
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    2236:	4f 89       	ldd	r20, Y+23	; 0x17
    2238:	44 23       	and	r20, r20
    223a:	01 f1       	breq	.+64     	; 0x227c <Adafruit_GFX::write(unsigned char)+0x178>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1271
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
        uint8_t w = pgm_read_byte(&glyph->width),
                h = pgm_read_byte(&glyph->height);
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
          int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
    223c:	0e 2e       	mov	r0, r30
    223e:	00 0c       	add	r0, r0
    2240:	ff 0b       	sbc	r31, r31
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1272
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    2242:	e3 0f       	add	r30, r19
    2244:	f1 1d       	adc	r31, r1
    2246:	ce 9e       	mul	r12, r30
    2248:	a0 01       	movw	r20, r0
    224a:	cf 9e       	mul	r12, r31
    224c:	50 0d       	add	r21, r0
    224e:	11 24       	eor	r1, r1
    2250:	6c 85       	ldd	r22, Y+12	; 0x0c
    2252:	7d 85       	ldd	r23, Y+13	; 0x0d
    2254:	46 0f       	add	r20, r22
    2256:	57 1f       	adc	r21, r23
    2258:	68 85       	ldd	r22, Y+8	; 0x08
    225a:	79 85       	ldd	r23, Y+9	; 0x09
    225c:	64 17       	cp	r22, r20
    225e:	75 07       	cpc	r23, r21
    2260:	6c f4       	brge	.+26     	; 0x227c <Adafruit_GFX::write(unsigned char)+0x178>
    2262:	4e 85       	ldd	r20, Y+14	; 0x0e
    2264:	5f 85       	ldd	r21, Y+15	; 0x0f
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1273
            cursor_x = 0;
    2266:	1d 86       	std	Y+13, r1	; 0x0d
    2268:	1c 86       	std	Y+12, r1	; 0x0c
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1275
            cursor_y += (int16_t)textsize_y *
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    226a:	fc 01       	movw	r30, r24
    226c:	38 96       	adiw	r30, 0x08	; 8
    226e:	e4 91       	lpm	r30, Z
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1274
                h = pgm_read_byte(&glyph->height);
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
          int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
            cursor_x = 0;
            cursor_y += (int16_t)textsize_y *
    2270:	ae 9e       	mul	r10, r30
    2272:	40 0d       	add	r20, r0
    2274:	51 1d       	adc	r21, r1
    2276:	11 24       	eor	r1, r1
    2278:	5f 87       	std	Y+15, r21	; 0x0f
    227a:	4e 87       	std	Y+14, r20	; 0x0e
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1277
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
    227c:	ea 88       	ldd	r14, Y+18	; 0x12
    227e:	fb 88       	ldd	r15, Y+19	; 0x13
    2280:	08 89       	ldd	r16, Y+16	; 0x10
    2282:	19 89       	ldd	r17, Y+17	; 0x11
    2284:	4e 85       	ldd	r20, Y+14	; 0x0e
    2286:	5f 85       	ldd	r21, Y+15	; 0x0f
    2288:	6c 85       	ldd	r22, Y+12	; 0x0c
    228a:	7d 85       	ldd	r23, Y+13	; 0x0d
    228c:	ce 01       	movw	r24, r28
    228e:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1281
                   textsize_y);
        }
        cursor_x +=
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
    2292:	f4 01       	movw	r30, r8
    2294:	34 96       	adiw	r30, 0x04	; 4
    2296:	e4 91       	lpm	r30, Z
    2298:	2c 89       	ldd	r18, Y+20	; 0x14
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1280
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
                   textsize_y);
        }
        cursor_x +=
    229a:	8c 85       	ldd	r24, Y+12	; 0x0c
    229c:	9d 85       	ldd	r25, Y+13	; 0x0d
    229e:	e2 9f       	mul	r30, r18
    22a0:	80 0d       	add	r24, r0
    22a2:	91 1d       	adc	r25, r1
    22a4:	11 24       	eor	r1, r1
    22a6:	8d cf       	rjmp	.-230    	; 0x21c2 <Adafruit_GFX::write(unsigned char)+0xbe>

000022a8 <Adafruit_GFX::drawRect(int, int, int, int, unsigned int)>:
drawRect():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:524
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
    22a8:	6f 92       	push	r6
    22aa:	7f 92       	push	r7
    22ac:	8f 92       	push	r8
    22ae:	9f 92       	push	r9
    22b0:	af 92       	push	r10
    22b2:	bf 92       	push	r11
    22b4:	cf 92       	push	r12
    22b6:	df 92       	push	r13
    22b8:	ef 92       	push	r14
    22ba:	ff 92       	push	r15
    22bc:	0f 93       	push	r16
    22be:	1f 93       	push	r17
    22c0:	cf 93       	push	r28
    22c2:	df 93       	push	r29
    22c4:	ec 01       	movw	r28, r24
    22c6:	6b 01       	movw	r12, r22
    22c8:	5a 01       	movw	r10, r20
    22ca:	39 01       	movw	r6, r18
    22cc:	48 01       	movw	r8, r16
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:525
  startWrite();
    22ce:	e8 81       	ld	r30, Y
    22d0:	f9 81       	ldd	r31, Y+1	; 0x01
    22d2:	02 84       	ldd	r0, Z+10	; 0x0a
    22d4:	f3 85       	ldd	r31, Z+11	; 0x0b
    22d6:	e0 2d       	mov	r30, r0
    22d8:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:526
  writeFastHLine(x, y, w, color);
    22da:	e8 81       	ld	r30, Y
    22dc:	f9 81       	ldd	r31, Y+1	; 0x01
    22de:	02 88       	ldd	r0, Z+18	; 0x12
    22e0:	f3 89       	ldd	r31, Z+19	; 0x13
    22e2:	e0 2d       	mov	r30, r0
    22e4:	87 01       	movw	r16, r14
    22e6:	93 01       	movw	r18, r6
    22e8:	a5 01       	movw	r20, r10
    22ea:	b6 01       	movw	r22, r12
    22ec:	ce 01       	movw	r24, r28
    22ee:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:527
  writeFastHLine(x, y + h - 1, w, color);
    22f0:	a5 01       	movw	r20, r10
    22f2:	48 0d       	add	r20, r8
    22f4:	59 1d       	adc	r21, r9
    22f6:	41 50       	subi	r20, 0x01	; 1
    22f8:	51 09       	sbc	r21, r1
    22fa:	e8 81       	ld	r30, Y
    22fc:	f9 81       	ldd	r31, Y+1	; 0x01
    22fe:	02 88       	ldd	r0, Z+18	; 0x12
    2300:	f3 89       	ldd	r31, Z+19	; 0x13
    2302:	e0 2d       	mov	r30, r0
    2304:	93 01       	movw	r18, r6
    2306:	b6 01       	movw	r22, r12
    2308:	ce 01       	movw	r24, r28
    230a:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:528
  writeFastVLine(x, y, h, color);
    230c:	e8 81       	ld	r30, Y
    230e:	f9 81       	ldd	r31, Y+1	; 0x01
    2310:	00 88       	ldd	r0, Z+16	; 0x10
    2312:	f1 89       	ldd	r31, Z+17	; 0x11
    2314:	e0 2d       	mov	r30, r0
    2316:	94 01       	movw	r18, r8
    2318:	a5 01       	movw	r20, r10
    231a:	b6 01       	movw	r22, r12
    231c:	ce 01       	movw	r24, r28
    231e:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:529
  writeFastVLine(x + w - 1, y, h, color);
    2320:	c6 0c       	add	r12, r6
    2322:	d7 1c       	adc	r13, r7
    2324:	b6 01       	movw	r22, r12
    2326:	61 50       	subi	r22, 0x01	; 1
    2328:	71 09       	sbc	r23, r1
    232a:	e8 81       	ld	r30, Y
    232c:	f9 81       	ldd	r31, Y+1	; 0x01
    232e:	00 88       	ldd	r0, Z+16	; 0x10
    2330:	f1 89       	ldd	r31, Z+17	; 0x11
    2332:	e0 2d       	mov	r30, r0
    2334:	94 01       	movw	r18, r8
    2336:	a5 01       	movw	r20, r10
    2338:	ce 01       	movw	r24, r28
    233a:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:530
  endWrite();
    233c:	e8 81       	ld	r30, Y
    233e:	f9 81       	ldd	r31, Y+1	; 0x01
    2340:	06 88       	ldd	r0, Z+22	; 0x16
    2342:	f7 89       	ldd	r31, Z+23	; 0x17
    2344:	e0 2d       	mov	r30, r0
    2346:	ce 01       	movw	r24, r28
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:531
}
    2348:	df 91       	pop	r29
    234a:	cf 91       	pop	r28
    234c:	1f 91       	pop	r17
    234e:	0f 91       	pop	r16
    2350:	ff 90       	pop	r15
    2352:	ef 90       	pop	r14
    2354:	df 90       	pop	r13
    2356:	cf 90       	pop	r12
    2358:	bf 90       	pop	r11
    235a:	af 90       	pop	r10
    235c:	9f 90       	pop	r9
    235e:	8f 90       	pop	r8
    2360:	7f 90       	pop	r7
    2362:	6f 90       	pop	r6
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:530
  startWrite();
  writeFastHLine(x, y, w, color);
  writeFastHLine(x, y + h - 1, w, color);
  writeFastVLine(x, y, h, color);
  writeFastVLine(x + w - 1, y, h, color);
  endWrite();
    2364:	09 94       	ijmp

00002366 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)>:
drawLine():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:331
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
                            uint16_t color) {
    2366:	6f 92       	push	r6
    2368:	7f 92       	push	r7
    236a:	8f 92       	push	r8
    236c:	9f 92       	push	r9
    236e:	af 92       	push	r10
    2370:	bf 92       	push	r11
    2372:	cf 92       	push	r12
    2374:	df 92       	push	r13
    2376:	ef 92       	push	r14
    2378:	ff 92       	push	r15
    237a:	0f 93       	push	r16
    237c:	1f 93       	push	r17
    237e:	cf 93       	push	r28
    2380:	df 93       	push	r29
    2382:	5c 01       	movw	r10, r24
    2384:	eb 01       	movw	r28, r22
    2386:	6a 01       	movw	r12, r20
    2388:	49 01       	movw	r8, r18
    238a:	38 01       	movw	r6, r16
    238c:	87 01       	movw	r16, r14
    238e:	dc 01       	movw	r26, r24
    2390:	ed 91       	ld	r30, X+
    2392:	fc 91       	ld	r31, X
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:333
  // Update in subclasses if desired!
  if (x0 == x1) {
    2394:	62 17       	cp	r22, r18
    2396:	73 07       	cpc	r23, r19
    2398:	19 f5       	brne	.+70     	; 0x23e0 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0x7a>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:334
    if (y0 > y1)
    239a:	64 16       	cp	r6, r20
    239c:	75 06       	cpc	r7, r21
    239e:	2c f0       	brlt	.+10     	; 0x23aa <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0x44>
    23a0:	96 2d       	mov	r25, r6
    23a2:	87 2d       	mov	r24, r7
    23a4:	3a 01       	movw	r6, r20
    23a6:	c9 2e       	mov	r12, r25
    23a8:	d8 2e       	mov	r13, r24
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:336
      _swap_int16_t(y0, y1);
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
    23aa:	96 01       	movw	r18, r12
    23ac:	26 19       	sub	r18, r6
    23ae:	37 09       	sbc	r19, r7
    23b0:	2f 5f       	subi	r18, 0xFF	; 255
    23b2:	3f 4f       	sbci	r19, 0xFF	; 255
    23b4:	04 8c       	ldd	r0, Z+28	; 0x1c
    23b6:	f5 8d       	ldd	r31, Z+29	; 0x1d
    23b8:	e0 2d       	mov	r30, r0
    23ba:	a3 01       	movw	r20, r6
    23bc:	be 01       	movw	r22, r28
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:340
  } else if (y0 == y1) {
    if (x0 > x1)
      _swap_int16_t(x0, x1);
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
    23be:	c5 01       	movw	r24, r10
    23c0:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:346
  } else {
    startWrite();
    writeLine(x0, y0, x1, y1, color);
    endWrite();
  }
}
    23c2:	df 91       	pop	r29
    23c4:	cf 91       	pop	r28
    23c6:	1f 91       	pop	r17
    23c8:	0f 91       	pop	r16
    23ca:	ff 90       	pop	r15
    23cc:	ef 90       	pop	r14
    23ce:	df 90       	pop	r13
    23d0:	cf 90       	pop	r12
    23d2:	bf 90       	pop	r11
    23d4:	af 90       	pop	r10
    23d6:	9f 90       	pop	r9
    23d8:	8f 90       	pop	r8
    23da:	7f 90       	pop	r7
    23dc:	6f 90       	pop	r6
    23de:	08 95       	ret
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:337
  // Update in subclasses if desired!
  if (x0 == x1) {
    if (y0 > y1)
      _swap_int16_t(y0, y1);
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
  } else if (y0 == y1) {
    23e0:	46 15       	cp	r20, r6
    23e2:	57 05       	cpc	r21, r7
    23e4:	91 f4       	brne	.+36     	; 0x240a <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0xa4>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:338
    if (x0 > x1)
    23e6:	26 17       	cp	r18, r22
    23e8:	37 07       	cpc	r19, r23
    23ea:	24 f0       	brlt	.+8      	; 0x23f4 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0x8e>
    23ec:	89 2d       	mov	r24, r9
    23ee:	4b 01       	movw	r8, r22
    23f0:	c2 2f       	mov	r28, r18
    23f2:	d8 2f       	mov	r29, r24
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:340
      _swap_int16_t(x0, x1);
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
    23f4:	9e 01       	movw	r18, r28
    23f6:	28 19       	sub	r18, r8
    23f8:	39 09       	sbc	r19, r9
    23fa:	2f 5f       	subi	r18, 0xFF	; 255
    23fc:	3f 4f       	sbci	r19, 0xFF	; 255
    23fe:	06 8c       	ldd	r0, Z+30	; 0x1e
    2400:	f7 8d       	ldd	r31, Z+31	; 0x1f
    2402:	e0 2d       	mov	r30, r0
    2404:	a6 01       	movw	r20, r12
    2406:	b4 01       	movw	r22, r8
    2408:	da cf       	rjmp	.-76     	; 0x23be <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0x58>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:342
  } else {
    startWrite();
    240a:	02 84       	ldd	r0, Z+10	; 0x0a
    240c:	f3 85       	ldd	r31, Z+11	; 0x0b
    240e:	e0 2d       	mov	r30, r0
    2410:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:343
    writeLine(x0, y0, x1, y1, color);
    2412:	d5 01       	movw	r26, r10
    2414:	ed 91       	ld	r30, X+
    2416:	fc 91       	ld	r31, X
    2418:	04 88       	ldd	r0, Z+20	; 0x14
    241a:	f5 89       	ldd	r31, Z+21	; 0x15
    241c:	e0 2d       	mov	r30, r0
    241e:	83 01       	movw	r16, r6
    2420:	94 01       	movw	r18, r8
    2422:	a6 01       	movw	r20, r12
    2424:	be 01       	movw	r22, r28
    2426:	c5 01       	movw	r24, r10
    2428:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:344
    endWrite();
    242a:	d5 01       	movw	r26, r10
    242c:	ed 91       	ld	r30, X+
    242e:	fc 91       	ld	r31, X
    2430:	06 88       	ldd	r0, Z+22	; 0x16
    2432:	f7 89       	ldd	r31, Z+23	; 0x17
    2434:	e0 2d       	mov	r30, r0
    2436:	c5 01       	movw	r24, r10
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:346
  }
}
    2438:	df 91       	pop	r29
    243a:	cf 91       	pop	r28
    243c:	1f 91       	pop	r17
    243e:	0f 91       	pop	r16
    2440:	ff 90       	pop	r15
    2442:	ef 90       	pop	r14
    2444:	df 90       	pop	r13
    2446:	cf 90       	pop	r12
    2448:	bf 90       	pop	r11
    244a:	af 90       	pop	r10
    244c:	9f 90       	pop	r9
    244e:	8f 90       	pop	r8
    2450:	7f 90       	pop	r7
    2452:	6f 90       	pop	r6
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:344
      _swap_int16_t(x0, x1);
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
  } else {
    startWrite();
    writeLine(x0, y0, x1, y1, color);
    endWrite();
    2454:	09 94       	ijmp

00002456 <Adafruit_GFX::fillScreen(unsigned int)>:
fillScreen():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:316
   @brief    Fill the screen completely with one color. Update in subclasses if
   desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
    2456:	ef 92       	push	r14
    2458:	ff 92       	push	r15
    245a:	0f 93       	push	r16
    245c:	1f 93       	push	r17
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:317
  fillRect(0, 0, _width, _height, color);
    245e:	dc 01       	movw	r26, r24
    2460:	1a 96       	adiw	r26, 0x0a	; 10
    2462:	0d 91       	ld	r16, X+
    2464:	1c 91       	ld	r17, X
    2466:	1b 97       	sbiw	r26, 0x0b	; 11
    2468:	18 96       	adiw	r26, 0x08	; 8
    246a:	2d 91       	ld	r18, X+
    246c:	3c 91       	ld	r19, X
    246e:	19 97       	sbiw	r26, 0x09	; 9
    2470:	ed 91       	ld	r30, X+
    2472:	fc 91       	ld	r31, X
    2474:	00 a0       	ldd	r0, Z+32	; 0x20
    2476:	f1 a1       	ldd	r31, Z+33	; 0x21
    2478:	e0 2d       	mov	r30, r0
    247a:	7b 01       	movw	r14, r22
    247c:	50 e0       	ldi	r21, 0x00	; 0
    247e:	40 e0       	ldi	r20, 0x00	; 0
    2480:	70 e0       	ldi	r23, 0x00	; 0
    2482:	60 e0       	ldi	r22, 0x00	; 0
    2484:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:318
}
    2486:	1f 91       	pop	r17
    2488:	0f 91       	pop	r16
    248a:	ff 90       	pop	r15
    248c:	ef 90       	pop	r14
    248e:	08 95       	ret

00002490 <Adafruit_GFX::fillRect(int, int, int, int, unsigned int)>:
fillRect():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:301
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
    2490:	4f 92       	push	r4
    2492:	5f 92       	push	r5
    2494:	6f 92       	push	r6
    2496:	7f 92       	push	r7
    2498:	8f 92       	push	r8
    249a:	9f 92       	push	r9
    249c:	af 92       	push	r10
    249e:	bf 92       	push	r11
    24a0:	cf 92       	push	r12
    24a2:	df 92       	push	r13
    24a4:	ef 92       	push	r14
    24a6:	ff 92       	push	r15
    24a8:	0f 93       	push	r16
    24aa:	1f 93       	push	r17
    24ac:	cf 93       	push	r28
    24ae:	df 93       	push	r29
    24b0:	6c 01       	movw	r12, r24
    24b2:	2b 01       	movw	r4, r22
    24b4:	5a 01       	movw	r10, r20
    24b6:	39 01       	movw	r6, r18
    24b8:	48 01       	movw	r8, r16
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:302
  startWrite();
    24ba:	dc 01       	movw	r26, r24
    24bc:	ed 91       	ld	r30, X+
    24be:	fc 91       	ld	r31, X
    24c0:	02 84       	ldd	r0, Z+10	; 0x0a
    24c2:	f3 85       	ldd	r31, Z+11	; 0x0b
    24c4:	e0 2d       	mov	r30, r0
    24c6:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:303
  for (int16_t i = x; i < x + w; i++) {
    24c8:	e2 01       	movw	r28, r4
    24ca:	64 0c       	add	r6, r4
    24cc:	75 1c       	adc	r7, r5
    24ce:	d6 01       	movw	r26, r12
    24d0:	ed 91       	ld	r30, X+
    24d2:	fc 91       	ld	r31, X
    24d4:	c6 15       	cp	r28, r6
    24d6:	d7 05       	cpc	r29, r7
    24d8:	5c f4       	brge	.+22     	; 0x24f0 <Adafruit_GFX::fillRect(int, int, int, int, unsigned int)+0x60>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:304
    writeFastVLine(i, y, h, color);
    24da:	00 88       	ldd	r0, Z+16	; 0x10
    24dc:	f1 89       	ldd	r31, Z+17	; 0x11
    24de:	e0 2d       	mov	r30, r0
    24e0:	87 01       	movw	r16, r14
    24e2:	94 01       	movw	r18, r8
    24e4:	a5 01       	movw	r20, r10
    24e6:	be 01       	movw	r22, r28
    24e8:	c6 01       	movw	r24, r12
    24ea:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:303
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
  startWrite();
  for (int16_t i = x; i < x + w; i++) {
    24ec:	21 96       	adiw	r28, 0x01	; 1
    24ee:	ef cf       	rjmp	.-34     	; 0x24ce <Adafruit_GFX::fillRect(int, int, int, int, unsigned int)+0x3e>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:306
    writeFastVLine(i, y, h, color);
  }
  endWrite();
    24f0:	06 88       	ldd	r0, Z+22	; 0x16
    24f2:	f7 89       	ldd	r31, Z+23	; 0x17
    24f4:	e0 2d       	mov	r30, r0
    24f6:	c6 01       	movw	r24, r12
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:307
}
    24f8:	df 91       	pop	r29
    24fa:	cf 91       	pop	r28
    24fc:	1f 91       	pop	r17
    24fe:	0f 91       	pop	r16
    2500:	ff 90       	pop	r15
    2502:	ef 90       	pop	r14
    2504:	df 90       	pop	r13
    2506:	cf 90       	pop	r12
    2508:	bf 90       	pop	r11
    250a:	af 90       	pop	r10
    250c:	9f 90       	pop	r9
    250e:	8f 90       	pop	r8
    2510:	7f 90       	pop	r7
    2512:	6f 90       	pop	r6
    2514:	5f 90       	pop	r5
    2516:	4f 90       	pop	r4
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:306
                            uint16_t color) {
  startWrite();
  for (int16_t i = x; i < x + w; i++) {
    writeFastVLine(i, y, h, color);
  }
  endWrite();
    2518:	09 94       	ijmp

0000251a <Adafruit_GFX::drawFastHLine(int, int, int, unsigned int)>:
drawFastHLine():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:283
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y, int16_t w,
                                 uint16_t color) {
    251a:	8f 92       	push	r8
    251c:	9f 92       	push	r9
    251e:	af 92       	push	r10
    2520:	bf 92       	push	r11
    2522:	cf 92       	push	r12
    2524:	df 92       	push	r13
    2526:	ef 92       	push	r14
    2528:	ff 92       	push	r15
    252a:	0f 93       	push	r16
    252c:	1f 93       	push	r17
    252e:	cf 93       	push	r28
    2530:	df 93       	push	r29
    2532:	ec 01       	movw	r28, r24
    2534:	5b 01       	movw	r10, r22
    2536:	4a 01       	movw	r8, r20
    2538:	69 01       	movw	r12, r18
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:284
  startWrite();
    253a:	e8 81       	ld	r30, Y
    253c:	f9 81       	ldd	r31, Y+1	; 0x01
    253e:	02 84       	ldd	r0, Z+10	; 0x0a
    2540:	f3 85       	ldd	r31, Z+11	; 0x0b
    2542:	e0 2d       	mov	r30, r0
    2544:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:285
  writeLine(x, y, x + w - 1, y, color);
    2546:	95 01       	movw	r18, r10
    2548:	2c 0d       	add	r18, r12
    254a:	3d 1d       	adc	r19, r13
    254c:	21 50       	subi	r18, 0x01	; 1
    254e:	31 09       	sbc	r19, r1
    2550:	e8 81       	ld	r30, Y
    2552:	f9 81       	ldd	r31, Y+1	; 0x01
    2554:	04 88       	ldd	r0, Z+20	; 0x14
    2556:	f5 89       	ldd	r31, Z+21	; 0x15
    2558:	e0 2d       	mov	r30, r0
    255a:	78 01       	movw	r14, r16
    255c:	84 01       	movw	r16, r8
    255e:	a4 01       	movw	r20, r8
    2560:	b5 01       	movw	r22, r10
    2562:	ce 01       	movw	r24, r28
    2564:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:286
  endWrite();
    2566:	e8 81       	ld	r30, Y
    2568:	f9 81       	ldd	r31, Y+1	; 0x01
    256a:	06 88       	ldd	r0, Z+22	; 0x16
    256c:	f7 89       	ldd	r31, Z+23	; 0x17
    256e:	e0 2d       	mov	r30, r0
    2570:	ce 01       	movw	r24, r28
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:287
}
    2572:	df 91       	pop	r29
    2574:	cf 91       	pop	r28
    2576:	1f 91       	pop	r17
    2578:	0f 91       	pop	r16
    257a:	ff 90       	pop	r15
    257c:	ef 90       	pop	r14
    257e:	df 90       	pop	r13
    2580:	cf 90       	pop	r12
    2582:	bf 90       	pop	r11
    2584:	af 90       	pop	r10
    2586:	9f 90       	pop	r9
    2588:	8f 90       	pop	r8
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:286
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y, int16_t w,
                                 uint16_t color) {
  startWrite();
  writeLine(x, y, x + w - 1, y, color);
  endWrite();
    258a:	09 94       	ijmp

0000258c <Adafruit_GFX::drawFastVLine(int, int, int, unsigned int)>:
drawFastVLine():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:266
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y, int16_t h,
                                 uint16_t color) {
    258c:	8f 92       	push	r8
    258e:	9f 92       	push	r9
    2590:	af 92       	push	r10
    2592:	bf 92       	push	r11
    2594:	cf 92       	push	r12
    2596:	df 92       	push	r13
    2598:	ef 92       	push	r14
    259a:	ff 92       	push	r15
    259c:	0f 93       	push	r16
    259e:	1f 93       	push	r17
    25a0:	cf 93       	push	r28
    25a2:	df 93       	push	r29
    25a4:	ec 01       	movw	r28, r24
    25a6:	5b 01       	movw	r10, r22
    25a8:	4a 01       	movw	r8, r20
    25aa:	69 01       	movw	r12, r18
    25ac:	78 01       	movw	r14, r16
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:267
  startWrite();
    25ae:	e8 81       	ld	r30, Y
    25b0:	f9 81       	ldd	r31, Y+1	; 0x01
    25b2:	02 84       	ldd	r0, Z+10	; 0x0a
    25b4:	f3 85       	ldd	r31, Z+11	; 0x0b
    25b6:	e0 2d       	mov	r30, r0
    25b8:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:268
  writeLine(x, y, x, y + h - 1, color);
    25ba:	c8 0c       	add	r12, r8
    25bc:	d9 1c       	adc	r13, r9
    25be:	86 01       	movw	r16, r12
    25c0:	01 50       	subi	r16, 0x01	; 1
    25c2:	11 09       	sbc	r17, r1
    25c4:	e8 81       	ld	r30, Y
    25c6:	f9 81       	ldd	r31, Y+1	; 0x01
    25c8:	04 88       	ldd	r0, Z+20	; 0x14
    25ca:	f5 89       	ldd	r31, Z+21	; 0x15
    25cc:	e0 2d       	mov	r30, r0
    25ce:	95 01       	movw	r18, r10
    25d0:	a4 01       	movw	r20, r8
    25d2:	b5 01       	movw	r22, r10
    25d4:	ce 01       	movw	r24, r28
    25d6:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:269
  endWrite();
    25d8:	e8 81       	ld	r30, Y
    25da:	f9 81       	ldd	r31, Y+1	; 0x01
    25dc:	06 88       	ldd	r0, Z+22	; 0x16
    25de:	f7 89       	ldd	r31, Z+23	; 0x17
    25e0:	e0 2d       	mov	r30, r0
    25e2:	ce 01       	movw	r24, r28
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:270
}
    25e4:	df 91       	pop	r29
    25e6:	cf 91       	pop	r28
    25e8:	1f 91       	pop	r17
    25ea:	0f 91       	pop	r16
    25ec:	ff 90       	pop	r15
    25ee:	ef 90       	pop	r14
    25f0:	df 90       	pop	r13
    25f2:	cf 90       	pop	r12
    25f4:	bf 90       	pop	r11
    25f6:	af 90       	pop	r10
    25f8:	9f 90       	pop	r9
    25fa:	8f 90       	pop	r8
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:269
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y, int16_t h,
                                 uint16_t color) {
  startWrite();
  writeLine(x, y, x, y + h - 1, color);
  endWrite();
    25fc:	09 94       	ijmp

000025fe <Adafruit_GFX::writeFillRect(int, int, int, int, unsigned int)>:
writeFillRect():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:242
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                                 uint16_t color) {
    25fe:	ef 92       	push	r14
    2600:	ff 92       	push	r15
    2602:	0f 93       	push	r16
    2604:	1f 93       	push	r17
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:244
  // Overwrite in subclasses if desired!
  fillRect(x, y, w, h, color);
    2606:	dc 01       	movw	r26, r24
    2608:	ed 91       	ld	r30, X+
    260a:	fc 91       	ld	r31, X
    260c:	00 a0       	ldd	r0, Z+32	; 0x20
    260e:	f1 a1       	ldd	r31, Z+33	; 0x21
    2610:	e0 2d       	mov	r30, r0
    2612:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:245
}
    2614:	1f 91       	pop	r17
    2616:	0f 91       	pop	r16
    2618:	ff 90       	pop	r15
    261a:	ef 90       	pop	r14
    261c:	08 95       	ret

0000261e <Adafruit_GFX::writeFastHLine(int, int, int, unsigned int)>:
writeFastHLine():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:223
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y, int16_t w,
                                  uint16_t color) {
    261e:	0f 93       	push	r16
    2620:	1f 93       	push	r17
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:227
  // Overwrite in subclasses if startWrite is defined!
  // Example: writeLine(x, y, x+w-1, y, color);
  // or writeFillRect(x, y, w, 1, color);
  drawFastHLine(x, y, w, color);
    2622:	dc 01       	movw	r26, r24
    2624:	ed 91       	ld	r30, X+
    2626:	fc 91       	ld	r31, X
    2628:	06 8c       	ldd	r0, Z+30	; 0x1e
    262a:	f7 8d       	ldd	r31, Z+31	; 0x1f
    262c:	e0 2d       	mov	r30, r0
    262e:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:228
}
    2630:	1f 91       	pop	r17
    2632:	0f 91       	pop	r16
    2634:	08 95       	ret

00002636 <Adafruit_GFX::writeFastVLine(int, int, int, unsigned int)>:
writeFastVLine():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:205
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y, int16_t h,
                                  uint16_t color) {
    2636:	0f 93       	push	r16
    2638:	1f 93       	push	r17
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:209
  // Overwrite in subclasses if startWrite is defined!
  // Can be just writeLine(x, y, x, y+h-1, color);
  // or writeFillRect(x, y, 1, h, color);
  drawFastVLine(x, y, h, color);
    263a:	dc 01       	movw	r26, r24
    263c:	ed 91       	ld	r30, X+
    263e:	fc 91       	ld	r31, X
    2640:	04 8c       	ldd	r0, Z+28	; 0x1c
    2642:	f5 8d       	ldd	r31, Z+29	; 0x1d
    2644:	e0 2d       	mov	r30, r0
    2646:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:210
}
    2648:	1f 91       	pop	r17
    264a:	0f 91       	pop	r16
    264c:	08 95       	ret

0000264e <Adafruit_GFX::writePixel(int, int, unsigned int)>:
writePixel():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:191
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color) {
  drawPixel(x, y, color);
    264e:	dc 01       	movw	r26, r24
    2650:	ed 91       	ld	r30, X+
    2652:	fc 91       	ld	r31, X
    2654:	00 84       	ldd	r0, Z+8	; 0x08
    2656:	f1 85       	ldd	r31, Z+9	; 0x09
    2658:	e0 2d       	mov	r30, r0
    265a:	09 94       	ijmp

0000265c <Adafruit_GFX::drawBitmap(int, int, unsigned char const*, int, int, unsigned int) [clone .constprop.7]>:
drawBitmap():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:717
    @param    w   Width of bitmap in pixels
    @param    h   Height of bitmap in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawBitmap(int16_t x, int16_t y, const uint8_t bitmap[],
    265c:	3f 92       	push	r3
    265e:	4f 92       	push	r4
    2660:	5f 92       	push	r5
    2662:	6f 92       	push	r6
    2664:	7f 92       	push	r7
    2666:	8f 92       	push	r8
    2668:	9f 92       	push	r9
    266a:	af 92       	push	r10
    266c:	bf 92       	push	r11
    266e:	cf 92       	push	r12
    2670:	df 92       	push	r13
    2672:	ef 92       	push	r14
    2674:	ff 92       	push	r15
    2676:	0f 93       	push	r16
    2678:	1f 93       	push	r17
    267a:	cf 93       	push	r28
    267c:	df 93       	push	r29
    267e:	5c 01       	movw	r10, r24
    2680:	7b 01       	movw	r14, r22
    2682:	4a 01       	movw	r8, r20
    2684:	69 01       	movw	r12, r18
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:720
                              int16_t w, int16_t h, uint16_t color) {

  int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
    2686:	39 01       	movw	r6, r18
    2688:	87 e0       	ldi	r24, 0x07	; 7
    268a:	68 0e       	add	r6, r24
    268c:	71 1c       	adc	r7, r1
    268e:	93 e0       	ldi	r25, 0x03	; 3
    2690:	75 94       	asr	r7
    2692:	67 94       	ror	r6
    2694:	9a 95       	dec	r25
    2696:	e1 f7       	brne	.-8      	; 0x2690 <Adafruit_GFX::drawBitmap(int, int, unsigned char const*, int, int, unsigned int) [clone .constprop.7]+0x34>
    2698:	2b 01       	movw	r4, r22
    269a:	40 0e       	add	r4, r16
    269c:	51 1e       	adc	r5, r17
    269e:	10 e0       	ldi	r17, 0x00	; 0
    26a0:	00 e0       	ldi	r16, 0x00	; 0
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:721
  uint8_t b = 0;
    26a2:	31 2c       	mov	r3, r1
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:725

  startWrite();
  for (int16_t j = 0; j < h; j++, y++) {
    for (int16_t i = 0; i < w; i++) {
    26a4:	d0 e0       	ldi	r29, 0x00	; 0
    26a6:	c0 e0       	ldi	r28, 0x00	; 0
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:726
      if (i & 7)
    26a8:	ce 01       	movw	r24, r28
    26aa:	87 70       	andi	r24, 0x07	; 7
    26ac:	99 27       	eor	r25, r25
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:727
        b <<= 1;
    26ae:	33 0c       	add	r3, r3
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:726
  uint8_t b = 0;

  startWrite();
  for (int16_t j = 0; j < h; j++, y++) {
    for (int16_t i = 0; i < w; i++) {
      if (i & 7)
    26b0:	89 2b       	or	r24, r25
    26b2:	59 f4       	brne	.+22     	; 0x26ca <Adafruit_GFX::drawBitmap(int, int, unsigned char const*, int, int, unsigned int) [clone .constprop.7]+0x6e>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:729
        b <<= 1;
      else
        b = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
    26b4:	fe 01       	movw	r30, r28
    26b6:	83 e0       	ldi	r24, 0x03	; 3
    26b8:	f5 95       	asr	r31
    26ba:	e7 95       	ror	r30
    26bc:	8a 95       	dec	r24
    26be:	e1 f7       	brne	.-8      	; 0x26b8 <Adafruit_GFX::drawBitmap(int, int, unsigned char const*, int, int, unsigned int) [clone .constprop.7]+0x5c>
    26c0:	e0 0f       	add	r30, r16
    26c2:	f1 1f       	adc	r31, r17
    26c4:	e8 0d       	add	r30, r8
    26c6:	f9 1d       	adc	r31, r9
    26c8:	34 90       	lpm	r3, Z
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:730
      if (b & 0x80)
    26ca:	37 fe       	sbrs	r3, 7
    26cc:	0a c0       	rjmp	.+20     	; 0x26e2 <Adafruit_GFX::drawBitmap(int, int, unsigned char const*, int, int, unsigned int) [clone .constprop.7]+0x86>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:731
        writePixel(x + i, y, color);
    26ce:	21 e0       	ldi	r18, 0x01	; 1
    26d0:	30 e0       	ldi	r19, 0x00	; 0
    26d2:	a7 01       	movw	r20, r14
    26d4:	b5 01       	movw	r22, r10
    26d6:	6c 0f       	add	r22, r28
    26d8:	7d 1f       	adc	r23, r29
    26da:	8e ec       	ldi	r24, 0xCE	; 206
    26dc:	93 e0       	ldi	r25, 0x03	; 3
    26de:	0e 94 27 13 	call	0x264e	; 0x264e <Adafruit_GFX::writePixel(int, int, unsigned int)>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:725
  int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
  uint8_t b = 0;

  startWrite();
  for (int16_t j = 0; j < h; j++, y++) {
    for (int16_t i = 0; i < w; i++) {
    26e2:	21 96       	adiw	r28, 0x01	; 1
    26e4:	cc 16       	cp	r12, r28
    26e6:	dd 06       	cpc	r13, r29
    26e8:	f9 f6       	brne	.-66     	; 0x26a8 <Adafruit_GFX::drawBitmap(int, int, unsigned char const*, int, int, unsigned int) [clone .constprop.7]+0x4c>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:724

  int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
  uint8_t b = 0;

  startWrite();
  for (int16_t j = 0; j < h; j++, y++) {
    26ea:	8f ef       	ldi	r24, 0xFF	; 255
    26ec:	e8 1a       	sub	r14, r24
    26ee:	f8 0a       	sbc	r15, r24
    26f0:	06 0d       	add	r16, r6
    26f2:	17 1d       	adc	r17, r7
    26f4:	e4 14       	cp	r14, r4
    26f6:	f5 04       	cpc	r15, r5
    26f8:	a9 f6       	brne	.-86     	; 0x26a4 <Adafruit_GFX::drawBitmap(int, int, unsigned char const*, int, int, unsigned int) [clone .constprop.7]+0x48>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:735
      if (b & 0x80)
        writePixel(x + i, y, color);
    }
  }
  endWrite();
}
    26fa:	df 91       	pop	r29
    26fc:	cf 91       	pop	r28
    26fe:	1f 91       	pop	r17
    2700:	0f 91       	pop	r16
    2702:	ff 90       	pop	r15
    2704:	ef 90       	pop	r14
    2706:	df 90       	pop	r13
    2708:	cf 90       	pop	r12
    270a:	bf 90       	pop	r11
    270c:	af 90       	pop	r10
    270e:	9f 90       	pop	r9
    2710:	8f 90       	pop	r8
    2712:	7f 90       	pop	r7
    2714:	6f 90       	pop	r6
    2716:	5f 90       	pop	r5
    2718:	4f 90       	pop	r4
    271a:	3f 90       	pop	r3
    271c:	08 95       	ret

0000271e <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)>:
writeLine():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:133
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
                             uint16_t color) {
    271e:	2f 92       	push	r2
    2720:	3f 92       	push	r3
    2722:	4f 92       	push	r4
    2724:	5f 92       	push	r5
    2726:	6f 92       	push	r6
    2728:	7f 92       	push	r7
    272a:	8f 92       	push	r8
    272c:	9f 92       	push	r9
    272e:	af 92       	push	r10
    2730:	bf 92       	push	r11
    2732:	cf 92       	push	r12
    2734:	df 92       	push	r13
    2736:	ef 92       	push	r14
    2738:	ff 92       	push	r15
    273a:	0f 93       	push	r16
    273c:	1f 93       	push	r17
    273e:	cf 93       	push	r28
    2740:	df 93       	push	r29
    2742:	00 d0       	rcall	.+0      	; 0x2744 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x26>
    2744:	00 d0       	rcall	.+0      	; 0x2746 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x28>
    2746:	00 d0       	rcall	.+0      	; 0x2748 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x2a>
    2748:	cd b7       	in	r28, 0x3d	; 61
    274a:	de b7       	in	r29, 0x3e	; 62
    274c:	3c 01       	movw	r6, r24
    274e:	6a 01       	movw	r12, r20
    2750:	3e 83       	std	Y+6, r19	; 0x06
    2752:	2d 83       	std	Y+5, r18	; 0x05
    2754:	fc 82       	std	Y+4, r15	; 0x04
    2756:	eb 82       	std	Y+3, r14	; 0x03
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:137
#if defined(ESP8266)
  yield();
#endif
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
    2758:	58 01       	movw	r10, r16
    275a:	a4 1a       	sub	r10, r20
    275c:	b5 0a       	sbc	r11, r21
    275e:	b7 fe       	sbrs	r11, 7
    2760:	03 c0       	rjmp	.+6      	; 0x2768 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x4a>
    2762:	b1 94       	neg	r11
    2764:	a1 94       	neg	r10
    2766:	b1 08       	sbc	r11, r1
    2768:	8d 80       	ldd	r8, Y+5	; 0x05
    276a:	9e 80       	ldd	r9, Y+6	; 0x06
    276c:	86 1a       	sub	r8, r22
    276e:	97 0a       	sbc	r9, r23
    2770:	97 fe       	sbrs	r9, 7
    2772:	03 c0       	rjmp	.+6      	; 0x277a <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x5c>
    2774:	91 94       	neg	r9
    2776:	81 94       	neg	r8
    2778:	91 08       	sbc	r9, r1
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:138
  if (steep) {
    277a:	8a 14       	cp	r8, r10
    277c:	9b 04       	cpc	r9, r11
    277e:	5c f0       	brlt	.+22     	; 0x2796 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x78>
    2780:	90 2f       	mov	r25, r16
    2782:	81 2f       	mov	r24, r17
    2784:	0d 81       	ldd	r16, Y+5	; 0x05
    2786:	1e 81       	ldd	r17, Y+6	; 0x06
    2788:	9d 83       	std	Y+5, r25	; 0x05
    278a:	8e 83       	std	Y+6, r24	; 0x06
    278c:	9c 2d       	mov	r25, r12
    278e:	8d 2d       	mov	r24, r13
    2790:	6b 01       	movw	r12, r22
    2792:	69 2f       	mov	r22, r25
    2794:	78 2f       	mov	r23, r24
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:143
    _swap_int16_t(x0, y0);
    _swap_int16_t(x1, y1);
  }

  if (x0 > x1) {
    2796:	0c 15       	cp	r16, r12
    2798:	1d 05       	cpc	r17, r13
    279a:	5c f0       	brlt	.+22     	; 0x27b2 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x94>
    279c:	9d 81       	ldd	r25, Y+5	; 0x05
    279e:	8e 81       	ldd	r24, Y+6	; 0x06
    27a0:	7e 83       	std	Y+6, r23	; 0x06
    27a2:	6d 83       	std	Y+5, r22	; 0x05
    27a4:	69 2f       	mov	r22, r25
    27a6:	78 2f       	mov	r23, r24
    27a8:	90 2f       	mov	r25, r16
    27aa:	81 2f       	mov	r24, r17
    27ac:	86 01       	movw	r16, r12
    27ae:	c9 2e       	mov	r12, r25
    27b0:	d8 2e       	mov	r13, r24
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:149
    _swap_int16_t(x0, x1);
    _swap_int16_t(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
    27b2:	16 01       	movw	r2, r12
    27b4:	20 1a       	sub	r2, r16
    27b6:	31 0a       	sbc	r3, r17
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:150
  dy = abs(y1 - y0);
    27b8:	2b 01       	movw	r4, r22
    27ba:	2d 81       	ldd	r18, Y+5	; 0x05
    27bc:	3e 81       	ldd	r19, Y+6	; 0x06
    27be:	42 1a       	sub	r4, r18
    27c0:	53 0a       	sbc	r5, r19
    27c2:	57 fe       	sbrs	r5, 7
    27c4:	03 c0       	rjmp	.+6      	; 0x27cc <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xae>
    27c6:	51 94       	neg	r5
    27c8:	41 94       	neg	r4
    27ca:	51 08       	sbc	r5, r1
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:152

  int16_t err = dx / 2;
    27cc:	71 01       	movw	r14, r2
    27ce:	37 fe       	sbrs	r3, 7
    27d0:	03 c0       	rjmp	.+6      	; 0x27d8 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xba>
    27d2:	3f ef       	ldi	r19, 0xFF	; 255
    27d4:	e3 1a       	sub	r14, r19
    27d6:	f3 0a       	sbc	r15, r19
    27d8:	f5 94       	asr	r15
    27da:	e7 94       	ror	r14
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:155
  int16_t ystep;

  if (y0 < y1) {
    27dc:	8d 81       	ldd	r24, Y+5	; 0x05
    27de:	9e 81       	ldd	r25, Y+6	; 0x06
    27e0:	86 17       	cp	r24, r22
    27e2:	97 07       	cpc	r25, r23
    27e4:	5c f5       	brge	.+86     	; 0x283c <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x11e>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:156
    ystep = 1;
    27e6:	a1 e0       	ldi	r26, 0x01	; 1
    27e8:	b0 e0       	ldi	r27, 0x00	; 0
    27ea:	ba 83       	std	Y+2, r27	; 0x02
    27ec:	a9 83       	std	Y+1, r26	; 0x01
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:161
  } else {
    ystep = -1;
  }

  for (; x0 <= x1; x0++) {
    27ee:	c0 16       	cp	r12, r16
    27f0:	d1 06       	cpc	r13, r17
    27f2:	4c f1       	brlt	.+82     	; 0x2846 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x128>
    27f4:	d3 01       	movw	r26, r6
    27f6:	ed 91       	ld	r30, X+
    27f8:	fc 91       	ld	r31, X
    27fa:	04 84       	ldd	r0, Z+12	; 0x0c
    27fc:	f5 85       	ldd	r31, Z+13	; 0x0d
    27fe:	e0 2d       	mov	r30, r0
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:163
    if (steep) {
      writePixel(y0, x0, color);
    2800:	2b 81       	ldd	r18, Y+3	; 0x03
    2802:	3c 81       	ldd	r19, Y+4	; 0x04
    2804:	a8 01       	movw	r20, r16
    2806:	6d 81       	ldd	r22, Y+5	; 0x05
    2808:	7e 81       	ldd	r23, Y+6	; 0x06
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:162
  } else {
    ystep = -1;
  }

  for (; x0 <= x1; x0++) {
    if (steep) {
    280a:	8a 14       	cp	r8, r10
    280c:	9b 04       	cpc	r9, r11
    280e:	1c f0       	brlt	.+6      	; 0x2816 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xf8>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:165
      writePixel(y0, x0, color);
    } else {
      writePixel(x0, y0, color);
    2810:	4d 81       	ldd	r20, Y+5	; 0x05
    2812:	5e 81       	ldd	r21, Y+6	; 0x06
    2814:	b8 01       	movw	r22, r16
    2816:	c3 01       	movw	r24, r6
    2818:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:167
    }
    err -= dy;
    281a:	e4 18       	sub	r14, r4
    281c:	f5 08       	sbc	r15, r5
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:168
    if (err < 0) {
    281e:	f7 fe       	sbrs	r15, 7
    2820:	0a c0       	rjmp	.+20     	; 0x2836 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x118>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:169
      y0 += ystep;
    2822:	2d 81       	ldd	r18, Y+5	; 0x05
    2824:	3e 81       	ldd	r19, Y+6	; 0x06
    2826:	89 81       	ldd	r24, Y+1	; 0x01
    2828:	9a 81       	ldd	r25, Y+2	; 0x02
    282a:	28 0f       	add	r18, r24
    282c:	39 1f       	adc	r19, r25
    282e:	3e 83       	std	Y+6, r19	; 0x06
    2830:	2d 83       	std	Y+5, r18	; 0x05
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:170
      err += dx;
    2832:	e2 0c       	add	r14, r2
    2834:	f3 1c       	adc	r15, r3
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:161
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0 <= x1; x0++) {
    2836:	0f 5f       	subi	r16, 0xFF	; 255
    2838:	1f 4f       	sbci	r17, 0xFF	; 255
    283a:	d9 cf       	rjmp	.-78     	; 0x27ee <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xd0>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:158
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
    283c:	2f ef       	ldi	r18, 0xFF	; 255
    283e:	3f ef       	ldi	r19, 0xFF	; 255
    2840:	3a 83       	std	Y+2, r19	; 0x02
    2842:	29 83       	std	Y+1, r18	; 0x01
    2844:	d4 cf       	rjmp	.-88     	; 0x27ee <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xd0>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:173
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}
    2846:	26 96       	adiw	r28, 0x06	; 6
    2848:	0f b6       	in	r0, 0x3f	; 63
    284a:	f8 94       	cli
    284c:	de bf       	out	0x3e, r29	; 62
    284e:	0f be       	out	0x3f, r0	; 63
    2850:	cd bf       	out	0x3d, r28	; 61
    2852:	df 91       	pop	r29
    2854:	cf 91       	pop	r28
    2856:	1f 91       	pop	r17
    2858:	0f 91       	pop	r16
    285a:	ff 90       	pop	r15
    285c:	ef 90       	pop	r14
    285e:	df 90       	pop	r13
    2860:	cf 90       	pop	r12
    2862:	bf 90       	pop	r11
    2864:	af 90       	pop	r10
    2866:	9f 90       	pop	r9
    2868:	8f 90       	pop	r8
    286a:	7f 90       	pop	r7
    286c:	6f 90       	pop	r6
    286e:	5f 90       	pop	r5
    2870:	4f 90       	pop	r4
    2872:	3f 90       	pop	r3
    2874:	2f 90       	pop	r2
    2876:	08 95       	ret

00002878 <Print::flush()>:
flush():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.h:65

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    2878:	08 95       	ret

0000287a <twi_stop>:
twi_stop():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:436
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    287a:	85 ed       	ldi	r24, 0xD5	; 213
    287c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:456
          return;
        }
      }
    }
  #else
    while(TWCR & _BV(TWSTO)){
    2880:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2884:	84 fd       	sbrc	r24, 4
    2886:	fc cf       	rjmp	.-8      	; 0x2880 <twi_stop+0x6>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:462
      continue;
    }
  #endif

  // update twi state
  twi_state = TWI_READY;
    2888:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <twi_state>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:463
}
    288c:	08 95       	ret

0000288e <twi_transmit>:
twi_transmit():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:371
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    288e:	20 91 94 02 	lds	r18, 0x0294	; 0x800294 <twi_txBufferLength>
    2892:	26 0f       	add	r18, r22
    2894:	33 27       	eor	r19, r19
    2896:	33 1f       	adc	r19, r19
    2898:	21 32       	cpi	r18, 0x21	; 33
    289a:	31 05       	cpc	r19, r1
    289c:	ec f4       	brge	.+58     	; 0x28d8 <twi_transmit+0x4a>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:376
    return 1;
  }

  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    289e:	20 91 f0 02 	lds	r18, 0x02F0	; 0x8002f0 <twi_state>
    28a2:	fc 01       	movw	r30, r24
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	80 e0       	ldi	r24, 0x00	; 0
    28a8:	24 30       	cpi	r18, 0x04	; 4
    28aa:	69 f0       	breq	.+26     	; 0x28c6 <twi_transmit+0x38>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:377
    return 2;
    28ac:	82 e0       	ldi	r24, 0x02	; 2
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:387
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;

  return 0;
}
    28ae:	08 95       	ret
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:382
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    twi_txBuffer[twi_txBufferLength+i] = data[i];
    28b0:	a0 91 94 02 	lds	r26, 0x0294	; 0x800294 <twi_txBufferLength>
    28b4:	21 91       	ld	r18, Z+
    28b6:	ac 01       	movw	r20, r24
    28b8:	4c 58       	subi	r20, 0x8C	; 140
    28ba:	5d 4f       	sbci	r21, 0xFD	; 253
    28bc:	a4 0f       	add	r26, r20
    28be:	b5 2f       	mov	r27, r21
    28c0:	b1 1d       	adc	r27, r1
    28c2:	2c 93       	st	X, r18
    28c4:	01 96       	adiw	r24, 0x01	; 1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:381
  if(TWI_STX != twi_state){
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    28c6:	86 17       	cp	r24, r22
    28c8:	98 f3       	brcs	.-26     	; 0x28b0 <twi_transmit+0x22>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:384
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
    28ca:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <twi_txBufferLength>
    28ce:	68 0f       	add	r22, r24
    28d0:	60 93 94 02 	sts	0x0294, r22	; 0x800294 <twi_txBufferLength>
    28d4:	80 e0       	ldi	r24, 0x00	; 0
    28d6:	08 95       	ret
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:372
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    return 1;
    28d8:	81 e0       	ldi	r24, 0x01	; 1
    28da:	08 95       	ret

000028dc <TwoWire::peek()>:
peek():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:316
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;

  if(rxBufferIndex < rxBufferLength){
    28dc:	e0 91 c7 02 	lds	r30, 0x02C7	; 0x8002c7 <TwoWire::rxBufferIndex>
    28e0:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <TwoWire::rxBufferLength>
    28e4:	e8 17       	cp	r30, r24
    28e6:	30 f4       	brcc	.+12     	; 0x28f4 <TwoWire::peek()+0x18>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:317
    value = rxBuffer[rxBufferIndex];
    28e8:	f0 e0       	ldi	r31, 0x00	; 0
    28ea:	e8 53       	subi	r30, 0x38	; 56
    28ec:	fd 4f       	sbci	r31, 0xFD	; 253
    28ee:	80 81       	ld	r24, Z
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	08 95       	ret
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:314
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
    28f4:	8f ef       	ldi	r24, 0xFF	; 255
    28f6:	9f ef       	ldi	r25, 0xFF	; 255
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:321
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
    28f8:	08 95       	ret

000028fa <TwoWire::read()>:
read():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:301
int TwoWire::read(void)
{
  int value = -1;

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    28fa:	90 91 c7 02 	lds	r25, 0x02C7	; 0x8002c7 <TwoWire::rxBufferIndex>
    28fe:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <TwoWire::rxBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:298
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
    2902:	2f ef       	ldi	r18, 0xFF	; 255
    2904:	3f ef       	ldi	r19, 0xFF	; 255
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:301

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    2906:	98 17       	cp	r25, r24
    2908:	48 f4       	brcc	.+18     	; 0x291c <TwoWire::read()+0x22>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:302
    value = rxBuffer[rxBufferIndex];
    290a:	e9 2f       	mov	r30, r25
    290c:	f0 e0       	ldi	r31, 0x00	; 0
    290e:	e8 53       	subi	r30, 0x38	; 56
    2910:	fd 4f       	sbci	r31, 0xFD	; 253
    2912:	20 81       	ld	r18, Z
    2914:	30 e0       	ldi	r19, 0x00	; 0
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:303
    ++rxBufferIndex;
    2916:	9f 5f       	subi	r25, 0xFF	; 255
    2918:	90 93 c7 02 	sts	0x02C7, r25	; 0x8002c7 <TwoWire::rxBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:307
  }

  return value;
}
    291c:	c9 01       	movw	r24, r18
    291e:	08 95       	ret

00002920 <TwoWire::available()>:
available():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:290
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
    2920:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <TwoWire::rxBufferLength>
    2924:	90 91 c7 02 	lds	r25, 0x02C7	; 0x8002c7 <TwoWire::rxBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:291
}
    2928:	89 1b       	sub	r24, r25
    292a:	99 0b       	sbc	r25, r25
    292c:	08 95       	ret

0000292e <TwoWire::write(unsigned char const*, unsigned int)>:
write():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:271

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    292e:	cf 92       	push	r12
    2930:	df 92       	push	r13
    2932:	ef 92       	push	r14
    2934:	ff 92       	push	r15
    2936:	0f 93       	push	r16
    2938:	1f 93       	push	r17
    293a:	cf 93       	push	r28
    293c:	df 93       	push	r29
    293e:	7c 01       	movw	r14, r24
    2940:	cb 01       	movw	r24, r22
    2942:	8a 01       	movw	r16, r20
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:272
  if(transmitting){
    2944:	20 91 f4 02 	lds	r18, 0x02F4	; 0x8002f4 <TwoWire::transmitting>
    2948:	22 23       	and	r18, r18
    294a:	89 f0       	breq	.+34     	; 0x296e <TwoWire::write(unsigned char const*, unsigned int)+0x40>
    294c:	eb 01       	movw	r28, r22
    294e:	6b 01       	movw	r12, r22
    2950:	c4 0e       	add	r12, r20
    2952:	d5 1e       	adc	r13, r21
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:274
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    2954:	cc 15       	cp	r28, r12
    2956:	dd 05       	cpc	r29, r13
    2958:	69 f0       	breq	.+26     	; 0x2974 <TwoWire::write(unsigned char const*, unsigned int)+0x46>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:275
      write(data[i]);
    295a:	69 91       	ld	r22, Y+
    295c:	d7 01       	movw	r26, r14
    295e:	ed 91       	ld	r30, X+
    2960:	fc 91       	ld	r31, X
    2962:	01 90       	ld	r0, Z+
    2964:	f0 81       	ld	r31, Z
    2966:	e0 2d       	mov	r30, r0
    2968:	c7 01       	movw	r24, r14
    296a:	09 95       	icall
    296c:	f3 cf       	rjmp	.-26     	; 0x2954 <TwoWire::write(unsigned char const*, unsigned int)+0x26>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:280
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    296e:	64 2f       	mov	r22, r20
    2970:	0e 94 47 14 	call	0x288e	; 0x288e <twi_transmit>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:283
  }
  return quantity;
}
    2974:	c8 01       	movw	r24, r16
    2976:	df 91       	pop	r29
    2978:	cf 91       	pop	r28
    297a:	1f 91       	pop	r17
    297c:	0f 91       	pop	r16
    297e:	ff 90       	pop	r15
    2980:	ef 90       	pop	r14
    2982:	df 90       	pop	r13
    2984:	cf 90       	pop	r12
    2986:	08 95       	ret

00002988 <TwoWire::write(unsigned char)>:
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:246

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
    2988:	cf 93       	push	r28
    298a:	df 93       	push	r29
    298c:	1f 92       	push	r1
    298e:	cd b7       	in	r28, 0x3d	; 61
    2990:	de b7       	in	r29, 0x3e	; 62
    2992:	69 83       	std	Y+1, r22	; 0x01
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:247
  if(transmitting){
    2994:	20 91 f4 02 	lds	r18, 0x02F4	; 0x8002f4 <TwoWire::transmitting>
    2998:	22 23       	and	r18, r18
    299a:	f9 f0       	breq	.+62     	; 0x29da <TwoWire::write(unsigned char)+0x52>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:250
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= TWI_BUFFER_SIZE){
    299c:	20 91 f1 02 	lds	r18, 0x02F1	; 0x8002f1 <TwoWire::txBufferLength>
    29a0:	20 32       	cpi	r18, 0x20	; 32
    29a2:	58 f0       	brcs	.+22     	; 0x29ba <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.h:44
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    29a4:	21 e0       	ldi	r18, 0x01	; 1
    29a6:	30 e0       	ldi	r19, 0x00	; 0
    29a8:	fc 01       	movw	r30, r24
    29aa:	33 83       	std	Z+3, r19	; 0x03
    29ac:	22 83       	std	Z+2, r18	; 0x02
write():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:252
      setWriteError();
      return 0;
    29ae:	90 e0       	ldi	r25, 0x00	; 0
    29b0:	80 e0       	ldi	r24, 0x00	; 0
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:265
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
}
    29b2:	0f 90       	pop	r0
    29b4:	df 91       	pop	r29
    29b6:	cf 91       	pop	r28
    29b8:	08 95       	ret
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:255
    if(txBufferLength >= TWI_BUFFER_SIZE){
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    29ba:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <TwoWire::txBufferIndex>
    29be:	e8 2f       	mov	r30, r24
    29c0:	f0 e0       	ldi	r31, 0x00	; 0
    29c2:	ec 5a       	subi	r30, 0xAC	; 172
    29c4:	fd 4f       	sbci	r31, 0xFD	; 253
    29c6:	99 81       	ldd	r25, Y+1	; 0x01
    29c8:	90 83       	st	Z, r25
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:256
    ++txBufferIndex;
    29ca:	8f 5f       	subi	r24, 0xFF	; 255
    29cc:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <TwoWire::txBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:258
    // update amount in buffer
    txBufferLength = txBufferIndex;
    29d0:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <TwoWire::txBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:264
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
    29d4:	81 e0       	ldi	r24, 0x01	; 1
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	ec cf       	rjmp	.-40     	; 0x29b2 <TwoWire::write(unsigned char)+0x2a>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:262
    // update amount in buffer
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    29da:	61 e0       	ldi	r22, 0x01	; 1
    29dc:	ce 01       	movw	r24, r28
    29de:	01 96       	adiw	r24, 0x01	; 1
    29e0:	0e 94 47 14 	call	0x288e	; 0x288e <twi_transmit>
    29e4:	f7 cf       	rjmp	.-18     	; 0x29d4 <TwoWire::write(unsigned char)+0x4c>

000029e6 <TwoWire::write(int) [clone .constprop.36]>:
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.h:87
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    29e6:	68 2f       	mov	r22, r24
    29e8:	82 ec       	ldi	r24, 0xC2	; 194
    29ea:	93 e0       	ldi	r25, 0x03	; 3
    29ec:	0c 94 c4 14 	jmp	0x2988	; 0x2988 <TwoWire::write(unsigned char)>

000029f0 <TwoWire::endTransmission()>:
endTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:225
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
  // transmit buffer (blocking)
  uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
    29f0:	90 91 f1 02 	lds	r25, 0x02F1	; 0x8002f1 <TwoWire::txBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:269
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    return 1;
    29f4:	81 e0       	ldi	r24, 0x01	; 1
twi_writeTo():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:268
 *          5 .. timeout
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    29f6:	91 32       	cpi	r25, 0x21	; 33
    29f8:	08 f0       	brcs	.+2      	; 0x29fc <TwoWire::endTransmission()+0xc>
    29fa:	43 c0       	rjmp	.+134    	; 0x2a82 <TwoWire::endTransmission()+0x92>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:282
        twi_handleTimeout(twi_do_reset_on_timeout);
        return (5);
      }
    }
  #else
    while(TWI_READY != twi_state){
    29fc:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <twi_state>
    2a00:	81 11       	cpse	r24, r1
    2a02:	fc cf       	rjmp	.-8      	; 0x29fc <TwoWire::endTransmission()+0xc>
endTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:225
    2a04:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <TwoWire::txAddress>
twi_writeTo():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:287
      continue;
    }
  #endif

  twi_state = TWI_MTX;
    2a08:	22 e0       	ldi	r18, 0x02	; 2
    2a0a:	20 93 f0 02 	sts	0x02F0, r18	; 0x8002f0 <twi_state>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:288
  twi_sendStop = sendStop;
    2a0e:	21 e0       	ldi	r18, 0x01	; 1
    2a10:	20 93 ef 02 	sts	0x02EF, r18	; 0x8002ef <twi_sendStop>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:290
  // reset error state (0xFF.. no error occurred)
  twi_error = 0xFF;
    2a14:	2f ef       	ldi	r18, 0xFF	; 255
    2a16:	20 93 ee 02 	sts	0x02EE, r18	; 0x8002ee <twi_error>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:293

  // initialize buffer iteration vars
  twi_masterBuffer = data;
    2a1a:	24 e5       	ldi	r18, 0x54	; 84
    2a1c:	32 e0       	ldi	r19, 0x02	; 2
    2a1e:	30 93 ed 02 	sts	0x02ED, r19	; 0x8002ed <twi_masterBuffer+0x1>
    2a22:	20 93 ec 02 	sts	0x02EC, r18	; 0x8002ec <twi_masterBuffer>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:294
  twi_masterBufferIndex = 0;
    2a26:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <twi_masterBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:295
  twi_masterBufferLength = length;
    2a2a:	90 93 ea 02 	sts	0x02EA, r25	; 0x8002ea <twi_masterBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:298

  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    2a2e:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <twi_slarw>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:299
  twi_slarw |= address << 1;
    2a32:	90 91 e9 02 	lds	r25, 0x02E9	; 0x8002e9 <twi_slarw>
    2a36:	88 0f       	add	r24, r24
    2a38:	89 2b       	or	r24, r25
    2a3a:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <twi_slarw>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:304

  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    2a3e:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <twi_inRepStart>
    2a42:	81 30       	cpi	r24, 0x01	; 1
    2a44:	29 f5       	brne	.+74     	; 0x2a90 <TwoWire::endTransmission()+0xa0>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:311
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // Remember, we're dealing with an ASYNC ISR
    2a46:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <twi_inRepStart>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:322
          return (5);
        }
      } while(TWCR & _BV(TWWC));
    #else
      do {
        TWDR = twi_slarw;
    2a4a:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <twi_slarw>
    2a4e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:323
      } while(TWCR & _BV(TWWC));
    2a52:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2a56:	83 fd       	sbrc	r24, 3
    2a58:	f8 cf       	rjmp	.-16     	; 0x2a4a <TwoWire::endTransmission()+0x5a>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:325
    #endif
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
    2a5a:	85 ec       	ldi	r24, 0xC5	; 197
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:329
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
    2a5c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:341
        twi_handleTimeout(twi_do_reset_on_timeout);
        return (5);
      }
    }
  #else
    while(wait && (TWI_MTX == twi_state)){
    2a60:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <twi_state>
    2a64:	82 30       	cpi	r24, 0x02	; 2
    2a66:	e1 f3       	breq	.-8      	; 0x2a60 <TwoWire::endTransmission()+0x70>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:346
      continue;
    }
  #endif

  if (twi_error == 0xFF)
    2a68:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <twi_error>
    2a6c:	8f 3f       	cpi	r24, 0xFF	; 255
    2a6e:	91 f0       	breq	.+36     	; 0x2a94 <TwoWire::endTransmission()+0xa4>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:348
    return 0; // success
  else if (twi_error == TW_MT_SLA_NACK)
    2a70:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <twi_error>
    2a74:	80 32       	cpi	r24, 0x20	; 32
    2a76:	81 f0       	breq	.+32     	; 0x2a98 <TwoWire::endTransmission()+0xa8>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:350
    return 2; // error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    2a78:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <twi_error>
    2a7c:	80 33       	cpi	r24, 0x30	; 48
    2a7e:	71 f0       	breq	.+28     	; 0x2a9c <TwoWire::endTransmission()+0xac>
endTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:353
    return 3; // error: data send, nack received
  else
    return 4; // other twi error
    2a80:	84 e0       	ldi	r24, 0x04	; 4
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:227
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    2a82:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <TwoWire::txBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:228
  txBufferLength = 0;
    2a86:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <TwoWire::txBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:230
  // indicate that we are done transmitting
  transmitting = 0;
    2a8a:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <TwoWire::transmitting>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:240
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
}
    2a8e:	08 95       	ret
twi_writeTo():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:329
    #endif
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
    2a90:	85 ee       	ldi	r24, 0xE5	; 229
    2a92:	e4 cf       	rjmp	.-56     	; 0x2a5c <TwoWire::endTransmission()+0x6c>
endTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:347
      continue;
    }
  #endif

  if (twi_error == 0xFF)
    return 0; // success
    2a94:	80 e0       	ldi	r24, 0x00	; 0
    2a96:	f5 cf       	rjmp	.-22     	; 0x2a82 <TwoWire::endTransmission()+0x92>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:349
  else if (twi_error == TW_MT_SLA_NACK)
    return 2; // error: address send, nack received
    2a98:	82 e0       	ldi	r24, 0x02	; 2
    2a9a:	f3 cf       	rjmp	.-26     	; 0x2a82 <TwoWire::endTransmission()+0x92>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:351
  else if (twi_error == TW_MT_DATA_NACK)
    return 3; // error: data send, nack received
    2a9c:	83 e0       	ldi	r24, 0x03	; 3
    2a9e:	f1 cf       	rjmp	.-30     	; 0x2a82 <TwoWire::endTransmission()+0x92>

00002aa0 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char) [clone .constprop.50]>:
ssd1306_commandList():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:419
                   number of commands in the list

    @return None (void).
    @note
*/
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
    2aa0:	ef 92       	push	r14
    2aa2:	ff 92       	push	r15
    2aa4:	0f 93       	push	r16
    2aa6:	1f 93       	push	r17
    2aa8:	cf 93       	push	r28
    2aaa:	7c 01       	movw	r14, r24
    2aac:	c6 2f       	mov	r28, r22
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:420
  if (wire) { // I2C
    2aae:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <display+0x1d>
    2ab2:	90 91 ec 03 	lds	r25, 0x03EC	; 0x8003ec <display+0x1e>
    2ab6:	89 2b       	or	r24, r25
    2ab8:	09 f4       	brne	.+2      	; 0x2abc <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char) [clone .constprop.50]+0x1c>
    2aba:	4e c0       	rjmp	.+156    	; 0x2b58 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char) [clone .constprop.50]+0xb8>
beginTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:206
  txBufferLength = 0;
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
    2abc:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <display+0x21>
    2ac0:	0e 94 4b 09 	call	0x1296	; 0x1296 <TwoWire::beginTransmission(unsigned char) [clone .constprop.51]>
ssd1306_commandList():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:422
    wire->beginTransmission(i2caddr);
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
    2ac4:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <display+0x1d>
    2ac8:	90 91 ec 03 	lds	r25, 0x03EC	; 0x8003ec <display+0x1e>
    2acc:	dc 01       	movw	r26, r24
    2ace:	ed 91       	ld	r30, X+
    2ad0:	fc 91       	ld	r31, X
    2ad2:	01 90       	ld	r0, Z+
    2ad4:	f0 81       	ld	r31, Z
    2ad6:	e0 2d       	mov	r30, r0
    2ad8:	60 e0       	ldi	r22, 0x00	; 0
    2ada:	09 95       	icall
    2adc:	87 01       	movw	r16, r14
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:423
    uint16_t bytesOut = 1;
    2ade:	ee 24       	eor	r14, r14
    2ae0:	e3 94       	inc	r14
    2ae2:	f1 2c       	mov	r15, r1
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:424
    while (n--) {
    2ae4:	c1 50       	subi	r28, 0x01	; 1
    2ae6:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <display+0x1d>
    2aea:	90 91 ec 03 	lds	r25, 0x03EC	; 0x8003ec <display+0x1e>
    2aee:	cf 3f       	cpi	r28, 0xFF	; 255
    2af0:	61 f1       	breq	.+88     	; 0x2b4a <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char) [clone .constprop.50]+0xaa>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:425
      if (bytesOut >= WIRE_MAX) {
    2af2:	b0 e2       	ldi	r27, 0x20	; 32
    2af4:	eb 16       	cp	r14, r27
    2af6:	f1 04       	cpc	r15, r1
    2af8:	a8 f0       	brcs	.+42     	; 0x2b24 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char) [clone .constprop.50]+0x84>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:426
        wire->endTransmission();
    2afa:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <TwoWire::endTransmission()>
beginTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:206
    2afe:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <display+0x21>
    2b02:	0e 94 4b 09 	call	0x1296	; 0x1296 <TwoWire::beginTransmission(unsigned char) [clone .constprop.51]>
ssd1306_commandList():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:428
        wire->beginTransmission(i2caddr);
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
    2b06:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <display+0x1d>
    2b0a:	90 91 ec 03 	lds	r25, 0x03EC	; 0x8003ec <display+0x1e>
    2b0e:	dc 01       	movw	r26, r24
    2b10:	ed 91       	ld	r30, X+
    2b12:	fc 91       	ld	r31, X
    2b14:	01 90       	ld	r0, Z+
    2b16:	f0 81       	ld	r31, Z
    2b18:	e0 2d       	mov	r30, r0
    2b1a:	60 e0       	ldi	r22, 0x00	; 0
    2b1c:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:429
        bytesOut = 1;
    2b1e:	ee 24       	eor	r14, r14
    2b20:	e3 94       	inc	r14
    2b22:	f1 2c       	mov	r15, r1
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:431
      }
      WIRE_WRITE(pgm_read_byte(c++));
    2b24:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <display+0x1d>
    2b28:	90 91 ec 03 	lds	r25, 0x03EC	; 0x8003ec <display+0x1e>
    2b2c:	f8 01       	movw	r30, r16
    2b2e:	64 91       	lpm	r22, Z
    2b30:	dc 01       	movw	r26, r24
    2b32:	ed 91       	ld	r30, X+
    2b34:	fc 91       	ld	r31, X
    2b36:	01 90       	ld	r0, Z+
    2b38:	f0 81       	ld	r31, Z
    2b3a:	e0 2d       	mov	r30, r0
    2b3c:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:432
      bytesOut++;
    2b3e:	bf ef       	ldi	r27, 0xFF	; 255
    2b40:	eb 1a       	sub	r14, r27
    2b42:	fb 0a       	sbc	r15, r27
    2b44:	0f 5f       	subi	r16, 0xFF	; 255
    2b46:	1f 4f       	sbci	r17, 0xFF	; 255
    2b48:	cd cf       	rjmp	.-102    	; 0x2ae4 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char) [clone .constprop.50]+0x44>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:440
  } else { // SPI -- transaction started in calling function
    SSD1306_MODE_COMMAND
    while (n--)
      SPIwrite(pgm_read_byte(c++));
  }
}
    2b4a:	cf 91       	pop	r28
    2b4c:	1f 91       	pop	r17
    2b4e:	0f 91       	pop	r16
    2b50:	ff 90       	pop	r15
    2b52:	ef 90       	pop	r14
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:434
        bytesOut = 1;
      }
      WIRE_WRITE(pgm_read_byte(c++));
      bytesOut++;
    }
    wire->endTransmission();
    2b54:	0c 94 f8 14 	jmp	0x29f0	; 0x29f0 <TwoWire::endTransmission()>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:436
  } else { // SPI -- transaction started in calling function
    SSD1306_MODE_COMMAND
    2b58:	e0 91 fb 03 	lds	r30, 0x03FB	; 0x8003fb <display+0x2d>
    2b5c:	f0 91 fc 03 	lds	r31, 0x03FC	; 0x8003fc <display+0x2e>
    2b60:	90 81       	ld	r25, Z
    2b62:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <display+0x33>
    2b66:	80 95       	com	r24
    2b68:	89 23       	and	r24, r25
    2b6a:	80 83       	st	Z, r24
    2b6c:	87 01       	movw	r16, r14
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:437
    while (n--)
    2b6e:	c1 50       	subi	r28, 0x01	; 1
    2b70:	08 f4       	brcc	.+2      	; 0x2b74 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char) [clone .constprop.50]+0xd4>
    2b72:	38 c0       	rjmp	.+112    	; 0x2be4 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char) [clone .constprop.50]+0x144>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:438
      SPIwrite(pgm_read_byte(c++));
    2b74:	f8 01       	movw	r30, r16
    2b76:	84 91       	lpm	r24, Z
_ZN16Adafruit_SSD13068SPIwriteEh():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:363
    @return void
    @note   See HAVE_PORTREG which defines if the method uses a port or bit-bang
   method
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    2b78:	20 91 e9 03 	lds	r18, 0x03E9	; 0x8003e9 <display+0x1b>
    2b7c:	30 91 ea 03 	lds	r19, 0x03EA	; 0x8003ea <display+0x1c>
    2b80:	23 2b       	or	r18, r19
    2b82:	29 f0       	breq	.+10     	; 0x2b8e <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char) [clone .constprop.50]+0xee>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:364
    (void)spi->transfer(d);
    2b84:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <SPIClass::transfer(unsigned char)>
    2b88:	0f 5f       	subi	r16, 0xFF	; 255
    2b8a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b8c:	f0 cf       	rjmp	.-32     	; 0x2b6e <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char) [clone .constprop.50]+0xce>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:363
    @return void
    @note   See HAVE_PORTREG which defines if the method uses a port or bit-bang
   method
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    2b8e:	28 e0       	ldi	r18, 0x08	; 8
    2b90:	30 e0       	ldi	r19, 0x00	; 0
ssd1306_commandList():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:366
    (void)spi->transfer(d);
  } else {
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    2b92:	40 e8       	ldi	r20, 0x80	; 128
    2b94:	e0 91 f7 03 	lds	r30, 0x03F7	; 0x8003f7 <display+0x29>
    2b98:	f0 91 f8 03 	lds	r31, 0x03F8	; 0x8003f8 <display+0x2a>
    2b9c:	90 91 ff 03 	lds	r25, 0x03FF	; 0x8003ff <display+0x31>
_ZN16Adafruit_SSD13068SPIwriteEh():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:368
#ifdef HAVE_PORTREG
      if (d & bit)
    2ba0:	58 2f       	mov	r21, r24
    2ba2:	54 23       	and	r21, r20
    2ba4:	d9 f0       	breq	.+54     	; 0x2bdc <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char) [clone .constprop.50]+0x13c>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:369
        *mosiPort |= mosiPinMask;
    2ba6:	50 81       	ld	r21, Z
    2ba8:	95 2b       	or	r25, r21
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:371
      else
        *mosiPort &= ~mosiPinMask;
    2baa:	90 83       	st	Z, r25
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:372
      *clkPort |= clkPinMask;  // Clock high
    2bac:	e0 91 f9 03 	lds	r30, 0x03F9	; 0x8003f9 <display+0x2b>
    2bb0:	f0 91 fa 03 	lds	r31, 0x03FA	; 0x8003fa <display+0x2c>
    2bb4:	90 81       	ld	r25, Z
    2bb6:	50 91 00 04 	lds	r21, 0x0400	; 0x800400 <display+0x32>
    2bba:	95 2b       	or	r25, r21
    2bbc:	90 83       	st	Z, r25
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:373
      *clkPort &= ~clkPinMask; // Clock low
    2bbe:	e0 91 f9 03 	lds	r30, 0x03F9	; 0x8003f9 <display+0x2b>
    2bc2:	f0 91 fa 03 	lds	r31, 0x03FA	; 0x8003fa <display+0x2c>
    2bc6:	50 81       	ld	r21, Z
    2bc8:	90 91 00 04 	lds	r25, 0x0400	; 0x800400 <display+0x32>
    2bcc:	90 95       	com	r25
    2bce:	95 23       	and	r25, r21
    2bd0:	90 83       	st	Z, r25
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:366
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    (void)spi->transfer(d);
  } else {
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    2bd2:	46 95       	lsr	r20
    2bd4:	21 50       	subi	r18, 0x01	; 1
    2bd6:	31 09       	sbc	r19, r1
    2bd8:	e9 f6       	brne	.-70     	; 0x2b94 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char) [clone .constprop.50]+0xf4>
    2bda:	d6 cf       	rjmp	.-84     	; 0x2b88 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char) [clone .constprop.50]+0xe8>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:371
#ifdef HAVE_PORTREG
      if (d & bit)
        *mosiPort |= mosiPinMask;
      else
        *mosiPort &= ~mosiPinMask;
    2bdc:	50 81       	ld	r21, Z
    2bde:	90 95       	com	r25
    2be0:	95 23       	and	r25, r21
    2be2:	e3 cf       	rjmp	.-58     	; 0x2baa <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char) [clone .constprop.50]+0x10a>
ssd1306_commandList():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:440
  } else { // SPI -- transaction started in calling function
    SSD1306_MODE_COMMAND
    while (n--)
      SPIwrite(pgm_read_byte(c++));
  }
}
    2be4:	cf 91       	pop	r28
    2be6:	1f 91       	pop	r17
    2be8:	0f 91       	pop	r16
    2bea:	ff 90       	pop	r15
    2bec:	ef 90       	pop	r14
    2bee:	08 95       	ret

00002bf0 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>:
ssd1306_command1():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:395
                   the command character to send to the display.
                   Refer to ssd1306 data sheet for commands
    @return None (void).
    @note
*/
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
    2bf0:	1f 93       	push	r17
    2bf2:	cf 93       	push	r28
    2bf4:	df 93       	push	r29
    2bf6:	ec 01       	movw	r28, r24
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:396
  if (wire) { // I2C
    2bf8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2bfa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2bfc:	89 2b       	or	r24, r25
    2bfe:	f9 f0       	breq	.+62     	; 0x2c3e <Adafruit_SSD1306::ssd1306_command1(unsigned char)+0x4e>
    2c00:	16 2f       	mov	r17, r22
beginTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:206
    2c02:	89 a1       	ldd	r24, Y+33	; 0x21
    2c04:	0e 94 4b 09 	call	0x1296	; 0x1296 <TwoWire::beginTransmission(unsigned char) [clone .constprop.51]>
ssd1306_command1():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:398
    wire->beginTransmission(i2caddr);
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
    2c08:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c0a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c0c:	dc 01       	movw	r26, r24
    2c0e:	ed 91       	ld	r30, X+
    2c10:	fc 91       	ld	r31, X
    2c12:	01 90       	ld	r0, Z+
    2c14:	f0 81       	ld	r31, Z
    2c16:	e0 2d       	mov	r30, r0
    2c18:	60 e0       	ldi	r22, 0x00	; 0
    2c1a:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:399
    WIRE_WRITE(c);
    2c1c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c1e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c20:	dc 01       	movw	r26, r24
    2c22:	ed 91       	ld	r30, X+
    2c24:	fc 91       	ld	r31, X
    2c26:	01 90       	ld	r0, Z+
    2c28:	f0 81       	ld	r31, Z
    2c2a:	e0 2d       	mov	r30, r0
    2c2c:	61 2f       	mov	r22, r17
    2c2e:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:400
    wire->endTransmission();
    2c30:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c32:	9e 8d       	ldd	r25, Y+30	; 0x1e
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:405
  } else { // SPI (hw or soft) -- transaction started in calling function
    SSD1306_MODE_COMMAND
    SPIwrite(c);
  }
}
    2c34:	df 91       	pop	r29
    2c36:	cf 91       	pop	r28
    2c38:	1f 91       	pop	r17
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:400
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
  if (wire) { // I2C
    wire->beginTransmission(i2caddr);
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
    WIRE_WRITE(c);
    wire->endTransmission();
    2c3a:	0c 94 f8 14 	jmp	0x29f0	; 0x29f0 <TwoWire::endTransmission()>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:402
  } else { // SPI (hw or soft) -- transaction started in calling function
    SSD1306_MODE_COMMAND
    2c3e:	ad a5       	ldd	r26, Y+45	; 0x2d
    2c40:	be a5       	ldd	r27, Y+46	; 0x2e
    2c42:	9c 91       	ld	r25, X
    2c44:	8b a9       	ldd	r24, Y+51	; 0x33
    2c46:	80 95       	com	r24
    2c48:	89 23       	and	r24, r25
    2c4a:	8c 93       	st	X, r24
_ZN16Adafruit_SSD13068SPIwriteEh():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:363
    @return void
    @note   See HAVE_PORTREG which defines if the method uses a port or bit-bang
   method
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    2c4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c50:	89 2b       	or	r24, r25
    2c52:	31 f0       	breq	.+12     	; 0x2c60 <Adafruit_SSD1306::ssd1306_command1(unsigned char)+0x70>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:364
    (void)spi->transfer(d);
    2c54:	86 2f       	mov	r24, r22
ssd1306_command1():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:405
    wire->endTransmission();
  } else { // SPI (hw or soft) -- transaction started in calling function
    SSD1306_MODE_COMMAND
    SPIwrite(c);
  }
}
    2c56:	df 91       	pop	r29
    2c58:	cf 91       	pop	r28
    2c5a:	1f 91       	pop	r17
_ZN16Adafruit_SSD13068SPIwriteEh():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:364
    @note   See HAVE_PORTREG which defines if the method uses a port or bit-bang
   method
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    (void)spi->transfer(d);
    2c5c:	0c 94 3d 0e 	jmp	0x1c7a	; 0x1c7a <SPIClass::transfer(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:363
    @return void
    @note   See HAVE_PORTREG which defines if the method uses a port or bit-bang
   method
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    2c60:	28 e0       	ldi	r18, 0x08	; 8
    2c62:	30 e0       	ldi	r19, 0x00	; 0
ssd1306_command1():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:366
    (void)spi->transfer(d);
  } else {
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    2c64:	80 e8       	ldi	r24, 0x80	; 128
    2c66:	a9 a5       	ldd	r26, Y+41	; 0x29
    2c68:	ba a5       	ldd	r27, Y+42	; 0x2a
    2c6a:	99 a9       	ldd	r25, Y+49	; 0x31
_ZN16Adafruit_SSD13068SPIwriteEh():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:368
#ifdef HAVE_PORTREG
      if (d & bit)
    2c6c:	46 2f       	mov	r20, r22
    2c6e:	48 23       	and	r20, r24
    2c70:	c1 f0       	breq	.+48     	; 0x2ca2 <Adafruit_SSD1306::ssd1306_command1(unsigned char)+0xb2>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:369
        *mosiPort |= mosiPinMask;
    2c72:	4c 91       	ld	r20, X
    2c74:	94 2b       	or	r25, r20
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:371
      else
        *mosiPort &= ~mosiPinMask;
    2c76:	9c 93       	st	X, r25
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:372
      *clkPort |= clkPinMask;  // Clock high
    2c78:	ab a5       	ldd	r26, Y+43	; 0x2b
    2c7a:	bc a5       	ldd	r27, Y+44	; 0x2c
    2c7c:	9c 91       	ld	r25, X
    2c7e:	4a a9       	ldd	r20, Y+50	; 0x32
    2c80:	94 2b       	or	r25, r20
    2c82:	9c 93       	st	X, r25
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:373
      *clkPort &= ~clkPinMask; // Clock low
    2c84:	ab a5       	ldd	r26, Y+43	; 0x2b
    2c86:	bc a5       	ldd	r27, Y+44	; 0x2c
    2c88:	4c 91       	ld	r20, X
    2c8a:	9a a9       	ldd	r25, Y+50	; 0x32
    2c8c:	90 95       	com	r25
    2c8e:	94 23       	and	r25, r20
    2c90:	9c 93       	st	X, r25
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:366
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    (void)spi->transfer(d);
  } else {
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    2c92:	86 95       	lsr	r24
    2c94:	21 50       	subi	r18, 0x01	; 1
    2c96:	31 09       	sbc	r19, r1
    2c98:	31 f7       	brne	.-52     	; 0x2c66 <Adafruit_SSD1306::ssd1306_command1(unsigned char)+0x76>
ssd1306_command1():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:405
    wire->endTransmission();
  } else { // SPI (hw or soft) -- transaction started in calling function
    SSD1306_MODE_COMMAND
    SPIwrite(c);
  }
}
    2c9a:	df 91       	pop	r29
    2c9c:	cf 91       	pop	r28
    2c9e:	1f 91       	pop	r17
    2ca0:	08 95       	ret
_ZN16Adafruit_SSD13068SPIwriteEh():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:371
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
#ifdef HAVE_PORTREG
      if (d & bit)
        *mosiPort |= mosiPinMask;
      else
        *mosiPort &= ~mosiPinMask;
    2ca2:	4c 91       	ld	r20, X
    2ca4:	90 95       	com	r25
    2ca6:	94 23       	and	r25, r20
    2ca8:	e6 cf       	rjmp	.-52     	; 0x2c76 <Adafruit_SSD1306::ssd1306_command1(unsigned char)+0x86>

00002caa <Adafruit_SSD1306::invertDisplay(bool)>:
invertDisplay():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1167
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing SSD1306_BLACK (value 0) pixels will actually draw
   white, SSD1306_WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(bool i) {
    2caa:	1f 93       	push	r17
    2cac:	cf 93       	push	r28
    2cae:	df 93       	push	r29
    2cb0:	ec 01       	movw	r28, r24
    2cb2:	16 2f       	mov	r17, r22
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1168
  TRANSACTION_START
    2cb4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cb6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2cb8:	89 2b       	or	r24, r25
    2cba:	b1 f1       	breq	.+108    	; 0x2d28 <Adafruit_SSD1306::invertDisplay(bool)+0x7e>
twi_setFrequency():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:142
 * Input    Clock frequency
 * Output   none
 */
void twi_setFrequency(uint32_t frequency)
{
  TWBR = ((F_CPU / frequency) - 16) / 2;
    2cbc:	2d a9       	ldd	r18, Y+53	; 0x35
    2cbe:	3e a9       	ldd	r19, Y+54	; 0x36
    2cc0:	4f a9       	ldd	r20, Y+55	; 0x37
    2cc2:	58 ad       	ldd	r21, Y+56	; 0x38
    2cc4:	60 e0       	ldi	r22, 0x00	; 0
    2cc6:	74 e2       	ldi	r23, 0x24	; 36
    2cc8:	84 ef       	ldi	r24, 0xF4	; 244
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	0e 94 eb 23 	call	0x47d6	; 0x47d6 <__udivmodsi4>
    2cd0:	20 51       	subi	r18, 0x10	; 16
    2cd2:	31 09       	sbc	r19, r1
    2cd4:	41 09       	sbc	r20, r1
    2cd6:	51 09       	sbc	r21, r1
    2cd8:	56 95       	lsr	r21
    2cda:	47 95       	ror	r20
    2cdc:	37 95       	ror	r19
    2cde:	27 95       	ror	r18
    2ce0:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
invertDisplay():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1169
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
    2ce4:	66 ea       	ldi	r22, 0xA6	; 166
    2ce6:	11 11       	cpse	r17, r1
    2ce8:	67 ea       	ldi	r22, 0xA7	; 167
    2cea:	ce 01       	movw	r24, r28
    2cec:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1170
  TRANSACTION_END
    2cf0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cf2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2cf4:	89 2b       	or	r24, r25
    2cf6:	41 f1       	breq	.+80     	; 0x2d48 <Adafruit_SSD1306::invertDisplay(bool)+0x9e>
twi_setFrequency():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:142
    2cf8:	29 ad       	ldd	r18, Y+57	; 0x39
    2cfa:	3a ad       	ldd	r19, Y+58	; 0x3a
    2cfc:	4b ad       	ldd	r20, Y+59	; 0x3b
    2cfe:	5c ad       	ldd	r21, Y+60	; 0x3c
    2d00:	60 e0       	ldi	r22, 0x00	; 0
    2d02:	74 e2       	ldi	r23, 0x24	; 36
    2d04:	84 ef       	ldi	r24, 0xF4	; 244
    2d06:	90 e0       	ldi	r25, 0x00	; 0
    2d08:	0e 94 eb 23 	call	0x47d6	; 0x47d6 <__udivmodsi4>
    2d0c:	20 51       	subi	r18, 0x10	; 16
    2d0e:	31 09       	sbc	r19, r1
    2d10:	41 09       	sbc	r20, r1
    2d12:	51 09       	sbc	r21, r1
    2d14:	56 95       	lsr	r21
    2d16:	47 95       	ror	r20
    2d18:	37 95       	ror	r19
    2d1a:	27 95       	ror	r18
    2d1c:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
invertDisplay():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1171
}
    2d20:	df 91       	pop	r29
    2d22:	cf 91       	pop	r28
    2d24:	1f 91       	pop	r17
    2d26:	08 95       	ret
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1168
            different pixel mode of the display hardware is used. When
            enabled, drawing SSD1306_BLACK (value 0) pixels will actually draw
   white, SSD1306_WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(bool i) {
  TRANSACTION_START
    2d28:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d2c:	89 2b       	or	r24, r25
    2d2e:	21 f0       	breq	.+8      	; 0x2d38 <Adafruit_SSD1306::invertDisplay(bool)+0x8e>
    2d30:	8e ad       	ldd	r24, Y+62	; 0x3e
    2d32:	9f ad       	ldd	r25, Y+63	; 0x3f
    2d34:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <SPIClass::beginTransaction(SPISettings)>
    2d38:	ef a5       	ldd	r30, Y+47	; 0x2f
    2d3a:	f8 a9       	ldd	r31, Y+48	; 0x30
    2d3c:	90 81       	ld	r25, Z
    2d3e:	8c a9       	ldd	r24, Y+52	; 0x34
    2d40:	80 95       	com	r24
    2d42:	89 23       	and	r24, r25
    2d44:	80 83       	st	Z, r24
    2d46:	ce cf       	rjmp	.-100    	; 0x2ce4 <Adafruit_SSD1306::invertDisplay(bool)+0x3a>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1170
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
  TRANSACTION_END
    2d48:	ef a5       	ldd	r30, Y+47	; 0x2f
    2d4a:	f8 a9       	ldd	r31, Y+48	; 0x30
    2d4c:	80 81       	ld	r24, Z
    2d4e:	9c a9       	ldd	r25, Y+52	; 0x34
    2d50:	89 2b       	or	r24, r25
    2d52:	80 83       	st	Z, r24
    2d54:	e5 cf       	rjmp	.-54     	; 0x2d20 <Adafruit_SSD1306::invertDisplay(bool)+0x76>

00002d56 <Print::availableForWrite()>:
availableForWrite():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.h:63
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	80 e0       	ldi	r24, 0x00	; 0
    2d5a:	08 95       	ret

00002d5c <SI4844::waitInterrupt() [clone .isra.2]>:
_ZN6SI484413waitInterruptEv.isra.2():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:166
 * @details It can occur, for example, when you use the analog tuner.  
 */
void SI4844::waitInterrupt(void)
{
    
    while (!data_from_device)
    2d5c:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <_ZL16data_from_device.lto_priv.64>
    2d60:	88 23       	and	r24, r24
    2d62:	e1 f3       	breq	.-8      	; 0x2d5c <SI4844::waitInterrupt() [clone .isra.2]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:169
        ;
        
}
    2d64:	08 95       	ret

00002d66 <SI4844::reset() [clone .constprop.17]>:
reset():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:363
 * @ingroup GB1
 * @brief Resets the SI4844 device
 * @details Prepares the system  to be started.
 * @see pages 7, 8, 9 and 10 of the programming guide.
 */
void SI4844::reset()
    2d66:	cf 93       	push	r28
    2d68:	df 93       	push	r29
twi_setFrequency():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:142
    2d6a:	88 e1       	ldi	r24, 0x18	; 24
    2d6c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
reset():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:368
{
    // waitToSend();

    setClockLow(); // See *Note on page 5
    data_from_device = false;
    2d70:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <_ZL16data_from_device.lto_priv.64>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:369
    digitalWrite(resetPin, LOW);
    2d74:	c2 e9       	ldi	r28, 0x92	; 146
    2d76:	d3 e0       	ldi	r29, 0x03	; 3
    2d78:	60 e0       	ldi	r22, 0x00	; 0
    2d7a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d7c:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <digitalWrite>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:370
    delayMicroseconds(200);
    2d80:	88 ec       	ldi	r24, 0xC8	; 200
    2d82:	90 e0       	ldi	r25, 0x00	; 0
    2d84:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <delayMicroseconds>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:371
    digitalWrite(resetPin, HIGH);
    2d88:	61 e0       	ldi	r22, 0x01	; 1
    2d8a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d8c:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <digitalWrite>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:372
    delayMicroseconds(200);
    2d90:	88 ec       	ldi	r24, 0xC8	; 200
    2d92:	90 e0       	ldi	r25, 0x00	; 0
    2d94:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <delayMicroseconds>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:373
    waitInterrupt();
    2d98:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <SI4844::waitInterrupt() [clone .isra.2]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:374
    delayMicroseconds(2500);
    2d9c:	84 ec       	ldi	r24, 0xC4	; 196
    2d9e:	99 e0       	ldi	r25, 0x09	; 9
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:375
}
    2da0:	df 91       	pop	r29
    2da2:	cf 91       	pop	r28
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:374
    digitalWrite(resetPin, LOW);
    delayMicroseconds(200);
    digitalWrite(resetPin, HIGH);
    delayMicroseconds(200);
    waitInterrupt();
    delayMicroseconds(2500);
    2da4:	0c 94 53 0b 	jmp	0x16a6	; 0x16a6 <delayMicroseconds>

00002da8 <SI4844::getStatus() [clone .constprop.15]>:
beginTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:206
    2da8:	81 e1       	ldi	r24, 0x11	; 17
    2daa:	0e 94 4b 09 	call	0x1296	; 0x1296 <TwoWire::beginTransmission(unsigned char) [clone .constprop.51]>
getStatus():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:982
 * @details this method updates the first byte of all_receiver_status member variable
 * @return  pointer to a structure type si4844_device_status
 */
 si4844_device_status *SI4844::getStatus() {
    Wire.beginTransmission(SI4844_ADDRESS);
    Wire.write(ATDD_GET_STATUS);
    2dae:	80 ee       	ldi	r24, 0xE0	; 224
    2db0:	90 e0       	ldi	r25, 0x00	; 0
    2db2:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <TwoWire::write(int) [clone .constprop.36]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:983
    Wire.endTransmission();
    2db6:	82 ec       	ldi	r24, 0xC2	; 194
    2db8:	93 e0       	ldi	r25, 0x03	; 3
    2dba:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <TwoWire::endTransmission()>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:984
    delayMicroseconds(2000);
    2dbe:	80 ed       	ldi	r24, 0xD0	; 208
    2dc0:	97 e0       	ldi	r25, 0x07	; 7
    2dc2:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <delayMicroseconds>
twi_readFrom():
    2dc6:	61 e0       	ldi	r22, 0x01	; 1
    2dc8:	81 e1       	ldi	r24, 0x11	; 17
    2dca:	0e 94 b5 09 	call	0x136a	; 0x136a <twi_readFrom.part.0.constprop.41>
requestFrom():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:120
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    2dce:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <TwoWire::rxBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:121
  rxBufferLength = read;
    2dd2:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <TwoWire::rxBufferLength>
getStatus():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:986
    Wire.requestFrom(SI4844_ADDRESS, 1);
    all_receiver_status.raw[0] = Wire.read();
    2dd6:	82 ec       	ldi	r24, 0xC2	; 194
    2dd8:	93 e0       	ldi	r25, 0x03	; 3
    2dda:	0e 94 7d 14 	call	0x28fa	; 0x28fa <TwoWire::read()>
    2dde:	e2 e9       	ldi	r30, 0x92	; 146
    2de0:	f3 e0       	ldi	r31, 0x03	; 3
    2de2:	81 83       	std	Z+1, r24	; 0x01
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:987
    device_status.raw = all_receiver_status.raw[0];
    2de4:	80 83       	st	Z, r24
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:989
    return &device_status; 
 }
    2de6:	cf 01       	movw	r24, r30
    2de8:	08 95       	ret

00002dea <SI4844::getAllReceiverInfo() [clone .constprop.34]>:
getAllReceiverInfo():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:999
 * @details Use this method only if you want to deal with that information by yourself. 
 * @details all data of the receiver is storted in "all_receiver_status" member variable 
 * @details This library has other methods to get that information easier. 
 * @return pointer to a structure type si4844_status_response
 */
si4844_status_response *SI4844::getAllReceiverInfo()
    2dea:	cf 93       	push	r28
    2dec:	df 93       	push	r29
twi_setFrequency():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:142
    2dee:	20 91 a7 03 	lds	r18, 0x03A7	; 0x8003a7 <rx+0x15>
    2df2:	30 91 a8 03 	lds	r19, 0x03A8	; 0x8003a8 <rx+0x16>
    2df6:	40 91 a9 03 	lds	r20, 0x03A9	; 0x8003a9 <rx+0x17>
    2dfa:	50 91 aa 03 	lds	r21, 0x03AA	; 0x8003aa <rx+0x18>
    2dfe:	60 e0       	ldi	r22, 0x00	; 0
    2e00:	74 e2       	ldi	r23, 0x24	; 36
    2e02:	84 ef       	ldi	r24, 0xF4	; 244
    2e04:	90 e0       	ldi	r25, 0x00	; 0
    2e06:	0e 94 eb 23 	call	0x47d6	; 0x47d6 <__udivmodsi4>
    2e0a:	20 51       	subi	r18, 0x10	; 16
    2e0c:	31 09       	sbc	r19, r1
    2e0e:	41 09       	sbc	r20, r1
    2e10:	51 09       	sbc	r21, r1
    2e12:	56 95       	lsr	r21
    2e14:	47 95       	ror	r20
    2e16:	37 95       	ror	r19
    2e18:	27 95       	ror	r18
    2e1a:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
beginTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:206
  txBufferLength = 0;
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
    2e1e:	81 e1       	ldi	r24, 0x11	; 17
    2e20:	0e 94 4b 09 	call	0x1296	; 0x1296 <TwoWire::beginTransmission(unsigned char) [clone .constprop.51]>
getAllReceiverInfo():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1005
{
    setClockHigh();
    do
    {
        Wire.beginTransmission(SI4844_ADDRESS);
        Wire.write(ATDD_GET_STATUS);
    2e24:	80 ee       	ldi	r24, 0xE0	; 224
    2e26:	90 e0       	ldi	r25, 0x00	; 0
    2e28:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <TwoWire::write(int) [clone .constprop.36]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1006
        Wire.endTransmission();
    2e2c:	82 ec       	ldi	r24, 0xC2	; 194
    2e2e:	93 e0       	ldi	r25, 0x03	; 3
    2e30:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <TwoWire::endTransmission()>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1007
        delayMicroseconds(2500);
    2e34:	84 ec       	ldi	r24, 0xC4	; 196
    2e36:	99 e0       	ldi	r25, 0x09	; 9
    2e38:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <delayMicroseconds>
twi_readFrom():
    2e3c:	64 e0       	ldi	r22, 0x04	; 4
    2e3e:	81 e1       	ldi	r24, 0x11	; 17
    2e40:	0e 94 b5 09 	call	0x136a	; 0x136a <twi_readFrom.part.0.constprop.41>
requestFrom():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:120
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    2e44:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <TwoWire::rxBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:121
  rxBufferLength = read;
    2e48:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <TwoWire::rxBufferLength>
    2e4c:	c3 e9       	ldi	r28, 0x93	; 147
    2e4e:	d3 e0       	ldi	r29, 0x03	; 3
getAllReceiverInfo():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1011
        // request 4 bytes response from atdd (si4844)
        Wire.requestFrom(SI4844_ADDRESS, 0x04);
        for (int i = 0; i < 4; i++)
            all_receiver_status.raw[i] = Wire.read();
    2e50:	82 ec       	ldi	r24, 0xC2	; 194
    2e52:	93 e0       	ldi	r25, 0x03	; 3
    2e54:	0e 94 7d 14 	call	0x28fa	; 0x28fa <TwoWire::read()>
    2e58:	89 93       	st	Y+, r24
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1010
        Wire.write(ATDD_GET_STATUS);
        Wire.endTransmission();
        delayMicroseconds(2500);
        // request 4 bytes response from atdd (si4844)
        Wire.requestFrom(SI4844_ADDRESS, 0x04);
        for (int i = 0; i < 4; i++)
    2e5a:	83 e0       	ldi	r24, 0x03	; 3
    2e5c:	c7 39       	cpi	r28, 0x97	; 151
    2e5e:	d8 07       	cpc	r29, r24
    2e60:	b9 f7       	brne	.-18     	; 0x2e50 <SI4844::getAllReceiverInfo() [clone .constprop.34]+0x66>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1014
            all_receiver_status.raw[i] = Wire.read();
        // check response error. Exit when no error found. See page 7.
        // if INFORDY is 0, the system is not ready yet. You may need to check if CHFREQ is 0 too.
    } while ( all_receiver_status.refined.INFORDY == 0 );
    2e62:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <rx+0x1>
    2e66:	84 ff       	sbrs	r24, 4
    2e68:	da cf       	rjmp	.-76     	; 0x2e1e <SI4844::getAllReceiverInfo() [clone .constprop.34]+0x34>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1016

    device_status.raw = all_receiver_status.raw[0];
    2e6a:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <rx>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1018
    return &all_receiver_status;
}
    2e6e:	83 e9       	ldi	r24, 0x93	; 147
    2e70:	93 e0       	ldi	r25, 0x03	; 3
    2e72:	df 91       	pop	r29
    2e74:	cf 91       	pop	r28
    2e76:	08 95       	ret

00002e78 <SI4844::getFrequencyInteger() [clone .constprop.33]>:
getFrequencyInteger():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1144
 * @details For example: FM, 103900 KHz (103.9 MHz); SW, 7335 KHz (7.34 MHz, 41m)   
 * @details It is useful to save memory
 * 
 * @return uint32_t current frequency in KHz.  
 */
uint32_t SI4844::getFrequencyInteger(void)
    2e78:	cf 92       	push	r12
    2e7a:	df 92       	push	r13
    2e7c:	ef 92       	push	r14
    2e7e:	ff 92       	push	r15
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1146
{
    this->getAllReceiverInfo();
    2e80:	0e 94 f5 16 	call	0x2dea	; 0x2dea <SI4844::getAllReceiverInfo() [clone .constprop.34]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1151
    int addFactor = 0;
    int multFactor = 1;
    // Check CHFREQ bit[15] MSB = 1
    // See Page 15 of Si48XX ATDD PROGRAMMING GUIDE
    if (all_receiver_status.refined.BANDMODE == 0)
    2e84:	90 91 94 03 	lds	r25, 0x0394	; 0x800394 <rx+0x2>
    2e88:	90 7c       	andi	r25, 0xC0	; 192
    2e8a:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <rx+0x3>
    2e8e:	91 11       	cpse	r25, r1
    2e90:	54 c0       	rjmp	.+168    	; 0x2f3a <SI4844::getFrequencyInteger() [clone .constprop.33]+0xc2>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1154
    {
        multFactor = 100;
        if (all_receiver_status.refined.d1 & 0b00001000)
    2e92:	98 2f       	mov	r25, r24
    2e94:	92 95       	swap	r25
    2e96:	9f 70       	andi	r25, 0x0F	; 15
    2e98:	87 ff       	sbrs	r24, 7
    2e9a:	64 c0       	rjmp	.+200    	; 0x2f64 <SI4844::getFrequencyInteger() [clone .constprop.33]+0xec>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1156
        {
            all_receiver_status.refined.d1 &= 0b11110111;
    2e9c:	97 70       	andi	r25, 0x07	; 7
    2e9e:	92 95       	swap	r25
    2ea0:	90 7f       	andi	r25, 0xF0	; 240
    2ea2:	8f 70       	andi	r24, 0x0F	; 15
    2ea4:	89 2b       	or	r24, r25
    2ea6:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <rx+0x3>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1153
    int multFactor = 1;
    // Check CHFREQ bit[15] MSB = 1
    // See Page 15 of Si48XX ATDD PROGRAMMING GUIDE
    if (all_receiver_status.refined.BANDMODE == 0)
    {
        multFactor = 100;
    2eaa:	a4 e6       	ldi	r26, 0x64	; 100
    2eac:	b0 e0       	ldi	r27, 0x00	; 0
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1157
        if (all_receiver_status.refined.d1 & 0b00001000)
        {
            all_receiver_status.refined.d1 &= 0b11110111;
            addFactor = 50;
    2eae:	e2 e3       	ldi	r30, 0x32	; 50
    2eb0:	f0 e0       	ldi	r31, 0x00	; 0
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1172
        }
    }

    uint32_t f;

    f = (all_receiver_status.refined.d4);
    2eb2:	20 91 96 03 	lds	r18, 0x0396	; 0x800396 <rx+0x4>
    2eb6:	62 2f       	mov	r22, r18
    2eb8:	6f 70       	andi	r22, 0x0F	; 15
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1173
    f += (all_receiver_status.refined.d3) * 10;
    2eba:	22 95       	swap	r18
    2ebc:	2f 70       	andi	r18, 0x0F	; 15
    2ebe:	7a e0       	ldi	r23, 0x0A	; 10
    2ec0:	27 9f       	mul	r18, r23
    2ec2:	90 01       	movw	r18, r0
    2ec4:	11 24       	eor	r1, r1
    2ec6:	03 2e       	mov	r0, r19
    2ec8:	00 0c       	add	r0, r0
    2eca:	44 0b       	sbc	r20, r20
    2ecc:	55 0b       	sbc	r21, r21
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1174
    f += (all_receiver_status.refined.d2) * 100;
    2ece:	90 91 95 03 	lds	r25, 0x0395	; 0x800395 <rx+0x3>
    2ed2:	89 2f       	mov	r24, r25
    2ed4:	8f 70       	andi	r24, 0x0F	; 15
    2ed6:	74 e6       	ldi	r23, 0x64	; 100
    2ed8:	87 9f       	mul	r24, r23
    2eda:	60 01       	movw	r12, r0
    2edc:	11 24       	eor	r1, r1
    2ede:	0d 2c       	mov	r0, r13
    2ee0:	00 0c       	add	r0, r0
    2ee2:	ee 08       	sbc	r14, r14
    2ee4:	ff 08       	sbc	r15, r15
    2ee6:	2c 0d       	add	r18, r12
    2ee8:	3d 1d       	adc	r19, r13
    2eea:	4e 1d       	adc	r20, r14
    2eec:	5f 1d       	adc	r21, r15
    2eee:	26 0f       	add	r18, r22
    2ef0:	31 1d       	adc	r19, r1
    2ef2:	41 1d       	adc	r20, r1
    2ef4:	51 1d       	adc	r21, r1
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1175
    f += (all_receiver_status.refined.d1) * 1000;
    2ef6:	92 95       	swap	r25
    2ef8:	9f 70       	andi	r25, 0x0F	; 15
    2efa:	68 ee       	ldi	r22, 0xE8	; 232
    2efc:	73 e0       	ldi	r23, 0x03	; 3
    2efe:	96 9f       	mul	r25, r22
    2f00:	60 01       	movw	r12, r0
    2f02:	97 9f       	mul	r25, r23
    2f04:	d0 0c       	add	r13, r0
    2f06:	11 24       	eor	r1, r1
    2f08:	0d 2c       	mov	r0, r13
    2f0a:	00 0c       	add	r0, r0
    2f0c:	ee 08       	sbc	r14, r14
    2f0e:	ff 08       	sbc	r15, r15
    2f10:	2c 0d       	add	r18, r12
    2f12:	3d 1d       	adc	r19, r13
    2f14:	4e 1d       	adc	r20, r14
    2f16:	5f 1d       	adc	r21, r15
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1177

    data_from_device = false;
    2f18:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <_ZL16data_from_device.lto_priv.64>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1179

    return (f * multFactor + addFactor);
    2f1c:	0e 94 0d 24 	call	0x481a	; 0x481a <__mulshisi3>
    2f20:	6f 01       	movw	r12, r30
    2f22:	ff 0f       	add	r31, r31
    2f24:	ee 08       	sbc	r14, r14
    2f26:	ff 08       	sbc	r15, r15
    2f28:	6c 0d       	add	r22, r12
    2f2a:	7d 1d       	adc	r23, r13
    2f2c:	8e 1d       	adc	r24, r14
    2f2e:	9f 1d       	adc	r25, r15
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1180
}
    2f30:	ff 90       	pop	r15
    2f32:	ef 90       	pop	r14
    2f34:	df 90       	pop	r13
    2f36:	cf 90       	pop	r12
    2f38:	08 95       	ret
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1148
 */
uint32_t SI4844::getFrequencyInteger(void)
{
    this->getAllReceiverInfo();
    int addFactor = 0;
    int multFactor = 1;
    2f3a:	a1 e0       	ldi	r26, 0x01	; 1
    2f3c:	b0 e0       	ldi	r27, 0x00	; 0
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1160
        {
            all_receiver_status.refined.d1 &= 0b11110111;
            addFactor = 50;
        }
    }
    else if (all_receiver_status.refined.BANDMODE == 2)
    2f3e:	90 38       	cpi	r25, 0x80	; 128
    2f40:	99 f4       	brne	.+38     	; 0x2f68 <SI4844::getFrequencyInteger() [clone .constprop.33]+0xf0>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1163
    {
        multFactor = 10;
        if (all_receiver_status.refined.d1 & 0b00001000)
    2f42:	98 2f       	mov	r25, r24
    2f44:	92 95       	swap	r25
    2f46:	9f 70       	andi	r25, 0x0F	; 15
    2f48:	87 ff       	sbrs	r24, 7
    2f4a:	11 c0       	rjmp	.+34     	; 0x2f6e <SI4844::getFrequencyInteger() [clone .constprop.33]+0xf6>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1165
        {
            all_receiver_status.refined.d1 &= 0b11110111;   
    2f4c:	97 70       	andi	r25, 0x07	; 7
    2f4e:	92 95       	swap	r25
    2f50:	90 7f       	andi	r25, 0xF0	; 240
    2f52:	8f 70       	andi	r24, 0x0F	; 15
    2f54:	89 2b       	or	r24, r25
    2f56:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <rx+0x3>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1162
            addFactor = 50;
        }
    }
    else if (all_receiver_status.refined.BANDMODE == 2)
    {
        multFactor = 10;
    2f5a:	aa e0       	ldi	r26, 0x0A	; 10
    2f5c:	b0 e0       	ldi	r27, 0x00	; 0
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1166
        if (all_receiver_status.refined.d1 & 0b00001000)
        {
            all_receiver_status.refined.d1 &= 0b11110111;   
            addFactor = 5;
    2f5e:	e5 e0       	ldi	r30, 0x05	; 5
    2f60:	f0 e0       	ldi	r31, 0x00	; 0
    2f62:	a7 cf       	rjmp	.-178    	; 0x2eb2 <SI4844::getFrequencyInteger() [clone .constprop.33]+0x3a>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1153
    int multFactor = 1;
    // Check CHFREQ bit[15] MSB = 1
    // See Page 15 of Si48XX ATDD PROGRAMMING GUIDE
    if (all_receiver_status.refined.BANDMODE == 0)
    {
        multFactor = 100;
    2f64:	a4 e6       	ldi	r26, 0x64	; 100
    2f66:	b0 e0       	ldi	r27, 0x00	; 0
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1147
 * @return uint32_t current frequency in KHz.  
 */
uint32_t SI4844::getFrequencyInteger(void)
{
    this->getAllReceiverInfo();
    int addFactor = 0;
    2f68:	f0 e0       	ldi	r31, 0x00	; 0
    2f6a:	e0 e0       	ldi	r30, 0x00	; 0
    2f6c:	a2 cf       	rjmp	.-188    	; 0x2eb2 <SI4844::getFrequencyInteger() [clone .constprop.33]+0x3a>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1162
            addFactor = 50;
        }
    }
    else if (all_receiver_status.refined.BANDMODE == 2)
    {
        multFactor = 10;
    2f6e:	aa e0       	ldi	r26, 0x0A	; 10
    2f70:	b0 e0       	ldi	r27, 0x00	; 0
    2f72:	fa cf       	rjmp	.-12     	; 0x2f68 <SI4844::getFrequencyInteger() [clone .constprop.33]+0xf0>

00002f74 <SI4844::waitToSend() [clone .constprop.25]>:
_ZN6SI484413isClearToSendEv.isra.4():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:731
 * @return true 
 * @return false 
 */
bool SI4844::isClearToSend(void)
{
    delayMicroseconds(2000);
    2f74:	80 ed       	ldi	r24, 0xD0	; 208
    2f76:	97 e0       	ldi	r25, 0x07	; 7
    2f78:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <delayMicroseconds>
beginTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:206
  txBufferLength = 0;
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
    2f7c:	81 e1       	ldi	r24, 0x11	; 17
    2f7e:	0e 94 4b 09 	call	0x1296	; 0x1296 <TwoWire::beginTransmission(unsigned char) [clone .constprop.51]>
_ZN6SI484413isClearToSendEv.isra.4():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:733
    Wire.beginTransmission(SI4844_ADDRESS);
    Wire.write(ATDD_GET_STATUS);
    2f82:	80 ee       	ldi	r24, 0xE0	; 224
    2f84:	90 e0       	ldi	r25, 0x00	; 0
    2f86:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <TwoWire::write(int) [clone .constprop.36]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:734
    Wire.endTransmission();
    2f8a:	82 ec       	ldi	r24, 0xC2	; 194
    2f8c:	93 e0       	ldi	r25, 0x03	; 3
    2f8e:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <TwoWire::endTransmission()>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:735
    delayMicroseconds(2000);
    2f92:	80 ed       	ldi	r24, 0xD0	; 208
    2f94:	97 e0       	ldi	r25, 0x07	; 7
    2f96:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <delayMicroseconds>
twi_readFrom():
    2f9a:	61 e0       	ldi	r22, 0x01	; 1
    2f9c:	81 e1       	ldi	r24, 0x11	; 17
    2f9e:	0e 94 b5 09 	call	0x136a	; 0x136a <twi_readFrom.part.0.constprop.41>
requestFrom():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:120
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    2fa2:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <TwoWire::rxBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:121
  rxBufferLength = read;
    2fa6:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <TwoWire::rxBufferLength>
_ZN6SI484413isClearToSendEv.isra.4():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:737
    Wire.requestFrom(SI4844_ADDRESS, 1);
    all_receiver_status.raw[0] = Wire.read();
    2faa:	82 ec       	ldi	r24, 0xC2	; 194
    2fac:	93 e0       	ldi	r25, 0x03	; 3
    2fae:	0e 94 7d 14 	call	0x28fa	; 0x28fa <TwoWire::read()>
    2fb2:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <rx+0x1>
waitToSend():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:749
 * @details Waits for CTS status
 */
inline void SI4844::waitToSend()
{

    while (!isClearToSend())
    2fb6:	87 ff       	sbrs	r24, 7
    2fb8:	dd cf       	rjmp	.-70     	; 0x2f74 <SI4844::waitToSend() [clone .constprop.25]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:751
        ;
}
    2fba:	08 95       	ret

00002fbc <SI4844::setVolume(unsigned char) [clone .part.5] [clone .constprop.23]>:
_ZN6SI48449setVolumeEh.part.5():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:822
 * @brief Sets the volume level. 
 * @details Sets a value to the audio volume.
 * @see Table 4, Si48XX ATDD PROGRAMMING GUIDE; AN610; page 11
 * @param byte volumeLevel (domain: 0 to 63) 
 */
void SI4844::setVolume(byte volumeLavel)
    2fbc:	cf 93       	push	r28
    2fbe:	c8 2f       	mov	r28, r24
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:827
{
    if (volumeLavel > 63)
        return;

    waitToSend();
    2fc0:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <SI4844::waitToSend() [clone .constprop.25]>
setProperty():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:62
    si4844_property property;
    si4844_property param;

    property.value = propertyNumber;
    param.value = parameter;
    waitToSend();
    2fc4:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <SI4844::waitToSend() [clone .constprop.25]>
beginTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:206
  txBufferLength = 0;
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
    2fc8:	81 e1       	ldi	r24, 0x11	; 17
    2fca:	0e 94 4b 09 	call	0x1296	; 0x1296 <TwoWire::beginTransmission(unsigned char) [clone .constprop.51]>
setProperty():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:64
    Wire.beginTransmission(SI4844_ADDRESS);
    Wire.write(SET_PROPERTY);
    2fce:	82 e1       	ldi	r24, 0x12	; 18
    2fd0:	90 e0       	ldi	r25, 0x00	; 0
    2fd2:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <TwoWire::write(int) [clone .constprop.36]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:65
    Wire.write(0x00);
    2fd6:	90 e0       	ldi	r25, 0x00	; 0
    2fd8:	80 e0       	ldi	r24, 0x00	; 0
    2fda:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <TwoWire::write(int) [clone .constprop.36]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:66
    Wire.write(property.raw.byteHigh); // Send property - High byte - most significant first
    2fde:	60 e4       	ldi	r22, 0x40	; 64
    2fe0:	82 ec       	ldi	r24, 0xC2	; 194
    2fe2:	93 e0       	ldi	r25, 0x03	; 3
    2fe4:	0e 94 c4 14 	call	0x2988	; 0x2988 <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:67
    Wire.write(property.raw.byteLow);  // Send property - Low byte - less significant after
    2fe8:	60 e0       	ldi	r22, 0x00	; 0
    2fea:	82 ec       	ldi	r24, 0xC2	; 194
    2fec:	93 e0       	ldi	r25, 0x03	; 3
    2fee:	0e 94 c4 14 	call	0x2988	; 0x2988 <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:68
    Wire.write(param.raw.byteHigh);    // Send the argments. High Byte - Most significant first
    2ff2:	60 e0       	ldi	r22, 0x00	; 0
    2ff4:	82 ec       	ldi	r24, 0xC2	; 194
    2ff6:	93 e0       	ldi	r25, 0x03	; 3
    2ff8:	0e 94 c4 14 	call	0x2988	; 0x2988 <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:69
    Wire.write(param.raw.byteLow);     // Send the argments. Low Byte - Less significant after
    2ffc:	6c 2f       	mov	r22, r28
    2ffe:	82 ec       	ldi	r24, 0xC2	; 194
    3000:	93 e0       	ldi	r25, 0x03	; 3
    3002:	0e 94 c4 14 	call	0x2988	; 0x2988 <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:70
    Wire.endTransmission();
    3006:	82 ec       	ldi	r24, 0xC2	; 194
    3008:	93 e0       	ldi	r25, 0x03	; 3
    300a:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <TwoWire::endTransmission()>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:71
    delayMicroseconds(550);
    300e:	86 e2       	ldi	r24, 0x26	; 38
    3010:	92 e0       	ldi	r25, 0x02	; 2
    3012:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <delayMicroseconds>
_ZN6SI48449setVolumeEh.part.5():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:830
        return;

    waitToSend();
    setProperty(RX_VOLUME, volumeLavel);

    this->volume = volumeLavel;
    3016:	c0 93 c0 03 	sts	0x03C0, r28	; 0x8003c0 <rx+0x2e>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:831
}
    301a:	cf 91       	pop	r28
    301c:	08 95       	ret

0000301e <SI4844::setBandSlideSwitch() [clone .constprop.16]>:
setBandSlideSwitch():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:625
 * @see See Table 8. Pre-defined Band Table in Si48XX ATDD PROGRAMMING GUIDE; AN610; pages 17 and 18  
 * @param band  band index number. 
 * @see Si4822/26/27/40/44 A NTENNA , SCHEMATIC , LAYOUT, AND DESIGN GUIDELINES 
 * @todo The functions setBand and setBandSlideSwitch will be rewritten with the goal of improving the final code.
 */
void SI4844::setBandSlideSwitch()
    301e:	8f 92       	push	r8
    3020:	9f 92       	push	r9
    3022:	af 92       	push	r10
    3024:	bf 92       	push	r11
    3026:	cf 92       	push	r12
    3028:	df 92       	push	r13
    302a:	ef 92       	push	r14
    302c:	ff 92       	push	r15
    302e:	0f 93       	push	r16
    3030:	1f 93       	push	r17
    3032:	cf 93       	push	r28
    3034:	df 93       	push	r29
    3036:	00 d0       	rcall	.+0      	; 0x3038 <SI4844::setBandSlideSwitch() [clone .constprop.16]+0x1a>
    3038:	00 d0       	rcall	.+0      	; 0x303a <SI4844::setBandSlideSwitch() [clone .constprop.16]+0x1c>
    303a:	00 d0       	rcall	.+0      	; 0x303c <SI4844::setBandSlideSwitch() [clone .constprop.16]+0x1e>
    303c:	1f 92       	push	r1
    303e:	cd b7       	in	r28, 0x3d	; 61
    3040:	de b7       	in	r29, 0x3e	; 62
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:628
{
    
    this->getAllReceiverInfo();
    3042:	0e 94 f5 16 	call	0x2dea	; 0x2dea <SI4844::getAllReceiverInfo() [clone .constprop.34]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:629
    uint8_t bandIndex = this->all_receiver_status.refined.BANDIDX;
    3046:	10 91 94 03 	lds	r17, 0x0394	; 0x800394 <rx+0x2>
    304a:	1f 73       	andi	r17, 0x3F	; 63
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:632

   // If band mode changed, reset the device. 
   if (all_receiver_status.refined.HOSTRST == 1) {
    304c:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <rx+0x1>
    3050:	86 fd       	sbrc	r24, 6
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:633
       this->reset();
    3052:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <SI4844::reset() [clone .constprop.17]>
findBand():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/BandList.h:77
      }
    }

    // Find a custom band by its bandIdx and return its pointer
    BandNode* findBand(int8_t bandIdx) {
      BandNode* current = head;
    3056:	e0 91 ac 03 	lds	r30, 0x03AC	; 0x8003ac <rx+0x1a>
    305a:	f0 91 ad 03 	lds	r31, 0x03AD	; 0x8003ad <rx+0x1b>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/BandList.h:78
      while (current) {
    305e:	30 97       	sbiw	r30, 0x00	; 0
    3060:	41 f0       	breq	.+16     	; 0x3072 <SI4844::setBandSlideSwitch() [clone .constprop.16]+0x54>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/BandList.h:79
        if (current->bandIdx == bandIdx) return current; // Return the pointer if found
    3062:	80 81       	ld	r24, Z
    3064:	18 17       	cp	r17, r24
    3066:	09 f4       	brne	.+2      	; 0x306a <SI4844::setBandSlideSwitch() [clone .constprop.16]+0x4c>
    3068:	56 c0       	rjmp	.+172    	; 0x3116 <SI4844::setBandSlideSwitch() [clone .constprop.16]+0xf8>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/BandList.h:80
        current = current->next; // Move to the next node
    306a:	02 84       	ldd	r0, Z+10	; 0x0a
    306c:	f3 85       	ldd	r31, Z+11	; 0x0b
    306e:	e0 2d       	mov	r30, r0
    3070:	f6 cf       	rjmp	.-20     	; 0x305e <SI4844::setBandSlideSwitch() [clone .constprop.16]+0x40>
setPredefinedBand():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:508

void SI4844::setPredefinedBand(uint8_t bandIdx) {

    si4844_arg_band_index rxBandSetup; 

    this->currentBand = bandIdx;
    3072:	10 93 a4 03 	sts	0x03A4, r17	; 0x8003a4 <rx+0x12>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:510

    data_from_device = false;
    3076:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <_ZL16data_from_device.lto_priv.64>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:512

    rxBandSetup.refined.XOSCEN = this->xoscen;
    307a:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <rx+0x13>
    307e:	60 e0       	ldi	r22, 0x00	; 0
    3080:	80 fb       	bst	r24, 0
    3082:	67 f9       	bld	r22, 7
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:513
    rxBandSetup.refined.XOWAIT = this->xowait;
    3084:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <rx+0x14>
    3088:	80 fb       	bst	r24, 0
    308a:	66 f9       	bld	r22, 6
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:514
    rxBandSetup.refined.BANDIDX = this->currentBand;
    308c:	60 7c       	andi	r22, 0xC0	; 192
    308e:	16 2b       	or	r17, r22
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:515
    waitToSend();
    3090:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <SI4844::waitToSend() [clone .constprop.25]>
beginTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:206
    3094:	81 e1       	ldi	r24, 0x11	; 17
    3096:	0e 94 4b 09 	call	0x1296	; 0x1296 <TwoWire::beginTransmission(unsigned char) [clone .constprop.51]>
setPredefinedBand():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:517
    Wire.beginTransmission(SI4844_ADDRESS);
    Wire.write(ATDD_POWER_UP);
    309a:	81 ee       	ldi	r24, 0xE1	; 225
    309c:	90 e0       	ldi	r25, 0x00	; 0
    309e:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <TwoWire::write(int) [clone .constprop.36]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:518
    Wire.write(rxBandSetup.raw);
    30a2:	61 2f       	mov	r22, r17
setUserDefinedBand():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:571
    Wire.write(customband.raw[1]);
    Wire.write(customband.raw[2]);
    Wire.write(customband.raw[3]);
    Wire.write(customband.raw[4]);
    Wire.write(customband.raw[5]);
    Wire.write(customband.raw[6]);
    30a4:	82 ec       	ldi	r24, 0xC2	; 194
    30a6:	93 e0       	ldi	r25, 0x03	; 3
    30a8:	0e 94 c4 14 	call	0x2988	; 0x2988 <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:572
    Wire.endTransmission();
    30ac:	82 ec       	ldi	r24, 0xC2	; 194
    30ae:	93 e0       	ldi	r25, 0x03	; 3
    30b0:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <TwoWire::endTransmission()>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:573
    delayMicroseconds(2500);
    30b4:	84 ec       	ldi	r24, 0xC4	; 196
    30b6:	99 e0       	ldi	r25, 0x09	; 9
    30b8:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <delayMicroseconds>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:574
    waitInterrupt();
    30bc:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <SI4844::waitInterrupt() [clone .isra.2]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:575
    delayMicroseconds(2500);
    30c0:	84 ec       	ldi	r24, 0xC4	; 196
    30c2:	99 e0       	ldi	r25, 0x09	; 9
    30c4:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <delayMicroseconds>
waitDetectFrequency():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:760
 * @ingroup BF
 * @brief Wait for the ATDD detect a valid frequency (frequency not zero). 
 */
void SI4844::waitDetectFrequency() {
    do { 
        delay(1);
    30c8:	61 e0       	ldi	r22, 0x01	; 1
    30ca:	70 e0       	ldi	r23, 0x00	; 0
    30cc:	80 e0       	ldi	r24, 0x00	; 0
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	0e 94 80 0b 	call	0x1700	; 0x1700 <delay>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:761
        this->getAllReceiverInfo();
    30d4:	0e 94 f5 16 	call	0x2dea	; 0x2dea <SI4844::getAllReceiverInfo() [clone .constprop.34]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:762
    } while ( (all_receiver_status.raw[2] | all_receiver_status.raw[3]) == 0  );   
    30d8:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <rx+0x3>
    30dc:	90 91 96 03 	lds	r25, 0x0396	; 0x800396 <rx+0x4>
    30e0:	89 2b       	or	r24, r25
    30e2:	91 f3       	breq	.-28     	; 0x30c8 <SI4844::setBandSlideSwitch() [clone .constprop.16]+0xaa>
setBandSlideSwitch():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:646
        // if the current band is a custom band, sets the new parameters for the band.
        this->setUserDefinedBand(bandIndex, bandNode->bottomFrequency, bandNode->topFrequency, bandNode->space);
    }
     
    this->waitDetectFrequency(); 
    this->setVolume(this->volume);
    30e4:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <rx+0x2e>
setVolume():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:824
 * @see Table 4, Si48XX ATDD PROGRAMMING GUIDE; AN610; page 11
 * @param byte volumeLevel (domain: 0 to 63) 
 */
void SI4844::setVolume(byte volumeLavel)
{
    if (volumeLavel > 63)
    30e8:	80 34       	cpi	r24, 0x40	; 64
    30ea:	08 f0       	brcs	.+2      	; 0x30ee <SI4844::setBandSlideSwitch() [clone .constprop.16]+0xd0>
    30ec:	5d c0       	rjmp	.+186    	; 0x31a8 <SI4844::setBandSlideSwitch() [clone .constprop.16]+0x18a>
setBandSlideSwitch():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:648
    }
     
    this->waitDetectFrequency(); 
    this->setVolume(this->volume);

}
    30ee:	27 96       	adiw	r28, 0x07	; 7
    30f0:	0f b6       	in	r0, 0x3f	; 63
    30f2:	f8 94       	cli
    30f4:	de bf       	out	0x3e, r29	; 62
    30f6:	0f be       	out	0x3f, r0	; 63
    30f8:	cd bf       	out	0x3d, r28	; 61
    30fa:	df 91       	pop	r29
    30fc:	cf 91       	pop	r28
    30fe:	1f 91       	pop	r17
    3100:	0f 91       	pop	r16
    3102:	ff 90       	pop	r15
    3104:	ef 90       	pop	r14
    3106:	df 90       	pop	r13
    3108:	cf 90       	pop	r12
    310a:	bf 90       	pop	r11
    310c:	af 90       	pop	r10
    310e:	9f 90       	pop	r9
    3110:	8f 90       	pop	r8
setVolume():
    3112:	0c 94 de 17 	jmp	0x2fbc	; 0x2fbc <SI4844::setVolume(unsigned char) [clone .part.5] [clone .constprop.23]>
setBandSlideSwitch():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:642
    BandNode *bandNode = this->findCustomBand(bandIndex);
    if ( bandNode  == nullptr )  {   
        this->setPredefinedBand(bandIndex);
    } else {
        // if the current band is a custom band, sets the new parameters for the band.
        this->setUserDefinedBand(bandIndex, bandNode->bottomFrequency, bandNode->topFrequency, bandNode->space);
    3116:	01 85       	ldd	r16, Z+9	; 0x09
    3118:	c5 80       	ldd	r12, Z+5	; 0x05
    311a:	d6 80       	ldd	r13, Z+6	; 0x06
    311c:	e7 80       	ldd	r14, Z+7	; 0x07
    311e:	f0 84       	ldd	r15, Z+8	; 0x08
    3120:	81 80       	ldd	r8, Z+1	; 0x01
    3122:	92 80       	ldd	r9, Z+2	; 0x02
    3124:	a3 80       	ldd	r10, Z+3	; 0x03
    3126:	b4 80       	ldd	r11, Z+4	; 0x04
setUserDefinedBand():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:543
 */
void SI4844::setUserDefinedBand(int8_t bandIdx, uint32_t bottomFrequency, uint32_t topFrequency, uint8_t space ) {

    SI4844_arg_band customband;

    this->currentBand = bandIdx;
    3128:	10 93 a4 03 	sts	0x03A4, r17	; 0x8003a4 <rx+0x12>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:546

    // Now we can customize the band.
    data_from_device = false;
    312c:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <_ZL16data_from_device.lto_priv.64>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:547
    customband.refined.BANDIDX = bandIdx;
    3130:	69 81       	ldd	r22, Y+1	; 0x01
    3132:	60 7c       	andi	r22, 0xC0	; 192
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:548
    customband.refined.XOSCEN = this->xoscen;
    3134:	61 2b       	or	r22, r17
    3136:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <rx+0x13>
    313a:	80 fb       	bst	r24, 0
    313c:	67 f9       	bld	r22, 7
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:549
    customband.refined.XOWAIT = this->xowait;
    313e:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <rx+0x14>
    3142:	80 fb       	bst	r24, 0
    3144:	66 f9       	bld	r22, 6
    3146:	69 83       	std	Y+1, r22	; 0x01
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:558
    customband.refined.BANDTOP_LOW = lowByte(topFrequency);
    customband.refined.CHSPC = space;
    customband.refined.DFBAND = 0; 
    customband.refined.UNI_AM = 0;
    customband.refined.TVFREQ = 0;
    customband.refined.DUMMY = 0;
    3148:	1f 82       	std	Y+7, r1	; 0x07
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:561

    // Wait until rady to send a command
    waitToSend();
    314a:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <SI4844::waitToSend() [clone .constprop.25]>
beginTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:206
    314e:	81 e1       	ldi	r24, 0x11	; 17
    3150:	0e 94 4b 09 	call	0x1296	; 0x1296 <TwoWire::beginTransmission(unsigned char) [clone .constprop.51]>
setUserDefinedBand():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:564

    Wire.beginTransmission(SI4844_ADDRESS);
    Wire.write(ATDD_POWER_UP);
    3154:	81 ee       	ldi	r24, 0xE1	; 225
    3156:	90 e0       	ldi	r25, 0x00	; 0
    3158:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <TwoWire::write(int) [clone .constprop.36]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:565
    Wire.write(customband.raw[0]);
    315c:	69 81       	ldd	r22, Y+1	; 0x01
    315e:	82 ec       	ldi	r24, 0xC2	; 194
    3160:	93 e0       	ldi	r25, 0x03	; 3
    3162:	0e 94 c4 14 	call	0x2988	; 0x2988 <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:550
    // Now we can customize the band.
    data_from_device = false;
    customband.refined.BANDIDX = bandIdx;
    customband.refined.XOSCEN = this->xoscen;
    customband.refined.XOWAIT = this->xowait;
    customband.refined.BANDBOT_HIGH = highByte(bottomFrequency);
    3166:	99 27       	eor	r25, r25
    3168:	8b 2d       	mov	r24, r11
    316a:	7a 2d       	mov	r23, r10
    316c:	69 2d       	mov	r22, r9
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:566
    waitToSend();

    Wire.beginTransmission(SI4844_ADDRESS);
    Wire.write(ATDD_POWER_UP);
    Wire.write(customband.raw[0]);
    Wire.write(customband.raw[1]);
    316e:	82 ec       	ldi	r24, 0xC2	; 194
    3170:	93 e0       	ldi	r25, 0x03	; 3
    3172:	0e 94 c4 14 	call	0x2988	; 0x2988 <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:567
    Wire.write(customband.raw[2]);
    3176:	68 2d       	mov	r22, r8
    3178:	82 ec       	ldi	r24, 0xC2	; 194
    317a:	93 e0       	ldi	r25, 0x03	; 3
    317c:	0e 94 c4 14 	call	0x2988	; 0x2988 <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:552
    customband.refined.BANDIDX = bandIdx;
    customband.refined.XOSCEN = this->xoscen;
    customband.refined.XOWAIT = this->xowait;
    customband.refined.BANDBOT_HIGH = highByte(bottomFrequency);
    customband.refined.BANDBOT_LOW = lowByte(bottomFrequency);
    customband.refined.BANDTOP_HIGH = highByte(topFrequency);
    3180:	99 27       	eor	r25, r25
    3182:	8f 2d       	mov	r24, r15
    3184:	7e 2d       	mov	r23, r14
    3186:	6d 2d       	mov	r22, r13
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:568
    Wire.beginTransmission(SI4844_ADDRESS);
    Wire.write(ATDD_POWER_UP);
    Wire.write(customband.raw[0]);
    Wire.write(customband.raw[1]);
    Wire.write(customband.raw[2]);
    Wire.write(customband.raw[3]);
    3188:	82 ec       	ldi	r24, 0xC2	; 194
    318a:	93 e0       	ldi	r25, 0x03	; 3
    318c:	0e 94 c4 14 	call	0x2988	; 0x2988 <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:569
    Wire.write(customband.raw[4]);
    3190:	6c 2d       	mov	r22, r12
    3192:	82 ec       	ldi	r24, 0xC2	; 194
    3194:	93 e0       	ldi	r25, 0x03	; 3
    3196:	0e 94 c4 14 	call	0x2988	; 0x2988 <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:570
    Wire.write(customband.raw[5]);
    319a:	60 2f       	mov	r22, r16
    319c:	82 ec       	ldi	r24, 0xC2	; 194
    319e:	93 e0       	ldi	r25, 0x03	; 3
    31a0:	0e 94 c4 14 	call	0x2988	; 0x2988 <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:571
    Wire.write(customband.raw[6]);
    31a4:	6f 81       	ldd	r22, Y+7	; 0x07
    31a6:	7e cf       	rjmp	.-260    	; 0x30a4 <SI4844::setBandSlideSwitch() [clone .constprop.16]+0x86>
setBandSlideSwitch():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:648
    }
     
    this->waitDetectFrequency(); 
    this->setVolume(this->volume);

}
    31a8:	27 96       	adiw	r28, 0x07	; 7
    31aa:	0f b6       	in	r0, 0x3f	; 63
    31ac:	f8 94       	cli
    31ae:	de bf       	out	0x3e, r29	; 62
    31b0:	0f be       	out	0x3f, r0	; 63
    31b2:	cd bf       	out	0x3d, r28	; 61
    31b4:	df 91       	pop	r29
    31b6:	cf 91       	pop	r28
    31b8:	1f 91       	pop	r17
    31ba:	0f 91       	pop	r16
    31bc:	ff 90       	pop	r15
    31be:	ef 90       	pop	r14
    31c0:	df 90       	pop	r13
    31c2:	cf 90       	pop	r12
    31c4:	bf 90       	pop	r11
    31c6:	af 90       	pop	r10
    31c8:	9f 90       	pop	r9
    31ca:	8f 90       	pop	r8
    31cc:	08 95       	ret

000031ce <Print::printNumber(unsigned long, unsigned char) [clone .constprop.31]>:
printNumber():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:232
  return vfprintf_P(&f, (const char *)format, ap);
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
    31ce:	8f 92       	push	r8
    31d0:	9f 92       	push	r9
    31d2:	af 92       	push	r10
    31d4:	bf 92       	push	r11
    31d6:	0f 93       	push	r16
    31d8:	1f 93       	push	r17
    31da:	cf 93       	push	r28
    31dc:	df 93       	push	r29
    31de:	cd b7       	in	r28, 0x3d	; 61
    31e0:	de b7       	in	r29, 0x3e	; 62
    31e2:	a1 97       	sbiw	r28, 0x21	; 33
    31e4:	0f b6       	in	r0, 0x3f	; 63
    31e6:	f8 94       	cli
    31e8:	de bf       	out	0x3e, r29	; 62
    31ea:	0f be       	out	0x3f, r0	; 63
    31ec:	cd bf       	out	0x3d, r28	; 61
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:237
{
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    31ee:	19 a2       	std	Y+33, r1	; 0x21
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:240

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    31f0:	42 30       	cpi	r20, 0x02	; 2
    31f2:	08 f4       	brcc	.+2      	; 0x31f6 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.31]+0x28>
    31f4:	4a e0       	ldi	r20, 0x0A	; 10
    31f6:	8e 01       	movw	r16, r28
    31f8:	0f 5d       	subi	r16, 0xDF	; 223
    31fa:	1f 4f       	sbci	r17, 0xFF	; 255
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:243

  do {
    char c = n % base;
    31fc:	84 2e       	mov	r8, r20
    31fe:	91 2c       	mov	r9, r1
    3200:	b1 2c       	mov	r11, r1
    3202:	a1 2c       	mov	r10, r1
    3204:	a5 01       	movw	r20, r10
    3206:	94 01       	movw	r18, r8
    3208:	0e 94 eb 23 	call	0x47d6	; 0x47d6 <__udivmodsi4>
    320c:	e6 2f       	mov	r30, r22
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:244
    n /= base;
    320e:	b9 01       	movw	r22, r18
    3210:	ca 01       	movw	r24, r20
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:246

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    3212:	ea 30       	cpi	r30, 0x0A	; 10
    3214:	44 f5       	brge	.+80     	; 0x3266 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.31]+0x98>
    3216:	e0 5d       	subi	r30, 0xD0	; 208
    3218:	d8 01       	movw	r26, r16
    321a:	ee 93       	st	-X, r30
    321c:	8d 01       	movw	r16, r26
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:247
  } while(n);
    321e:	23 2b       	or	r18, r19
    3220:	24 2b       	or	r18, r20
    3222:	25 2b       	or	r18, r21
    3224:	79 f7       	brne	.-34     	; 0x3204 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.31]+0x36>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	80 e0       	ldi	r24, 0x00	; 0
write():
    322a:	10 97       	sbiw	r26, 0x00	; 0
    322c:	69 f0       	breq	.+26     	; 0x3248 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.31]+0x7a>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.h:54
      return write((const uint8_t *)str, strlen(str));
    322e:	fd 01       	movw	r30, r26
    3230:	01 90       	ld	r0, Z+
    3232:	00 20       	and	r0, r0
    3234:	e9 f7       	brne	.-6      	; 0x3230 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.31]+0x62>
    3236:	31 97       	sbiw	r30, 0x01	; 1
    3238:	af 01       	movw	r20, r30
    323a:	4a 1b       	sub	r20, r26
    323c:	5b 0b       	sbc	r21, r27
    323e:	bd 01       	movw	r22, r26
    3240:	8e ec       	ldi	r24, 0xCE	; 206
    3242:	93 e0       	ldi	r25, 0x03	; 3
    3244:	0e 94 b9 0b 	call	0x1772	; 0x1772 <Print::write(unsigned char const*, unsigned int)>
printNumber():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:250

  return write(str);
}
    3248:	a1 96       	adiw	r28, 0x21	; 33
    324a:	0f b6       	in	r0, 0x3f	; 63
    324c:	f8 94       	cli
    324e:	de bf       	out	0x3e, r29	; 62
    3250:	0f be       	out	0x3f, r0	; 63
    3252:	cd bf       	out	0x3d, r28	; 61
    3254:	df 91       	pop	r29
    3256:	cf 91       	pop	r28
    3258:	1f 91       	pop	r17
    325a:	0f 91       	pop	r16
    325c:	bf 90       	pop	r11
    325e:	af 90       	pop	r10
    3260:	9f 90       	pop	r9
    3262:	8f 90       	pop	r8
    3264:	08 95       	ret
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:246

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    3266:	e9 5c       	subi	r30, 0xC9	; 201
    3268:	d7 cf       	rjmp	.-82     	; 0x3218 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.31]+0x4a>

0000326a <Print::print(char const*) [clone .constprop.46]>:
write():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    326a:	00 97       	sbiw	r24, 0x00	; 0
    326c:	69 f0       	breq	.+26     	; 0x3288 <Print::print(char const*) [clone .constprop.46]+0x1e>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.h:54
      return write((const uint8_t *)str, strlen(str));
    326e:	fc 01       	movw	r30, r24
    3270:	01 90       	ld	r0, Z+
    3272:	00 20       	and	r0, r0
    3274:	e9 f7       	brne	.-6      	; 0x3270 <Print::print(char const*) [clone .constprop.46]+0x6>
    3276:	31 97       	sbiw	r30, 0x01	; 1
    3278:	af 01       	movw	r20, r30
    327a:	48 1b       	sub	r20, r24
    327c:	59 0b       	sbc	r21, r25
    327e:	bc 01       	movw	r22, r24
    3280:	8e ec       	ldi	r24, 0xCE	; 206
    3282:	93 e0       	ldi	r25, 0x03	; 3
    3284:	0c 94 b9 0b 	jmp	0x1772	; 0x1772 <Print::write(unsigned char const*, unsigned int)>
print():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:65
}

size_t Print::print(const char str[])
{
  return write(str);
}
    3288:	90 e0       	ldi	r25, 0x00	; 0
    328a:	80 e0       	ldi	r24, 0x00	; 0
    328c:	08 95       	ret

0000328e <Adafruit_SSD1306::clearDisplay() [clone .constprop.26]>:
clearDisplay():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:683
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::clearDisplay(void) {
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
    328e:	20 91 d4 03 	lds	r18, 0x03D4	; 0x8003d4 <display+0x6>
    3292:	30 91 d5 03 	lds	r19, 0x03D5	; 0x8003d5 <display+0x7>
    3296:	c9 01       	movw	r24, r18
    3298:	07 96       	adiw	r24, 0x07	; 7
    329a:	97 fd       	sbrc	r25, 7
    329c:	07 96       	adiw	r24, 0x07	; 7
    329e:	23 e0       	ldi	r18, 0x03	; 3
    32a0:	95 95       	asr	r25
    32a2:	87 95       	ror	r24
    32a4:	2a 95       	dec	r18
    32a6:	e1 f7       	brne	.-8      	; 0x32a0 <Adafruit_SSD1306::clearDisplay() [clone .constprop.26]+0x12>
    32a8:	20 91 d2 03 	lds	r18, 0x03D2	; 0x8003d2 <display+0x4>
    32ac:	30 91 d3 03 	lds	r19, 0x03D3	; 0x8003d3 <display+0x5>
    32b0:	82 9f       	mul	r24, r18
    32b2:	a0 01       	movw	r20, r0
    32b4:	83 9f       	mul	r24, r19
    32b6:	50 0d       	add	r21, r0
    32b8:	92 9f       	mul	r25, r18
    32ba:	50 0d       	add	r21, r0
    32bc:	11 24       	eor	r1, r1
    32be:	70 e0       	ldi	r23, 0x00	; 0
    32c0:	60 e0       	ldi	r22, 0x00	; 0
    32c2:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <display+0x1f>
    32c6:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <display+0x20>
    32ca:	0c 94 0b 26 	jmp	0x4c16	; 0x4c16 <memset>

000032ce <__cxa_pure_virtual>:
terminate():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/abi.cpp:26
extern "C" void __cxa_pure_virtual(void) __attribute__ ((__noreturn__));
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

namespace std {
  [[gnu::weak, noreturn]] void terminate() {
    abort();
    32ce:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <abort>

000032d2 <String::~String()>:
__base_dtor ():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  if(buffer)
    32d2:	fc 01       	movw	r30, r24
    32d4:	80 81       	ld	r24, Z
    32d6:	91 81       	ldd	r25, Z+1	; 0x01
    32d8:	00 97       	sbiw	r24, 0x00	; 0
    32da:	11 f0       	breq	.+4      	; 0x32e0 <String::~String()+0xe>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:125
    free(buffer);
    32dc:	0c 94 b7 24 	jmp	0x496e	; 0x496e <free>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:126
}
    32e0:	08 95       	ret

000032e2 <String::reserve(unsigned int)>:
reserve():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:147
  buffer = NULL;
  capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
    32e2:	0f 93       	push	r16
    32e4:	1f 93       	push	r17
    32e6:	cf 93       	push	r28
    32e8:	df 93       	push	r29
    32ea:	ec 01       	movw	r28, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:148
  if (buffer && capacity >= size) return 1;
    32ec:	88 81       	ld	r24, Y
    32ee:	99 81       	ldd	r25, Y+1	; 0x01
    32f0:	00 97       	sbiw	r24, 0x00	; 0
    32f2:	59 f0       	breq	.+22     	; 0x330a <String::reserve(unsigned int)+0x28>
    32f4:	2a 81       	ldd	r18, Y+2	; 0x02
    32f6:	3b 81       	ldd	r19, Y+3	; 0x03
    32f8:	26 17       	cp	r18, r22
    32fa:	37 07       	cpc	r19, r23
    32fc:	30 f0       	brcs	.+12     	; 0x330a <String::reserve(unsigned int)+0x28>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:150
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
    32fe:	81 e0       	ldi	r24, 0x01	; 1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:154
    return 1;
  }
  return 0;
}
    3300:	df 91       	pop	r29
    3302:	cf 91       	pop	r28
    3304:	1f 91       	pop	r17
    3306:	0f 91       	pop	r16
    3308:	08 95       	ret
    330a:	8b 01       	movw	r16, r22
changeBuffer():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:158

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
  char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    330c:	6f 5f       	subi	r22, 0xFF	; 255
    330e:	7f 4f       	sbci	r23, 0xFF	; 255
    3310:	0e 94 40 25 	call	0x4a80	; 0x4a80 <realloc>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:159
  if (newbuffer) {
    3314:	00 97       	sbiw	r24, 0x00	; 0
    3316:	59 f0       	breq	.+22     	; 0x332e <String::reserve(unsigned int)+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:160
    buffer = newbuffer;
    3318:	99 83       	std	Y+1, r25	; 0x01
    331a:	88 83       	st	Y, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:161
    capacity = maxStrLen;
    331c:	1b 83       	std	Y+3, r17	; 0x03
    331e:	0a 83       	std	Y+2, r16	; 0x02
reserve():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:150

unsigned char String::reserve(unsigned int size)
{
  if (buffer && capacity >= size) return 1;
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
    3320:	2c 81       	ldd	r18, Y+4	; 0x04
    3322:	3d 81       	ldd	r19, Y+5	; 0x05
    3324:	23 2b       	or	r18, r19
    3326:	59 f7       	brne	.-42     	; 0x32fe <String::reserve(unsigned int)+0x1c>
    3328:	fc 01       	movw	r30, r24
    332a:	10 82       	st	Z, r1
    332c:	e8 cf       	rjmp	.-48     	; 0x32fe <String::reserve(unsigned int)+0x1c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:153
    return 1;
  }
  return 0;
    332e:	80 e0       	ldi	r24, 0x00	; 0
    3330:	e7 cf       	rjmp	.-50     	; 0x3300 <String::reserve(unsigned int)+0x1e>

00003332 <String::operator=(char const*) [clone .part.3]>:
_ZN6StringaSEPKc.part.3():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:239
  if (this != &rval) move(rval);
  return *this;
}
#endif

String & String::operator = (const char *cstr)
    3332:	ef 92       	push	r14
    3334:	ff 92       	push	r15
    3336:	0f 93       	push	r16
    3338:	1f 93       	push	r17
    333a:	cf 93       	push	r28
    333c:	df 93       	push	r29
    333e:	ec 01       	movw	r28, r24
    3340:	7b 01       	movw	r14, r22
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:241
{
  if (cstr) copy(cstr, strlen(cstr));
    3342:	fb 01       	movw	r30, r22
    3344:	01 90       	ld	r0, Z+
    3346:	00 20       	and	r0, r0
    3348:	e9 f7       	brne	.-6      	; 0x3344 <String::operator=(char const*) [clone .part.3]+0x12>
    334a:	31 97       	sbiw	r30, 0x01	; 1
    334c:	8f 01       	movw	r16, r30
    334e:	06 1b       	sub	r16, r22
    3350:	17 0b       	sbc	r17, r23
copy():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:173
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
  if (!reserve(length)) {
    3352:	b8 01       	movw	r22, r16
    3354:	0e 94 71 19 	call	0x32e2	; 0x32e2 <String::reserve(unsigned int)>
    3358:	28 81       	ld	r18, Y
    335a:	39 81       	ldd	r19, Y+1	; 0x01
    335c:	81 11       	cpse	r24, r1
    335e:	13 c0       	rjmp	.+38     	; 0x3386 <String::operator=(char const*) [clone .part.3]+0x54>
invalidate():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:141
  len = 0;
}

void String::invalidate(void)
{
  if (buffer) free(buffer);
    3360:	21 15       	cp	r18, r1
    3362:	31 05       	cpc	r19, r1
    3364:	19 f0       	breq	.+6      	; 0x336c <String::operator=(char const*) [clone .part.3]+0x3a>
    3366:	c9 01       	movw	r24, r18
    3368:	0e 94 b7 24 	call	0x496e	; 0x496e <free>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:142
  buffer = NULL;
    336c:	19 82       	std	Y+1, r1	; 0x01
    336e:	18 82       	st	Y, r1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:143
  capacity = len = 0;
    3370:	1d 82       	std	Y+5, r1	; 0x05
    3372:	1c 82       	std	Y+4, r1	; 0x04
    3374:	1b 82       	std	Y+3, r1	; 0x03
    3376:	1a 82       	std	Y+2, r1	; 0x02
_ZN6StringaSEPKc.part.3():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:245
{
  if (cstr) copy(cstr, strlen(cstr));
  else invalidate();
  
  return *this;
}
    3378:	df 91       	pop	r29
    337a:	cf 91       	pop	r28
    337c:	1f 91       	pop	r17
    337e:	0f 91       	pop	r16
    3380:	ff 90       	pop	r15
    3382:	ef 90       	pop	r14
    3384:	08 95       	ret
copy():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:177
{
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
    3386:	1d 83       	std	Y+5, r17	; 0x05
    3388:	0c 83       	std	Y+4, r16	; 0x04
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:178
  strcpy(buffer, cstr);
    338a:	b7 01       	movw	r22, r14
    338c:	c9 01       	movw	r24, r18
_ZN6StringaSEPKc.part.3():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:245
{
  if (cstr) copy(cstr, strlen(cstr));
  else invalidate();
  
  return *this;
}
    338e:	df 91       	pop	r29
    3390:	cf 91       	pop	r28
    3392:	1f 91       	pop	r17
    3394:	0f 91       	pop	r16
    3396:	ff 90       	pop	r15
    3398:	ef 90       	pop	r14
copy():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:178
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
  strcpy(buffer, cstr);
    339a:	0c 94 12 26 	jmp	0x4c24	; 0x4c24 <strcpy>

0000339e <String::String(char const*)>:
__base_ctor ():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:28

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    339e:	ef 92       	push	r14
    33a0:	ff 92       	push	r15
    33a2:	0f 93       	push	r16
    33a4:	1f 93       	push	r17
    33a6:	cf 93       	push	r28
    33a8:	df 93       	push	r29
    33aa:	ec 01       	movw	r28, r24
    33ac:	7b 01       	movw	r14, r22
_ZN6String4initEv():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:134
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
    33ae:	19 82       	std	Y+1, r1	; 0x01
    33b0:	18 82       	st	Y, r1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:135
  capacity = 0;
    33b2:	1b 82       	std	Y+3, r1	; 0x03
    33b4:	1a 82       	std	Y+2, r1	; 0x02
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:136
  len = 0;
    33b6:	1d 82       	std	Y+5, r1	; 0x05
    33b8:	1c 82       	std	Y+4, r1	; 0x04
__base_ctor ():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:31
/*********************************************/

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
    33ba:	fb 01       	movw	r30, r22
    33bc:	01 90       	ld	r0, Z+
    33be:	00 20       	and	r0, r0
    33c0:	e9 f7       	brne	.-6      	; 0x33bc <String::String(char const*)+0x1e>
    33c2:	31 97       	sbiw	r30, 0x01	; 1
    33c4:	8f 01       	movw	r16, r30
    33c6:	06 1b       	sub	r16, r22
    33c8:	17 0b       	sbc	r17, r23
copy():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:173
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
  if (!reserve(length)) {
    33ca:	b8 01       	movw	r22, r16
    33cc:	0e 94 71 19 	call	0x32e2	; 0x32e2 <String::reserve(unsigned int)>
    33d0:	28 81       	ld	r18, Y
    33d2:	39 81       	ldd	r19, Y+1	; 0x01
    33d4:	81 11       	cpse	r24, r1
    33d6:	13 c0       	rjmp	.+38     	; 0x33fe <String::String(char const*)+0x60>
invalidate():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:141
  len = 0;
}

void String::invalidate(void)
{
  if (buffer) free(buffer);
    33d8:	21 15       	cp	r18, r1
    33da:	31 05       	cpc	r19, r1
    33dc:	19 f0       	breq	.+6      	; 0x33e4 <String::String(char const*)+0x46>
    33de:	c9 01       	movw	r24, r18
    33e0:	0e 94 b7 24 	call	0x496e	; 0x496e <free>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:142
  buffer = NULL;
    33e4:	19 82       	std	Y+1, r1	; 0x01
    33e6:	18 82       	st	Y, r1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:143
  capacity = len = 0;
    33e8:	1d 82       	std	Y+5, r1	; 0x05
    33ea:	1c 82       	std	Y+4, r1	; 0x04
    33ec:	1b 82       	std	Y+3, r1	; 0x03
    33ee:	1a 82       	std	Y+2, r1	; 0x02
__base_ctor ():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:32

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
}
    33f0:	df 91       	pop	r29
    33f2:	cf 91       	pop	r28
    33f4:	1f 91       	pop	r17
    33f6:	0f 91       	pop	r16
    33f8:	ff 90       	pop	r15
    33fa:	ef 90       	pop	r14
    33fc:	08 95       	ret
copy():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:177
{
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
    33fe:	1d 83       	std	Y+5, r17	; 0x05
    3400:	0c 83       	std	Y+4, r16	; 0x04
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:178
  strcpy(buffer, cstr);
    3402:	b7 01       	movw	r22, r14
    3404:	c9 01       	movw	r24, r18
__base_ctor ():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:32

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
}
    3406:	df 91       	pop	r29
    3408:	cf 91       	pop	r28
    340a:	1f 91       	pop	r17
    340c:	0f 91       	pop	r16
    340e:	ff 90       	pop	r15
    3410:	ef 90       	pop	r14
copy():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:178
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
  strcpy(buffer, cstr);
    3412:	0c 94 12 26 	jmp	0x4c24	; 0x4c24 <strcpy>

00003416 <displayDial()>:
displayDial():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:106
  delay(100);
  displayDial();
}


void displayDial() {
    3416:	cf 92       	push	r12
    3418:	df 92       	push	r13
    341a:	ef 92       	push	r14
    341c:	ff 92       	push	r15
    341e:	0f 93       	push	r16
    3420:	1f 93       	push	r17
    3422:	cf 93       	push	r28
    3424:	df 93       	push	r29
    3426:	cd b7       	in	r28, 0x3d	; 61
    3428:	de b7       	in	r29, 0x3e	; 62
    342a:	62 97       	sbiw	r28, 0x12	; 18
    342c:	0f b6       	in	r0, 0x3f	; 63
    342e:	f8 94       	cli
    3430:	de bf       	out	0x3e, r29	; 62
    3432:	0f be       	out	0x3f, r0	; 63
    3434:	cd bf       	out	0x3d, r28	; 61
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:107
  String unit, freqDisplay, stereo;
    3436:	64 e8       	ldi	r22, 0x84	; 132
    3438:	71 e0       	ldi	r23, 0x01	; 1
    343a:	ce 01       	movw	r24, r28
    343c:	01 96       	adiw	r24, 0x01	; 1
    343e:	0e 94 cf 19 	call	0x339e	; 0x339e <String::String(char const*)>
    3442:	64 e8       	ldi	r22, 0x84	; 132
    3444:	71 e0       	ldi	r23, 0x01	; 1
    3446:	ce 01       	movw	r24, r28
    3448:	07 96       	adiw	r24, 0x07	; 7
    344a:	0e 94 cf 19 	call	0x339e	; 0x339e <String::String(char const*)>
    344e:	64 e8       	ldi	r22, 0x84	; 132
    3450:	71 e0       	ldi	r23, 0x01	; 1
    3452:	ce 01       	movw	r24, r28
    3454:	0d 96       	adiw	r24, 0x0d	; 13
    3456:	0e 94 cf 19 	call	0x339e	; 0x339e <String::String(char const*)>
setFont():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1350
  } else if (gfxFont) { // NULL passed.  Current font struct defined?
    // Switching from new to classic font behavior.
    // Move cursor pos up 6 pixels so it's at top-left of char.
    cursor_y -= 6;
  }
  gfxFont = (GFXfont *)f;
    345a:	10 92 e8 03 	sts	0x03E8, r1	; 0x8003e8 <display+0x1a>
    345e:	10 92 e7 03 	sts	0x03E7, r1	; 0x8003e7 <display+0x19>
_ZN12Adafruit_GFX9setCursorEii():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.h:132
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    3462:	10 92 db 03 	sts	0x03DB, r1	; 0x8003db <display+0xd>
    3466:	10 92 da 03 	sts	0x03DA, r1	; 0x8003da <display+0xc>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.h:133
    cursor_y = y;
    346a:	10 92 dd 03 	sts	0x03DD, r1	; 0x8003dd <display+0xf>
    346e:	10 92 dc 03 	sts	0x03DC, r1	; 0x8003dc <display+0xe>
displayDial():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:111

  display.setFont(NULL);
  display.setCursor(0, 0);
  display.print("TESTE");
    3472:	84 e6       	ldi	r24, 0x64	; 100
    3474:	91 e0       	ldi	r25, 0x01	; 1
    3476:	0e 94 35 19 	call	0x326a	; 0x326a <Print::print(char const*) [clone .constprop.46]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:113

  if (rx.getFrequencyInteger() > 999)
    347a:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <SI4844::getFrequencyInteger() [clone .constprop.33]>
    347e:	68 3e       	cpi	r22, 0xE8	; 232
    3480:	73 40       	sbci	r23, 0x03	; 3
    3482:	81 05       	cpc	r24, r1
    3484:	91 05       	cpc	r25, r1
    3486:	08 f4       	brcc	.+2      	; 0x348a <displayDial()+0x74>
    3488:	80 c1       	rjmp	.+768    	; 0x378a <displayDial()+0x374>
operator=():
    348a:	6a e6       	ldi	r22, 0x6A	; 106
    348c:	71 e0       	ldi	r23, 0x01	; 1
    348e:	ce 01       	movw	r24, r28
    3490:	01 96       	adiw	r24, 0x01	; 1
    3492:	0e 94 99 19 	call	0x3332	; 0x3332 <String::operator=(char const*) [clone .part.3]>
setFont():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1345
    if (!gfxFont) { // And no current font struct?
      // Switching from classic to new font behavior.
      // Move cursor pos down 6 pixels so it's on baseline.
      cursor_y += 6;
    }
  } else if (gfxFont) { // NULL passed.  Current font struct defined?
    3496:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <display+0x19>
    349a:	90 91 e8 03 	lds	r25, 0x03E8	; 0x8003e8 <display+0x1a>
    349e:	89 2b       	or	r24, r25
    34a0:	49 f0       	breq	.+18     	; 0x34b4 <displayDial()+0x9e>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1348
    // Switching from new to classic font behavior.
    // Move cursor pos up 6 pixels so it's at top-left of char.
    cursor_y -= 6;
    34a2:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <display+0xe>
    34a6:	90 91 dd 03 	lds	r25, 0x03DD	; 0x8003dd <display+0xf>
    34aa:	06 97       	sbiw	r24, 0x06	; 6
    34ac:	90 93 dd 03 	sts	0x03DD, r25	; 0x8003dd <display+0xf>
    34b0:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <display+0xe>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1350
  }
  gfxFont = (GFXfont *)f;
    34b4:	10 92 e8 03 	sts	0x03E8, r1	; 0x8003e8 <display+0x1a>
    34b8:	10 92 e7 03 	sts	0x03E7, r1	; 0x8003e7 <display+0x19>
displayDial():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:119
    unit = (char *)"MHZ";
  else
    unit = (char *)"kHz";

  display.setFont(NULL);
  display.clearDisplay();
    34bc:	0e 94 47 19 	call	0x328e	; 0x328e <Adafruit_SSD1306::clearDisplay() [clone .constprop.26]>
_ZN12Adafruit_GFX9setCursorEii():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.h:132
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    34c0:	10 92 db 03 	sts	0x03DB, r1	; 0x8003db <display+0xd>
    34c4:	10 92 da 03 	sts	0x03DA, r1	; 0x8003da <display+0xc>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.h:133
    cursor_y = y;
    34c8:	10 92 dd 03 	sts	0x03DD, r1	; 0x8003dd <display+0xf>
    34cc:	10 92 dc 03 	sts	0x03DC, r1	; 0x8003dc <display+0xe>
_ZN6SI484411getBandModeEv():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.h:464
   * @ingroup GB1 
   * @brief Get the Band Mode 
   * @return char*   "FM", "AM" or "SW"
   * @see getStatusBandMode()
   */
  inline char * getBandMode(){ return (char *) bandmode_table[all_receiver_status.refined.BANDMODE]; };
    34d0:	e0 91 94 03 	lds	r30, 0x0394	; 0x800394 <rx+0x2>
    34d4:	e2 95       	swap	r30
    34d6:	e6 95       	lsr	r30
    34d8:	e6 95       	lsr	r30
    34da:	e3 70       	andi	r30, 0x03	; 3
    34dc:	f0 e0       	ldi	r31, 0x00	; 0
    34de:	ee 0f       	add	r30, r30
    34e0:	ff 1f       	adc	r31, r31
    34e2:	e2 55       	subi	r30, 0x52	; 82
    34e4:	fc 4f       	sbci	r31, 0xFC	; 252
displayDial():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:123


  display.setCursor(0, 0);
  display.print(rx.getBandMode());
    34e6:	80 81       	ld	r24, Z
    34e8:	91 81       	ldd	r25, Z+1	; 0x01
    34ea:	0e 94 35 19 	call	0x326a	; 0x326a <Print::print(char const*) [clone .constprop.46]>
_ZN12Adafruit_GFX9setCursorEii():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.h:132
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    34ee:	80 e3       	ldi	r24, 0x30	; 48
    34f0:	90 e0       	ldi	r25, 0x00	; 0
    34f2:	90 93 db 03 	sts	0x03DB, r25	; 0x8003db <display+0xd>
    34f6:	80 93 da 03 	sts	0x03DA, r24	; 0x8003da <display+0xc>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.h:133
    cursor_y = y;
    34fa:	10 92 dd 03 	sts	0x03DD, r1	; 0x8003dd <display+0xf>
    34fe:	10 92 dc 03 	sts	0x03DC, r1	; 0x8003dc <display+0xe>
_ZN6SI484425getStatusStationIndicatorEv():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.h:509
   * @ingroup GB1 
   * @brief Gets Station Indicator.
   * @details **Call getStatus or getAllReceiverInfo before calling this function** 
   * @return 0 = Invalid Station; 1 = Valid Station
   */
  inline uint16_t  getStatusStationIndicator() { return device_status.refined.STATION; };
    3502:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <rx>
displayDial():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:126

  display.setCursor(48, 0);
  if (rx.getStatusStationIndicator() != 0) {
    3506:	83 ff       	sbrs	r24, 3
    3508:	43 c1       	rjmp	.+646    	; 0x3790 <displayDial()+0x37a>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:127
    display.print("OK");
    350a:	82 e7       	ldi	r24, 0x72	; 114
    350c:	91 e0       	ldi	r25, 0x01	; 1
    350e:	0e 94 35 19 	call	0x326a	; 0x326a <Print::print(char const*) [clone .constprop.46]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:128
    digitalWrite(TUNE_LED, HIGH);
    3512:	61 e0       	ldi	r22, 0x01	; 1
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:132
  }
  else {
    display.print("  ");
    digitalWrite(TUNE_LED, LOW);    
    3514:	8a e0       	ldi	r24, 0x0A	; 10
    3516:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <digitalWrite>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:135
  }

  bandIdx = rx.getCurrentBand();
    351a:	c0 90 a4 03 	lds	r12, 0x03A4	; 0x8003a4 <rx+0x12>
    351e:	c0 92 53 02 	sts	0x0253, r12	; 0x800253 <bandIdx>
_ZN12Adafruit_GFX9setCursorEii():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.h:132
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    3522:	80 e5       	ldi	r24, 0x50	; 80
    3524:	90 e0       	ldi	r25, 0x00	; 0
    3526:	90 93 db 03 	sts	0x03DB, r25	; 0x8003db <display+0xd>
    352a:	80 93 da 03 	sts	0x03DA, r24	; 0x8003da <display+0xc>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.h:133
    cursor_y = y;
    352e:	10 92 dd 03 	sts	0x03DD, r1	; 0x8003dd <display+0xf>
    3532:	10 92 dc 03 	sts	0x03DC, r1	; 0x8003dc <display+0xe>
print():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:79
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    3536:	0c 2c       	mov	r0, r12
    3538:	00 0c       	add	r0, r0
    353a:	dd 08       	sbc	r13, r13
    353c:	ee 08       	sbc	r14, r14
    353e:	ff 08       	sbc	r15, r15
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:97
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    3540:	4a e0       	ldi	r20, 0x0A	; 10
    3542:	c7 01       	movw	r24, r14
    3544:	b6 01       	movw	r22, r12
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:92
size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
    3546:	f7 fe       	sbrs	r15, 7
    3548:	0d c0       	rjmp	.+26     	; 0x3564 <displayDial()+0x14e>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:69
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    354a:	6d e2       	ldi	r22, 0x2D	; 45
    354c:	8e ec       	ldi	r24, 0xCE	; 206
    354e:	93 e0       	ldi	r25, 0x03	; 3
    3550:	0e 94 82 10 	call	0x2104	; 0x2104 <Adafruit_GFX::write(unsigned char)>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:94
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
    3554:	66 27       	eor	r22, r22
    3556:	77 27       	eor	r23, r23
    3558:	cb 01       	movw	r24, r22
    355a:	6c 19       	sub	r22, r12
    355c:	7d 09       	sbc	r23, r13
    355e:	8e 09       	sbc	r24, r14
    3560:	9f 09       	sbc	r25, r15
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:95
      return printNumber(n, 10) + t;
    3562:	4a e0       	ldi	r20, 0x0A	; 10
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:97
    }
    return printNumber(n, 10);
    3564:	0e 94 e7 18 	call	0x31ce	; 0x31ce <Print::printNumber(unsigned long, unsigned char) [clone .constprop.31]>
displayDial():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:140


  display.setCursor(80, 0);
  display.print(bandIdx);
  display.print("-");
    3568:	85 e7       	ldi	r24, 0x75	; 117
    356a:	91 e0       	ldi	r25, 0x01	; 1
    356c:	0e 94 35 19 	call	0x326a	; 0x326a <Print::print(char const*) [clone .constprop.46]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:141
  display.print(tabBand[bandIdx]);
    3570:	e0 91 53 02 	lds	r30, 0x0253	; 0x800253 <bandIdx>
    3574:	86 e0       	ldi	r24, 0x06	; 6
    3576:	e8 02       	muls	r30, r24
    3578:	f0 01       	movw	r30, r0
    357a:	11 24       	eor	r1, r1
    357c:	e2 5f       	subi	r30, 0xF2	; 242
    357e:	fb 4f       	sbci	r31, 0xFB	; 251
write():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.h:58
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
    3580:	44 81       	ldd	r20, Z+4	; 0x04
    3582:	55 81       	ldd	r21, Z+5	; 0x05
    3584:	60 81       	ld	r22, Z
    3586:	71 81       	ldd	r23, Z+1	; 0x01
    3588:	8e ec       	ldi	r24, 0xCE	; 206
    358a:	93 e0       	ldi	r25, 0x03	; 3
    358c:	0e 94 b9 0b 	call	0x1772	; 0x1772 <Print::write(unsigned char const*, unsigned int)>
setFont():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1350
    3590:	8a e1       	ldi	r24, 0x1A	; 26
    3592:	98 e0       	ldi	r25, 0x08	; 8
    3594:	90 93 e8 03 	sts	0x03E8, r25	; 0x8003e8 <display+0x1a>
    3598:	80 93 e7 03 	sts	0x03E7, r24	; 0x8003e7 <display+0x19>
_ZN12Adafruit_GFX9setCursorEii():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.h:132
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    359c:	8f e0       	ldi	r24, 0x0F	; 15
    359e:	90 e0       	ldi	r25, 0x00	; 0
    35a0:	90 93 db 03 	sts	0x03DB, r25	; 0x8003db <display+0xd>
    35a4:	80 93 da 03 	sts	0x03DA, r24	; 0x8003da <display+0xc>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.h:133
    cursor_y = y;
    35a8:	8e e1       	ldi	r24, 0x1E	; 30
    35aa:	90 e0       	ldi	r25, 0x00	; 0
    35ac:	90 93 dd 03 	sts	0x03DD, r25	; 0x8003dd <display+0xf>
    35b0:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <display+0xe>
getFormattedFrequency():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1470
 * @param  removeRightDigit number of less significant digits to be removed (FM mode only)
 * @return  point to char with the formatted current frequency
 */
char* SI4844::getFormattedFrequency(uint8_t removeRightDigit, uint8_t thousandsSeparator) {

    uint32_t f = this->getFrequencyInteger();
    35b4:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <SI4844::getFrequencyInteger() [clone .constprop.33]>
_ZN6SI484417getStatusBandModeEv():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.h:562
   * @ingroup GB1 
   * @brief Gets the current Band Mode
   * @return 0 = FM mode; 1 = AM mode; 2 = SW mode
   * @see getBandMode()
   */
  inline uint16_t  getStatusBandMode() { return all_receiver_status.refined.BANDMODE; };
    35b8:	20 91 94 03 	lds	r18, 0x0394	; 0x800394 <rx+0x2>
    35bc:	22 95       	swap	r18
    35be:	26 95       	lsr	r18
    35c0:	26 95       	lsr	r18
    35c2:	23 70       	andi	r18, 0x03	; 3
getFormattedFrequency():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1471
    if ( this->getStatusBandMode() == 0 ) { 
    35c4:	09 f0       	breq	.+2      	; 0x35c8 <displayDial()+0x1b2>
    35c6:	ea c0       	rjmp	.+468    	; 0x379c <displayDial()+0x386>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1472
        this->convertToChar(f,this->strFormattedCurrentFrequenct,6,3,thousandsSeparator,true);
    35c8:	03 e0       	ldi	r16, 0x03	; 3
    35ca:	26 e0       	ldi	r18, 0x06	; 6
    35cc:	48 eb       	ldi	r20, 0xB8	; 184
    35ce:	53 e0       	ldi	r21, 0x03	; 3
    35d0:	0e 94 55 09 	call	0x12aa	; 0x12aa <SI4844::convertToChar(unsigned long, char*, unsigned char, unsigned char, unsigned char, bool) [clone .constprop.42]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1473
        strFormattedCurrentFrequenct[7-removeRightDigit] = '\0';
    35d4:	10 92 bd 03 	sts	0x03BD, r1	; 0x8003bd <rx+0x2b>
displayDial():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:147


  display.setFont(&DSEG7_Classic_Regular_16);

  display.setCursor(15, 30);
  display.print(rx.getFormattedFrequency(2, '.'));
    35d8:	88 eb       	ldi	r24, 0xB8	; 184
    35da:	93 e0       	ldi	r25, 0x03	; 3
    35dc:	0e 94 35 19 	call	0x326a	; 0x326a <Print::print(char const*) [clone .constprop.46]>
_ZN12Adafruit_GFX9setCursorEii():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.h:132
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    35e0:	84 e6       	ldi	r24, 0x64	; 100
    35e2:	90 e0       	ldi	r25, 0x00	; 0
    35e4:	90 93 db 03 	sts	0x03DB, r25	; 0x8003db <display+0xd>
    35e8:	80 93 da 03 	sts	0x03DA, r24	; 0x8003da <display+0xc>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.h:133
    cursor_y = y;
    35ec:	84 e1       	ldi	r24, 0x14	; 20
    35ee:	90 e0       	ldi	r25, 0x00	; 0
    35f0:	90 93 dd 03 	sts	0x03DD, r25	; 0x8003dd <display+0xf>
    35f4:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <display+0xe>
setFont():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1345
    if (!gfxFont) { // And no current font struct?
      // Switching from classic to new font behavior.
      // Move cursor pos down 6 pixels so it's on baseline.
      cursor_y += 6;
    }
  } else if (gfxFont) { // NULL passed.  Current font struct defined?
    35f8:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <display+0x19>
    35fc:	90 91 e8 03 	lds	r25, 0x03E8	; 0x8003e8 <display+0x1a>
    3600:	89 2b       	or	r24, r25
    3602:	31 f0       	breq	.+12     	; 0x3610 <displayDial()+0x1fa>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1348
    // Switching from new to classic font behavior.
    // Move cursor pos up 6 pixels so it's at top-left of char.
    cursor_y -= 6;
    3604:	8e e0       	ldi	r24, 0x0E	; 14
    3606:	90 e0       	ldi	r25, 0x00	; 0
    3608:	90 93 dd 03 	sts	0x03DD, r25	; 0x8003dd <display+0xf>
    360c:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <display+0xe>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1350
  }
  gfxFont = (GFXfont *)f;
    3610:	10 92 e8 03 	sts	0x03E8, r1	; 0x8003e8 <display+0x1a>
    3614:	10 92 e7 03 	sts	0x03E7, r1	; 0x8003e7 <display+0x19>
displayDial():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:150
  display.setCursor(100, 20);
  display.setFont(NULL);
  display.print(" ");
    3618:	83 e8       	ldi	r24, 0x83	; 131
    361a:	91 e0       	ldi	r25, 0x01	; 1
    361c:	0e 94 35 19 	call	0x326a	; 0x326a <Print::print(char const*) [clone .constprop.46]>
write():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.h:58
    3620:	4d 81       	ldd	r20, Y+5	; 0x05
    3622:	5e 81       	ldd	r21, Y+6	; 0x06
    3624:	69 81       	ldd	r22, Y+1	; 0x01
    3626:	7a 81       	ldd	r23, Y+2	; 0x02
    3628:	8e ec       	ldi	r24, 0xCE	; 206
    362a:	93 e0       	ldi	r25, 0x03	; 3
    362c:	0e 94 b9 0b 	call	0x1772	; 0x1772 <Print::write(unsigned char const*, unsigned int)>
_ZN6SI484417getStatusBandModeEv():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.h:562
    3630:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <rx+0x2>
    3634:	82 95       	swap	r24
    3636:	86 95       	lsr	r24
    3638:	86 95       	lsr	r24
    363a:	83 70       	andi	r24, 0x03	; 3
displayDial():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:156
  display.print(unit);


// Stereo status does not make sense with Si4827
#ifdef SI4844_DEVICE
  if (rx.getStatusBandMode() == 0) {
    363c:	a1 f4       	brne	.+40     	; 0x3666 <displayDial()+0x250>
_ZN12Adafruit_GFX9setCursorEii():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.h:132
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    363e:	8b e4       	ldi	r24, 0x4B	; 75
    3640:	90 e0       	ldi	r25, 0x00	; 0
    3642:	90 93 db 03 	sts	0x03DB, r25	; 0x8003db <display+0xd>
    3646:	80 93 da 03 	sts	0x03DA, r24	; 0x8003da <display+0xc>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.h:133
    cursor_y = y;
    364a:	89 e1       	ldi	r24, 0x19	; 25
    364c:	90 e0       	ldi	r25, 0x00	; 0
    364e:	90 93 dd 03 	sts	0x03DD, r25	; 0x8003dd <display+0xf>
    3652:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <display+0xe>
_ZN6SI484415getStatusStereoEv():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.h:500
   * @details Applicable to Si4840/44 parts FM function only (id does not make sense for Si4827).
   * @details **Call getStatus or getAllReceiverInfo before calling this function**  
   * @return 0 = Stereo off; 1 = Stereo on
   * @see getStereoIndicator()
   */
  inline uint16_t  getStatusStereo() { return device_status.refined.STEREO; };
    3656:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <rx>
displayDial():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:158
    display.setCursor(75, 25);
    if (rx.getStatusStereo() == 1)
    365a:	82 ff       	sbrs	r24, 2
    365c:	ad c0       	rjmp	.+346    	; 0x37b8 <displayDial()+0x3a2>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:159
      display.print("Stereo");
    365e:	87 e7       	ldi	r24, 0x77	; 119
    3660:	91 e0       	ldi	r25, 0x01	; 1
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:161
    else
      display.print("Mono  ");
    3662:	0e 94 35 19 	call	0x326a	; 0x326a <Print::print(char const*) [clone .constprop.46]>
display():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:996
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void Adafruit_SSD1306::display(void) {
  TRANSACTION_START
    3666:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <display+0x1d>
    366a:	90 91 ec 03 	lds	r25, 0x03EC	; 0x8003ec <display+0x1e>
    366e:	89 2b       	or	r24, r25
    3670:	09 f4       	brne	.+2      	; 0x3674 <displayDial()+0x25e>
    3672:	a5 c0       	rjmp	.+330    	; 0x37be <displayDial()+0x3a8>
twi_setFrequency():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:142
    3674:	20 91 03 04 	lds	r18, 0x0403	; 0x800403 <display+0x35>
    3678:	30 91 04 04 	lds	r19, 0x0404	; 0x800404 <display+0x36>
    367c:	40 91 05 04 	lds	r20, 0x0405	; 0x800405 <display+0x37>
    3680:	50 91 06 04 	lds	r21, 0x0406	; 0x800406 <display+0x38>
    3684:	60 e0       	ldi	r22, 0x00	; 0
    3686:	74 e2       	ldi	r23, 0x24	; 36
    3688:	84 ef       	ldi	r24, 0xF4	; 244
    368a:	90 e0       	ldi	r25, 0x00	; 0
    368c:	0e 94 eb 23 	call	0x47d6	; 0x47d6 <__udivmodsi4>
    3690:	20 51       	subi	r18, 0x10	; 16
    3692:	31 09       	sbc	r19, r1
    3694:	41 09       	sbc	r20, r1
    3696:	51 09       	sbc	r21, r1
    3698:	56 95       	lsr	r21
    369a:	47 95       	ror	r20
    369c:	37 95       	ror	r19
    369e:	27 95       	ror	r18
    36a0:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
display():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1002
  static const uint8_t PROGMEM dlist1[] = {
      SSD1306_PAGEADDR,
      0,                      // Page start address
      0xFF,                   // Page end (not really, but works here)
      SSD1306_COLUMNADDR, 0}; // Column start address
  ssd1306_commandList(dlist1, sizeof(dlist1));
    36a4:	65 e0       	ldi	r22, 0x05	; 5
    36a6:	85 e1       	ldi	r24, 0x15	; 21
    36a8:	98 e0       	ldi	r25, 0x08	; 8
    36aa:	0e 94 50 15 	call	0x2aa0	; 0x2aa0 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char) [clone .constprop.50]>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1003
  ssd1306_command1(WIDTH - 1); // Column end address
    36ae:	60 91 d2 03 	lds	r22, 0x03D2	; 0x8003d2 <display+0x4>
    36b2:	61 50       	subi	r22, 0x01	; 1
    36b4:	8e ec       	ldi	r24, 0xCE	; 206
    36b6:	93 e0       	ldi	r25, 0x03	; 3
    36b8:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1014
  // a screen write and one immediately after should cover it.  But if
  // not, if this becomes a problem, yields() might be added in the
  // 32-byte transfer condition below.
  yield();
#endif
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
    36bc:	20 91 d4 03 	lds	r18, 0x03D4	; 0x8003d4 <display+0x6>
    36c0:	30 91 d5 03 	lds	r19, 0x03D5	; 0x8003d5 <display+0x7>
    36c4:	c9 01       	movw	r24, r18
    36c6:	07 96       	adiw	r24, 0x07	; 7
    36c8:	97 fd       	sbrc	r25, 7
    36ca:	07 96       	adiw	r24, 0x07	; 7
    36cc:	23 e0       	ldi	r18, 0x03	; 3
    36ce:	95 95       	asr	r25
    36d0:	87 95       	ror	r24
    36d2:	2a 95       	dec	r18
    36d4:	e1 f7       	brne	.-8      	; 0x36ce <displayDial()+0x2b8>
    36d6:	20 91 d2 03 	lds	r18, 0x03D2	; 0x8003d2 <display+0x4>
    36da:	30 91 d3 03 	lds	r19, 0x03D3	; 0x8003d3 <display+0x5>
    36de:	82 9f       	mul	r24, r18
    36e0:	60 01       	movw	r12, r0
    36e2:	83 9f       	mul	r24, r19
    36e4:	d0 0c       	add	r13, r0
    36e6:	92 9f       	mul	r25, r18
    36e8:	d0 0c       	add	r13, r0
    36ea:	11 24       	eor	r1, r1
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1015
  uint8_t *ptr = buffer;
    36ec:	e0 90 ed 03 	lds	r14, 0x03ED	; 0x8003ed <display+0x1f>
    36f0:	f0 90 ee 03 	lds	r15, 0x03EE	; 0x8003ee <display+0x20>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1016
  if (wire) { // I2C
    36f4:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <display+0x1d>
    36f8:	90 91 ec 03 	lds	r25, 0x03EC	; 0x8003ec <display+0x1e>
    36fc:	ce 0c       	add	r12, r14
    36fe:	df 1c       	adc	r13, r15
    3700:	89 2b       	or	r24, r25
    3702:	09 f4       	brne	.+2      	; 0x3706 <displayDial()+0x2f0>
    3704:	af c0       	rjmp	.+350    	; 0x3864 <displayDial()+0x44e>
beginTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:206
    3706:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <display+0x21>
    370a:	0e 94 4b 09 	call	0x1296	; 0x1296 <TwoWire::beginTransmission(unsigned char) [clone .constprop.51]>
display():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1018
    wire->beginTransmission(i2caddr);
    WIRE_WRITE((uint8_t)0x40);
    370e:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <display+0x1d>
    3712:	90 91 ec 03 	lds	r25, 0x03EC	; 0x8003ec <display+0x1e>
    3716:	dc 01       	movw	r26, r24
    3718:	ed 91       	ld	r30, X+
    371a:	fc 91       	ld	r31, X
    371c:	01 90       	ld	r0, Z+
    371e:	f0 81       	ld	r31, Z
    3720:	e0 2d       	mov	r30, r0
    3722:	60 e4       	ldi	r22, 0x40	; 64
    3724:	09 95       	icall
displayDial():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1019
    uint16_t bytesOut = 1;
    3726:	01 e0       	ldi	r16, 0x01	; 1
    3728:	10 e0       	ldi	r17, 0x00	; 0
    372a:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <display+0x1d>
    372e:	90 91 ec 03 	lds	r25, 0x03EC	; 0x8003ec <display+0x1e>
display():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1020
    while (count--) {
    3732:	ce 14       	cp	r12, r14
    3734:	df 04       	cpc	r13, r15
    3736:	09 f4       	brne	.+2      	; 0x373a <displayDial()+0x324>
    3738:	59 c0       	rjmp	.+178    	; 0x37ec <displayDial()+0x3d6>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1021
      if (bytesOut >= WIRE_MAX) {
    373a:	00 32       	cpi	r16, 0x20	; 32
    373c:	11 05       	cpc	r17, r1
    373e:	a0 f0       	brcs	.+40     	; 0x3768 <displayDial()+0x352>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1022
        wire->endTransmission();
    3740:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <TwoWire::endTransmission()>
beginTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:206
    3744:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <display+0x21>
    3748:	0e 94 4b 09 	call	0x1296	; 0x1296 <TwoWire::beginTransmission(unsigned char) [clone .constprop.51]>
display():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1024
        wire->beginTransmission(i2caddr);
        WIRE_WRITE((uint8_t)0x40);
    374c:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <display+0x1d>
    3750:	90 91 ec 03 	lds	r25, 0x03EC	; 0x8003ec <display+0x1e>
    3754:	dc 01       	movw	r26, r24
    3756:	ed 91       	ld	r30, X+
    3758:	fc 91       	ld	r31, X
    375a:	01 90       	ld	r0, Z+
    375c:	f0 81       	ld	r31, Z
    375e:	e0 2d       	mov	r30, r0
    3760:	60 e4       	ldi	r22, 0x40	; 64
    3762:	09 95       	icall
displayDial():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1025
        bytesOut = 1;
    3764:	01 e0       	ldi	r16, 0x01	; 1
    3766:	10 e0       	ldi	r17, 0x00	; 0
display():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1027
      }
      WIRE_WRITE(*ptr++);
    3768:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <display+0x1d>
    376c:	90 91 ec 03 	lds	r25, 0x03EC	; 0x8003ec <display+0x1e>
    3770:	f7 01       	movw	r30, r14
    3772:	61 91       	ld	r22, Z+
    3774:	7f 01       	movw	r14, r30
    3776:	dc 01       	movw	r26, r24
    3778:	ed 91       	ld	r30, X+
    377a:	fc 91       	ld	r31, X
    377c:	01 90       	ld	r0, Z+
    377e:	f0 81       	ld	r31, Z
    3780:	e0 2d       	mov	r30, r0
    3782:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1028
      bytesOut++;
    3784:	0f 5f       	subi	r16, 0xFF	; 255
    3786:	1f 4f       	sbci	r17, 0xFF	; 255
    3788:	d0 cf       	rjmp	.-96     	; 0x372a <displayDial()+0x314>
operator=():
    378a:	6e e6       	ldi	r22, 0x6E	; 110
    378c:	71 e0       	ldi	r23, 0x01	; 1
    378e:	7f ce       	rjmp	.-770    	; 0x348e <displayDial()+0x78>
displayDial():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:131
  if (rx.getStatusStationIndicator() != 0) {
    display.print("OK");
    digitalWrite(TUNE_LED, HIGH);
  }
  else {
    display.print("  ");
    3790:	82 e8       	ldi	r24, 0x82	; 130
    3792:	91 e0       	ldi	r25, 0x01	; 1
    3794:	0e 94 35 19 	call	0x326a	; 0x326a <Print::print(char const*) [clone .constprop.46]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:132
    digitalWrite(TUNE_LED, LOW);    
    3798:	60 e0       	ldi	r22, 0x00	; 0
    379a:	bc ce       	rjmp	.-648    	; 0x3514 <displayDial()+0xfe>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1475
    } else { 
         this->convertToChar(f,this->strFormattedCurrentFrequenct,5,(f > 999)? 2:0,'.',true);
    379c:	02 e0       	ldi	r16, 0x02	; 2
getFormattedFrequency():
    379e:	68 3e       	cpi	r22, 0xE8	; 232
    37a0:	a3 e0       	ldi	r26, 0x03	; 3
    37a2:	7a 07       	cpc	r23, r26
    37a4:	81 05       	cpc	r24, r1
    37a6:	91 05       	cpc	r25, r1
    37a8:	08 f4       	brcc	.+2      	; 0x37ac <displayDial()+0x396>
displayDial():
    37aa:	00 e0       	ldi	r16, 0x00	; 0
getFormattedFrequency():
    37ac:	25 e0       	ldi	r18, 0x05	; 5
    37ae:	48 eb       	ldi	r20, 0xB8	; 184
    37b0:	53 e0       	ldi	r21, 0x03	; 3
    37b2:	0e 94 55 09 	call	0x12aa	; 0x12aa <SI4844::convertToChar(unsigned long, char*, unsigned char, unsigned char, unsigned char, bool) [clone .constprop.42]>
    37b6:	10 cf       	rjmp	.-480    	; 0x35d8 <displayDial()+0x1c2>
displayDial():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:161
  if (rx.getStatusBandMode() == 0) {
    display.setCursor(75, 25);
    if (rx.getStatusStereo() == 1)
      display.print("Stereo");
    else
      display.print("Mono  ");
    37b8:	8e e7       	ldi	r24, 0x7E	; 126
    37ba:	91 e0       	ldi	r25, 0x01	; 1
    37bc:	52 cf       	rjmp	.-348    	; 0x3662 <displayDial()+0x24c>
display():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:996
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void Adafruit_SSD1306::display(void) {
  TRANSACTION_START
    37be:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <display+0x1b>
    37c2:	90 91 ea 03 	lds	r25, 0x03EA	; 0x8003ea <display+0x1c>
    37c6:	89 2b       	or	r24, r25
    37c8:	31 f0       	breq	.+12     	; 0x37d6 <displayDial()+0x3c0>
    37ca:	80 91 0c 04 	lds	r24, 0x040C	; 0x80040c <display+0x3e>
    37ce:	90 91 0d 04 	lds	r25, 0x040D	; 0x80040d <display+0x3f>
    37d2:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <SPIClass::beginTransaction(SPISettings)>
    37d6:	e0 91 fd 03 	lds	r30, 0x03FD	; 0x8003fd <display+0x2f>
    37da:	f0 91 fe 03 	lds	r31, 0x03FE	; 0x8003fe <display+0x30>
    37de:	90 81       	ld	r25, Z
    37e0:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <display+0x34>
    37e4:	80 95       	com	r24
    37e6:	89 23       	and	r24, r25
    37e8:	80 83       	st	Z, r24
    37ea:	5c cf       	rjmp	.-328    	; 0x36a4 <displayDial()+0x28e>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1030
        bytesOut = 1;
      }
      WIRE_WRITE(*ptr++);
      bytesOut++;
    }
    wire->endTransmission();
    37ec:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <TwoWire::endTransmission()>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1036
  } else { // SPI
    SSD1306_MODE_DATA
    while (count--)
      SPIwrite(*ptr++);
  }
  TRANSACTION_END
    37f0:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <display+0x1d>
    37f4:	90 91 ec 03 	lds	r25, 0x03EC	; 0x8003ec <display+0x1e>
    37f8:	89 2b       	or	r24, r25
    37fa:	09 f4       	brne	.+2      	; 0x37fe <displayDial()+0x3e8>
    37fc:	77 c0       	rjmp	.+238    	; 0x38ec <displayDial()+0x4d6>
twi_setFrequency():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:142
    37fe:	20 91 07 04 	lds	r18, 0x0407	; 0x800407 <display+0x39>
    3802:	30 91 08 04 	lds	r19, 0x0408	; 0x800408 <display+0x3a>
    3806:	40 91 09 04 	lds	r20, 0x0409	; 0x800409 <display+0x3b>
    380a:	50 91 0a 04 	lds	r21, 0x040A	; 0x80040a <display+0x3c>
    380e:	60 e0       	ldi	r22, 0x00	; 0
    3810:	74 e2       	ldi	r23, 0x24	; 36
    3812:	84 ef       	ldi	r24, 0xF4	; 244
    3814:	90 e0       	ldi	r25, 0x00	; 0
    3816:	0e 94 eb 23 	call	0x47d6	; 0x47d6 <__udivmodsi4>
    381a:	20 51       	subi	r18, 0x10	; 16
    381c:	31 09       	sbc	r19, r1
    381e:	41 09       	sbc	r20, r1
    3820:	51 09       	sbc	r21, r1
    3822:	56 95       	lsr	r21
    3824:	47 95       	ror	r20
    3826:	37 95       	ror	r19
    3828:	27 95       	ror	r18
    382a:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
displayDial():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:107
  displayDial();
}


void displayDial() {
  String unit, freqDisplay, stereo;
    382e:	ce 01       	movw	r24, r28
    3830:	0d 96       	adiw	r24, 0x0d	; 13
    3832:	0e 94 69 19 	call	0x32d2	; 0x32d2 <String::~String()>
    3836:	ce 01       	movw	r24, r28
    3838:	07 96       	adiw	r24, 0x07	; 7
    383a:	0e 94 69 19 	call	0x32d2	; 0x32d2 <String::~String()>
    383e:	ce 01       	movw	r24, r28
    3840:	01 96       	adiw	r24, 0x01	; 1
    3842:	0e 94 69 19 	call	0x32d2	; 0x32d2 <String::~String()>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:166
      display.print("Mono  ");
  }
#endif

  display.display();
}
    3846:	62 96       	adiw	r28, 0x12	; 18
    3848:	0f b6       	in	r0, 0x3f	; 63
    384a:	f8 94       	cli
    384c:	de bf       	out	0x3e, r29	; 62
    384e:	0f be       	out	0x3f, r0	; 63
    3850:	cd bf       	out	0x3d, r28	; 61
    3852:	df 91       	pop	r29
    3854:	cf 91       	pop	r28
    3856:	1f 91       	pop	r17
    3858:	0f 91       	pop	r16
    385a:	ff 90       	pop	r15
    385c:	ef 90       	pop	r14
    385e:	df 90       	pop	r13
    3860:	cf 90       	pop	r12
    3862:	08 95       	ret
display():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1032
      WIRE_WRITE(*ptr++);
      bytesOut++;
    }
    wire->endTransmission();
  } else { // SPI
    SSD1306_MODE_DATA
    3864:	e0 91 fb 03 	lds	r30, 0x03FB	; 0x8003fb <display+0x2d>
    3868:	f0 91 fc 03 	lds	r31, 0x03FC	; 0x8003fc <display+0x2e>
    386c:	80 81       	ld	r24, Z
    386e:	90 91 01 04 	lds	r25, 0x0401	; 0x800401 <display+0x33>
    3872:	89 2b       	or	r24, r25
    3874:	80 83       	st	Z, r24
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1033
    while (count--)
    3876:	ec 14       	cp	r14, r12
    3878:	fd 04       	cpc	r15, r13
    387a:	09 f4       	brne	.+2      	; 0x387e <displayDial()+0x468>
    387c:	b9 cf       	rjmp	.-142    	; 0x37f0 <displayDial()+0x3da>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1034
      SPIwrite(*ptr++);
    387e:	f7 01       	movw	r30, r14
    3880:	81 91       	ld	r24, Z+
    3882:	7f 01       	movw	r14, r30
_ZN16Adafruit_SSD13068SPIwriteEh():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:363
    @return void
    @note   See HAVE_PORTREG which defines if the method uses a port or bit-bang
   method
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    3884:	20 91 e9 03 	lds	r18, 0x03E9	; 0x8003e9 <display+0x1b>
    3888:	30 91 ea 03 	lds	r19, 0x03EA	; 0x8003ea <display+0x1c>
    388c:	23 2b       	or	r18, r19
    388e:	19 f0       	breq	.+6      	; 0x3896 <displayDial()+0x480>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:364
    (void)spi->transfer(d);
    3890:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <SPIClass::transfer(unsigned char)>
    3894:	f0 cf       	rjmp	.-32     	; 0x3876 <displayDial()+0x460>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:363
    @return void
    @note   See HAVE_PORTREG which defines if the method uses a port or bit-bang
   method
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    3896:	28 e0       	ldi	r18, 0x08	; 8
    3898:	30 e0       	ldi	r19, 0x00	; 0
displayDial():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:366
    (void)spi->transfer(d);
  } else {
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    389a:	40 e8       	ldi	r20, 0x80	; 128
    389c:	e0 91 f7 03 	lds	r30, 0x03F7	; 0x8003f7 <display+0x29>
    38a0:	f0 91 f8 03 	lds	r31, 0x03F8	; 0x8003f8 <display+0x2a>
    38a4:	90 91 ff 03 	lds	r25, 0x03FF	; 0x8003ff <display+0x31>
_ZN16Adafruit_SSD13068SPIwriteEh():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:368
#ifdef HAVE_PORTREG
      if (d & bit)
    38a8:	58 2f       	mov	r21, r24
    38aa:	54 23       	and	r21, r20
    38ac:	d9 f0       	breq	.+54     	; 0x38e4 <displayDial()+0x4ce>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:369
        *mosiPort |= mosiPinMask;
    38ae:	50 81       	ld	r21, Z
    38b0:	95 2b       	or	r25, r21
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:371
      else
        *mosiPort &= ~mosiPinMask;
    38b2:	90 83       	st	Z, r25
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:372
      *clkPort |= clkPinMask;  // Clock high
    38b4:	e0 91 f9 03 	lds	r30, 0x03F9	; 0x8003f9 <display+0x2b>
    38b8:	f0 91 fa 03 	lds	r31, 0x03FA	; 0x8003fa <display+0x2c>
    38bc:	90 81       	ld	r25, Z
    38be:	50 91 00 04 	lds	r21, 0x0400	; 0x800400 <display+0x32>
    38c2:	95 2b       	or	r25, r21
    38c4:	90 83       	st	Z, r25
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:373
      *clkPort &= ~clkPinMask; // Clock low
    38c6:	e0 91 f9 03 	lds	r30, 0x03F9	; 0x8003f9 <display+0x2b>
    38ca:	f0 91 fa 03 	lds	r31, 0x03FA	; 0x8003fa <display+0x2c>
    38ce:	50 81       	ld	r21, Z
    38d0:	90 91 00 04 	lds	r25, 0x0400	; 0x800400 <display+0x32>
    38d4:	90 95       	com	r25
    38d6:	95 23       	and	r25, r21
    38d8:	90 83       	st	Z, r25
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:366
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    (void)spi->transfer(d);
  } else {
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    38da:	46 95       	lsr	r20
    38dc:	21 50       	subi	r18, 0x01	; 1
    38de:	31 09       	sbc	r19, r1
    38e0:	e9 f6       	brne	.-70     	; 0x389c <displayDial()+0x486>
    38e2:	c9 cf       	rjmp	.-110    	; 0x3876 <displayDial()+0x460>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:371
#ifdef HAVE_PORTREG
      if (d & bit)
        *mosiPort |= mosiPinMask;
      else
        *mosiPort &= ~mosiPinMask;
    38e4:	50 81       	ld	r21, Z
    38e6:	90 95       	com	r25
    38e8:	95 23       	and	r25, r21
    38ea:	e3 cf       	rjmp	.-58     	; 0x38b2 <displayDial()+0x49c>
display():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1036
  } else { // SPI
    SSD1306_MODE_DATA
    while (count--)
      SPIwrite(*ptr++);
  }
  TRANSACTION_END
    38ec:	e0 91 fd 03 	lds	r30, 0x03FD	; 0x8003fd <display+0x2f>
    38f0:	f0 91 fe 03 	lds	r31, 0x03FE	; 0x8003fe <display+0x30>
    38f4:	80 81       	ld	r24, Z
    38f6:	90 91 02 04 	lds	r25, 0x0402	; 0x800402 <display+0x34>
    38fa:	89 2b       	or	r24, r25
    38fc:	80 83       	st	Z, r24
    38fe:	97 cf       	rjmp	.-210    	; 0x382e <displayDial()+0x418>

00003900 <__vector_16>:
__vector_16():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    3900:	1f 92       	push	r1
    3902:	0f 92       	push	r0
    3904:	0f b6       	in	r0, 0x3f	; 63
    3906:	0f 92       	push	r0
    3908:	11 24       	eor	r1, r1
    390a:	2f 93       	push	r18
    390c:	3f 93       	push	r19
    390e:	8f 93       	push	r24
    3910:	9f 93       	push	r25
    3912:	af 93       	push	r26
    3914:	bf 93       	push	r27
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
    3916:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <timer0_millis>
    391a:	90 91 be 02 	lds	r25, 0x02BE	; 0x8002be <timer0_millis+0x1>
    391e:	a0 91 bf 02 	lds	r26, 0x02BF	; 0x8002bf <timer0_millis+0x2>
    3922:	b0 91 c0 02 	lds	r27, 0x02C0	; 0x8002c0 <timer0_millis+0x3>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
    3926:	30 91 bc 02 	lds	r19, 0x02BC	; 0x8002bc <timer0_fract>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
    392a:	23 e0       	ldi	r18, 0x03	; 3
    392c:	23 0f       	add	r18, r19
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
    392e:	2d 37       	cpi	r18, 0x7D	; 125
    3930:	68 f1       	brcs	.+90     	; 0x398c <__vector_16+0x8c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
    3932:	26 e8       	ldi	r18, 0x86	; 134
    3934:	23 0f       	add	r18, r19
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
    3936:	02 96       	adiw	r24, 0x02	; 2
    3938:	a1 1d       	adc	r26, r1
    393a:	b1 1d       	adc	r27, r1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
    393c:	20 93 bc 02 	sts	0x02BC, r18	; 0x8002bc <timer0_fract>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
    3940:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <timer0_millis>
    3944:	90 93 be 02 	sts	0x02BE, r25	; 0x8002be <timer0_millis+0x1>
    3948:	a0 93 bf 02 	sts	0x02BF, r26	; 0x8002bf <timer0_millis+0x2>
    394c:	b0 93 c0 02 	sts	0x02C0, r27	; 0x8002c0 <timer0_millis+0x3>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
    3950:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <timer0_overflow_count>
    3954:	90 91 c2 02 	lds	r25, 0x02C2	; 0x8002c2 <timer0_overflow_count+0x1>
    3958:	a0 91 c3 02 	lds	r26, 0x02C3	; 0x8002c3 <timer0_overflow_count+0x2>
    395c:	b0 91 c4 02 	lds	r27, 0x02C4	; 0x8002c4 <timer0_overflow_count+0x3>
    3960:	01 96       	adiw	r24, 0x01	; 1
    3962:	a1 1d       	adc	r26, r1
    3964:	b1 1d       	adc	r27, r1
    3966:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <timer0_overflow_count>
    396a:	90 93 c2 02 	sts	0x02C2, r25	; 0x8002c2 <timer0_overflow_count+0x1>
    396e:	a0 93 c3 02 	sts	0x02C3, r26	; 0x8002c3 <timer0_overflow_count+0x2>
    3972:	b0 93 c4 02 	sts	0x02C4, r27	; 0x8002c4 <timer0_overflow_count+0x3>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:213
#endif
}
    3976:	bf 91       	pop	r27
    3978:	af 91       	pop	r26
    397a:	9f 91       	pop	r25
    397c:	8f 91       	pop	r24
    397e:	3f 91       	pop	r19
    3980:	2f 91       	pop	r18
    3982:	0f 90       	pop	r0
    3984:	0f be       	out	0x3f, r0	; 63
    3986:	0f 90       	pop	r0
    3988:	1f 90       	pop	r1
    398a:	18 95       	reti
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
    398c:	01 96       	adiw	r24, 0x01	; 1
    398e:	a1 1d       	adc	r26, r1
    3990:	b1 1d       	adc	r27, r1
    3992:	d4 cf       	rjmp	.-88     	; 0x393c <__vector_16+0x3c>

00003994 <__vector_2>:
__vector_2():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WInterrupts.c:489
|| defined(__AVR_ATmega48PB__)  || defined(__AVR_ATmega88__)  || defined(__AVR_ATmega88P__)  \
|| defined(__AVR_ATmega88PB__)  || defined(__AVR_ATmega168__) || defined(__AVR_ATmega168P__) \
|| defined(__AVR_ATmega168PB__) || defined(__AVR_ATmega328__) || defined(__AVR_ATmega328P__) \
|| defined(__AVR_ATmega328PB__)
  IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
  IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    3994:	1f 92       	push	r1
    3996:	0f 92       	push	r0
    3998:	0f b6       	in	r0, 0x3f	; 63
    399a:	0f 92       	push	r0
    399c:	11 24       	eor	r1, r1
    399e:	2f 93       	push	r18
    39a0:	3f 93       	push	r19
    39a2:	4f 93       	push	r20
    39a4:	5f 93       	push	r21
    39a6:	6f 93       	push	r22
    39a8:	7f 93       	push	r23
    39aa:	8f 93       	push	r24
    39ac:	9f 93       	push	r25
    39ae:	af 93       	push	r26
    39b0:	bf 93       	push	r27
    39b2:	ef 93       	push	r30
    39b4:	ff 93       	push	r31
    39b6:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_start+0x2>
    39ba:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <__data_start+0x3>
    39be:	09 95       	icall
    39c0:	ff 91       	pop	r31
    39c2:	ef 91       	pop	r30
    39c4:	bf 91       	pop	r27
    39c6:	af 91       	pop	r26
    39c8:	9f 91       	pop	r25
    39ca:	8f 91       	pop	r24
    39cc:	7f 91       	pop	r23
    39ce:	6f 91       	pop	r22
    39d0:	5f 91       	pop	r21
    39d2:	4f 91       	pop	r20
    39d4:	3f 91       	pop	r19
    39d6:	2f 91       	pop	r18
    39d8:	0f 90       	pop	r0
    39da:	0f be       	out	0x3f, r0	; 63
    39dc:	0f 90       	pop	r0
    39de:	1f 90       	pop	r1
    39e0:	18 95       	reti

000039e2 <__vector_1>:
__vector_1():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WInterrupts.c:488
#elif defined(__AVR_ATmega8__)  || defined(__AVR_ATmega48__)  || defined(__AVR_ATmega48P__)  \
|| defined(__AVR_ATmega48PB__)  || defined(__AVR_ATmega88__)  || defined(__AVR_ATmega88P__)  \
|| defined(__AVR_ATmega88PB__)  || defined(__AVR_ATmega168__) || defined(__AVR_ATmega168P__) \
|| defined(__AVR_ATmega168PB__) || defined(__AVR_ATmega328__) || defined(__AVR_ATmega328P__) \
|| defined(__AVR_ATmega328PB__)
  IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    39e2:	1f 92       	push	r1
    39e4:	0f 92       	push	r0
    39e6:	0f b6       	in	r0, 0x3f	; 63
    39e8:	0f 92       	push	r0
    39ea:	11 24       	eor	r1, r1
    39ec:	2f 93       	push	r18
    39ee:	3f 93       	push	r19
    39f0:	4f 93       	push	r20
    39f2:	5f 93       	push	r21
    39f4:	6f 93       	push	r22
    39f6:	7f 93       	push	r23
    39f8:	8f 93       	push	r24
    39fa:	9f 93       	push	r25
    39fc:	af 93       	push	r26
    39fe:	bf 93       	push	r27
    3a00:	ef 93       	push	r30
    3a02:	ff 93       	push	r31
    3a04:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
    3a08:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
    3a0c:	09 95       	icall
    3a0e:	ff 91       	pop	r31
    3a10:	ef 91       	pop	r30
    3a12:	bf 91       	pop	r27
    3a14:	af 91       	pop	r26
    3a16:	9f 91       	pop	r25
    3a18:	8f 91       	pop	r24
    3a1a:	7f 91       	pop	r23
    3a1c:	6f 91       	pop	r22
    3a1e:	5f 91       	pop	r21
    3a20:	4f 91       	pop	r20
    3a22:	3f 91       	pop	r19
    3a24:	2f 91       	pop	r18
    3a26:	0f 90       	pop	r0
    3a28:	0f be       	out	0x3f, r0	; 63
    3a2a:	0f 90       	pop	r0
    3a2c:	1f 90       	pop	r1
    3a2e:	18 95       	reti

00003a30 <__vector_19>:
__vector_19():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    3a30:	1f 92       	push	r1
    3a32:	0f 92       	push	r0
    3a34:	0f b6       	in	r0, 0x3f	; 63
    3a36:	0f 92       	push	r0
    3a38:	11 24       	eor	r1, r1
    3a3a:	2f 93       	push	r18
    3a3c:	3f 93       	push	r19
    3a3e:	4f 93       	push	r20
    3a40:	5f 93       	push	r21
    3a42:	6f 93       	push	r22
    3a44:	7f 93       	push	r23
    3a46:	8f 93       	push	r24
    3a48:	9f 93       	push	r25
    3a4a:	af 93       	push	r26
    3a4c:	bf 93       	push	r27
    3a4e:	ef 93       	push	r30
    3a50:	ff 93       	push	r31
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    3a52:	85 ef       	ldi	r24, 0xF5	; 245
    3a54:	92 e0       	ldi	r25, 0x02	; 2
    3a56:	0e 94 33 0a 	call	0x1466	; 0x1466 <HardwareSerial::_tx_udr_empty_irq()>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial0.cpp:65
}
    3a5a:	ff 91       	pop	r31
    3a5c:	ef 91       	pop	r30
    3a5e:	bf 91       	pop	r27
    3a60:	af 91       	pop	r26
    3a62:	9f 91       	pop	r25
    3a64:	8f 91       	pop	r24
    3a66:	7f 91       	pop	r23
    3a68:	6f 91       	pop	r22
    3a6a:	5f 91       	pop	r21
    3a6c:	4f 91       	pop	r20
    3a6e:	3f 91       	pop	r19
    3a70:	2f 91       	pop	r18
    3a72:	0f 90       	pop	r0
    3a74:	0f be       	out	0x3f, r0	; 63
    3a76:	0f 90       	pop	r0
    3a78:	1f 90       	pop	r1
    3a7a:	18 95       	reti

00003a7c <__vector_18>:
__vector_18():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RX_vect)
  ISR(USART_RX_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    3a7c:	1f 92       	push	r1
    3a7e:	0f 92       	push	r0
    3a80:	0f b6       	in	r0, 0x3f	; 63
    3a82:	0f 92       	push	r0
    3a84:	11 24       	eor	r1, r1
    3a86:	2f 93       	push	r18
    3a88:	8f 93       	push	r24
    3a8a:	9f 93       	push	r25
    3a8c:	ef 93       	push	r30
    3a8e:	ff 93       	push	r31
_rx_complete_irq():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    3a90:	e0 91 05 03 	lds	r30, 0x0305	; 0x800305 <Serial+0x10>
    3a94:	f0 91 06 03 	lds	r31, 0x0306	; 0x800306 <Serial+0x11>
    3a98:	80 81       	ld	r24, Z
    3a9a:	e0 91 0b 03 	lds	r30, 0x030B	; 0x80030b <Serial+0x16>
    3a9e:	f0 91 0c 03 	lds	r31, 0x030C	; 0x80030c <Serial+0x17>
    3aa2:	82 fd       	sbrc	r24, 2
    3aa4:	1b c0       	rjmp	.+54     	; 0x3adc <__vector_18+0x60>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    3aa6:	90 81       	ld	r25, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    3aa8:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <Serial+0x19>
    3aac:	8f 5f       	subi	r24, 0xFF	; 255
    3aae:	8f 73       	andi	r24, 0x3F	; 63
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    3ab0:	20 91 0f 03 	lds	r18, 0x030F	; 0x80030f <Serial+0x1a>
    3ab4:	82 17       	cp	r24, r18
    3ab6:	41 f0       	breq	.+16     	; 0x3ac8 <__vector_18+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
    3ab8:	e0 91 0e 03 	lds	r30, 0x030E	; 0x80030e <Serial+0x19>
    3abc:	f0 e0       	ldi	r31, 0x00	; 0
    3abe:	eb 50       	subi	r30, 0x0B	; 11
    3ac0:	fd 4f       	sbci	r31, 0xFD	; 253
    3ac2:	95 8f       	std	Z+29, r25	; 0x1d
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
    3ac4:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <Serial+0x19>
__vector_18():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    3ac8:	ff 91       	pop	r31
    3aca:	ef 91       	pop	r30
    3acc:	9f 91       	pop	r25
    3ace:	8f 91       	pop	r24
    3ad0:	2f 91       	pop	r18
    3ad2:	0f 90       	pop	r0
    3ad4:	0f be       	out	0x3f, r0	; 63
    3ad6:	0f 90       	pop	r0
    3ad8:	1f 90       	pop	r1
    3ada:	18 95       	reti
_rx_complete_irq():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    3adc:	80 81       	ld	r24, Z
    3ade:	f4 cf       	rjmp	.-24     	; 0x3ac8 <__vector_18+0x4c>

00003ae0 <__vector_24>:
__vector_24():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:534
  }
  return(flag);
}

ISR(TWI_vect)
{
    3ae0:	1f 92       	push	r1
    3ae2:	0f 92       	push	r0
    3ae4:	0f b6       	in	r0, 0x3f	; 63
    3ae6:	0f 92       	push	r0
    3ae8:	11 24       	eor	r1, r1
    3aea:	2f 93       	push	r18
    3aec:	3f 93       	push	r19
    3aee:	4f 93       	push	r20
    3af0:	5f 93       	push	r21
    3af2:	6f 93       	push	r22
    3af4:	7f 93       	push	r23
    3af6:	8f 93       	push	r24
    3af8:	9f 93       	push	r25
    3afa:	af 93       	push	r26
    3afc:	bf 93       	push	r27
    3afe:	ef 93       	push	r30
    3b00:	ff 93       	push	r31
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:535
  switch(TW_STATUS){
    3b02:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    3b06:	88 7f       	andi	r24, 0xF8	; 248
    3b08:	80 36       	cpi	r24, 0x60	; 96
    3b0a:	09 f4       	brne	.+2      	; 0x3b0e <__vector_24+0x2e>
    3b0c:	4a c0       	rjmp	.+148    	; 0x3ba2 <__vector_24+0xc2>
    3b0e:	f0 f5       	brcc	.+124    	; 0x3b8c <__vector_24+0xac>
    3b10:	88 32       	cpi	r24, 0x28	; 40
    3b12:	09 f4       	brne	.+2      	; 0x3b16 <__vector_24+0x36>
    3b14:	a7 c0       	rjmp	.+334    	; 0x3c64 <__vector_24+0x184>
    3b16:	18 f5       	brcc	.+70     	; 0x3b5e <__vector_24+0x7e>
    3b18:	80 31       	cpi	r24, 0x10	; 16
    3b1a:	09 f4       	brne	.+2      	; 0x3b1e <__vector_24+0x3e>
    3b1c:	9b c0       	rjmp	.+310    	; 0x3c54 <__vector_24+0x174>
    3b1e:	b8 f4       	brcc	.+46     	; 0x3b4e <__vector_24+0x6e>
    3b20:	88 23       	and	r24, r24
    3b22:	09 f4       	brne	.+2      	; 0x3b26 <__vector_24+0x46>
    3b24:	05 c1       	rjmp	.+522    	; 0x3d30 <__vector_24+0x250>
    3b26:	88 30       	cpi	r24, 0x08	; 8
    3b28:	09 f4       	brne	.+2      	; 0x3b2c <__vector_24+0x4c>
    3b2a:	94 c0       	rjmp	.+296    	; 0x3c54 <__vector_24+0x174>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:696
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    3b2c:	ff 91       	pop	r31
    3b2e:	ef 91       	pop	r30
    3b30:	bf 91       	pop	r27
    3b32:	af 91       	pop	r26
    3b34:	9f 91       	pop	r25
    3b36:	8f 91       	pop	r24
    3b38:	7f 91       	pop	r23
    3b3a:	6f 91       	pop	r22
    3b3c:	5f 91       	pop	r21
    3b3e:	4f 91       	pop	r20
    3b40:	3f 91       	pop	r19
    3b42:	2f 91       	pop	r18
    3b44:	0f 90       	pop	r0
    3b46:	0f be       	out	0x3f, r0	; 63
    3b48:	0f 90       	pop	r0
    3b4a:	1f 90       	pop	r1
    3b4c:	18 95       	reti
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    3b4e:	88 31       	cpi	r24, 0x18	; 24
    3b50:	09 f4       	brne	.+2      	; 0x3b54 <__vector_24+0x74>
    3b52:	88 c0       	rjmp	.+272    	; 0x3c64 <__vector_24+0x184>
    3b54:	80 32       	cpi	r24, 0x20	; 32
    3b56:	51 f7       	brne	.-44     	; 0x3b2c <__vector_24+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:570
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    3b58:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <twi_error>
    3b5c:	14 c0       	rjmp	.+40     	; 0x3b86 <__vector_24+0xa6>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    3b5e:	80 34       	cpi	r24, 0x40	; 64
    3b60:	09 f4       	brne	.+2      	; 0x3b64 <__vector_24+0x84>
    3b62:	a5 c0       	rjmp	.+330    	; 0x3cae <__vector_24+0x1ce>
    3b64:	40 f4       	brcc	.+16     	; 0x3b76 <__vector_24+0x96>
    3b66:	80 33       	cpi	r24, 0x30	; 48
    3b68:	b9 f3       	breq	.-18     	; 0x3b58 <__vector_24+0x78>
    3b6a:	88 33       	cpi	r24, 0x38	; 56
    3b6c:	f9 f6       	brne	.-66     	; 0x3b2c <__vector_24+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:574
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    3b6e:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <twi_error>
twi_reply():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3b72:	85 ec       	ldi	r24, 0xC5	; 197
    3b74:	bc c0       	rjmp	.+376    	; 0x3cee <__vector_24+0x20e>
__vector_24():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    3b76:	80 35       	cpi	r24, 0x50	; 80
    3b78:	09 f4       	brne	.+2      	; 0x3b7c <__vector_24+0x9c>
    3b7a:	89 c0       	rjmp	.+274    	; 0x3c8e <__vector_24+0x1ae>
    3b7c:	88 35       	cpi	r24, 0x58	; 88
    3b7e:	09 f4       	brne	.+2      	; 0x3b82 <__vector_24+0xa2>
    3b80:	9e c0       	rjmp	.+316    	; 0x3cbe <__vector_24+0x1de>
    3b82:	88 34       	cpi	r24, 0x48	; 72
    3b84:	99 f6       	brne	.-90     	; 0x3b2c <__vector_24+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:693
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
    3b86:	0e 94 3d 14 	call	0x287a	; 0x287a <twi_stop>
    3b8a:	d0 cf       	rjmp	.-96     	; 0x3b2c <__vector_24+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    3b8c:	88 39       	cpi	r24, 0x98	; 152
    3b8e:	09 f4       	brne	.+2      	; 0x3b92 <__vector_24+0xb2>
    3b90:	94 c0       	rjmp	.+296    	; 0x3cba <__vector_24+0x1da>
    3b92:	38 f5       	brcc	.+78     	; 0x3be2 <__vector_24+0x102>
    3b94:	88 37       	cpi	r24, 0x78	; 120
    3b96:	29 f0       	breq	.+10     	; 0x3ba2 <__vector_24+0xc2>
    3b98:	50 f4       	brcc	.+20     	; 0x3bae <__vector_24+0xce>
    3b9a:	88 36       	cpi	r24, 0x68	; 104
    3b9c:	11 f0       	breq	.+4      	; 0x3ba2 <__vector_24+0xc2>
    3b9e:	80 37       	cpi	r24, 0x70	; 112
    3ba0:	29 f6       	brne	.-118    	; 0x3b2c <__vector_24+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:616
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    3ba2:	83 e0       	ldi	r24, 0x03	; 3
    3ba4:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <twi_state>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:618
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    3ba8:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <twi_rxBufferIndex>
    3bac:	57 c0       	rjmp	.+174    	; 0x3c5c <__vector_24+0x17c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    3bae:	88 38       	cpi	r24, 0x88	; 136
    3bb0:	09 f4       	brne	.+2      	; 0x3bb4 <__vector_24+0xd4>
    3bb2:	83 c0       	rjmp	.+262    	; 0x3cba <__vector_24+0x1da>
    3bb4:	80 39       	cpi	r24, 0x90	; 144
    3bb6:	19 f0       	breq	.+6      	; 0x3bbe <__vector_24+0xde>
    3bb8:	80 38       	cpi	r24, 0x80	; 128
    3bba:	09 f0       	breq	.+2      	; 0x3bbe <__vector_24+0xde>
    3bbc:	b7 cf       	rjmp	.-146    	; 0x3b2c <__vector_24+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:624
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    3bbe:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <twi_rxBufferIndex>
    3bc2:	80 32       	cpi	r24, 0x20	; 32
    3bc4:	08 f0       	brcs	.+2      	; 0x3bc8 <__vector_24+0xe8>
    3bc6:	79 c0       	rjmp	.+242    	; 0x3cba <__vector_24+0x1da>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:626
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    3bc8:	e0 91 b6 02 	lds	r30, 0x02B6	; 0x8002b6 <twi_rxBufferIndex>
    3bcc:	81 e0       	ldi	r24, 0x01	; 1
    3bce:	8e 0f       	add	r24, r30
    3bd0:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <twi_rxBufferIndex>
    3bd4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    3bd8:	f0 e0       	ldi	r31, 0x00	; 0
    3bda:	ea 56       	subi	r30, 0x6A	; 106
    3bdc:	fd 4f       	sbci	r31, 0xFD	; 253
    3bde:	80 83       	st	Z, r24
    3be0:	3d c0       	rjmp	.+122    	; 0x3c5c <__vector_24+0x17c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    3be2:	80 3b       	cpi	r24, 0xB0	; 176
    3be4:	39 f0       	breq	.+14     	; 0x3bf4 <__vector_24+0x114>
    3be6:	e0 f4       	brcc	.+56     	; 0x3c20 <__vector_24+0x140>
    3be8:	80 3a       	cpi	r24, 0xA0	; 160
    3bea:	09 f4       	brne	.+2      	; 0x3bee <__vector_24+0x10e>
    3bec:	85 c0       	rjmp	.+266    	; 0x3cf8 <__vector_24+0x218>
    3bee:	88 3a       	cpi	r24, 0xA8	; 168
    3bf0:	09 f0       	breq	.+2      	; 0x3bf4 <__vector_24+0x114>
    3bf2:	9c cf       	rjmp	.-200    	; 0x3b2c <__vector_24+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:655

    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    3bf4:	84 e0       	ldi	r24, 0x04	; 4
    3bf6:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <twi_state>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:657
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    3bfa:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <twi_txBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:659
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    3bfe:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <twi_txBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:662
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    3c02:	e0 91 ba 02 	lds	r30, 0x02BA	; 0x8002ba <twi_onSlaveTransmit>
    3c06:	f0 91 bb 02 	lds	r31, 0x02BB	; 0x8002bb <twi_onSlaveTransmit+0x1>
    3c0a:	09 95       	icall
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:664
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    3c0c:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <twi_txBufferLength>
    3c10:	81 11       	cpse	r24, r1
    3c12:	0f c0       	rjmp	.+30     	; 0x3c32 <__vector_24+0x152>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:665
        twi_txBufferLength = 1;
    3c14:	81 e0       	ldi	r24, 0x01	; 1
    3c16:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <twi_txBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:666
        twi_txBuffer[0] = 0x00;
    3c1a:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <twi_txBuffer>
    3c1e:	09 c0       	rjmp	.+18     	; 0x3c32 <__vector_24+0x152>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    3c20:	80 3c       	cpi	r24, 0xC0	; 192
    3c22:	09 f4       	brne	.+2      	; 0x3c26 <__vector_24+0x146>
    3c24:	a6 cf       	rjmp	.-180    	; 0x3b72 <__vector_24+0x92>
    3c26:	88 3c       	cpi	r24, 0xC8	; 200
    3c28:	09 f4       	brne	.+2      	; 0x3c2c <__vector_24+0x14c>
    3c2a:	a3 cf       	rjmp	.-186    	; 0x3b72 <__vector_24+0x92>
    3c2c:	88 3b       	cpi	r24, 0xB8	; 184
    3c2e:	09 f0       	breq	.+2      	; 0x3c32 <__vector_24+0x152>
    3c30:	7d cf       	rjmp	.-262    	; 0x3b2c <__vector_24+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:672
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    3c32:	e0 91 95 02 	lds	r30, 0x0295	; 0x800295 <twi_txBufferIndex>
    3c36:	81 e0       	ldi	r24, 0x01	; 1
    3c38:	8e 0f       	add	r24, r30
    3c3a:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <twi_txBufferIndex>
    3c3e:	f0 e0       	ldi	r31, 0x00	; 0
    3c40:	ec 58       	subi	r30, 0x8C	; 140
    3c42:	fd 4f       	sbci	r31, 0xFD	; 253
    3c44:	80 81       	ld	r24, Z
    3c46:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:674
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    3c4a:	90 91 95 02 	lds	r25, 0x0295	; 0x800295 <twi_txBufferIndex>
    3c4e:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <twi_txBufferLength>
    3c52:	31 c0       	rjmp	.+98     	; 0x3cb6 <__vector_24+0x1d6>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:540
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    3c54:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <twi_slarw>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:550
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    3c58:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
twi_reply():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3c5c:	85 ec       	ldi	r24, 0xC5	; 197
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:423
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3c5e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    3c62:	64 cf       	rjmp	.-312    	; 0x3b2c <__vector_24+0x4c>
__vector_24():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:548

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3c64:	90 91 eb 02 	lds	r25, 0x02EB	; 0x8002eb <twi_masterBufferIndex>
    3c68:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <twi_masterBufferLength>
    3c6c:	98 17       	cp	r25, r24
    3c6e:	b8 f5       	brcc	.+110    	; 0x3cde <__vector_24+0x1fe>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:550
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    3c70:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <twi_masterBuffer>
    3c74:	90 91 ed 02 	lds	r25, 0x02ED	; 0x8002ed <twi_masterBuffer+0x1>
    3c78:	e0 91 eb 02 	lds	r30, 0x02EB	; 0x8002eb <twi_masterBufferIndex>
    3c7c:	21 e0       	ldi	r18, 0x01	; 1
    3c7e:	2e 0f       	add	r18, r30
    3c80:	20 93 eb 02 	sts	0x02EB, r18	; 0x8002eb <twi_masterBufferIndex>
    3c84:	e8 0f       	add	r30, r24
    3c86:	f9 2f       	mov	r31, r25
    3c88:	f1 1d       	adc	r31, r1
    3c8a:	80 81       	ld	r24, Z
    3c8c:	e5 cf       	rjmp	.-54     	; 0x3c58 <__vector_24+0x178>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:581
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3c8e:	20 91 ec 02 	lds	r18, 0x02EC	; 0x8002ec <twi_masterBuffer>
    3c92:	30 91 ed 02 	lds	r19, 0x02ED	; 0x8002ed <twi_masterBuffer+0x1>
    3c96:	e0 91 eb 02 	lds	r30, 0x02EB	; 0x8002eb <twi_masterBufferIndex>
    3c9a:	81 e0       	ldi	r24, 0x01	; 1
    3c9c:	8e 0f       	add	r24, r30
    3c9e:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <twi_masterBufferIndex>
    3ca2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    3ca6:	e2 0f       	add	r30, r18
    3ca8:	f3 2f       	mov	r31, r19
    3caa:	f1 1d       	adc	r31, r1
    3cac:	80 83       	st	Z, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:585
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3cae:	90 91 eb 02 	lds	r25, 0x02EB	; 0x8002eb <twi_masterBufferIndex>
    3cb2:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <twi_masterBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:674
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    3cb6:	98 17       	cp	r25, r24
    3cb8:	88 f2       	brcs	.-94     	; 0x3c5c <__vector_24+0x17c>
twi_reply():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:423
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3cba:	85 e8       	ldi	r24, 0x85	; 133
    3cbc:	d0 cf       	rjmp	.-96     	; 0x3c5e <__vector_24+0x17e>
__vector_24():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:593
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3cbe:	20 91 ec 02 	lds	r18, 0x02EC	; 0x8002ec <twi_masterBuffer>
    3cc2:	30 91 ed 02 	lds	r19, 0x02ED	; 0x8002ed <twi_masterBuffer+0x1>
    3cc6:	e0 91 eb 02 	lds	r30, 0x02EB	; 0x8002eb <twi_masterBufferIndex>
    3cca:	81 e0       	ldi	r24, 0x01	; 1
    3ccc:	8e 0f       	add	r24, r30
    3cce:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <twi_masterBufferIndex>
    3cd2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    3cd6:	e2 0f       	add	r30, r18
    3cd8:	f3 2f       	mov	r31, r19
    3cda:	f1 1d       	adc	r31, r1
    3cdc:	80 83       	st	Z, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:594
  if (twi_sendStop)
    3cde:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <twi_sendStop>
    3ce2:	81 11       	cpse	r24, r1
    3ce4:	50 cf       	rjmp	.-352    	; 0x3b86 <__vector_24+0xa6>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:597
          twi_stop();
  else {
    twi_inRepStart = true;  // we're going to send the START
    3ce6:	81 e0       	ldi	r24, 0x01	; 1
    3ce8:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <twi_inRepStart>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:601
    // don't enable the interrupt. We'll generate the start, but we
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    3cec:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3cee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
__vector_24():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:685
    case TW_ST_DATA_NACK: // received nack, we are done
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    3cf2:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <twi_state>
    3cf6:	1a cf       	rjmp	.-460    	; 0x3b2c <__vector_24+0x4c>
twi_releaseBus():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:474
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    3cf8:	85 ec       	ldi	r24, 0xC5	; 197
    3cfa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:477

  // update twi state
  twi_state = TWI_READY;
    3cfe:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <twi_state>
__vector_24():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:637
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    3d02:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <twi_rxBufferIndex>
    3d06:	80 32       	cpi	r24, 0x20	; 32
    3d08:	30 f4       	brcc	.+12     	; 0x3d16 <__vector_24+0x236>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:638
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    3d0a:	e0 91 b6 02 	lds	r30, 0x02B6	; 0x8002b6 <twi_rxBufferIndex>
    3d0e:	f0 e0       	ldi	r31, 0x00	; 0
    3d10:	ea 56       	subi	r30, 0x6A	; 106
    3d12:	fd 4f       	sbci	r31, 0xFD	; 253
    3d14:	10 82       	st	Z, r1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:641
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    3d16:	60 91 b6 02 	lds	r22, 0x02B6	; 0x8002b6 <twi_rxBufferIndex>
    3d1a:	70 e0       	ldi	r23, 0x00	; 0
    3d1c:	e0 91 b8 02 	lds	r30, 0x02B8	; 0x8002b8 <twi_onSlaveReceive>
    3d20:	f0 91 b9 02 	lds	r31, 0x02B9	; 0x8002b9 <twi_onSlaveReceive+0x1>
    3d24:	86 e9       	ldi	r24, 0x96	; 150
    3d26:	92 e0       	ldi	r25, 0x02	; 2
    3d28:	09 95       	icall
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:643
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    3d2a:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <twi_rxBufferIndex>
    3d2e:	fe ce       	rjmp	.-516    	; 0x3b2c <__vector_24+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:692

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    3d30:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <twi_error>
    3d34:	28 cf       	rjmp	.-432    	; 0x3b86 <__vector_24+0xa6>

00003d36 <global constructors keyed to 65535_0_SI4844_01_OLED_SLIDE_SWITCH.ino.cpp.o.4047>:
_GLOBAL__I_65535_0_SI4844_01_OLED_SLIDE_SWITCH.ino.cpp.o.4047():
    3d36:	cf 93       	push	r28
    3d38:	df 93       	push	r29
    3d3a:	e5 ef       	ldi	r30, 0xF5	; 245
    3d3c:	f2 e0       	ldi	r31, 0x02	; 2
    3d3e:	13 82       	std	Z+3, r1	; 0x03
    3d40:	12 82       	std	Z+2, r1	; 0x02
    3d42:	88 ee       	ldi	r24, 0xE8	; 232
    3d44:	93 e0       	ldi	r25, 0x03	; 3
    3d46:	a0 e0       	ldi	r26, 0x00	; 0
    3d48:	b0 e0       	ldi	r27, 0x00	; 0
    3d4a:	84 83       	std	Z+4, r24	; 0x04
    3d4c:	95 83       	std	Z+5, r25	; 0x05
    3d4e:	a6 83       	std	Z+6, r26	; 0x06
    3d50:	b7 83       	std	Z+7, r27	; 0x07
    3d52:	28 e1       	ldi	r18, 0x18	; 24
    3d54:	31 e0       	ldi	r19, 0x01	; 1
    3d56:	31 83       	std	Z+1, r19	; 0x01
    3d58:	20 83       	st	Z, r18
    3d5a:	25 ec       	ldi	r18, 0xC5	; 197
    3d5c:	30 e0       	ldi	r19, 0x00	; 0
    3d5e:	35 87       	std	Z+13, r19	; 0x0d
    3d60:	24 87       	std	Z+12, r18	; 0x0c
    3d62:	24 ec       	ldi	r18, 0xC4	; 196
    3d64:	30 e0       	ldi	r19, 0x00	; 0
    3d66:	37 87       	std	Z+15, r19	; 0x0f
    3d68:	26 87       	std	Z+14, r18	; 0x0e
    3d6a:	20 ec       	ldi	r18, 0xC0	; 192
    3d6c:	30 e0       	ldi	r19, 0x00	; 0
    3d6e:	31 8b       	std	Z+17, r19	; 0x11
    3d70:	20 8b       	std	Z+16, r18	; 0x10
    3d72:	21 ec       	ldi	r18, 0xC1	; 193
    3d74:	30 e0       	ldi	r19, 0x00	; 0
    3d76:	33 8b       	std	Z+19, r19	; 0x13
    3d78:	22 8b       	std	Z+18, r18	; 0x12
    3d7a:	22 ec       	ldi	r18, 0xC2	; 194
    3d7c:	30 e0       	ldi	r19, 0x00	; 0
    3d7e:	35 8b       	std	Z+21, r19	; 0x15
    3d80:	24 8b       	std	Z+20, r18	; 0x14
    3d82:	26 ec       	ldi	r18, 0xC6	; 198
    3d84:	30 e0       	ldi	r19, 0x00	; 0
    3d86:	37 8b       	std	Z+23, r19	; 0x17
    3d88:	26 8b       	std	Z+22, r18	; 0x16
    3d8a:	11 8e       	std	Z+25, r1	; 0x19
    3d8c:	12 8e       	std	Z+26, r1	; 0x1a
    3d8e:	13 8e       	std	Z+27, r1	; 0x1b
    3d90:	14 8e       	std	Z+28, r1	; 0x1c
    3d92:	c2 ec       	ldi	r28, 0xC2	; 194
    3d94:	d3 e0       	ldi	r29, 0x03	; 3
    3d96:	1b 82       	std	Y+3, r1	; 0x03
    3d98:	1a 82       	std	Y+2, r1	; 0x02
    3d9a:	8c 83       	std	Y+4, r24	; 0x04
    3d9c:	9d 83       	std	Y+5, r25	; 0x05
    3d9e:	ae 83       	std	Y+6, r26	; 0x06
    3da0:	bf 83       	std	Y+7, r27	; 0x07
    3da2:	8a e2       	ldi	r24, 0x2A	; 42
    3da4:	91 e0       	ldi	r25, 0x01	; 1
    3da6:	99 83       	std	Y+1, r25	; 0x01
    3da8:	88 83       	st	Y, r24
    3daa:	65 e8       	ldi	r22, 0x85	; 133
    3dac:	71 e0       	ldi	r23, 0x01	; 1
    3dae:	8e e0       	ldi	r24, 0x0E	; 14
    3db0:	94 e0       	ldi	r25, 0x04	; 4
    3db2:	0e 94 cf 19 	call	0x339e	; 0x339e <String::String(char const*)>
    3db6:	69 e8       	ldi	r22, 0x89	; 137
    3db8:	71 e0       	ldi	r23, 0x01	; 1
    3dba:	84 e1       	ldi	r24, 0x14	; 20
    3dbc:	94 e0       	ldi	r25, 0x04	; 4
    3dbe:	0e 94 cf 19 	call	0x339e	; 0x339e <String::String(char const*)>
    3dc2:	6d e8       	ldi	r22, 0x8D	; 141
    3dc4:	71 e0       	ldi	r23, 0x01	; 1
    3dc6:	8a e1       	ldi	r24, 0x1A	; 26
    3dc8:	94 e0       	ldi	r25, 0x04	; 4
    3dca:	0e 94 cf 19 	call	0x339e	; 0x339e <String::String(char const*)>
    3dce:	61 e9       	ldi	r22, 0x91	; 145
    3dd0:	71 e0       	ldi	r23, 0x01	; 1
    3dd2:	80 e2       	ldi	r24, 0x20	; 32
    3dd4:	94 e0       	ldi	r25, 0x04	; 4
    3dd6:	0e 94 cf 19 	call	0x339e	; 0x339e <String::String(char const*)>
    3dda:	65 e9       	ldi	r22, 0x95	; 149
    3ddc:	71 e0       	ldi	r23, 0x01	; 1
    3dde:	86 e2       	ldi	r24, 0x26	; 38
    3de0:	94 e0       	ldi	r25, 0x04	; 4
    3de2:	0e 94 cf 19 	call	0x339e	; 0x339e <String::String(char const*)>
    3de6:	69 e9       	ldi	r22, 0x99	; 153
    3de8:	71 e0       	ldi	r23, 0x01	; 1
    3dea:	8c e2       	ldi	r24, 0x2C	; 44
    3dec:	94 e0       	ldi	r25, 0x04	; 4
    3dee:	0e 94 cf 19 	call	0x339e	; 0x339e <String::String(char const*)>
    3df2:	6d e9       	ldi	r22, 0x9D	; 157
    3df4:	71 e0       	ldi	r23, 0x01	; 1
    3df6:	82 e3       	ldi	r24, 0x32	; 50
    3df8:	94 e0       	ldi	r25, 0x04	; 4
    3dfa:	0e 94 cf 19 	call	0x339e	; 0x339e <String::String(char const*)>
    3dfe:	61 ea       	ldi	r22, 0xA1	; 161
    3e00:	71 e0       	ldi	r23, 0x01	; 1
    3e02:	88 e3       	ldi	r24, 0x38	; 56
    3e04:	94 e0       	ldi	r25, 0x04	; 4
    3e06:	0e 94 cf 19 	call	0x339e	; 0x339e <String::String(char const*)>
    3e0a:	65 ea       	ldi	r22, 0xA5	; 165
    3e0c:	71 e0       	ldi	r23, 0x01	; 1
    3e0e:	8e e3       	ldi	r24, 0x3E	; 62
    3e10:	94 e0       	ldi	r25, 0x04	; 4
    3e12:	0e 94 cf 19 	call	0x339e	; 0x339e <String::String(char const*)>
    3e16:	69 ea       	ldi	r22, 0xA9	; 169
    3e18:	71 e0       	ldi	r23, 0x01	; 1
    3e1a:	84 e4       	ldi	r24, 0x44	; 68
    3e1c:	94 e0       	ldi	r25, 0x04	; 4
    3e1e:	0e 94 cf 19 	call	0x339e	; 0x339e <String::String(char const*)>
    3e22:	6e ea       	ldi	r22, 0xAE	; 174
    3e24:	71 e0       	ldi	r23, 0x01	; 1
    3e26:	8a e4       	ldi	r24, 0x4A	; 74
    3e28:	94 e0       	ldi	r25, 0x04	; 4
    3e2a:	0e 94 cf 19 	call	0x339e	; 0x339e <String::String(char const*)>
    3e2e:	63 eb       	ldi	r22, 0xB3	; 179
    3e30:	71 e0       	ldi	r23, 0x01	; 1
    3e32:	80 e5       	ldi	r24, 0x50	; 80
    3e34:	94 e0       	ldi	r25, 0x04	; 4
    3e36:	0e 94 cf 19 	call	0x339e	; 0x339e <String::String(char const*)>
    3e3a:	68 eb       	ldi	r22, 0xB8	; 184
    3e3c:	71 e0       	ldi	r23, 0x01	; 1
    3e3e:	86 e5       	ldi	r24, 0x56	; 86
    3e40:	94 e0       	ldi	r25, 0x04	; 4
    3e42:	0e 94 cf 19 	call	0x339e	; 0x339e <String::String(char const*)>
    3e46:	6d eb       	ldi	r22, 0xBD	; 189
    3e48:	71 e0       	ldi	r23, 0x01	; 1
    3e4a:	8c e5       	ldi	r24, 0x5C	; 92
    3e4c:	94 e0       	ldi	r25, 0x04	; 4
    3e4e:	0e 94 cf 19 	call	0x339e	; 0x339e <String::String(char const*)>
    3e52:	62 ec       	ldi	r22, 0xC2	; 194
    3e54:	71 e0       	ldi	r23, 0x01	; 1
    3e56:	82 e6       	ldi	r24, 0x62	; 98
    3e58:	94 e0       	ldi	r25, 0x04	; 4
    3e5a:	0e 94 cf 19 	call	0x339e	; 0x339e <String::String(char const*)>
    3e5e:	67 ec       	ldi	r22, 0xC7	; 199
    3e60:	71 e0       	ldi	r23, 0x01	; 1
    3e62:	88 e6       	ldi	r24, 0x68	; 104
    3e64:	94 e0       	ldi	r25, 0x04	; 4
    3e66:	0e 94 cf 19 	call	0x339e	; 0x339e <String::String(char const*)>
    3e6a:	6c ec       	ldi	r22, 0xCC	; 204
    3e6c:	71 e0       	ldi	r23, 0x01	; 1
    3e6e:	8e e6       	ldi	r24, 0x6E	; 110
    3e70:	94 e0       	ldi	r25, 0x04	; 4
    3e72:	0e 94 cf 19 	call	0x339e	; 0x339e <String::String(char const*)>
    3e76:	61 ed       	ldi	r22, 0xD1	; 209
    3e78:	71 e0       	ldi	r23, 0x01	; 1
    3e7a:	84 e7       	ldi	r24, 0x74	; 116
    3e7c:	94 e0       	ldi	r25, 0x04	; 4
    3e7e:	0e 94 cf 19 	call	0x339e	; 0x339e <String::String(char const*)>
    3e82:	66 ed       	ldi	r22, 0xD6	; 214
    3e84:	71 e0       	ldi	r23, 0x01	; 1
    3e86:	8a e7       	ldi	r24, 0x7A	; 122
    3e88:	94 e0       	ldi	r25, 0x04	; 4
    3e8a:	0e 94 cf 19 	call	0x339e	; 0x339e <String::String(char const*)>
    3e8e:	6b ed       	ldi	r22, 0xDB	; 219
    3e90:	71 e0       	ldi	r23, 0x01	; 1
    3e92:	80 e8       	ldi	r24, 0x80	; 128
    3e94:	94 e0       	ldi	r25, 0x04	; 4
    3e96:	0e 94 cf 19 	call	0x339e	; 0x339e <String::String(char const*)>
    3e9a:	60 ee       	ldi	r22, 0xE0	; 224
    3e9c:	71 e0       	ldi	r23, 0x01	; 1
    3e9e:	86 e8       	ldi	r24, 0x86	; 134
    3ea0:	94 e0       	ldi	r25, 0x04	; 4
    3ea2:	0e 94 cf 19 	call	0x339e	; 0x339e <String::String(char const*)>
    3ea6:	64 ee       	ldi	r22, 0xE4	; 228
    3ea8:	71 e0       	ldi	r23, 0x01	; 1
    3eaa:	8c e8       	ldi	r24, 0x8C	; 140
    3eac:	94 e0       	ldi	r25, 0x04	; 4
    3eae:	0e 94 cf 19 	call	0x339e	; 0x339e <String::String(char const*)>
    3eb2:	68 ee       	ldi	r22, 0xE8	; 232
    3eb4:	71 e0       	ldi	r23, 0x01	; 1
    3eb6:	82 e9       	ldi	r24, 0x92	; 146
    3eb8:	94 e0       	ldi	r25, 0x04	; 4
    3eba:	0e 94 cf 19 	call	0x339e	; 0x339e <String::String(char const*)>
    3ebe:	6c ee       	ldi	r22, 0xEC	; 236
    3ec0:	71 e0       	ldi	r23, 0x01	; 1
    3ec2:	88 e9       	ldi	r24, 0x98	; 152
    3ec4:	94 e0       	ldi	r25, 0x04	; 4
    3ec6:	0e 94 cf 19 	call	0x339e	; 0x339e <String::String(char const*)>
    3eca:	60 ef       	ldi	r22, 0xF0	; 240
    3ecc:	71 e0       	ldi	r23, 0x01	; 1
    3ece:	8e e9       	ldi	r24, 0x9E	; 158
    3ed0:	94 e0       	ldi	r25, 0x04	; 4
    3ed2:	0e 94 cf 19 	call	0x339e	; 0x339e <String::String(char const*)>
    3ed6:	64 ef       	ldi	r22, 0xF4	; 244
    3ed8:	71 e0       	ldi	r23, 0x01	; 1
    3eda:	84 ea       	ldi	r24, 0xA4	; 164
    3edc:	94 e0       	ldi	r25, 0x04	; 4
    3ede:	0e 94 cf 19 	call	0x339e	; 0x339e <String::String(char const*)>
    3ee2:	68 ef       	ldi	r22, 0xF8	; 248
    3ee4:	71 e0       	ldi	r23, 0x01	; 1
    3ee6:	8a ea       	ldi	r24, 0xAA	; 170
    3ee8:	94 e0       	ldi	r25, 0x04	; 4
    3eea:	0e 94 cf 19 	call	0x339e	; 0x339e <String::String(char const*)>
    3eee:	6c ef       	ldi	r22, 0xFC	; 252
    3ef0:	71 e0       	ldi	r23, 0x01	; 1
    3ef2:	80 eb       	ldi	r24, 0xB0	; 176
    3ef4:	94 e0       	ldi	r25, 0x04	; 4
    3ef6:	0e 94 cf 19 	call	0x339e	; 0x339e <String::String(char const*)>
    3efa:	60 e0       	ldi	r22, 0x00	; 0
    3efc:	72 e0       	ldi	r23, 0x02	; 2
    3efe:	86 eb       	ldi	r24, 0xB6	; 182
    3f00:	94 e0       	ldi	r25, 0x04	; 4
    3f02:	0e 94 cf 19 	call	0x339e	; 0x339e <String::String(char const*)>
    3f06:	64 e0       	ldi	r22, 0x04	; 4
    3f08:	72 e0       	ldi	r23, 0x02	; 2
    3f0a:	8c eb       	ldi	r24, 0xBC	; 188
    3f0c:	94 e0       	ldi	r25, 0x04	; 4
    3f0e:	0e 94 cf 19 	call	0x339e	; 0x339e <String::String(char const*)>
    3f12:	69 e0       	ldi	r22, 0x09	; 9
    3f14:	72 e0       	ldi	r23, 0x02	; 2
    3f16:	82 ec       	ldi	r24, 0xC2	; 194
    3f18:	94 e0       	ldi	r25, 0x04	; 4
    3f1a:	0e 94 cf 19 	call	0x339e	; 0x339e <String::String(char const*)>
    3f1e:	6d e0       	ldi	r22, 0x0D	; 13
    3f20:	72 e0       	ldi	r23, 0x02	; 2
    3f22:	88 ec       	ldi	r24, 0xC8	; 200
    3f24:	94 e0       	ldi	r25, 0x04	; 4
    3f26:	0e 94 cf 19 	call	0x339e	; 0x339e <String::String(char const*)>
    3f2a:	61 e1       	ldi	r22, 0x11	; 17
    3f2c:	72 e0       	ldi	r23, 0x02	; 2
    3f2e:	8e ec       	ldi	r24, 0xCE	; 206
    3f30:	94 e0       	ldi	r25, 0x04	; 4
    3f32:	0e 94 cf 19 	call	0x339e	; 0x339e <String::String(char const*)>
    3f36:	65 e1       	ldi	r22, 0x15	; 21
    3f38:	72 e0       	ldi	r23, 0x02	; 2
    3f3a:	84 ed       	ldi	r24, 0xD4	; 212
    3f3c:	94 e0       	ldi	r25, 0x04	; 4
    3f3e:	0e 94 cf 19 	call	0x339e	; 0x339e <String::String(char const*)>
    3f42:	69 e1       	ldi	r22, 0x19	; 25
    3f44:	72 e0       	ldi	r23, 0x02	; 2
    3f46:	8a ed       	ldi	r24, 0xDA	; 218
    3f48:	94 e0       	ldi	r25, 0x04	; 4
    3f4a:	0e 94 cf 19 	call	0x339e	; 0x339e <String::String(char const*)>
    3f4e:	6e e1       	ldi	r22, 0x1E	; 30
    3f50:	72 e0       	ldi	r23, 0x02	; 2
    3f52:	80 ee       	ldi	r24, 0xE0	; 224
    3f54:	94 e0       	ldi	r25, 0x04	; 4
    3f56:	0e 94 cf 19 	call	0x339e	; 0x339e <String::String(char const*)>
    3f5a:	63 e2       	ldi	r22, 0x23	; 35
    3f5c:	72 e0       	ldi	r23, 0x02	; 2
    3f5e:	86 ee       	ldi	r24, 0xE6	; 230
    3f60:	94 e0       	ldi	r25, 0x04	; 4
    3f62:	0e 94 cf 19 	call	0x339e	; 0x339e <String::String(char const*)>
    3f66:	68 e2       	ldi	r22, 0x28	; 40
    3f68:	72 e0       	ldi	r23, 0x02	; 2
    3f6a:	8c ee       	ldi	r24, 0xEC	; 236
    3f6c:	94 e0       	ldi	r25, 0x04	; 4
    3f6e:	0e 94 cf 19 	call	0x339e	; 0x339e <String::String(char const*)>
    3f72:	6d e2       	ldi	r22, 0x2D	; 45
    3f74:	72 e0       	ldi	r23, 0x02	; 2
    3f76:	82 ef       	ldi	r24, 0xF2	; 242
    3f78:	94 e0       	ldi	r25, 0x04	; 4
    3f7a:	0e 94 cf 19 	call	0x339e	; 0x339e <String::String(char const*)>
    3f7e:	62 e3       	ldi	r22, 0x32	; 50
    3f80:	72 e0       	ldi	r23, 0x02	; 2
    3f82:	88 ef       	ldi	r24, 0xF8	; 248
    3f84:	94 e0       	ldi	r25, 0x04	; 4
    3f86:	0e 94 cf 19 	call	0x339e	; 0x339e <String::String(char const*)>
    3f8a:	67 e3       	ldi	r22, 0x37	; 55
    3f8c:	72 e0       	ldi	r23, 0x02	; 2
    3f8e:	8e ef       	ldi	r24, 0xFE	; 254
    3f90:	94 e0       	ldi	r25, 0x04	; 4
    3f92:	0e 94 cf 19 	call	0x339e	; 0x339e <String::String(char const*)>
    3f96:	ee ec       	ldi	r30, 0xCE	; 206
    3f98:	f3 e0       	ldi	r31, 0x03	; 3
    3f9a:	13 82       	std	Z+3, r1	; 0x03
    3f9c:	12 82       	std	Z+2, r1	; 0x02
    3f9e:	20 e8       	ldi	r18, 0x80	; 128
    3fa0:	30 e0       	ldi	r19, 0x00	; 0
    3fa2:	35 83       	std	Z+5, r19	; 0x05
    3fa4:	24 83       	std	Z+4, r18	; 0x04
    3fa6:	80 e2       	ldi	r24, 0x20	; 32
    3fa8:	90 e0       	ldi	r25, 0x00	; 0
    3faa:	97 83       	std	Z+7, r25	; 0x07
    3fac:	86 83       	std	Z+6, r24	; 0x06
    3fae:	31 87       	std	Z+9, r19	; 0x09
    3fb0:	20 87       	std	Z+8, r18	; 0x08
    3fb2:	93 87       	std	Z+11, r25	; 0x0b
    3fb4:	82 87       	std	Z+10, r24	; 0x0a
    3fb6:	16 8a       	std	Z+22, r1	; 0x16
    3fb8:	15 86       	std	Z+13, r1	; 0x0d
    3fba:	14 86       	std	Z+12, r1	; 0x0c
    3fbc:	17 86       	std	Z+15, r1	; 0x0f
    3fbe:	16 86       	std	Z+14, r1	; 0x0e
    3fc0:	91 e0       	ldi	r25, 0x01	; 1
    3fc2:	95 8b       	std	Z+21, r25	; 0x15
    3fc4:	94 8b       	std	Z+20, r25	; 0x14
    3fc6:	2f ef       	ldi	r18, 0xFF	; 255
    3fc8:	3f ef       	ldi	r19, 0xFF	; 255
    3fca:	33 8b       	std	Z+19, r19	; 0x13
    3fcc:	22 8b       	std	Z+18, r18	; 0x12
    3fce:	31 8b       	std	Z+17, r19	; 0x11
    3fd0:	20 8b       	std	Z+16, r18	; 0x10
    3fd2:	97 8b       	std	Z+23, r25	; 0x17
    3fd4:	10 8e       	std	Z+24, r1	; 0x18
    3fd6:	12 8e       	std	Z+26, r1	; 0x1a
    3fd8:	11 8e       	std	Z+25, r1	; 0x19
    3fda:	2c e3       	ldi	r18, 0x3C	; 60
    3fdc:	31 e0       	ldi	r19, 0x01	; 1
    3fde:	31 83       	std	Z+1, r19	; 0x01
    3fe0:	20 83       	st	Z, r18
    3fe2:	14 8e       	std	Z+28, r1	; 0x1c
    3fe4:	13 8e       	std	Z+27, r1	; 0x1b
    3fe6:	d6 8f       	std	Z+30, r29	; 0x1e
    3fe8:	c5 8f       	std	Z+29, r28	; 0x1d
    3fea:	10 a2       	std	Z+32, r1	; 0x20
    3fec:	17 8e       	std	Z+31, r1	; 0x1f
    3fee:	8f ef       	ldi	r24, 0xFF	; 255
    3ff0:	84 a3       	std	Z+36, r24	; 0x24
    3ff2:	85 a3       	std	Z+37, r24	; 0x25
    3ff4:	86 a3       	std	Z+38, r24	; 0x26
    3ff6:	87 a3       	std	Z+39, r24	; 0x27
    3ff8:	80 a7       	std	Z+40, r24	; 0x28
    3ffa:	40 e8       	ldi	r20, 0x80	; 128
    3ffc:	5a e1       	ldi	r21, 0x1A	; 26
    3ffe:	66 e0       	ldi	r22, 0x06	; 6
    4000:	70 e0       	ldi	r23, 0x00	; 0
    4002:	45 ab       	std	Z+53, r20	; 0x35
    4004:	56 ab       	std	Z+54, r21	; 0x36
    4006:	67 ab       	std	Z+55, r22	; 0x37
    4008:	70 af       	std	Z+56, r23	; 0x38
    400a:	40 ea       	ldi	r20, 0xA0	; 160
    400c:	56 e8       	ldi	r21, 0x86	; 134
    400e:	61 e0       	ldi	r22, 0x01	; 1
    4010:	70 e0       	ldi	r23, 0x00	; 0
    4012:	41 af       	std	Z+57, r20	; 0x39
    4014:	52 af       	std	Z+58, r21	; 0x3a
    4016:	63 af       	std	Z+59, r22	; 0x3b
    4018:	74 af       	std	Z+60, r23	; 0x3c
    401a:	80 e5       	ldi	r24, 0x50	; 80
    401c:	86 af       	std	Z+62, r24	; 0x3e
    401e:	17 ae       	std	Z+63, r1	; 0x3f
    4020:	c2 e9       	ldi	r28, 0x92	; 146
    4022:	d3 e0       	ldi	r29, 0x03	; 3
    4024:	1a 8a       	std	Y+18, r1	; 0x12
    4026:	9b 8b       	std	Y+19, r25	; 0x13
    4028:	1c 8a       	std	Y+20, r1	; 0x14
    402a:	80 e5       	ldi	r24, 0x50	; 80
    402c:	93 ec       	ldi	r25, 0xC3	; 195
    402e:	a0 e0       	ldi	r26, 0x00	; 0
    4030:	b0 e0       	ldi	r27, 0x00	; 0
    4032:	8d 8b       	std	Y+21, r24	; 0x15
    4034:	9e 8b       	std	Y+22, r25	; 0x16
    4036:	af 8b       	std	Y+23, r26	; 0x17
    4038:	b8 8f       	std	Y+24, r27	; 0x18
    403a:	19 8e       	std	Y+25, r1	; 0x19
    403c:	1b 8e       	std	Y+27, r1	; 0x1b
    403e:	1a 8e       	std	Y+26, r1	; 0x1a
    4040:	86 e0       	ldi	r24, 0x06	; 6
    4042:	ea e0       	ldi	r30, 0x0A	; 10
    4044:	f1 e0       	ldi	r31, 0x01	; 1
    4046:	ae ea       	ldi	r26, 0xAE	; 174
    4048:	b3 e0       	ldi	r27, 0x03	; 3
    404a:	01 90       	ld	r0, Z+
    404c:	0d 92       	st	X+, r0
    404e:	8a 95       	dec	r24
    4050:	e1 f7       	brne	.-8      	; 0x404a <global constructors keyed to 65535_0_SI4844_01_OLED_SLIDE_SWITCH.ino.cpp.o.4047+0x314>
    4052:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__malloc_margin+0x8>
    4056:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__malloc_margin+0x9>
    405a:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <__malloc_margin+0xa>
    405e:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <__malloc_margin+0xb>
    4062:	8a a3       	std	Y+34, r24	; 0x22
    4064:	9b a3       	std	Y+35, r25	; 0x23
    4066:	ac a3       	std	Y+36, r26	; 0x24
    4068:	bd a3       	std	Y+37, r27	; 0x25
    406a:	8e e1       	ldi	r24, 0x1E	; 30
    406c:	8e a7       	std	Y+46, r24	; 0x2e
    406e:	84 e0       	ldi	r24, 0x04	; 4
    4070:	8f a7       	std	Y+47, r24	; 0x2f
    4072:	df 91       	pop	r29
    4074:	cf 91       	pop	r28
    4076:	08 95       	ret

00004078 <main>:
init():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    4078:	78 94       	sei
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    407a:	84 b5       	in	r24, 0x24	; 36
    407c:	83 60       	ori	r24, 0x03	; 3
    407e:	84 bd       	out	0x24, r24	; 36
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    4080:	85 b5       	in	r24, 0x25	; 37
    4082:	83 60       	ori	r24, 0x03	; 3
    4084:	85 bd       	out	0x25, r24	; 37
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    4086:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
    408a:	81 60       	ori	r24, 0x01	; 1
    408c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    4090:	82 e0       	ldi	r24, 0x02	; 2
    4092:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    4096:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    409a:	81 60       	ori	r24, 0x01	; 1
    409c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    40a0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    40a4:	81 60       	ori	r24, 0x01	; 1
    40a6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    40aa:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
    40ae:	84 60       	ori	r24, 0x04	; 4
    40b0:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    40b4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    40b8:	81 60       	ori	r24, 0x01	; 1
    40ba:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
    40be:	87 e8       	ldi	r24, 0x87	; 135
    40c0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    40c4:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
setup():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:84
int8_t newBand;


void setup() {

  pinMode(TUNE_LED, OUTPUT);
    40c8:	61 e0       	ldi	r22, 0x01	; 1
    40ca:	8a e0       	ldi	r24, 0x0A	; 10
    40cc:	0e 94 22 0b 	call	0x1644	; 0x1644 <pinMode>
begin():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:498
    @note   MUST call this function before any drawing or updates!
*/
bool Adafruit_SSD1306::begin(uint8_t vcs, uint8_t addr, bool reset,
                             bool periphBegin) {

  if ((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
    40d0:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <display+0x1f>
    40d4:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <display+0x20>
    40d8:	89 2b       	or	r24, r25
    40da:	11 f1       	breq	.+68     	; 0x4120 <main+0xa8>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:501
    return false;

  clearDisplay();
    40dc:	0e 94 47 19 	call	0x328e	; 0x328e <Adafruit_SSD1306::clearDisplay() [clone .constprop.26]>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:504

#ifndef SSD1306_NO_SPLASH
  if (HEIGHT > 32) {
    40e0:	20 91 d4 03 	lds	r18, 0x03D4	; 0x8003d4 <display+0x6>
    40e4:	30 91 d5 03 	lds	r19, 0x03D5	; 0x8003d5 <display+0x7>
    40e8:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <display+0x4>
    40ec:	90 91 d3 03 	lds	r25, 0x03D3	; 0x8003d3 <display+0x5>
    40f0:	21 32       	cpi	r18, 0x21	; 33
    40f2:	31 05       	cpc	r19, r1
    40f4:	0c f0       	brlt	.+2      	; 0x40f8 <main+0x80>
    40f6:	ee c0       	rjmp	.+476    	; 0x42d4 <main+0x25c>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:508
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
               splash1_data, splash1_width, splash1_height, 1);
  } else {
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
    40f8:	b9 01       	movw	r22, r18
    40fa:	60 52       	subi	r22, 0x20	; 32
    40fc:	71 09       	sbc	r23, r1
    40fe:	77 ff       	sbrs	r23, 7
    4100:	02 c0       	rjmp	.+4      	; 0x4106 <main+0x8e>
    4102:	6f 5f       	subi	r22, 0xFF	; 255
    4104:	7f 4f       	sbci	r23, 0xFF	; 255
    4106:	75 95       	asr	r23
    4108:	67 95       	ror	r22
    410a:	83 57       	subi	r24, 0x73	; 115
    410c:	91 09       	sbc	r25, r1
    410e:	97 fd       	sbrc	r25, 7
    4110:	01 96       	adiw	r24, 0x01	; 1
    4112:	00 e2       	ldi	r16, 0x20	; 32
    4114:	10 e0       	ldi	r17, 0x00	; 0
    4116:	23 e7       	ldi	r18, 0x73	; 115
    4118:	30 e0       	ldi	r19, 0x00	; 0
    411a:	45 e4       	ldi	r20, 0x45	; 69
    411c:	5d e0       	ldi	r21, 0x0D	; 13
    411e:	ed c0       	rjmp	.+474    	; 0x42fa <main+0x282>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:498
    @note   MUST call this function before any drawing or updates!
*/
bool Adafruit_SSD1306::begin(uint8_t vcs, uint8_t addr, bool reset,
                             bool periphBegin) {

  if ((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
    4120:	20 91 d4 03 	lds	r18, 0x03D4	; 0x8003d4 <display+0x6>
    4124:	30 91 d5 03 	lds	r19, 0x03D5	; 0x8003d5 <display+0x7>
    4128:	c9 01       	movw	r24, r18
    412a:	07 96       	adiw	r24, 0x07	; 7
    412c:	97 fd       	sbrc	r25, 7
    412e:	07 96       	adiw	r24, 0x07	; 7
    4130:	b3 e0       	ldi	r27, 0x03	; 3
    4132:	95 95       	asr	r25
    4134:	87 95       	ror	r24
    4136:	ba 95       	dec	r27
    4138:	e1 f7       	brne	.-8      	; 0x4132 <main+0xba>
    413a:	20 91 d2 03 	lds	r18, 0x03D2	; 0x8003d2 <display+0x4>
    413e:	30 91 d3 03 	lds	r19, 0x03D3	; 0x8003d3 <display+0x5>
    4142:	ac 01       	movw	r20, r24
    4144:	42 9f       	mul	r20, r18
    4146:	c0 01       	movw	r24, r0
    4148:	43 9f       	mul	r20, r19
    414a:	90 0d       	add	r25, r0
    414c:	52 9f       	mul	r21, r18
    414e:	90 0d       	add	r25, r0
    4150:	11 24       	eor	r1, r1
    4152:	0e 94 1b 24 	call	0x4836	; 0x4836 <malloc>
    4156:	90 93 ee 03 	sts	0x03EE, r25	; 0x8003ee <display+0x20>
    415a:	80 93 ed 03 	sts	0x03ED, r24	; 0x8003ed <display+0x1f>
    415e:	89 2b       	or	r24, r25
    4160:	09 f0       	breq	.+2      	; 0x4164 <main+0xec>
    4162:	bc cf       	rjmp	.-136    	; 0x40dc <main+0x64>
_ZN12Adafruit_GFX12setTextColorEj():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.h:144
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
    4164:	81 e0       	ldi	r24, 0x01	; 1
    4166:	90 e0       	ldi	r25, 0x00	; 0
    4168:	90 93 e1 03 	sts	0x03E1, r25	; 0x8003e1 <display+0x13>
    416c:	80 93 e0 03 	sts	0x03E0, r24	; 0x8003e0 <display+0x12>
    4170:	90 93 df 03 	sts	0x03DF, r25	; 0x8003df <display+0x11>
    4174:	80 93 de 03 	sts	0x03DE, r24	; 0x8003de <display+0x10>
setup():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:92

  // display.display();
  display.setTextColor(SSD1306_WHITE);


  display.clearDisplay();
    4178:	0e 94 47 19 	call	0x328e	; 0x328e <Adafruit_SSD1306::clearDisplay() [clone .constprop.26]>
setupSlideSwitch():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:192
 * @param hightClockSpeed hight I2C clock speed to be used by the system (optional - default 50000 - 50kHz).
 */
void SI4844::setupSlideSwitch(uint16_t resetPin, int interruptPin, uint32_t hightClockSpeed )
{
    // UNDER CONSTRUCTION
    this->resetPin = resetPin;
    417c:	8c e0       	ldi	r24, 0x0C	; 12
    417e:	90 e0       	ldi	r25, 0x00	; 0
    4180:	90 93 a1 03 	sts	0x03A1, r25	; 0x8003a1 <rx+0xf>
    4184:	80 93 a0 03 	sts	0x03A0, r24	; 0x8003a0 <rx+0xe>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:193
    this->interruptPin = interruptPin;
    4188:	82 e0       	ldi	r24, 0x02	; 2
    418a:	90 e0       	ldi	r25, 0x00	; 0
    418c:	90 93 a3 03 	sts	0x03A3, r25	; 0x8003a3 <rx+0x11>
    4190:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <rx+0x10>
_ZN6SI484413setClockSpeedEj():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.h:315
  /**
   * @ingroup BF
   * @brief Sets hight clock speed to be used on I2C bus
   * @param clock (10000 = 10kHz; 50000 = 50kHz; 100000 = 100kHz ... )
   */
  inline void setClockSpeed(uint16_t clock) { this->clockSpeed = clock; }; 
    4194:	80 e5       	ldi	r24, 0x50	; 80
    4196:	93 ec       	ldi	r25, 0xC3	; 195
    4198:	a0 e0       	ldi	r26, 0x00	; 0
    419a:	b0 e0       	ldi	r27, 0x00	; 0
    419c:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <rx+0x15>
    41a0:	90 93 a8 03 	sts	0x03A8, r25	; 0x8003a8 <rx+0x16>
    41a4:	a0 93 a9 03 	sts	0x03A9, r26	; 0x8003a9 <rx+0x17>
    41a8:	b0 93 aa 03 	sts	0x03AA, r27	; 0x8003aa <rx+0x18>
setupSlideSwitch():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:200
    setClockSpeed(hightClockSpeed);

    // Arduino interrupt setup.
    // if interruptPin parameter is < 0, it means the interrupt is being controlled by the user of this library
    if (interruptPin != -1 ) {
        pinMode(interruptPin, INPUT);
    41ac:	60 e0       	ldi	r22, 0x00	; 0
    41ae:	82 e0       	ldi	r24, 0x02	; 2
    41b0:	0e 94 22 0b 	call	0x1644	; 0x1644 <pinMode>
attachInterrupt():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WInterrupts.c:66

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode)
{
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS)
  {
    intFunc[interruptNum] = userFunc;
    41b4:	82 eb       	ldi	r24, 0xB2	; 178
    41b6:	9b e0       	ldi	r25, 0x0B	; 11
    41b8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    41bc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WInterrupts.c:231
      #elif defined(__AVR_ATmega48__) || defined(__AVR_ATmega48P__)  || defined(__AVR_ATmega48PB__)  \
      || defined(__AVR_ATmega88__)    || defined(__AVR_ATmega88P__)  || defined(__AVR_ATmega88PB__)  \
      || defined(__AVR_ATmega168__)   || defined(__AVR_ATmega168P__) || defined(__AVR_ATmega168PB__) \
      || defined(__AVR_ATmega328__)   || defined(__AVR_ATmega328P__) || defined(__AVR_ATmega328PB__)
        case 0:
          EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
    41c0:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    41c4:	83 60       	ori	r24, 0x03	; 3
    41c6:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WInterrupts.c:232
          EIMSK |= (1 << INT0);
    41ca:	e8 9a       	sbi	0x1d, 0	; 29
setupSlideSwitch():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:204
        attachInterrupt(digitalPinToInterrupt(interruptPin), interrupt_hundler, RISING);
    }

    pinMode(resetPin, OUTPUT);
    41cc:	61 e0       	ldi	r22, 0x01	; 1
    41ce:	8c e0       	ldi	r24, 0x0C	; 12
    41d0:	0e 94 22 0b 	call	0x1644	; 0x1644 <pinMode>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:205
    digitalWrite(resetPin, HIGH);
    41d4:	61 e0       	ldi	r22, 0x01	; 1
    41d6:	8c e0       	ldi	r24, 0x0C	; 12
    41d8:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <digitalWrite>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:206
    delay(1);    
    41dc:	61 e0       	ldi	r22, 0x01	; 1
    41de:	70 e0       	ldi	r23, 0x00	; 0
    41e0:	80 e0       	ldi	r24, 0x00	; 0
    41e2:	90 e0       	ldi	r25, 0x00	; 0
    41e4:	0e 94 80 0b 	call	0x1700	; 0x1700 <delay>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:207
    data_from_device = false;    
    41e8:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <_ZL16data_from_device.lto_priv.64>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:212
    
    // Step 1: Reset and Prepare the Device
    //      1. The system controller resets the ATDD device and releases the  RSTb  pin.
    //      2. The system controller waits until the first  IRQ  is received, indicating that the ATDD device is ready to receive commands.   
    this->reset(); // Step 1 - Reset and Prepare the Device
    41ec:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <SI4844::reset() [clone .constprop.17]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:216

    // Step 2: Obtain Device Status
    //      3. The system controller sends the  ATDD_GET_STATUS  command to retrieve the ATDD device status.    
    this->getStatus();
    41f0:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <SI4844::getStatus() [clone .constprop.15]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:217
    if ( device_status.refined.BCFG0 != 0) {
    41f4:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <rx>
    41f8:	80 ff       	sbrs	r24, 0
    41fa:	03 c0       	rjmp	.+6      	; 0x4202 <main+0x18a>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:218
        system_error = 51;  // The hardware is configured to "MCU detects the band" and you are trying "ATDD device detects the band"
    41fc:	83 e3       	ldi	r24, 0x33	; 51
    41fe:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <rx+0x19>
powerUp():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:408
 * @details Moves the SI4844 device from power down to power up 
 * @see Si48XX ATDD PROGRAMMING GUIDE; AN610; page 45
 */
void SI4844::powerUp(void)
{
    data_from_device = false;    
    4202:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <_ZL16data_from_device.lto_priv.64>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:410

    this->currentBand = 0;
    4206:	10 92 a4 03 	sts	0x03A4, r1	; 0x8003a4 <rx+0x12>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:414

    si4844_arg_band_index rxBandSetup; 

    rxBandSetup.refined.XOSCEN = this->xoscen;
    420a:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <rx+0x13>
    420e:	c0 e0       	ldi	r28, 0x00	; 0
    4210:	80 fb       	bst	r24, 0
    4212:	c7 f9       	bld	r28, 7
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:415
    rxBandSetup.refined.XOWAIT = this->xowait;
    4214:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <rx+0x14>
    4218:	80 fb       	bst	r24, 0
    421a:	c6 f9       	bld	r28, 6
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:416
    rxBandSetup.refined.BANDIDX = this->currentBand;
    421c:	c0 7c       	andi	r28, 0xC0	; 192
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:418

    waitToSend();
    421e:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <SI4844::waitToSend() [clone .constprop.25]>
beginTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:206
    4222:	81 e1       	ldi	r24, 0x11	; 17
    4224:	0e 94 4b 09 	call	0x1296	; 0x1296 <TwoWire::beginTransmission(unsigned char) [clone .constprop.51]>
powerUp():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:421

    Wire.beginTransmission(SI4844_ADDRESS);
    Wire.write(ATDD_POWER_UP);
    4228:	81 ee       	ldi	r24, 0xE1	; 225
    422a:	90 e0       	ldi	r25, 0x00	; 0
    422c:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <TwoWire::write(int) [clone .constprop.36]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:422
    Wire.write(rxBandSetup.raw);
    4230:	6c 2f       	mov	r22, r28
    4232:	82 ec       	ldi	r24, 0xC2	; 194
    4234:	93 e0       	ldi	r25, 0x03	; 3
    4236:	0e 94 c4 14 	call	0x2988	; 0x2988 <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:423
    Wire.endTransmission();
    423a:	82 ec       	ldi	r24, 0xC2	; 194
    423c:	93 e0       	ldi	r25, 0x03	; 3
    423e:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <TwoWire::endTransmission()>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:425

    delayMicroseconds(2500);
    4242:	84 ec       	ldi	r24, 0xC4	; 196
    4244:	99 e0       	ldi	r25, 0x09	; 9
    4246:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <delayMicroseconds>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:426
    this->waitInterrupt();
    424a:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <SI4844::waitInterrupt() [clone .isra.2]>
setupSlideSwitch():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:230
    this->powerUp();

    // Step 5 and Step 6: Retrieve Updated Status and  real Frequency Detection
    // 6. The system controller sends the  ATDD_GET_STATUS  command to obtain the latest status.
    do { 
        delay(1);
    424e:	61 e0       	ldi	r22, 0x01	; 1
    4250:	70 e0       	ldi	r23, 0x00	; 0
    4252:	80 e0       	ldi	r24, 0x00	; 0
    4254:	90 e0       	ldi	r25, 0x00	; 0
    4256:	0e 94 80 0b 	call	0x1700	; 0x1700 <delay>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:231
        this->getStatus();
    425a:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <SI4844::getStatus() [clone .constprop.15]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:232
    } while (device_status.refined.INFORDY == 0);   
    425e:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <rx>
    4262:	84 ff       	sbrs	r24, 4
    4264:	f4 cf       	rjmp	.-24     	; 0x424e <main+0x1d6>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:236


    // Step 6: Set to the real band selected by the user via Slide Switch; Frequency Detection; etc
    this->setBandSlideSwitch();
    4266:	0e 94 0f 18 	call	0x301e	; 0x301e <SI4844::setBandSlideSwitch() [clone .constprop.16]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:238

    this->setVolume(this->volume);
    426a:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <rx+0x2e>
setVolume():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:824
 * @see Table 4, Si48XX ATDD PROGRAMMING GUIDE; AN610; page 11
 * @param byte volumeLevel (domain: 0 to 63) 
 */
void SI4844::setVolume(byte volumeLavel)
{
    if (volumeLavel > 63)
    426e:	80 34       	cpi	r24, 0x40	; 64
    4270:	10 f4       	brcc	.+4      	; 0x4276 <main+0x1fe>
    4272:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <SI4844::setVolume(unsigned char) [clone .part.5] [clone .constprop.23]>
    4276:	8a e3       	ldi	r24, 0x3A	; 58
    4278:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <SI4844::setVolume(unsigned char) [clone .part.5] [clone .constprop.23]>
setup():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:101
  // rx.setCrystalOscillatorStabilizationWaitTime(1);
  rx.setupSlideSwitch(RESET_PIN, INTERRUPT_PIN);

  // You must calibrate the default volume
  rx.setVolume(58);
  delay(100);
    427c:	64 e6       	ldi	r22, 0x64	; 100
    427e:	70 e0       	ldi	r23, 0x00	; 0
    4280:	80 e0       	ldi	r24, 0x00	; 0
    4282:	90 e0       	ldi	r25, 0x00	; 0
    4284:	0e 94 80 0b 	call	0x1700	; 0x1700 <delay>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:102
  displayDial();
    4288:	0e 94 0b 1a 	call	0x3416	; 0x3416 <displayDial()>
serialEventRun():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    428c:	c0 e0       	ldi	r28, 0x00	; 0
    428e:	d0 e0       	ldi	r29, 0x00	; 0
hasStatusChanged():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1194
 *
 *  @return true or false  
 */
bool SI4844::hasStatusChanged(void)
{
    return data_from_device;
    4290:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <_ZL16data_from_device.lto_priv.64>
loop():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:171
}


void loop() {

  if (rx.hasStatusChanged()) {
    4294:	88 23       	and	r24, r24
    4296:	79 f0       	breq	.+30     	; 0x42b6 <main+0x23e>
hasBandChanged():
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1205
 * @details When the Slide Switch is moved by the user, the system have to process it
 *
 *  @return True if the user moved the Slide Switch
 */
bool SI4844::hasBandChanged(void) {
    this->getAllReceiverInfo();
    4298:	0e 94 f5 16 	call	0x2dea	; 0x2dea <SI4844::getAllReceiverInfo() [clone .constprop.34]>
/Users/rcaratti/Documents/Arduino/libraries/si4844/src/SI4844.cpp:1206
    return ( all_receiver_status.refined.BANDIDX != this->currentBand);
    429c:	20 91 94 03 	lds	r18, 0x0394	; 0x800394 <rx+0x2>
    42a0:	2f 73       	andi	r18, 0x3F	; 63
    42a2:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <rx+0x12>
    42a6:	90 e0       	ldi	r25, 0x00	; 0
loop():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:172
    if (rx.hasBandChanged()) {
    42a8:	28 17       	cp	r18, r24
    42aa:	19 06       	cpc	r1, r25
    42ac:	11 f0       	breq	.+4      	; 0x42b2 <main+0x23a>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:173
      rx.setBandSlideSwitch();
    42ae:	0e 94 0f 18 	call	0x301e	; 0x301e <SI4844::setBandSlideSwitch() [clone .constprop.16]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:176
    }

    displayDial();  
    42b2:	0e 94 0b 1a 	call	0x3416	; 0x3416 <displayDial()>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:179
  }

  delay(50);
    42b6:	62 e3       	ldi	r22, 0x32	; 50
    42b8:	70 e0       	ldi	r23, 0x00	; 0
    42ba:	80 e0       	ldi	r24, 0x00	; 0
    42bc:	90 e0       	ldi	r25, 0x00	; 0
    42be:	0e 94 80 0b 	call	0x1700	; 0x1700 <delay>
serialEventRun():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:67
    42c2:	20 97       	sbiw	r28, 0x00	; 0
    42c4:	29 f3       	breq	.-54     	; 0x4290 <main+0x218>
    42c6:	0e 94 c2 0a 	call	0x1584	; 0x1584 <Serial0_available()>
    42ca:	88 23       	and	r24, r24
    42cc:	09 f3       	breq	.-62     	; 0x4290 <main+0x218>
    42ce:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    42d2:	de cf       	rjmp	.-68     	; 0x4290 <main+0x218>
begin():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:505

  clearDisplay();

#ifndef SSD1306_NO_SPLASH
  if (HEIGHT > 32) {
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
    42d4:	b9 01       	movw	r22, r18
    42d6:	60 54       	subi	r22, 0x40	; 64
    42d8:	71 09       	sbc	r23, r1
    42da:	77 ff       	sbrs	r23, 7
    42dc:	02 c0       	rjmp	.+4      	; 0x42e2 <main+0x26a>
    42de:	6f 5f       	subi	r22, 0xFF	; 255
    42e0:	7f 4f       	sbci	r23, 0xFF	; 255
    42e2:	75 95       	asr	r23
    42e4:	67 95       	ror	r22
    42e6:	82 55       	subi	r24, 0x52	; 82
    42e8:	91 09       	sbc	r25, r1
    42ea:	97 fd       	sbrc	r25, 7
    42ec:	01 96       	adiw	r24, 0x01	; 1
    42ee:	00 e4       	ldi	r16, 0x40	; 64
    42f0:	10 e0       	ldi	r17, 0x00	; 0
    42f2:	22 e5       	ldi	r18, 0x52	; 82
    42f4:	30 e0       	ldi	r19, 0x00	; 0
    42f6:	45 e2       	ldi	r20, 0x25	; 37
    42f8:	5f e0       	ldi	r21, 0x0F	; 15
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:508
               splash1_data, splash1_width, splash1_height, 1);
  } else {
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
    42fa:	95 95       	asr	r25
    42fc:	87 95       	ror	r24
    42fe:	0e 94 2e 13 	call	0x265c	; 0x265c <Adafruit_GFX::drawBitmap(int, int, unsigned char const*, int, int, unsigned int) [clone .constprop.7]>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:513
               splash2_data, splash2_width, splash2_height, 1);
  }
#endif

  vccstate = vcs;
    4302:	82 e0       	ldi	r24, 0x02	; 2
    4304:	80 93 f0 03 	sts	0x03F0, r24	; 0x8003f0 <display+0x22>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:516

  // Setup pin directions
  if (wire) { // Using I2C
    4308:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <display+0x1d>
    430c:	90 91 ec 03 	lds	r25, 0x03EC	; 0x8003ec <display+0x1e>
    4310:	89 2b       	or	r24, r25
    4312:	09 f4       	brne	.+2      	; 0x4316 <main+0x29e>
    4314:	fc c0       	rjmp	.+504    	; 0x450e <main+0x496>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:519
    // If I2C address is unspecified, use default
    // (0x3C for 32-pixel-tall displays, 0x3D for all others).
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
    4316:	8c e3       	ldi	r24, 0x3C	; 60
    4318:	80 93 ef 03 	sts	0x03EF, r24	; 0x8003ef <display+0x21>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:61

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
    431c:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <TwoWire::rxBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:62
  rxBufferLength = 0;
    4320:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <TwoWire::rxBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:64

  txBufferIndex = 0;
    4324:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <TwoWire::txBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/Wire.cpp:65
  txBufferLength = 0;
    4328:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <TwoWire::txBufferLength>
twi_init():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:84
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
    432c:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <twi_state>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:85
  twi_sendStop = true; // default value
    4330:	81 e0       	ldi	r24, 0x01	; 1
    4332:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <twi_sendStop>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:86
  twi_inRepStart = false;
    4336:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <twi_inRepStart>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:89

  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
    433a:	61 e0       	ldi	r22, 0x01	; 1
    433c:	82 e1       	ldi	r24, 0x12	; 18
    433e:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <digitalWrite>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:90
  digitalWrite(SCL, 1);
    4342:	61 e0       	ldi	r22, 0x01	; 1
    4344:	83 e1       	ldi	r24, 0x13	; 19
    4346:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <digitalWrite>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:93

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
    434a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    434e:	8e 7f       	andi	r24, 0xFE	; 254
    4350:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:94
  cbi(TWSR, TWPS1);
    4354:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    4358:	8d 7f       	andi	r24, 0xFD	; 253
    435a:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:95
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
    435e:	88 e4       	ldi	r24, 0x48	; 72
    4360:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:103
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    4364:	85 e4       	ldi	r24, 0x45	; 69
    4366:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
twi_attachSlaveTxEvent():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:408
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
    436a:	86 eb       	ldi	r24, 0xB6	; 182
    436c:	9b e0       	ldi	r25, 0x0B	; 11
    436e:	90 93 bb 02 	sts	0x02BB, r25	; 0x8002bb <twi_onSlaveTransmit+0x1>
    4372:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <twi_onSlaveTransmit>
twi_attachSlaveRxEvent():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:397
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
  twi_onSlaveReceive = function;
    4376:	87 eb       	ldi	r24, 0xB7	; 183
    4378:	9b e0       	ldi	r25, 0x0B	; 11
    437a:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <twi_onSlaveReceive+0x1>
    437e:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <twi_onSlaveReceive>
begin():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:556
#endif
    }
  }

  // Reset SSD1306 if requested and reset pin specified in constructor
  if (reset && (rstPin >= 0)) {
    4382:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <display+0x28>
    4386:	87 fd       	sbrc	r24, 7
    4388:	1e c0       	rjmp	.+60     	; 0x43c6 <main+0x34e>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:557
    pinMode(rstPin, OUTPUT);
    438a:	61 e0       	ldi	r22, 0x01	; 1
    438c:	0e 94 22 0b 	call	0x1644	; 0x1644 <pinMode>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:558
    digitalWrite(rstPin, HIGH);
    4390:	61 e0       	ldi	r22, 0x01	; 1
    4392:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <display+0x28>
    4396:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <digitalWrite>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:559
    delay(1);                   // VDD goes high at start, pause for 1 ms
    439a:	61 e0       	ldi	r22, 0x01	; 1
    439c:	70 e0       	ldi	r23, 0x00	; 0
    439e:	80 e0       	ldi	r24, 0x00	; 0
    43a0:	90 e0       	ldi	r25, 0x00	; 0
    43a2:	0e 94 80 0b 	call	0x1700	; 0x1700 <delay>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:560
    digitalWrite(rstPin, LOW);  // Bring reset low
    43a6:	60 e0       	ldi	r22, 0x00	; 0
    43a8:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <display+0x28>
    43ac:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <digitalWrite>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:561
    delay(10);                  // Wait 10 ms
    43b0:	6a e0       	ldi	r22, 0x0A	; 10
    43b2:	70 e0       	ldi	r23, 0x00	; 0
    43b4:	80 e0       	ldi	r24, 0x00	; 0
    43b6:	90 e0       	ldi	r25, 0x00	; 0
    43b8:	0e 94 80 0b 	call	0x1700	; 0x1700 <delay>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:562
    digitalWrite(rstPin, HIGH); // Bring out of reset
    43bc:	61 e0       	ldi	r22, 0x01	; 1
    43be:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <display+0x28>
    43c2:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <digitalWrite>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:565
  }

  TRANSACTION_START
    43c6:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <display+0x1d>
    43ca:	90 91 ec 03 	lds	r25, 0x03EC	; 0x8003ec <display+0x1e>
    43ce:	89 2b       	or	r24, r25
    43d0:	09 f4       	brne	.+2      	; 0x43d4 <main+0x35c>
    43d2:	5c c1       	rjmp	.+696    	; 0x468c <main+0x614>
twi_setFrequency():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:142
 * Input    Clock frequency
 * Output   none
 */
void twi_setFrequency(uint32_t frequency)
{
  TWBR = ((F_CPU / frequency) - 16) / 2;
    43d4:	20 91 03 04 	lds	r18, 0x0403	; 0x800403 <display+0x35>
    43d8:	30 91 04 04 	lds	r19, 0x0404	; 0x800404 <display+0x36>
    43dc:	40 91 05 04 	lds	r20, 0x0405	; 0x800405 <display+0x37>
    43e0:	50 91 06 04 	lds	r21, 0x0406	; 0x800406 <display+0x38>
    43e4:	60 e0       	ldi	r22, 0x00	; 0
    43e6:	74 e2       	ldi	r23, 0x24	; 36
    43e8:	84 ef       	ldi	r24, 0xF4	; 244
    43ea:	90 e0       	ldi	r25, 0x00	; 0
    43ec:	0e 94 eb 23 	call	0x47d6	; 0x47d6 <__udivmodsi4>
    43f0:	20 51       	subi	r18, 0x10	; 16
    43f2:	31 09       	sbc	r19, r1
    43f4:	41 09       	sbc	r20, r1
    43f6:	51 09       	sbc	r21, r1
    43f8:	56 95       	lsr	r21
    43fa:	47 95       	ror	r20
    43fc:	37 95       	ror	r19
    43fe:	27 95       	ror	r18
    4400:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
begin():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:572
  // Init sequence
  static const uint8_t PROGMEM init1[] = {SSD1306_DISPLAYOFF,         // 0xAE
                                          SSD1306_SETDISPLAYCLOCKDIV, // 0xD5
                                          0x80, // the suggested ratio 0x80
                                          SSD1306_SETMULTIPLEX}; // 0xA8
  ssd1306_commandList(init1, sizeof(init1));
    4404:	64 e0       	ldi	r22, 0x04	; 4
    4406:	81 e4       	ldi	r24, 0x41	; 65
    4408:	9d e0       	ldi	r25, 0x0D	; 13
    440a:	0e 94 50 15 	call	0x2aa0	; 0x2aa0 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char) [clone .constprop.50]>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:573
  ssd1306_command1(HEIGHT - 1);
    440e:	60 91 d4 03 	lds	r22, 0x03D4	; 0x8003d4 <display+0x6>
    4412:	61 50       	subi	r22, 0x01	; 1
    4414:	8e ec       	ldi	r24, 0xCE	; 206
    4416:	93 e0       	ldi	r25, 0x03	; 3
    4418:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:579

  static const uint8_t PROGMEM init2[] = {SSD1306_SETDISPLAYOFFSET, // 0xD3
                                          0x0,                      // no offset
                                          SSD1306_SETSTARTLINE | 0x0, // line #0
                                          SSD1306_CHARGEPUMP};        // 0x8D
  ssd1306_commandList(init2, sizeof(init2));
    441c:	64 e0       	ldi	r22, 0x04	; 4
    441e:	8d e3       	ldi	r24, 0x3D	; 61
    4420:	9d e0       	ldi	r25, 0x0D	; 13
    4422:	0e 94 50 15 	call	0x2aa0	; 0x2aa0 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char) [clone .constprop.50]>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:581

  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
    4426:	80 91 f0 03 	lds	r24, 0x03F0	; 0x8003f0 <display+0x22>
main():
    442a:	64 e1       	ldi	r22, 0x14	; 20
begin():
    442c:	81 30       	cpi	r24, 0x01	; 1
    442e:	09 f4       	brne	.+2      	; 0x4432 <main+0x3ba>
main():
    4430:	60 e1       	ldi	r22, 0x10	; 16
begin():
    4432:	8e ec       	ldi	r24, 0xCE	; 206
    4434:	93 e0       	ldi	r25, 0x03	; 3
    4436:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:587

  static const uint8_t PROGMEM init3[] = {SSD1306_MEMORYMODE, // 0x20
                                          0x00, // 0x0 act like ks0108
                                          SSD1306_SEGREMAP | 0x1,
                                          SSD1306_COMSCANDEC};
  ssd1306_commandList(init3, sizeof(init3));
    443a:	64 e0       	ldi	r22, 0x04	; 4
    443c:	89 e3       	ldi	r24, 0x39	; 57
    443e:	9d e0       	ldi	r25, 0x0D	; 13
    4440:	0e 94 50 15 	call	0x2aa0	; 0x2aa0 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char) [clone .constprop.50]>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:590

  uint8_t comPins = 0x02;
  contrast = 0x8F;
    4444:	8f e8       	ldi	r24, 0x8F	; 143
    4446:	80 93 0b 04 	sts	0x040B, r24	; 0x80040b <display+0x3d>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:592

  if ((WIDTH == 128) && (HEIGHT == 32)) {
    444a:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <display+0x4>
    444e:	90 91 d3 03 	lds	r25, 0x03D3	; 0x8003d3 <display+0x5>
    4452:	80 38       	cpi	r24, 0x80	; 128
    4454:	91 05       	cpc	r25, r1
    4456:	09 f0       	breq	.+2      	; 0x445a <main+0x3e2>
    4458:	32 c1       	rjmp	.+612    	; 0x46be <main+0x646>
    445a:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <display+0x6>
    445e:	90 91 d5 03 	lds	r25, 0x03D5	; 0x8003d5 <display+0x7>
    4462:	80 34       	cpi	r24, 0x40	; 64
    4464:	91 05       	cpc	r25, r1
    4466:	09 f0       	breq	.+2      	; 0x446a <main+0x3f2>
    4468:	3a c1       	rjmp	.+628    	; 0x46de <main+0x666>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:597
    comPins = 0x02;
    contrast = 0x8F;
  } else if ((WIDTH == 128) && (HEIGHT == 64)) {
    comPins = 0x12;
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF;
    446a:	80 91 f0 03 	lds	r24, 0x03F0	; 0x8003f0 <display+0x22>
    446e:	81 30       	cpi	r24, 0x01	; 1
    4470:	09 f4       	brne	.+2      	; 0x4474 <main+0x3fc>
    4472:	23 c1       	rjmp	.+582    	; 0x46ba <main+0x642>
main():
    4474:	8f ec       	ldi	r24, 0xCF	; 207
begin():
    4476:	80 93 0b 04 	sts	0x040B, r24	; 0x80040b <display+0x3d>
main():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:596

  if ((WIDTH == 128) && (HEIGHT == 32)) {
    comPins = 0x02;
    contrast = 0x8F;
  } else if ((WIDTH == 128) && (HEIGHT == 64)) {
    comPins = 0x12;
    447a:	c2 e1       	ldi	r28, 0x12	; 18
begin():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:605
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF;
  } else {
    // Other screen varieties -- TBD
  }

  ssd1306_command1(SSD1306_SETCOMPINS);
    447c:	6a ed       	ldi	r22, 0xDA	; 218
    447e:	8e ec       	ldi	r24, 0xCE	; 206
    4480:	93 e0       	ldi	r25, 0x03	; 3
    4482:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:606
  ssd1306_command1(comPins);
    4486:	6c 2f       	mov	r22, r28
    4488:	8e ec       	ldi	r24, 0xCE	; 206
    448a:	93 e0       	ldi	r25, 0x03	; 3
    448c:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:607
  ssd1306_command1(SSD1306_SETCONTRAST);
    4490:	61 e8       	ldi	r22, 0x81	; 129
    4492:	8e ec       	ldi	r24, 0xCE	; 206
    4494:	93 e0       	ldi	r25, 0x03	; 3
    4496:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:608
  ssd1306_command1(contrast);
    449a:	60 91 0b 04 	lds	r22, 0x040B	; 0x80040b <display+0x3d>
    449e:	8e ec       	ldi	r24, 0xCE	; 206
    44a0:	93 e0       	ldi	r25, 0x03	; 3
    44a2:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:610

  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
    44a6:	69 ed       	ldi	r22, 0xD9	; 217
    44a8:	8e ec       	ldi	r24, 0xCE	; 206
    44aa:	93 e0       	ldi	r25, 0x03	; 3
    44ac:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:611
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
    44b0:	80 91 f0 03 	lds	r24, 0x03F0	; 0x8003f0 <display+0x22>
main():
    44b4:	61 ef       	ldi	r22, 0xF1	; 241
begin():
    44b6:	81 30       	cpi	r24, 0x01	; 1
    44b8:	09 f4       	brne	.+2      	; 0x44bc <main+0x444>
main():
    44ba:	62 e2       	ldi	r22, 0x22	; 34
begin():
    44bc:	8e ec       	ldi	r24, 0xCE	; 206
    44be:	93 e0       	ldi	r25, 0x03	; 3
    44c0:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:619
      0x40,
      SSD1306_DISPLAYALLON_RESUME, // 0xA4
      SSD1306_NORMALDISPLAY,       // 0xA6
      SSD1306_DEACTIVATE_SCROLL,
      SSD1306_DISPLAYON}; // Main screen turn on
  ssd1306_commandList(init5, sizeof(init5));
    44c4:	66 e0       	ldi	r22, 0x06	; 6
    44c6:	83 e3       	ldi	r24, 0x33	; 51
    44c8:	9d e0       	ldi	r25, 0x0D	; 13
    44ca:	0e 94 50 15 	call	0x2aa0	; 0x2aa0 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char) [clone .constprop.50]>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:621

  TRANSACTION_END
    44ce:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <display+0x1d>
    44d2:	90 91 ec 03 	lds	r25, 0x03EC	; 0x8003ec <display+0x1e>
    44d6:	89 2b       	or	r24, r25
    44d8:	09 f4       	brne	.+2      	; 0x44dc <main+0x464>
    44da:	05 c1       	rjmp	.+522    	; 0x46e6 <main+0x66e>
twi_setFrequency():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/Wire/src/utility/twi.c:142
    44dc:	20 91 07 04 	lds	r18, 0x0407	; 0x800407 <display+0x39>
    44e0:	30 91 08 04 	lds	r19, 0x0408	; 0x800408 <display+0x3a>
    44e4:	40 91 09 04 	lds	r20, 0x0409	; 0x800409 <display+0x3b>
    44e8:	50 91 0a 04 	lds	r21, 0x040A	; 0x80040a <display+0x3c>
    44ec:	60 e0       	ldi	r22, 0x00	; 0
    44ee:	74 e2       	ldi	r23, 0x24	; 36
    44f0:	84 ef       	ldi	r24, 0xF4	; 244
    44f2:	90 e0       	ldi	r25, 0x00	; 0
    44f4:	0e 94 eb 23 	call	0x47d6	; 0x47d6 <__udivmodsi4>
    44f8:	20 51       	subi	r18, 0x10	; 16
    44fa:	31 09       	sbc	r19, r1
    44fc:	41 09       	sbc	r20, r1
    44fe:	51 09       	sbc	r21, r1
    4500:	56 95       	lsr	r21
    4502:	47 95       	ror	r20
    4504:	37 95       	ror	r19
    4506:	27 95       	ror	r18
    4508:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    450c:	2b ce       	rjmp	.-938    	; 0x4164 <main+0xec>
begin():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:527
    // can accept different SDA/SCL pins, or if two SSD1306 instances
    // with different addresses -- only a single begin() is needed).
    if (periphBegin)
      wire->begin();
  } else { // Using one of the SPI modes, either soft or hardware
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
    450e:	61 e0       	ldi	r22, 0x01	; 1
    4510:	80 91 f4 03 	lds	r24, 0x03F4	; 0x8003f4 <display+0x26>
    4514:	0e 94 22 0b 	call	0x1644	; 0x1644 <pinMode>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:528
    pinMode(csPin, OUTPUT); // Same for chip select
    4518:	61 e0       	ldi	r22, 0x01	; 1
    451a:	80 91 f5 03 	lds	r24, 0x03F5	; 0x8003f5 <display+0x27>
    451e:	0e 94 22 0b 	call	0x1644	; 0x1644 <pinMode>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:530
#ifdef HAVE_PORTREG
    dcPort = (PortReg *)portOutputRegister(digitalPinToPort(dcPin));
    4522:	80 91 f4 03 	lds	r24, 0x03F4	; 0x8003f4 <display+0x26>
    4526:	08 2e       	mov	r0, r24
    4528:	00 0c       	add	r0, r0
    452a:	99 0b       	sbc	r25, r25
    452c:	fc 01       	movw	r30, r24
    452e:	e7 50       	subi	r30, 0x07	; 7
    4530:	fe 4e       	sbci	r31, 0xEE	; 238
    4532:	e4 91       	lpm	r30, Z
    4534:	f0 e0       	ldi	r31, 0x00	; 0
    4536:	ee 0f       	add	r30, r30
    4538:	ff 1f       	adc	r31, r31
    453a:	e1 51       	subi	r30, 0x11	; 17
    453c:	fe 4e       	sbci	r31, 0xEE	; 238
    453e:	25 91       	lpm	r18, Z+
    4540:	34 91       	lpm	r19, Z
    4542:	30 93 fc 03 	sts	0x03FC, r19	; 0x8003fc <display+0x2e>
    4546:	20 93 fb 03 	sts	0x03FB, r18	; 0x8003fb <display+0x2d>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:531
    dcPinMask = digitalPinToBitMask(dcPin);
    454a:	fc 01       	movw	r30, r24
    454c:	e0 5f       	subi	r30, 0xF0	; 240
    454e:	fd 4e       	sbci	r31, 0xED	; 237
    4550:	e4 91       	lpm	r30, Z
    4552:	e0 93 01 04 	sts	0x0401, r30	; 0x800401 <display+0x33>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:532
    csPort = (PortReg *)portOutputRegister(digitalPinToPort(csPin));
    4556:	80 91 f5 03 	lds	r24, 0x03F5	; 0x8003f5 <display+0x27>
    455a:	08 2e       	mov	r0, r24
    455c:	00 0c       	add	r0, r0
    455e:	99 0b       	sbc	r25, r25
    4560:	fc 01       	movw	r30, r24
    4562:	e7 50       	subi	r30, 0x07	; 7
    4564:	fe 4e       	sbci	r31, 0xEE	; 238
    4566:	e4 91       	lpm	r30, Z
    4568:	f0 e0       	ldi	r31, 0x00	; 0
    456a:	ee 0f       	add	r30, r30
    456c:	ff 1f       	adc	r31, r31
    456e:	e1 51       	subi	r30, 0x11	; 17
    4570:	fe 4e       	sbci	r31, 0xEE	; 238
    4572:	a5 91       	lpm	r26, Z+
    4574:	b4 91       	lpm	r27, Z
    4576:	b0 93 fe 03 	sts	0x03FE, r27	; 0x8003fe <display+0x30>
    457a:	a0 93 fd 03 	sts	0x03FD, r26	; 0x8003fd <display+0x2f>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:533
    csPinMask = digitalPinToBitMask(csPin);
    457e:	fc 01       	movw	r30, r24
    4580:	e0 5f       	subi	r30, 0xF0	; 240
    4582:	fd 4e       	sbci	r31, 0xED	; 237
    4584:	e4 91       	lpm	r30, Z
    4586:	e0 93 02 04 	sts	0x0402, r30	; 0x800402 <display+0x34>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:535
#endif
    SSD1306_DESELECT
    458a:	8c 91       	ld	r24, X
    458c:	e8 2b       	or	r30, r24
    458e:	ec 93       	st	X, r30
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:536
    if (spi) { // Hardware SPI
    4590:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <display+0x1b>
    4594:	90 91 ea 03 	lds	r25, 0x03EA	; 0x8003ea <display+0x1c>
    4598:	89 2b       	or	r24, r25
    459a:	09 f4       	brne	.+2      	; 0x459e <main+0x526>
    459c:	34 c0       	rjmp	.+104    	; 0x4606 <main+0x58e>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/SPI/src/SPI.cpp:28
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
  uint8_t sreg = SREG;
    459e:	cf b7       	in	r28, 0x3f	; 63
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/SPI/src/SPI.cpp:29
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    45a0:	f8 94       	cli
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/SPI/src/SPI.cpp:30
  if (!initialized) {
    45a2:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <SPIClass::initialized>
    45a6:	81 11       	cpse	r24, r1
    45a8:	27 c0       	rjmp	.+78     	; 0x45f8 <main+0x580>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/SPI/src/SPI.cpp:32
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    45aa:	e3 e0       	ldi	r30, 0x03	; 3
    45ac:	f2 e1       	ldi	r31, 0x12	; 18
    45ae:	84 91       	lpm	r24, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/SPI/src/SPI.cpp:33
    uint8_t bit = digitalPinToBitMask(SS);
    45b0:	ea e1       	ldi	r30, 0x1A	; 26
    45b2:	f2 e1       	ldi	r31, 0x12	; 18
    45b4:	94 91       	lpm	r25, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/SPI/src/SPI.cpp:34
    volatile uint8_t *reg = portModeRegister(port);
    45b6:	e8 2f       	mov	r30, r24
    45b8:	f0 e0       	ldi	r31, 0x00	; 0
    45ba:	ee 0f       	add	r30, r30
    45bc:	ff 1f       	adc	r31, r31
    45be:	eb 51       	subi	r30, 0x1B	; 27
    45c0:	fe 4e       	sbci	r31, 0xEE	; 238
    45c2:	a5 91       	lpm	r26, Z+
    45c4:	b4 91       	lpm	r27, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/SPI/src/SPI.cpp:38

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    45c6:	ec 91       	ld	r30, X
    45c8:	e9 23       	and	r30, r25
    45ca:	21 f4       	brne	.+8      	; 0x45d4 <main+0x55c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/SPI/src/SPI.cpp:39
      digitalWrite(SS, HIGH);
    45cc:	61 e0       	ldi	r22, 0x01	; 1
    45ce:	8a e0       	ldi	r24, 0x0A	; 10
    45d0:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <digitalWrite>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/SPI/src/SPI.cpp:45
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    45d4:	61 e0       	ldi	r22, 0x01	; 1
    45d6:	8a e0       	ldi	r24, 0x0A	; 10
    45d8:	0e 94 22 0b 	call	0x1644	; 0x1644 <pinMode>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/SPI/src/SPI.cpp:50

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    45dc:	8c b5       	in	r24, 0x2c	; 44
    45de:	80 61       	ori	r24, 0x10	; 16
    45e0:	8c bd       	out	0x2c, r24	; 44
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/SPI/src/SPI.cpp:51
    SPCR |= _BV(SPE);
    45e2:	8c b5       	in	r24, 0x2c	; 44
    45e4:	80 64       	ori	r24, 0x40	; 64
    45e6:	8c bd       	out	0x2c, r24	; 44
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/SPI/src/SPI.cpp:59
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    45e8:	61 e0       	ldi	r22, 0x01	; 1
    45ea:	8d e0       	ldi	r24, 0x0D	; 13
    45ec:	0e 94 22 0b 	call	0x1644	; 0x1644 <pinMode>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/SPI/src/SPI.cpp:60
    pinMode(MOSI, OUTPUT);
    45f0:	61 e0       	ldi	r22, 0x01	; 1
    45f2:	8b e0       	ldi	r24, 0x0B	; 11
    45f4:	0e 94 22 0b 	call	0x1644	; 0x1644 <pinMode>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/SPI/src/SPI.cpp:62
  }
  initialized++; // reference count
    45f8:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <SPIClass::initialized>
    45fc:	8f 5f       	subi	r24, 0xFF	; 255
    45fe:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <SPIClass::initialized>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/SPI/src/SPI.cpp:63
  SREG = sreg;
    4602:	cf bf       	out	0x3f, r28	; 63
    4604:	be ce       	rjmp	.-644    	; 0x4382 <main+0x30a>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:541
      // SPI peripheral begin same as wire check above.
      if (periphBegin)
        spi->begin();
    } else {                    // Soft SPI
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
    4606:	61 e0       	ldi	r22, 0x01	; 1
    4608:	80 91 f2 03 	lds	r24, 0x03F2	; 0x8003f2 <display+0x24>
    460c:	0e 94 22 0b 	call	0x1644	; 0x1644 <pinMode>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:542
      pinMode(clkPin, OUTPUT);
    4610:	61 e0       	ldi	r22, 0x01	; 1
    4612:	80 91 f3 03 	lds	r24, 0x03F3	; 0x8003f3 <display+0x25>
    4616:	0e 94 22 0b 	call	0x1644	; 0x1644 <pinMode>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:544
#ifdef HAVE_PORTREG
      mosiPort = (PortReg *)portOutputRegister(digitalPinToPort(mosiPin));
    461a:	80 91 f2 03 	lds	r24, 0x03F2	; 0x8003f2 <display+0x24>
    461e:	08 2e       	mov	r0, r24
    4620:	00 0c       	add	r0, r0
    4622:	99 0b       	sbc	r25, r25
    4624:	fc 01       	movw	r30, r24
    4626:	e7 50       	subi	r30, 0x07	; 7
    4628:	fe 4e       	sbci	r31, 0xEE	; 238
    462a:	e4 91       	lpm	r30, Z
    462c:	f0 e0       	ldi	r31, 0x00	; 0
    462e:	ee 0f       	add	r30, r30
    4630:	ff 1f       	adc	r31, r31
    4632:	e1 51       	subi	r30, 0x11	; 17
    4634:	fe 4e       	sbci	r31, 0xEE	; 238
    4636:	25 91       	lpm	r18, Z+
    4638:	34 91       	lpm	r19, Z
    463a:	30 93 f8 03 	sts	0x03F8, r19	; 0x8003f8 <display+0x2a>
    463e:	20 93 f7 03 	sts	0x03F7, r18	; 0x8003f7 <display+0x29>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:545
      mosiPinMask = digitalPinToBitMask(mosiPin);
    4642:	fc 01       	movw	r30, r24
    4644:	e0 5f       	subi	r30, 0xF0	; 240
    4646:	fd 4e       	sbci	r31, 0xED	; 237
    4648:	e4 91       	lpm	r30, Z
    464a:	e0 93 ff 03 	sts	0x03FF, r30	; 0x8003ff <display+0x31>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:546
      clkPort = (PortReg *)portOutputRegister(digitalPinToPort(clkPin));
    464e:	80 91 f3 03 	lds	r24, 0x03F3	; 0x8003f3 <display+0x25>
    4652:	08 2e       	mov	r0, r24
    4654:	00 0c       	add	r0, r0
    4656:	99 0b       	sbc	r25, r25
    4658:	fc 01       	movw	r30, r24
    465a:	e7 50       	subi	r30, 0x07	; 7
    465c:	fe 4e       	sbci	r31, 0xEE	; 238
    465e:	e4 91       	lpm	r30, Z
    4660:	f0 e0       	ldi	r31, 0x00	; 0
    4662:	ee 0f       	add	r30, r30
    4664:	ff 1f       	adc	r31, r31
    4666:	e1 51       	subi	r30, 0x11	; 17
    4668:	fe 4e       	sbci	r31, 0xEE	; 238
    466a:	a5 91       	lpm	r26, Z+
    466c:	b4 91       	lpm	r27, Z
    466e:	b0 93 fa 03 	sts	0x03FA, r27	; 0x8003fa <display+0x2c>
    4672:	a0 93 f9 03 	sts	0x03F9, r26	; 0x8003f9 <display+0x2b>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:547
      clkPinMask = digitalPinToBitMask(clkPin);
    4676:	fc 01       	movw	r30, r24
    4678:	e0 5f       	subi	r30, 0xF0	; 240
    467a:	fd 4e       	sbci	r31, 0xED	; 237
    467c:	e4 91       	lpm	r30, Z
    467e:	e0 93 00 04 	sts	0x0400, r30	; 0x800400 <display+0x32>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:548
      *clkPort &= ~clkPinMask; // Clock low
    4682:	8c 91       	ld	r24, X
    4684:	e0 95       	com	r30
    4686:	e8 23       	and	r30, r24
    4688:	ec 93       	st	X, r30
    468a:	7b ce       	rjmp	.-778    	; 0x4382 <main+0x30a>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:565
    digitalWrite(rstPin, LOW);  // Bring reset low
    delay(10);                  // Wait 10 ms
    digitalWrite(rstPin, HIGH); // Bring out of reset
  }

  TRANSACTION_START
    468c:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <display+0x1b>
    4690:	90 91 ea 03 	lds	r25, 0x03EA	; 0x8003ea <display+0x1c>
    4694:	89 2b       	or	r24, r25
    4696:	31 f0       	breq	.+12     	; 0x46a4 <main+0x62c>
    4698:	80 91 0c 04 	lds	r24, 0x040C	; 0x80040c <display+0x3e>
    469c:	90 91 0d 04 	lds	r25, 0x040D	; 0x80040d <display+0x3f>
    46a0:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <SPIClass::beginTransaction(SPISettings)>
    46a4:	e0 91 fd 03 	lds	r30, 0x03FD	; 0x8003fd <display+0x2f>
    46a8:	f0 91 fe 03 	lds	r31, 0x03FE	; 0x8003fe <display+0x30>
    46ac:	90 81       	ld	r25, Z
    46ae:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <display+0x34>
    46b2:	80 95       	com	r24
    46b4:	89 23       	and	r24, r25
    46b6:	80 83       	st	Z, r24
    46b8:	a5 ce       	rjmp	.-694    	; 0x4404 <main+0x38c>
main():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:597
  if ((WIDTH == 128) && (HEIGHT == 32)) {
    comPins = 0x02;
    contrast = 0x8F;
  } else if ((WIDTH == 128) && (HEIGHT == 64)) {
    comPins = 0x12;
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF;
    46ba:	8f e9       	ldi	r24, 0x9F	; 159
    46bc:	dc ce       	rjmp	.-584    	; 0x4476 <main+0x3fe>
begin():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:598
  } else if ((WIDTH == 96) && (HEIGHT == 16)) {
    46be:	80 36       	cpi	r24, 0x60	; 96
    46c0:	91 05       	cpc	r25, r1
    46c2:	69 f4       	brne	.+26     	; 0x46de <main+0x666>
    46c4:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <display+0x6>
    46c8:	90 91 d5 03 	lds	r25, 0x03D5	; 0x8003d5 <display+0x7>
    46cc:	40 97       	sbiw	r24, 0x10	; 16
    46ce:	39 f4       	brne	.+14     	; 0x46de <main+0x666>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:600
    comPins = 0x2; // ada x12
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF;
    46d0:	80 91 f0 03 	lds	r24, 0x03F0	; 0x8003f0 <display+0x22>
    46d4:	81 30       	cpi	r24, 0x01	; 1
    46d6:	29 f0       	breq	.+10     	; 0x46e2 <main+0x66a>
main():
    46d8:	8f ea       	ldi	r24, 0xAF	; 175
begin():
    46da:	80 93 0b 04 	sts	0x040B, r24	; 0x80040b <display+0x3d>
main():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:593

  uint8_t comPins = 0x02;
  contrast = 0x8F;

  if ((WIDTH == 128) && (HEIGHT == 32)) {
    comPins = 0x02;
    46de:	c2 e0       	ldi	r28, 0x02	; 2
    46e0:	cd ce       	rjmp	.-614    	; 0x447c <main+0x404>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:600
  } else if ((WIDTH == 128) && (HEIGHT == 64)) {
    comPins = 0x12;
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF;
  } else if ((WIDTH == 96) && (HEIGHT == 16)) {
    comPins = 0x2; // ada x12
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF;
    46e2:	80 e1       	ldi	r24, 0x10	; 16
    46e4:	fa cf       	rjmp	.-12     	; 0x46da <main+0x662>
begin():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:621
      SSD1306_NORMALDISPLAY,       // 0xA6
      SSD1306_DEACTIVATE_SCROLL,
      SSD1306_DISPLAYON}; // Main screen turn on
  ssd1306_commandList(init5, sizeof(init5));

  TRANSACTION_END
    46e6:	e0 91 fd 03 	lds	r30, 0x03FD	; 0x8003fd <display+0x2f>
    46ea:	f0 91 fe 03 	lds	r31, 0x03FE	; 0x8003fe <display+0x30>
    46ee:	80 81       	ld	r24, Z
    46f0:	90 91 02 04 	lds	r25, 0x0402	; 0x800402 <display+0x34>
    46f4:	89 2b       	or	r24, r25
    46f6:	80 83       	st	Z, r24
    46f8:	35 cd       	rjmp	.-1430   	; 0x4164 <main+0xec>

000046fa <_GLOBAL__sub_D_tabBand>:
_GLOBAL__sub_D_tabBand():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:180
}
    46fa:	cf 93       	push	r28
    46fc:	df 93       	push	r29
__base_dtor ():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:341
      rstPin(rst_pin) {}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
    46fe:	8c e3       	ldi	r24, 0x3C	; 60
    4700:	91 e0       	ldi	r25, 0x01	; 1
    4702:	90 93 cf 03 	sts	0x03CF, r25	; 0x8003cf <display+0x1>
    4706:	80 93 ce 03 	sts	0x03CE, r24	; 0x8003ce <display>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:342
  if (buffer) {
    470a:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <display+0x1f>
    470e:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <display+0x20>
    4712:	00 97       	sbiw	r24, 0x00	; 0
    4714:	11 f0       	breq	.+4      	; 0x471a <_GLOBAL__sub_D_tabBand+0x20>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:343
    free(buffer);
    4716:	0e 94 b7 24 	call	0x496e	; 0x496e <free>
_GLOBAL__sub_D_tabBand():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:65

/*
   Pre-defined Band Table - See the SI48XX ATDD - PROGRAMMING GUIDE page 17.
*/

String tabBand[] = { "FM1", "FM2", "FM3", "FM4", "FM5", "FM6", "FM7", "FM8", "FM9", "FM10", "FM11", "FM12", "FM13", "FM14", "FM15", "FM16", "FM17", "FM18", "FM19", "FM20",
    471a:	c4 e0       	ldi	r28, 0x04	; 4
    471c:	d5 e0       	ldi	r29, 0x05	; 5
__static_initialization_and_destruction_0():
    471e:	26 97       	sbiw	r28, 0x06	; 6
    4720:	ce 01       	movw	r24, r28
    4722:	0e 94 69 19 	call	0x32d2	; 0x32d2 <String::~String()>
    4726:	84 e0       	ldi	r24, 0x04	; 4
    4728:	ce 30       	cpi	r28, 0x0E	; 14
    472a:	d8 07       	cpc	r29, r24
    472c:	c1 f7       	brne	.-16     	; 0x471e <_GLOBAL__sub_D_tabBand+0x24>
_GLOBAL__sub_D_tabBand():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:180

    displayDial();  
  }

  delay(50);
}
    472e:	df 91       	pop	r29
    4730:	cf 91       	pop	r28
    4732:	08 95       	ret

00004734 <__muluhisi3>:
__muluhisi3():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    4734:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <__umulhisi3>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    4738:	a5 9f       	mul	r26, r21
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    473a:	90 0d       	add	r25, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    473c:	b4 9f       	mul	r27, r20
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    473e:	90 0d       	add	r25, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    4740:	a4 9f       	mul	r26, r20
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    4742:	80 0d       	add	r24, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    4744:	91 1d       	adc	r25, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    4746:	11 24       	eor	r1, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    4748:	08 95       	ret

0000474a <__prologue_saves__>:
__prologue_saves__():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2169
    474a:	2f 92       	push	r2
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2170
    474c:	3f 92       	push	r3
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2171
    474e:	4f 92       	push	r4
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2172
    4750:	5f 92       	push	r5
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2173
    4752:	6f 92       	push	r6
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2174
    4754:	7f 92       	push	r7
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2175
    4756:	8f 92       	push	r8
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2176
    4758:	9f 92       	push	r9
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2177
    475a:	af 92       	push	r10
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2178
    475c:	bf 92       	push	r11
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2179
    475e:	cf 92       	push	r12
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2180
    4760:	df 92       	push	r13
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2181
    4762:	ef 92       	push	r14
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2182
    4764:	ff 92       	push	r15
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2183
    4766:	0f 93       	push	r16
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2184
    4768:	1f 93       	push	r17
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2185
    476a:	cf 93       	push	r28
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2186
    476c:	df 93       	push	r29
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2200
    476e:	cd b7       	in	r28, 0x3d	; 61
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2201
    4770:	de b7       	in	r29, 0x3e	; 62
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2202
    4772:	ca 1b       	sub	r28, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2203
    4774:	db 0b       	sbc	r29, r27
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2204
    4776:	0f b6       	in	r0, 0x3f	; 63
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2205
    4778:	f8 94       	cli
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2206
    477a:	de bf       	out	0x3e, r29	; 62
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2207
    477c:	0f be       	out	0x3f, r0	; 63
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2208
    477e:	cd bf       	out	0x3d, r28	; 61
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2211
    4780:	09 94       	ijmp

00004782 <__epilogue_restores__>:
__epilogue_restores__():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2222
    4782:	2a 88       	ldd	r2, Y+18	; 0x12
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2223
    4784:	39 88       	ldd	r3, Y+17	; 0x11
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2224
    4786:	48 88       	ldd	r4, Y+16	; 0x10
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2225
    4788:	5f 84       	ldd	r5, Y+15	; 0x0f
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2226
    478a:	6e 84       	ldd	r6, Y+14	; 0x0e
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2227
    478c:	7d 84       	ldd	r7, Y+13	; 0x0d
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2228
    478e:	8c 84       	ldd	r8, Y+12	; 0x0c
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2229
    4790:	9b 84       	ldd	r9, Y+11	; 0x0b
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2230
    4792:	aa 84       	ldd	r10, Y+10	; 0x0a
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2231
    4794:	b9 84       	ldd	r11, Y+9	; 0x09
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2232
    4796:	c8 84       	ldd	r12, Y+8	; 0x08
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2233
    4798:	df 80       	ldd	r13, Y+7	; 0x07
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2234
    479a:	ee 80       	ldd	r14, Y+6	; 0x06
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2235
    479c:	fd 80       	ldd	r15, Y+5	; 0x05
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2236
    479e:	0c 81       	ldd	r16, Y+4	; 0x04
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2237
    47a0:	1b 81       	ldd	r17, Y+3	; 0x03
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2238
    47a2:	aa 81       	ldd	r26, Y+2	; 0x02
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2252
    47a4:	b9 81       	ldd	r27, Y+1	; 0x01
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2253
    47a6:	ce 0f       	add	r28, r30
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2254
    47a8:	d1 1d       	adc	r29, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2255
    47aa:	0f b6       	in	r0, 0x3f	; 63
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2256
    47ac:	f8 94       	cli
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2257
    47ae:	de bf       	out	0x3e, r29	; 62
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2258
    47b0:	0f be       	out	0x3f, r0	; 63
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2259
    47b2:	cd bf       	out	0x3d, r28	; 61
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2260
    47b4:	ed 01       	movw	r28, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2263
    47b6:	08 95       	ret

000047b8 <__umulhisi3>:
__umulhisi3():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    47b8:	a2 9f       	mul	r26, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    47ba:	b0 01       	movw	r22, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    47bc:	b3 9f       	mul	r27, r19
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    47be:	c0 01       	movw	r24, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    47c0:	a3 9f       	mul	r26, r19
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    47c2:	70 0d       	add	r23, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    47c4:	81 1d       	adc	r24, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    47c6:	11 24       	eor	r1, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    47c8:	91 1d       	adc	r25, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    47ca:	b2 9f       	mul	r27, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    47cc:	70 0d       	add	r23, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    47ce:	81 1d       	adc	r24, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    47d0:	11 24       	eor	r1, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    47d2:	91 1d       	adc	r25, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    47d4:	08 95       	ret

000047d6 <__udivmodsi4>:
__udivmodsi4():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    47d6:	a1 e2       	ldi	r26, 0x21	; 33
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    47d8:	1a 2e       	mov	r1, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    47da:	aa 1b       	sub	r26, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    47dc:	bb 1b       	sub	r27, r27
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    47de:	fd 01       	movw	r30, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    47e0:	0d c0       	rjmp	.+26     	; 0x47fc <__udivmodsi4_ep>

000047e2 <__udivmodsi4_loop>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    47e2:	aa 1f       	adc	r26, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    47e4:	bb 1f       	adc	r27, r27
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    47e6:	ee 1f       	adc	r30, r30
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    47e8:	ff 1f       	adc	r31, r31
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    47ea:	a2 17       	cp	r26, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    47ec:	b3 07       	cpc	r27, r19
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    47ee:	e4 07       	cpc	r30, r20
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    47f0:	f5 07       	cpc	r31, r21
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    47f2:	20 f0       	brcs	.+8      	; 0x47fc <__udivmodsi4_ep>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    47f4:	a2 1b       	sub	r26, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    47f6:	b3 0b       	sbc	r27, r19
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    47f8:	e4 0b       	sbc	r30, r20
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    47fa:	f5 0b       	sbc	r31, r21

000047fc <__udivmodsi4_ep>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    47fc:	66 1f       	adc	r22, r22
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    47fe:	77 1f       	adc	r23, r23
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    4800:	88 1f       	adc	r24, r24
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    4802:	99 1f       	adc	r25, r25
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    4804:	1a 94       	dec	r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    4806:	69 f7       	brne	.-38     	; 0x47e2 <__udivmodsi4_loop>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    4808:	60 95       	com	r22
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    480a:	70 95       	com	r23
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    480c:	80 95       	com	r24
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    480e:	90 95       	com	r25
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    4810:	9b 01       	movw	r18, r22
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    4812:	ac 01       	movw	r20, r24
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    4814:	bd 01       	movw	r22, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    4816:	cf 01       	movw	r24, r30
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    4818:	08 95       	ret

0000481a <__mulshisi3>:
__mulshisi3():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:603
    481a:	b7 ff       	sbrs	r27, 7
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:605
    481c:	0c 94 9a 23 	jmp	0x4734	; 0x4734 <__muluhisi3>

00004820 <__mulohisi3>:
__mulohisi3():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:613
    4820:	0e 94 9a 23 	call	0x4734	; 0x4734 <__muluhisi3>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:615
    4824:	82 1b       	sub	r24, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:616
    4826:	93 0b       	sbc	r25, r19
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:617
    4828:	08 95       	ret

0000482a <__tablejump2__>:
__tablejump2__():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    482a:	ee 0f       	add	r30, r30
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    482c:	ff 1f       	adc	r31, r31
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    482e:	05 90       	lpm	r0, Z+
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    4830:	f4 91       	lpm	r31, Z
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    4832:	e0 2d       	mov	r30, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    4834:	09 94       	ijmp

00004836 <malloc>:
malloc():
    4836:	0f 93       	push	r16
    4838:	1f 93       	push	r17
    483a:	cf 93       	push	r28
    483c:	df 93       	push	r29
    483e:	82 30       	cpi	r24, 0x02	; 2
    4840:	91 05       	cpc	r25, r1
    4842:	10 f4       	brcc	.+4      	; 0x4848 <malloc+0x12>
    4844:	82 e0       	ldi	r24, 0x02	; 2
    4846:	90 e0       	ldi	r25, 0x00	; 0
    4848:	e0 91 06 05 	lds	r30, 0x0506	; 0x800506 <__flp>
    484c:	f0 91 07 05 	lds	r31, 0x0507	; 0x800507 <__flp+0x1>
    4850:	30 e0       	ldi	r19, 0x00	; 0
    4852:	20 e0       	ldi	r18, 0x00	; 0
    4854:	b0 e0       	ldi	r27, 0x00	; 0
    4856:	a0 e0       	ldi	r26, 0x00	; 0
    4858:	30 97       	sbiw	r30, 0x00	; 0
    485a:	99 f4       	brne	.+38     	; 0x4882 <malloc+0x4c>
    485c:	21 15       	cp	r18, r1
    485e:	31 05       	cpc	r19, r1
    4860:	09 f4       	brne	.+2      	; 0x4864 <malloc+0x2e>
    4862:	4a c0       	rjmp	.+148    	; 0x48f8 <malloc+0xc2>
    4864:	28 1b       	sub	r18, r24
    4866:	39 0b       	sbc	r19, r25
    4868:	24 30       	cpi	r18, 0x04	; 4
    486a:	31 05       	cpc	r19, r1
    486c:	d8 f5       	brcc	.+118    	; 0x48e4 <malloc+0xae>
    486e:	8a 81       	ldd	r24, Y+2	; 0x02
    4870:	9b 81       	ldd	r25, Y+3	; 0x03
    4872:	61 15       	cp	r22, r1
    4874:	71 05       	cpc	r23, r1
    4876:	89 f1       	breq	.+98     	; 0x48da <malloc+0xa4>
    4878:	fb 01       	movw	r30, r22
    487a:	93 83       	std	Z+3, r25	; 0x03
    487c:	82 83       	std	Z+2, r24	; 0x02
    487e:	fe 01       	movw	r30, r28
    4880:	11 c0       	rjmp	.+34     	; 0x48a4 <malloc+0x6e>
    4882:	40 81       	ld	r20, Z
    4884:	51 81       	ldd	r21, Z+1	; 0x01
    4886:	02 81       	ldd	r16, Z+2	; 0x02
    4888:	13 81       	ldd	r17, Z+3	; 0x03
    488a:	48 17       	cp	r20, r24
    488c:	59 07       	cpc	r21, r25
    488e:	e0 f0       	brcs	.+56     	; 0x48c8 <malloc+0x92>
    4890:	48 17       	cp	r20, r24
    4892:	59 07       	cpc	r21, r25
    4894:	99 f4       	brne	.+38     	; 0x48bc <malloc+0x86>
    4896:	10 97       	sbiw	r26, 0x00	; 0
    4898:	61 f0       	breq	.+24     	; 0x48b2 <malloc+0x7c>
    489a:	12 96       	adiw	r26, 0x02	; 2
    489c:	0c 93       	st	X, r16
    489e:	12 97       	sbiw	r26, 0x02	; 2
    48a0:	13 96       	adiw	r26, 0x03	; 3
    48a2:	1c 93       	st	X, r17
    48a4:	32 96       	adiw	r30, 0x02	; 2
    48a6:	cf 01       	movw	r24, r30
    48a8:	df 91       	pop	r29
    48aa:	cf 91       	pop	r28
    48ac:	1f 91       	pop	r17
    48ae:	0f 91       	pop	r16
    48b0:	08 95       	ret
    48b2:	00 93 06 05 	sts	0x0506, r16	; 0x800506 <__flp>
    48b6:	10 93 07 05 	sts	0x0507, r17	; 0x800507 <__flp+0x1>
    48ba:	f4 cf       	rjmp	.-24     	; 0x48a4 <malloc+0x6e>
    48bc:	21 15       	cp	r18, r1
    48be:	31 05       	cpc	r19, r1
    48c0:	51 f0       	breq	.+20     	; 0x48d6 <malloc+0xa0>
    48c2:	42 17       	cp	r20, r18
    48c4:	53 07       	cpc	r21, r19
    48c6:	38 f0       	brcs	.+14     	; 0x48d6 <malloc+0xa0>
    48c8:	a9 01       	movw	r20, r18
    48ca:	db 01       	movw	r26, r22
    48cc:	9a 01       	movw	r18, r20
    48ce:	bd 01       	movw	r22, r26
    48d0:	df 01       	movw	r26, r30
    48d2:	f8 01       	movw	r30, r16
    48d4:	c1 cf       	rjmp	.-126    	; 0x4858 <malloc+0x22>
    48d6:	ef 01       	movw	r28, r30
    48d8:	f9 cf       	rjmp	.-14     	; 0x48cc <malloc+0x96>
    48da:	90 93 07 05 	sts	0x0507, r25	; 0x800507 <__flp+0x1>
    48de:	80 93 06 05 	sts	0x0506, r24	; 0x800506 <__flp>
    48e2:	cd cf       	rjmp	.-102    	; 0x487e <malloc+0x48>
    48e4:	fe 01       	movw	r30, r28
    48e6:	e2 0f       	add	r30, r18
    48e8:	f3 1f       	adc	r31, r19
    48ea:	81 93       	st	Z+, r24
    48ec:	91 93       	st	Z+, r25
    48ee:	22 50       	subi	r18, 0x02	; 2
    48f0:	31 09       	sbc	r19, r1
    48f2:	39 83       	std	Y+1, r19	; 0x01
    48f4:	28 83       	st	Y, r18
    48f6:	d7 cf       	rjmp	.-82     	; 0x48a6 <malloc+0x70>
    48f8:	20 91 04 05 	lds	r18, 0x0504	; 0x800504 <__brkval>
    48fc:	30 91 05 05 	lds	r19, 0x0505	; 0x800505 <__brkval+0x1>
    4900:	23 2b       	or	r18, r19
    4902:	41 f4       	brne	.+16     	; 0x4914 <malloc+0xde>
    4904:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__malloc_heap_start>
    4908:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__malloc_heap_start+0x1>
    490c:	30 93 05 05 	sts	0x0505, r19	; 0x800505 <__brkval+0x1>
    4910:	20 93 04 05 	sts	0x0504, r18	; 0x800504 <__brkval>
    4914:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__malloc_heap_end>
    4918:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__malloc_heap_end+0x1>
    491c:	21 15       	cp	r18, r1
    491e:	31 05       	cpc	r19, r1
    4920:	41 f4       	brne	.+16     	; 0x4932 <malloc+0xfc>
    4922:	2d b7       	in	r18, 0x3d	; 61
    4924:	3e b7       	in	r19, 0x3e	; 62
    4926:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <__malloc_margin>
    492a:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <__malloc_margin+0x1>
    492e:	24 1b       	sub	r18, r20
    4930:	35 0b       	sbc	r19, r21
    4932:	e0 91 04 05 	lds	r30, 0x0504	; 0x800504 <__brkval>
    4936:	f0 91 05 05 	lds	r31, 0x0505	; 0x800505 <__brkval+0x1>
    493a:	e2 17       	cp	r30, r18
    493c:	f3 07       	cpc	r31, r19
    493e:	a0 f4       	brcc	.+40     	; 0x4968 <malloc+0x132>
    4940:	2e 1b       	sub	r18, r30
    4942:	3f 0b       	sbc	r19, r31
    4944:	28 17       	cp	r18, r24
    4946:	39 07       	cpc	r19, r25
    4948:	78 f0       	brcs	.+30     	; 0x4968 <malloc+0x132>
    494a:	ac 01       	movw	r20, r24
    494c:	4e 5f       	subi	r20, 0xFE	; 254
    494e:	5f 4f       	sbci	r21, 0xFF	; 255
    4950:	24 17       	cp	r18, r20
    4952:	35 07       	cpc	r19, r21
    4954:	48 f0       	brcs	.+18     	; 0x4968 <malloc+0x132>
    4956:	4e 0f       	add	r20, r30
    4958:	5f 1f       	adc	r21, r31
    495a:	50 93 05 05 	sts	0x0505, r21	; 0x800505 <__brkval+0x1>
    495e:	40 93 04 05 	sts	0x0504, r20	; 0x800504 <__brkval>
    4962:	81 93       	st	Z+, r24
    4964:	91 93       	st	Z+, r25
    4966:	9f cf       	rjmp	.-194    	; 0x48a6 <malloc+0x70>
    4968:	f0 e0       	ldi	r31, 0x00	; 0
    496a:	e0 e0       	ldi	r30, 0x00	; 0
    496c:	9c cf       	rjmp	.-200    	; 0x48a6 <malloc+0x70>

0000496e <free>:
free():
    496e:	cf 93       	push	r28
    4970:	df 93       	push	r29
    4972:	00 97       	sbiw	r24, 0x00	; 0
    4974:	e9 f0       	breq	.+58     	; 0x49b0 <free+0x42>
    4976:	fc 01       	movw	r30, r24
    4978:	32 97       	sbiw	r30, 0x02	; 2
    497a:	13 82       	std	Z+3, r1	; 0x03
    497c:	12 82       	std	Z+2, r1	; 0x02
    497e:	a0 91 06 05 	lds	r26, 0x0506	; 0x800506 <__flp>
    4982:	b0 91 07 05 	lds	r27, 0x0507	; 0x800507 <__flp+0x1>
    4986:	ed 01       	movw	r28, r26
    4988:	30 e0       	ldi	r19, 0x00	; 0
    498a:	20 e0       	ldi	r18, 0x00	; 0
    498c:	10 97       	sbiw	r26, 0x00	; 0
    498e:	a1 f4       	brne	.+40     	; 0x49b8 <free+0x4a>
    4990:	20 81       	ld	r18, Z
    4992:	31 81       	ldd	r19, Z+1	; 0x01
    4994:	82 0f       	add	r24, r18
    4996:	93 1f       	adc	r25, r19
    4998:	20 91 04 05 	lds	r18, 0x0504	; 0x800504 <__brkval>
    499c:	30 91 05 05 	lds	r19, 0x0505	; 0x800505 <__brkval+0x1>
    49a0:	28 17       	cp	r18, r24
    49a2:	39 07       	cpc	r19, r25
    49a4:	09 f0       	breq	.+2      	; 0x49a8 <free+0x3a>
    49a6:	61 c0       	rjmp	.+194    	; 0x4a6a <free+0xfc>
    49a8:	f0 93 05 05 	sts	0x0505, r31	; 0x800505 <__brkval+0x1>
    49ac:	e0 93 04 05 	sts	0x0504, r30	; 0x800504 <__brkval>
    49b0:	df 91       	pop	r29
    49b2:	cf 91       	pop	r28
    49b4:	08 95       	ret
    49b6:	ea 01       	movw	r28, r20
    49b8:	ce 17       	cp	r28, r30
    49ba:	df 07       	cpc	r29, r31
    49bc:	e8 f5       	brcc	.+122    	; 0x4a38 <free+0xca>
    49be:	4a 81       	ldd	r20, Y+2	; 0x02
    49c0:	5b 81       	ldd	r21, Y+3	; 0x03
    49c2:	9e 01       	movw	r18, r28
    49c4:	41 15       	cp	r20, r1
    49c6:	51 05       	cpc	r21, r1
    49c8:	b1 f7       	brne	.-20     	; 0x49b6 <free+0x48>
    49ca:	e9 01       	movw	r28, r18
    49cc:	fb 83       	std	Y+3, r31	; 0x03
    49ce:	ea 83       	std	Y+2, r30	; 0x02
    49d0:	49 91       	ld	r20, Y+
    49d2:	59 91       	ld	r21, Y+
    49d4:	c4 0f       	add	r28, r20
    49d6:	d5 1f       	adc	r29, r21
    49d8:	ec 17       	cp	r30, r28
    49da:	fd 07       	cpc	r31, r29
    49dc:	61 f4       	brne	.+24     	; 0x49f6 <free+0x88>
    49de:	80 81       	ld	r24, Z
    49e0:	91 81       	ldd	r25, Z+1	; 0x01
    49e2:	02 96       	adiw	r24, 0x02	; 2
    49e4:	84 0f       	add	r24, r20
    49e6:	95 1f       	adc	r25, r21
    49e8:	e9 01       	movw	r28, r18
    49ea:	99 83       	std	Y+1, r25	; 0x01
    49ec:	88 83       	st	Y, r24
    49ee:	82 81       	ldd	r24, Z+2	; 0x02
    49f0:	93 81       	ldd	r25, Z+3	; 0x03
    49f2:	9b 83       	std	Y+3, r25	; 0x03
    49f4:	8a 83       	std	Y+2, r24	; 0x02
    49f6:	f0 e0       	ldi	r31, 0x00	; 0
    49f8:	e0 e0       	ldi	r30, 0x00	; 0
    49fa:	12 96       	adiw	r26, 0x02	; 2
    49fc:	8d 91       	ld	r24, X+
    49fe:	9c 91       	ld	r25, X
    4a00:	13 97       	sbiw	r26, 0x03	; 3
    4a02:	00 97       	sbiw	r24, 0x00	; 0
    4a04:	b9 f5       	brne	.+110    	; 0x4a74 <free+0x106>
    4a06:	2d 91       	ld	r18, X+
    4a08:	3c 91       	ld	r19, X
    4a0a:	11 97       	sbiw	r26, 0x01	; 1
    4a0c:	cd 01       	movw	r24, r26
    4a0e:	02 96       	adiw	r24, 0x02	; 2
    4a10:	82 0f       	add	r24, r18
    4a12:	93 1f       	adc	r25, r19
    4a14:	20 91 04 05 	lds	r18, 0x0504	; 0x800504 <__brkval>
    4a18:	30 91 05 05 	lds	r19, 0x0505	; 0x800505 <__brkval+0x1>
    4a1c:	28 17       	cp	r18, r24
    4a1e:	39 07       	cpc	r19, r25
    4a20:	39 f6       	brne	.-114    	; 0x49b0 <free+0x42>
    4a22:	30 97       	sbiw	r30, 0x00	; 0
    4a24:	51 f5       	brne	.+84     	; 0x4a7a <free+0x10c>
    4a26:	10 92 07 05 	sts	0x0507, r1	; 0x800507 <__flp+0x1>
    4a2a:	10 92 06 05 	sts	0x0506, r1	; 0x800506 <__flp>
    4a2e:	b0 93 05 05 	sts	0x0505, r27	; 0x800505 <__brkval+0x1>
    4a32:	a0 93 04 05 	sts	0x0504, r26	; 0x800504 <__brkval>
    4a36:	bc cf       	rjmp	.-136    	; 0x49b0 <free+0x42>
    4a38:	d3 83       	std	Z+3, r29	; 0x03
    4a3a:	c2 83       	std	Z+2, r28	; 0x02
    4a3c:	40 81       	ld	r20, Z
    4a3e:	51 81       	ldd	r21, Z+1	; 0x01
    4a40:	84 0f       	add	r24, r20
    4a42:	95 1f       	adc	r25, r21
    4a44:	c8 17       	cp	r28, r24
    4a46:	d9 07       	cpc	r29, r25
    4a48:	61 f4       	brne	.+24     	; 0x4a62 <free+0xf4>
    4a4a:	4e 5f       	subi	r20, 0xFE	; 254
    4a4c:	5f 4f       	sbci	r21, 0xFF	; 255
    4a4e:	88 81       	ld	r24, Y
    4a50:	99 81       	ldd	r25, Y+1	; 0x01
    4a52:	48 0f       	add	r20, r24
    4a54:	59 1f       	adc	r21, r25
    4a56:	51 83       	std	Z+1, r21	; 0x01
    4a58:	40 83       	st	Z, r20
    4a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    4a5c:	9b 81       	ldd	r25, Y+3	; 0x03
    4a5e:	93 83       	std	Z+3, r25	; 0x03
    4a60:	82 83       	std	Z+2, r24	; 0x02
    4a62:	21 15       	cp	r18, r1
    4a64:	31 05       	cpc	r19, r1
    4a66:	09 f0       	breq	.+2      	; 0x4a6a <free+0xfc>
    4a68:	b0 cf       	rjmp	.-160    	; 0x49ca <free+0x5c>
    4a6a:	f0 93 07 05 	sts	0x0507, r31	; 0x800507 <__flp+0x1>
    4a6e:	e0 93 06 05 	sts	0x0506, r30	; 0x800506 <__flp>
    4a72:	9e cf       	rjmp	.-196    	; 0x49b0 <free+0x42>
    4a74:	fd 01       	movw	r30, r26
    4a76:	dc 01       	movw	r26, r24
    4a78:	c0 cf       	rjmp	.-128    	; 0x49fa <free+0x8c>
    4a7a:	13 82       	std	Z+3, r1	; 0x03
    4a7c:	12 82       	std	Z+2, r1	; 0x02
    4a7e:	d7 cf       	rjmp	.-82     	; 0x4a2e <free+0xc0>

00004a80 <realloc>:
realloc():
    4a80:	b0 e0       	ldi	r27, 0x00	; 0
    4a82:	a0 e0       	ldi	r26, 0x00	; 0
    4a84:	e6 e4       	ldi	r30, 0x46	; 70
    4a86:	f5 e2       	ldi	r31, 0x25	; 37
    4a88:	0c 94 a7 23 	jmp	0x474e	; 0x474e <__prologue_saves__+0x4>
    4a8c:	8c 01       	movw	r16, r24
    4a8e:	00 97       	sbiw	r24, 0x00	; 0
    4a90:	51 f4       	brne	.+20     	; 0x4aa6 <realloc+0x26>
    4a92:	cb 01       	movw	r24, r22
    4a94:	0e 94 1b 24 	call	0x4836	; 0x4836 <malloc>
    4a98:	8c 01       	movw	r16, r24
    4a9a:	c8 01       	movw	r24, r16
    4a9c:	cd b7       	in	r28, 0x3d	; 61
    4a9e:	de b7       	in	r29, 0x3e	; 62
    4aa0:	e0 e1       	ldi	r30, 0x10	; 16
    4aa2:	0c 94 c3 23 	jmp	0x4786	; 0x4786 <__epilogue_restores__+0x4>
    4aa6:	fc 01       	movw	r30, r24
    4aa8:	e6 0f       	add	r30, r22
    4aaa:	f7 1f       	adc	r31, r23
    4aac:	9c 01       	movw	r18, r24
    4aae:	22 50       	subi	r18, 0x02	; 2
    4ab0:	31 09       	sbc	r19, r1
    4ab2:	e2 17       	cp	r30, r18
    4ab4:	f3 07       	cpc	r31, r19
    4ab6:	08 f4       	brcc	.+2      	; 0x4aba <realloc+0x3a>
    4ab8:	9d c0       	rjmp	.+314    	; 0x4bf4 <realloc+0x174>
    4aba:	d9 01       	movw	r26, r18
    4abc:	cd 91       	ld	r28, X+
    4abe:	dc 91       	ld	r29, X
    4ac0:	11 97       	sbiw	r26, 0x01	; 1
    4ac2:	c6 17       	cp	r28, r22
    4ac4:	d7 07       	cpc	r29, r23
    4ac6:	98 f0       	brcs	.+38     	; 0x4aee <realloc+0x6e>
    4ac8:	c5 30       	cpi	r28, 0x05	; 5
    4aca:	d1 05       	cpc	r29, r1
    4acc:	30 f3       	brcs	.-52     	; 0x4a9a <realloc+0x1a>
    4ace:	ce 01       	movw	r24, r28
    4ad0:	04 97       	sbiw	r24, 0x04	; 4
    4ad2:	86 17       	cp	r24, r22
    4ad4:	97 07       	cpc	r25, r23
    4ad6:	08 f3       	brcs	.-62     	; 0x4a9a <realloc+0x1a>
    4ad8:	c6 1b       	sub	r28, r22
    4ada:	d7 0b       	sbc	r29, r23
    4adc:	22 97       	sbiw	r28, 0x02	; 2
    4ade:	c1 93       	st	Z+, r28
    4ae0:	d1 93       	st	Z+, r29
    4ae2:	6d 93       	st	X+, r22
    4ae4:	7c 93       	st	X, r23
    4ae6:	cf 01       	movw	r24, r30
    4ae8:	0e 94 b7 24 	call	0x496e	; 0x496e <free>
    4aec:	d6 cf       	rjmp	.-84     	; 0x4a9a <realloc+0x1a>
    4aee:	5b 01       	movw	r10, r22
    4af0:	ac 1a       	sub	r10, r28
    4af2:	bd 0a       	sbc	r11, r29
    4af4:	4c 01       	movw	r8, r24
    4af6:	8c 0e       	add	r8, r28
    4af8:	9d 1e       	adc	r9, r29
    4afa:	a0 91 06 05 	lds	r26, 0x0506	; 0x800506 <__flp>
    4afe:	b0 91 07 05 	lds	r27, 0x0507	; 0x800507 <__flp+0x1>
    4b02:	51 2c       	mov	r5, r1
    4b04:	41 2c       	mov	r4, r1
    4b06:	f1 2c       	mov	r15, r1
    4b08:	e1 2c       	mov	r14, r1
    4b0a:	10 97       	sbiw	r26, 0x00	; 0
    4b0c:	31 f5       	brne	.+76     	; 0x4b5a <realloc+0xda>
    4b0e:	80 91 04 05 	lds	r24, 0x0504	; 0x800504 <__brkval>
    4b12:	90 91 05 05 	lds	r25, 0x0505	; 0x800505 <__brkval+0x1>
    4b16:	88 15       	cp	r24, r8
    4b18:	99 05       	cpc	r25, r9
    4b1a:	09 f0       	breq	.+2      	; 0x4b1e <realloc+0x9e>
    4b1c:	5c c0       	rjmp	.+184    	; 0x4bd6 <realloc+0x156>
    4b1e:	46 16       	cp	r4, r22
    4b20:	57 06       	cpc	r5, r23
    4b22:	08 f0       	brcs	.+2      	; 0x4b26 <realloc+0xa6>
    4b24:	58 c0       	rjmp	.+176    	; 0x4bd6 <realloc+0x156>
    4b26:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__malloc_heap_end>
    4b2a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__malloc_heap_end+0x1>
    4b2e:	00 97       	sbiw	r24, 0x00	; 0
    4b30:	41 f4       	brne	.+16     	; 0x4b42 <realloc+0xc2>
    4b32:	8d b7       	in	r24, 0x3d	; 61
    4b34:	9e b7       	in	r25, 0x3e	; 62
    4b36:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <__malloc_margin>
    4b3a:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <__malloc_margin+0x1>
    4b3e:	84 1b       	sub	r24, r20
    4b40:	95 0b       	sbc	r25, r21
    4b42:	e8 17       	cp	r30, r24
    4b44:	f9 07       	cpc	r31, r25
    4b46:	08 f0       	brcs	.+2      	; 0x4b4a <realloc+0xca>
    4b48:	55 c0       	rjmp	.+170    	; 0x4bf4 <realloc+0x174>
    4b4a:	f0 93 05 05 	sts	0x0505, r31	; 0x800505 <__brkval+0x1>
    4b4e:	e0 93 04 05 	sts	0x0504, r30	; 0x800504 <__brkval>
    4b52:	f9 01       	movw	r30, r18
    4b54:	71 83       	std	Z+1, r23	; 0x01
    4b56:	60 83       	st	Z, r22
    4b58:	a0 cf       	rjmp	.-192    	; 0x4a9a <realloc+0x1a>
    4b5a:	8d 91       	ld	r24, X+
    4b5c:	9c 91       	ld	r25, X
    4b5e:	11 97       	sbiw	r26, 0x01	; 1
    4b60:	12 96       	adiw	r26, 0x02	; 2
    4b62:	6c 90       	ld	r6, X
    4b64:	12 97       	sbiw	r26, 0x02	; 2
    4b66:	13 96       	adiw	r26, 0x03	; 3
    4b68:	7c 90       	ld	r7, X
    4b6a:	13 97       	sbiw	r26, 0x03	; 3
    4b6c:	a8 15       	cp	r26, r8
    4b6e:	b9 05       	cpc	r27, r9
    4b70:	59 f5       	brne	.+86     	; 0x4bc8 <realloc+0x148>
    4b72:	6c 01       	movw	r12, r24
    4b74:	42 e0       	ldi	r20, 0x02	; 2
    4b76:	c4 0e       	add	r12, r20
    4b78:	d1 1c       	adc	r13, r1
    4b7a:	ca 14       	cp	r12, r10
    4b7c:	db 04       	cpc	r13, r11
    4b7e:	20 f1       	brcs	.+72     	; 0x4bc8 <realloc+0x148>
    4b80:	ac 01       	movw	r20, r24
    4b82:	4a 19       	sub	r20, r10
    4b84:	5b 09       	sbc	r21, r11
    4b86:	da 01       	movw	r26, r20
    4b88:	12 96       	adiw	r26, 0x02	; 2
    4b8a:	15 97       	sbiw	r26, 0x05	; 5
    4b8c:	80 f0       	brcs	.+32     	; 0x4bae <realloc+0x12e>
    4b8e:	62 82       	std	Z+2, r6	; 0x02
    4b90:	73 82       	std	Z+3, r7	; 0x03
    4b92:	51 83       	std	Z+1, r21	; 0x01
    4b94:	40 83       	st	Z, r20
    4b96:	d9 01       	movw	r26, r18
    4b98:	6d 93       	st	X+, r22
    4b9a:	7c 93       	st	X, r23
    4b9c:	e1 14       	cp	r14, r1
    4b9e:	f1 04       	cpc	r15, r1
    4ba0:	71 f0       	breq	.+28     	; 0x4bbe <realloc+0x13e>
    4ba2:	d7 01       	movw	r26, r14
    4ba4:	13 96       	adiw	r26, 0x03	; 3
    4ba6:	fc 93       	st	X, r31
    4ba8:	ee 93       	st	-X, r30
    4baa:	12 97       	sbiw	r26, 0x02	; 2
    4bac:	76 cf       	rjmp	.-276    	; 0x4a9a <realloc+0x1a>
    4bae:	22 96       	adiw	r28, 0x02	; 2
    4bb0:	8c 0f       	add	r24, r28
    4bb2:	9d 1f       	adc	r25, r29
    4bb4:	f9 01       	movw	r30, r18
    4bb6:	91 83       	std	Z+1, r25	; 0x01
    4bb8:	80 83       	st	Z, r24
    4bba:	f3 01       	movw	r30, r6
    4bbc:	ef cf       	rjmp	.-34     	; 0x4b9c <realloc+0x11c>
    4bbe:	f0 93 07 05 	sts	0x0507, r31	; 0x800507 <__flp+0x1>
    4bc2:	e0 93 06 05 	sts	0x0506, r30	; 0x800506 <__flp>
    4bc6:	69 cf       	rjmp	.-302    	; 0x4a9a <realloc+0x1a>
    4bc8:	48 16       	cp	r4, r24
    4bca:	59 06       	cpc	r5, r25
    4bcc:	08 f4       	brcc	.+2      	; 0x4bd0 <realloc+0x150>
    4bce:	2c 01       	movw	r4, r24
    4bd0:	7d 01       	movw	r14, r26
    4bd2:	d3 01       	movw	r26, r6
    4bd4:	9a cf       	rjmp	.-204    	; 0x4b0a <realloc+0x8a>
    4bd6:	cb 01       	movw	r24, r22
    4bd8:	0e 94 1b 24 	call	0x4836	; 0x4836 <malloc>
    4bdc:	7c 01       	movw	r14, r24
    4bde:	00 97       	sbiw	r24, 0x00	; 0
    4be0:	49 f0       	breq	.+18     	; 0x4bf4 <realloc+0x174>
    4be2:	ae 01       	movw	r20, r28
    4be4:	b8 01       	movw	r22, r16
    4be6:	0e 94 02 26 	call	0x4c04	; 0x4c04 <memcpy>
    4bea:	c8 01       	movw	r24, r16
    4bec:	0e 94 b7 24 	call	0x496e	; 0x496e <free>
    4bf0:	87 01       	movw	r16, r14
    4bf2:	53 cf       	rjmp	.-346    	; 0x4a9a <realloc+0x1a>
    4bf4:	10 e0       	ldi	r17, 0x00	; 0
    4bf6:	00 e0       	ldi	r16, 0x00	; 0
    4bf8:	50 cf       	rjmp	.-352    	; 0x4a9a <realloc+0x1a>

00004bfa <abort>:
abort():
    4bfa:	81 e0       	ldi	r24, 0x01	; 1
    4bfc:	90 e0       	ldi	r25, 0x00	; 0
    4bfe:	f8 94       	cli
    4c00:	0c 94 19 26 	jmp	0x4c32	; 0x4c32 <__do_global_dtors>

00004c04 <memcpy>:
memcpy():
    4c04:	fb 01       	movw	r30, r22
    4c06:	dc 01       	movw	r26, r24
    4c08:	02 c0       	rjmp	.+4      	; 0x4c0e <memcpy+0xa>
    4c0a:	01 90       	ld	r0, Z+
    4c0c:	0d 92       	st	X+, r0
    4c0e:	41 50       	subi	r20, 0x01	; 1
    4c10:	50 40       	sbci	r21, 0x00	; 0
    4c12:	d8 f7       	brcc	.-10     	; 0x4c0a <memcpy+0x6>
    4c14:	08 95       	ret

00004c16 <memset>:
memset():
    4c16:	dc 01       	movw	r26, r24
    4c18:	01 c0       	rjmp	.+2      	; 0x4c1c <memset+0x6>
    4c1a:	6d 93       	st	X+, r22
    4c1c:	41 50       	subi	r20, 0x01	; 1
    4c1e:	50 40       	sbci	r21, 0x00	; 0
    4c20:	e0 f7       	brcc	.-8      	; 0x4c1a <memset+0x4>
    4c22:	08 95       	ret

00004c24 <strcpy>:
strcpy():
    4c24:	fb 01       	movw	r30, r22
    4c26:	dc 01       	movw	r26, r24
    4c28:	01 90       	ld	r0, Z+
    4c2a:	0d 92       	st	X+, r0
    4c2c:	00 20       	and	r0, r0
    4c2e:	e1 f7       	brne	.-8      	; 0x4c28 <strcpy+0x4>
    4c30:	08 95       	ret

00004c32 <__do_global_dtors>:
__do_global_dtors():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    4c32:	19 e0       	ldi	r17, 0x09	; 9
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    4c34:	c0 e2       	ldi	r28, 0x20	; 32
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    4c36:	d9 e0       	ldi	r29, 0x09	; 9
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    4c38:	04 c0       	rjmp	.+8      	; 0x4c42 <__do_global_dtors+0x10>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    4c3a:	fe 01       	movw	r30, r28
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    4c3c:	0e 94 15 24 	call	0x482a	; 0x482a <__tablejump2__>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    4c40:	21 96       	adiw	r28, 0x01	; 1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    4c42:	c1 32       	cpi	r28, 0x21	; 33
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    4c44:	d1 07       	cpc	r29, r17
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    4c46:	c9 f7       	brne	.-14     	; 0x4c3a <__do_global_dtors+0x8>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    4c48:	f8 94       	cli

00004c4a <__stop_program>:
__stop_program():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    4c4a:	ff cf       	rjmp	.-2      	; 0x4c4a <__stop_program>


/Users/rcaratti/Library/Caches/arduino/sketches/E04419EBCDB05788C5A4A74546F6A4A9/SI4844_01_OLED_SLIDE_SWITCH.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 21 09 	jmp	0x1242	; 0x1242 <__dtors_end>
       4:	0c 94 2b 1c 	jmp	0x3856	; 0x3856 <__vector_1>
       8:	0c 94 04 1c 	jmp	0x3808	; 0x3808 <__vector_2>
       c:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      10:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      14:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      18:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      1c:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      20:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      24:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      28:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      2c:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      30:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      34:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      38:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      3c:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      40:	0c 94 ba 1b 	jmp	0x3774	; 0x3774 <__vector_16>
      44:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      48:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      4c:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      50:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      54:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      58:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      5c:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      60:	0c 94 52 1c 	jmp	0x38a4	; 0x38a4 <__vector_24>
      64:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>

00000068 <__trampolines_end>:
__trampolines_start():
      68:	00 00       	nop
      6a:	01 01       	movw	r0, r2
      6c:	04 00       	.word	0x0004	; ????
      6e:	00 01       	movw	r0, r0
      70:	00 01       	movw	r0, r0
      72:	01 0e       	add	r0, r17
      74:	00 00       	nop
      76:	02 00       	.word	0x0002	; ????
      78:	06 0b       	sbc	r16, r22
      7a:	07 01       	movw	r0, r14
      7c:	f5 0b       	sbc	r31, r21
      7e:	00 06       	cpc	r0, r16
      80:	0b 07       	cpc	r16, r27
      82:	01 f5       	brne	.+64     	; 0xc4 <__trampolines_end+0x5c>
      84:	14 00       	.word	0x0014	; ????
      86:	06 0b       	sbc	r16, r22
      88:	07 01       	movw	r0, r14
      8a:	f5 1d       	adc	r31, r5
      8c:	00 06       	cpc	r0, r16
      8e:	0b 07       	cpc	r16, r27
      90:	01 f5       	brne	.+64     	; 0xd2 <__trampolines_end+0x6a>
      92:	26 00       	.word	0x0026	; ????
      94:	06 0b       	sbc	r16, r22
      96:	07 01       	movw	r0, r14
      98:	f5 2f       	mov	r31, r21
      9a:	00 06       	cpc	r0, r16
      9c:	0b 07       	cpc	r16, r27
      9e:	01 f5       	brne	.+64     	; 0xe0 <__trampolines_end+0x78>
      a0:	38 00       	.word	0x0038	; ????
      a2:	06 0b       	sbc	r16, r22
      a4:	07 01       	movw	r0, r14
      a6:	f5 41       	sbci	r31, 0x15	; 21
      a8:	00 06       	cpc	r0, r16
      aa:	0b 07       	cpc	r16, r27
      ac:	01 f5       	brne	.+64     	; 0xee <__trampolines_end+0x86>
      ae:	4a 00       	.word	0x004a	; ????
      b0:	06 0b       	sbc	r16, r22
      b2:	07 01       	movw	r0, r14
      b4:	f5 53       	subi	r31, 0x35	; 53
      b6:	00 06       	cpc	r0, r16
      b8:	0b 07       	cpc	r16, r27
      ba:	01 f5       	brne	.+64     	; 0xfc <__trampolines_end+0x94>
      bc:	5c 00       	.word	0x005c	; ????
      be:	06 0b       	sbc	r16, r22
      c0:	07 01       	movw	r0, r14
      c2:	f5 65       	ori	r31, 0x55	; 85
      c4:	00 0a       	sbc	r0, r16
      c6:	02 0e       	add	r0, r18
      c8:	02 f7       	brpl	.-64     	; 0x8a <__trampolines_end+0x22>
      ca:	68 00       	.word	0x0068	; ????
      cc:	03 02       	muls	r16, r19
      ce:	01 ff       	sbrs	r16, 1
      d0:	fe 69       	ori	r31, 0x9E	; 158
      d2:	00 06       	cpc	r0, r16
      d4:	0b 07       	cpc	r16, r27
      d6:	01 f5       	brne	.+64     	; 0x118 <__trampolines_end+0xb0>
      d8:	72 00       	.word	0x0072	; ????
      da:	0a 10       	cpse	r0, r10
      dc:	0e 02       	muls	r16, r30
      de:	f0 86       	std	Z+8, r15	; 0x08
      e0:	00 02       	muls	r16, r16
      e2:	0e 0e       	add	r0, r30
      e4:	0a f1       	brmi	.+66     	; 0x128 <__trampolines_end+0xc0>
      e6:	8a 00       	.word	0x008a	; ????
      e8:	0a 10       	cpse	r0, r10
      ea:	0e 02       	muls	r16, r30
      ec:	f0 9e       	mul	r15, r16
      ee:	00 0a       	sbc	r0, r16
      f0:	10 0e       	add	r1, r16
      f2:	02 f0       	brmi	.+0      	; 0xf4 <__trampolines_end+0x8c>
      f4:	b2 00       	.word	0x00b2	; ????
      f6:	0a 0e       	add	r0, r26
      f8:	0e 02       	muls	r16, r30
      fa:	f1 c4       	rjmp	.+2530   	; 0xade <__stack+0x1df>
      fc:	00 0a       	sbc	r0, r16
      fe:	10 0e       	add	r1, r16
     100:	02 f0       	brmi	.+0      	; 0x102 <__trampolines_end+0x9a>
     102:	d8 00       	.word	0x00d8	; ????
     104:	0a 10       	cpse	r0, r10
     106:	0e 02       	muls	r16, r30
     108:	f0 ec       	ldi	r31, 0xC0	; 192
     10a:	00 0a       	sbc	r0, r16
     10c:	0f 0e       	add	r0, r31
     10e:	02 f0       	brmi	.+0      	; 0x110 <__trampolines_end+0xa8>
     110:	ff 00       	.word	0x00ff	; ????
     112:	0a 10       	cpse	r0, r10
     114:	0e 02       	muls	r16, r30
     116:	f0 13       	cpse	r31, r16
     118:	01 0a       	sbc	r0, r17
     11a:	10 0e       	add	r1, r16
     11c:	02 f0       	brmi	.+0      	; 0x11e <__trampolines_end+0xb6>
     11e:	27 01       	movw	r4, r14
     120:	03 08       	sbc	r0, r3
     122:	04 01       	movw	r0, r8
     124:	f4 2a       	or	r15, r20
     126:	01 06       	cpc	r0, r17
     128:	0b 07       	cpc	r16, r27
     12a:	01 f5       	brne	.+64     	; 0x16c <__trampolines_end+0x104>
     12c:	33 01       	movw	r6, r6
     12e:	06 0b       	sbc	r16, r22
     130:	07 01       	movw	r0, r14
     132:	f5 3c       	cpi	r31, 0xC5	; 197
     134:	01 06       	cpc	r0, r17
     136:	0b 07       	cpc	r16, r27
     138:	01 f5       	brne	.+64     	; 0x17a <__trampolines_end+0x112>
     13a:	45 01       	movw	r8, r10
     13c:	06 0b       	sbc	r16, r22
     13e:	07 01       	movw	r0, r14
     140:	f5 4e       	sbci	r31, 0xE5	; 229
     142:	01 06       	cpc	r0, r17
     144:	0b 07       	cpc	r16, r27
     146:	01 f5       	brne	.+64     	; 0x188 <__trampolines_end+0x120>
     148:	57 01       	movw	r10, r14
     14a:	06 0b       	sbc	r16, r22
     14c:	07 01       	movw	r0, r14
     14e:	f5 60       	ori	r31, 0x05	; 5
     150:	01 0a       	sbc	r0, r17
     152:	0f 0e       	add	r0, r31
     154:	02 f0       	brmi	.+0      	; 0x156 <__trampolines_end+0xee>
     156:	73 01       	movw	r14, r6
     158:	0a 0f       	add	r16, r26
     15a:	0e 02       	muls	r16, r30
     15c:	f1 86       	std	Z+9, r15	; 0x09
     15e:	01 0a       	sbc	r0, r17
     160:	09 0e       	add	r0, r25
     162:	02 f7       	brpl	.-64     	; 0x124 <__trampolines_end+0xbc>
     164:	92 01       	movw	r18, r4
     166:	0a 0f       	add	r16, r26
     168:	0e 02       	muls	r16, r30
     16a:	f1 a5       	ldd	r31, Z+41	; 0x29
     16c:	01 0a       	sbc	r0, r17
     16e:	10 0e       	add	r1, r16
     170:	02 f0       	brmi	.+0      	; 0x172 <__trampolines_end+0x10a>
     172:	b9 01       	movw	r22, r18
     174:	0a 0f       	add	r16, r26
     176:	0e 02       	muls	r16, r30
     178:	f0 cc       	rjmp	.-1568   	; 0xfffffb5a <__eeprom_end+0xff7efb5a>
     17a:	01 0a       	sbc	r0, r17
     17c:	10 0e       	add	r1, r16
     17e:	02 f0       	brmi	.+0      	; 0x180 <__trampolines_end+0x118>
     180:	e0 01       	movw	r28, r0
     182:	0a 0e       	add	r0, r26
     184:	0e 02       	muls	r16, r30
     186:	f1 f2       	breq	.-68     	; 0x144 <__trampolines_end+0xdc>
     188:	01 02       	muls	r16, r17
     18a:	07 0e       	add	r0, r23
     18c:	0a f8       	.word	0xf80a	; ????
     18e:	f4 01       	movw	r30, r8
     190:	0a 0f       	add	r16, r26
     192:	0e 02       	muls	r16, r30
     194:	f1 07       	cpc	r31, r17
     196:	02 0a       	sbc	r0, r18
     198:	0f 0e       	add	r0, r31
     19a:	02 f0       	brmi	.+0      	; 0x19c <__trampolines_end+0x134>
     19c:	1a 02       	muls	r17, r26
     19e:	0a 0f       	add	r16, r26
     1a0:	0e 02       	muls	r16, r30
     1a2:	f1 2d       	mov	r31, r1
     1a4:	02 0a       	sbc	r0, r18
     1a6:	0f 0e       	add	r0, r31
     1a8:	02 f0       	brmi	.+0      	; 0x1aa <__trampolines_end+0x142>
     1aa:	40 02       	muls	r20, r16
     1ac:	0a 08       	sbc	r0, r10
     1ae:	0e 02       	muls	r16, r30
     1b0:	f7 4a       	sbci	r31, 0xA7	; 167
     1b2:	02 0a       	sbc	r0, r18
     1b4:	09 0e       	add	r0, r25
     1b6:	02 f7       	brpl	.-64     	; 0x178 <__trampolines_end+0x110>
     1b8:	56 02       	muls	r21, r22
     1ba:	0a 0f       	add	r16, r26
     1bc:	0e 02       	muls	r16, r30
     1be:	f0 69       	ori	r31, 0x90	; 144
     1c0:	02 0a       	sbc	r0, r18
     1c2:	0f 0e       	add	r0, r31
     1c4:	02 f0       	brmi	.+0      	; 0x1c6 <__trampolines_end+0x15e>
     1c6:	7c 02       	muls	r23, r28
     1c8:	0a 08       	sbc	r0, r10
     1ca:	0e 02       	muls	r16, r30
     1cc:	f7 86       	std	Z+15, r15	; 0x0f
     1ce:	02 0a       	sbc	r0, r18
     1d0:	0f 0e       	add	r0, r31
     1d2:	02 f1       	brmi	.+64     	; 0x214 <__trampolines_end+0x1ac>
     1d4:	99 02       	muls	r25, r25
     1d6:	0a 0f       	add	r16, r26
     1d8:	0e 02       	muls	r16, r30
     1da:	f1 ac       	ldd	r15, Z+57	; 0x39
     1dc:	02 0a       	sbc	r0, r18
     1de:	08 0e       	add	r0, r24
     1e0:	02 f8       	bld	r0, 2
     1e2:	b6 02       	muls	r27, r22
     1e4:	0a 0f       	add	r16, r26
     1e6:	0e 02       	muls	r16, r30
     1e8:	f1 c9       	rjmp	.-3102   	; 0xfffff5cc <__eeprom_end+0xff7ef5cc>
     1ea:	02 0a       	sbc	r0, r18
     1ec:	0f 0e       	add	r0, r31
     1ee:	02 f1       	brmi	.+64     	; 0x230 <__trampolines_end+0x1c8>
     1f0:	dc 02       	muls	r29, r28
     1f2:	0a 0e       	add	r0, r26
     1f4:	0e 02       	muls	r16, r30
     1f6:	f1 ee       	ldi	r31, 0xE1	; 225
     1f8:	02 0a       	sbc	r0, r18
     1fa:	0f 0e       	add	r0, r31
     1fc:	02 f1       	brmi	.+64     	; 0x23e <__trampolines_end+0x1d6>
     1fe:	01 03       	mulsu	r16, r17
     200:	0a 10       	cpse	r0, r10
     202:	0e 02       	muls	r16, r30
     204:	f0 15       	cp	r31, r0
     206:	03 06       	cpc	r0, r19
     208:	0b 07       	cpc	r16, r27
     20a:	01 f5       	brne	.+64     	; 0x24c <__trampolines_end+0x1e4>
     20c:	1e 03       	fmul	r17, r22
     20e:	06 0b       	sbc	r16, r22
     210:	07 01       	movw	r0, r14
     212:	f5 27       	eor	r31, r21
     214:	03 06       	cpc	r0, r19
     216:	0b 07       	cpc	r16, r27
     218:	01 f5       	brne	.+64     	; 0x25a <__trampolines_end+0x1f2>
     21a:	30 03       	mulsu	r19, r16
     21c:	06 0b       	sbc	r16, r22
     21e:	07 01       	movw	r0, r14
     220:	f5 39       	cpi	r31, 0x95	; 149
     222:	03 06       	cpc	r0, r19
     224:	0b 07       	cpc	r16, r27
     226:	01 f5       	brne	.+64     	; 0x268 <__trampolines_end+0x200>
     228:	42 03       	mulsu	r20, r18
     22a:	06 0b       	sbc	r16, r22
     22c:	07 01       	movw	r0, r14
     22e:	f5 4b       	sbci	r31, 0xB5	; 181
     230:	03 0a       	sbc	r0, r19
     232:	0f 0e       	add	r0, r31
     234:	02 f0       	brmi	.+0      	; 0x236 <__trampolines_end+0x1ce>
     236:	5e 03       	fmul	r21, r22
     238:	0a 0f       	add	r16, r26
     23a:	0e 02       	muls	r16, r30
     23c:	f1 71       	andi	r31, 0x11	; 17
     23e:	03 0a       	sbc	r0, r19
     240:	09 0e       	add	r0, r25
     242:	02 f7       	brpl	.-64     	; 0x204 <__trampolines_end+0x19c>
     244:	7d 03       	fmul	r23, r21
     246:	0a 0f       	add	r16, r26
     248:	0e 02       	muls	r16, r30
     24a:	f1 90       	ld	r15, Z+
     24c:	03 0a       	sbc	r0, r19
     24e:	10 0e       	add	r1, r16
     250:	02 f0       	brmi	.+0      	; 0x252 <__trampolines_end+0x1ea>
     252:	a4 03       	fmuls	r18, r20
     254:	0a 0f       	add	r16, r26
     256:	0e 02       	muls	r16, r30
     258:	f0 b7       	in	r31, 0x30	; 48
     25a:	03 0a       	sbc	r0, r19
     25c:	10 0e       	add	r1, r16
     25e:	02 f0       	brmi	.+0      	; 0x260 <__trampolines_end+0x1f8>
     260:	cb 03       	fmulsu	r20, r19
     262:	0a 0e       	add	r0, r26
     264:	0e 02       	muls	r16, r30
     266:	f1 dd       	rcall	.-1054   	; 0xfffffe4a <__eeprom_end+0xff7efe4a>
     268:	03 02       	muls	r16, r19
     26a:	07 0e       	add	r0, r23
     26c:	0a f8       	.word	0xf80a	; ????
     26e:	df 03       	fmulsu	r21, r23
     270:	0a 0f       	add	r16, r26
     272:	0e 02       	muls	r16, r30
     274:	f1 f2       	breq	.-68     	; 0x232 <__trampolines_end+0x1ca>
     276:	03 0a       	sbc	r0, r19
     278:	0f 0e       	add	r0, r31
     27a:	02 f0       	brmi	.+0      	; 0x27c <__trampolines_end+0x214>
     27c:	05 04       	cpc	r0, r5
     27e:	0a 0f       	add	r16, r26
     280:	0e 02       	muls	r16, r30
     282:	f1 18       	sub	r15, r1
     284:	04 0a       	sbc	r0, r20
     286:	0f 0e       	add	r0, r31
     288:	02 f0       	brmi	.+0      	; 0x28a <__trampolines_end+0x222>
     28a:	2b 04       	cpc	r2, r11
     28c:	0a 08       	sbc	r0, r10
     28e:	0e 02       	muls	r16, r30
     290:	f7 35       	cpi	r31, 0x57	; 87
     292:	04 0a       	sbc	r0, r20
     294:	09 0e       	add	r0, r25
     296:	02 f7       	brpl	.-64     	; 0x258 <__trampolines_end+0x1f0>
     298:	41 04       	cpc	r4, r1
     29a:	0a 0f       	add	r16, r26
     29c:	0e 02       	muls	r16, r30
     29e:	f0 54       	subi	r31, 0x40	; 64
     2a0:	04 0a       	sbc	r0, r20
     2a2:	0f 0e       	add	r0, r31
     2a4:	02 f0       	brmi	.+0      	; 0x2a6 <__trampolines_end+0x23e>
     2a6:	67 04       	cpc	r6, r7
     2a8:	0a 08       	sbc	r0, r10
     2aa:	0e 02       	muls	r16, r30
     2ac:	f7 71       	andi	r31, 0x17	; 23
     2ae:	04 0a       	sbc	r0, r20
     2b0:	0f 0e       	add	r0, r31
     2b2:	02 f1       	brmi	.+64     	; 0x2f4 <__trampolines_end+0x28c>
     2b4:	84 04       	cpc	r8, r4
     2b6:	0a 0f       	add	r16, r26
     2b8:	0e 02       	muls	r16, r30
     2ba:	f1 97       	sbiw	r30, 0x31	; 49
     2bc:	04 0a       	sbc	r0, r20
     2be:	08 0e       	add	r0, r24
     2c0:	02 f8       	bld	r0, 2
     2c2:	a1 04       	cpc	r10, r1
     2c4:	0a 0f       	add	r16, r26
     2c6:	0e 02       	muls	r16, r30
     2c8:	f1 b4       	in	r15, 0x21	; 33
     2ca:	04 0a       	sbc	r0, r20
     2cc:	0f 0e       	add	r0, r31
     2ce:	02 f1       	brmi	.+64     	; 0x310 <DSEG7_Classic_Regular_16Bitmaps+0x16>
     2d0:	c7 04       	cpc	r12, r7
     2d2:	0a 0e       	add	r0, r26
     2d4:	0e 02       	muls	r16, r30
     2d6:	f1 d9       	rcall	.-3102   	; 0xfffff6ba <__eeprom_end+0xff7ef6ba>
     2d8:	04 0a       	sbc	r0, r20
     2da:	0f 0e       	add	r0, r31
     2dc:	02 f1       	brmi	.+64     	; 0x31e <DSEG7_Classic_Regular_16Bitmaps+0x24>
     2de:	ec 04       	cpc	r14, r12
     2e0:	0a 10       	cpse	r0, r10
     2e2:	0e 02       	muls	r16, r30
     2e4:	f0 00       	.word	0x00f0	; ????
     2e6:	05 06       	cpc	r0, r21
     2e8:	0b 07       	cpc	r16, r27
     2ea:	01 f5       	brne	.+64     	; 0x32c <DSEG7_Classic_Regular_16Bitmaps+0x32>
     2ec:	09 05       	cpc	r16, r9
     2ee:	06 0b       	sbc	r16, r22
     2f0:	07 01       	movw	r0, r14
     2f2:	f5 12       	cpse	r15, r21
     2f4:	05 06       	cpc	r0, r21
     2f6:	0b 07       	cpc	r16, r27
     2f8:	01 f5       	brne	.+64     	; 0x33a <DSEG7_Classic_Regular_16Bitmaps+0x40>

000002fa <DSEG7_Classic_Regular_16Bitmaps>:
     2fa:	00 00 fa 28 a2 8a 28 a2 8a 2f 80 fa 28 a2 8a 28     ...(..(../..(..(
     30a:	a2 8a 2f 80 fa 28 a2 8a 28 a2 8a 2f 80 fa 28 a2     ../..(..(../..(.
     31a:	8a 28 a2 8a 2f 80 fa 28 a2 8a 28 a2 8a 2f 80 fa     .(../..(..(../..
     32a:	28 a2 8a 28 a2 8a 2f 80 fa 28 a2 8a 28 a2 8a 2f     (..(../..(..(../
     33a:	80 fa 28 a2 8a 28 a2 8a 2f 80 fa 28 a2 8a 28 a2     ..(..(../..(..(.
     34a:	8a 2f 80 fa 28 a2 8a 28 a2 8a 2f 80 fa 28 a2 8a     ./..(..(../..(..
     35a:	28 a2 8a 2f 80 7f 1f c0 d8 fa 28 a2 8a 28 a2 8a     (../......(..(..
     36a:	2f 80 ff a0 28 0a 02 80 a0 28 08 00 00 20 28 0a     /...(....(... (.
     37a:	02 80 a0 28 0b fe aa a0 aa a0 ff 80 20 08 02 00     ...(........ ...
     38a:	80 20 09 fc 7f 20 08 02 00 80 20 08 03 fe ff 80     . ... .... .....
     39a:	20 08 02 00 80 20 09 fc 7f 00 20 08 02 00 80 20      .... .... .... 
     3aa:	0b fe 80 a0 28 0a 02 80 a0 27 f1 fc 00 80 20 08     ....(....'.... .
     3ba:	02 00 80 20 ff a0 08 02 00 80 20 08 01 fc 7f 00     ... ...... .....
     3ca:	20 08 02 00 80 20 0b fe ff a0 08 02 00 80 20 08      .... ........ .
     3da:	01 fc 7f 20 28 0a 02 80 a0 28 0b fe ff a0 28 0a     ... (....(....(.
     3ea:	02 80 a0 28 08 00 00 00 20 08 02 00 80 20 08 ff     ...(.... .... ..
     3fa:	a0 28 0a 02 80 a0 28 09 fc 7f 20 28 0a 02 80 a0     .(....(... (....
     40a:	28 0b fe ff a0 28 0a 02 80 a0 28 09 fc 7f 00 20     (....(....(.... 
     41a:	08 02 00 80 20 0b fe d0 00 06 fa 28 a2 8a 28 a2     .... ......(..(.
     42a:	8a 2f 80 fa 28 a2 8a 28 a2 8a 2f 80 fa 28 a2 8a     ./..(..(../..(..
     43a:	28 a2 8a 2f 80 fa 28 a2 8a 28 a2 8a 2f 80 fa 28     (../..(..(../..(
     44a:	a2 8a 28 a2 8a 2f 80 fa 28 a2 8a 28 a2 8a 2f 80     ..(../..(..(../.
     45a:	ff a0 28 0a 02 80 a0 28 09 fc 7f 20 28 0a 02 80     ..(....(... (...
     46a:	a0 28 08 80 20 08 02 00 80 20 07 f1 fc 80 a0 28     .(.. .... .....(
     47a:	0a 02 80 a0 2f f8 7f 1f c8 02 00 80 20 08 02 00     ..../....... ...
     48a:	ff 80 00 80 20 08 02 00 80 27 f1 fc 80 a0 28 0a     .... ....'....(.
     49a:	02 80 a0 2f f8 ff a0 08 02 00 80 20 08 01 fc 7f     .../....... ....
     4aa:	20 08 02 00 80 20 08 03 fe ff a0 08 02 00 80 20      .... ......... 
     4ba:	08 01 fc 7f 20 08 02 00 80 20 08 00 ff a0 08 02     .... .... ......
     4ca:	00 80 20 08 00 00 00 20 28 0a 02 80 a0 28 0b fe     .. .... (....(..
     4da:	80 20 08 02 00 80 20 07 f1 fc 80 a0 28 0a 02 80     . .... .....(...
     4ea:	a0 20 2a a8 00 80 20 08 02 00 80 20 00 00 80 a0     . *... .... ....
     4fa:	28 0a 02 80 a0 2f f8 ff a0 08 02 00 80 20 08 01     (..../....... ..
     50a:	fc 7f 20 28 0a 02 80 a0 28 08 80 20 08 02 00 80     .. (....(.. ....
     51a:	20 00 00 00 80 20 08 02 00 80 20 0f f8 ff a0 28      .... .... ....(
     52a:	0a 02 80 a0 28 08 00 00 20 28 0a 02 80 a0 28 08     ....(... (....(.
     53a:	7f 1f c8 0a 02 80 a0 28 0a 02 7f 1f c8 0a 02 80     .......(........
     54a:	a0 28 0a 02 ff 80 ff a0 28 0a 02 80 a0 28 09 fc     .(......(....(..
     55a:	7f 20 08 02 00 80 20 08 00 ff a0 28 0a 02 80 a0     . .... ....(....
     56a:	28 09 fc 7f 00 20 08 02 00 80 20 08 7f 1f c8 02     (.... .... .....
     57a:	00 80 20 08 02 00 80 20 08 02 00 80 20 07 f1 fc     .. .... .... ...
     58a:	00 80 20 08 02 00 80 2f f8 80 20 08 02 00 80 20     .. ..../.. .... 
     59a:	07 f1 fc 80 20 08 02 00 80 20 0f f8 00 20 28 0a     .... .... ... (.
     5aa:	02 80 a0 28 0b fe 80 a0 28 0a 02 80 a0 20 00 00     ...(....(.... ..
     5ba:	80 a0 28 0a 02 80 a0 2f f8 80 a0 28 0a 02 80 a0     ..(..../...(....
     5ca:	27 f1 fc 80 a0 28 0a 02 80 a0 2f f8 80 a0 28 0a     '....(..../...(.
     5da:	02 80 a0 27 f1 fc 80 a0 28 0a 02 80 a0 20 80 a0     ...'....(.... ..
     5ea:	28 0a 02 80 a0 27 f1 fc 00 80 20 08 02 00 80 2f     (....'.... ..../
     5fa:	f8 ff 80 20 08 02 00 80 20 08 00 00 20 08 02 00     ... .... ... ...
     60a:	80 20 08 03 fe fa 28 a2 8a 28 a2 8a 2f 80 fa 28     . ....(..(../..(
     61a:	a2 8a 28 a2 8a 2f 80 fa 28 a2 8a 28 a2 8a 2f 80     ..(../..(..(../.
     62a:	fa 28 a2 8a 28 a2 8a 2f 80 fa 28 a2 8a 28 a2 8a     .(..(../..(..(..
     63a:	2f 80 fa 28 a2 8a 28 a2 8a 2f 80 ff a0 28 0a 02     /..(..(../...(..
     64a:	80 a0 28 09 fc 7f 20 28 0a 02 80 a0 28 08 80 20     ..(... (....(.. 
     65a:	08 02 00 80 20 07 f1 fc 80 a0 28 0a 02 80 a0 2f     .... .....(..../
     66a:	f8 7f 1f c8 02 00 80 20 08 02 00 ff 80 00 80 20     ....... ....... 
     67a:	08 02 00 80 27 f1 fc 80 a0 28 0a 02 80 a0 2f f8     ....'....(..../.
     68a:	ff a0 08 02 00 80 20 08 01 fc 7f 20 08 02 00 80     ...... .... ....
     69a:	20 08 03 fe ff a0 08 02 00 80 20 08 01 fc 7f 20      ......... .... 
     6aa:	08 02 00 80 20 08 00 ff a0 08 02 00 80 20 08 00     .... ........ ..
     6ba:	00 00 20 28 0a 02 80 a0 28 0b fe 80 20 08 02 00     .. (....(... ...
     6ca:	80 20 07 f1 fc 80 a0 28 0a 02 80 a0 20 2a a8 00     . .....(.... *..
     6da:	80 20 08 02 00 80 20 00 00 80 a0 28 0a 02 80 a0     . .... ....(....
     6ea:	2f f8 ff a0 08 02 00 80 20 08 01 fc 7f 20 28 0a     /....... .... (.
     6fa:	02 80 a0 28 08 80 20 08 02 00 80 20 00 00 00 80     ...(.. .... ....
     70a:	20 08 02 00 80 20 0f f8 ff a0 28 0a 02 80 a0 28      .... ....(....(
     71a:	08 00 00 20 28 0a 02 80 a0 28 08 7f 1f c8 0a 02     ... (....(......
     72a:	80 a0 28 0a 02 7f 1f c8 0a 02 80 a0 28 0a 02 ff     ..(.........(...
     73a:	80 ff a0 28 0a 02 80 a0 28 09 fc 7f 20 08 02 00     ...(....(... ...
     74a:	80 20 08 00 ff a0 28 0a 02 80 a0 28 09 fc 7f 00     . ....(....(....
     75a:	20 08 02 00 80 20 08 7f 1f c8 02 00 80 20 08 02      .... ....... ..
     76a:	00 80 20 08 02 00 80 20 07 f1 fc 00 80 20 08 02     .. .... ..... ..
     77a:	00 80 2f f8 80 20 08 02 00 80 20 07 f1 fc 80 20     ../.. .... .... 
     78a:	08 02 00 80 20 0f f8 00 20 28 0a 02 80 a0 28 0b     .... ... (....(.
     79a:	fe 80 a0 28 0a 02 80 a0 20 00 00 80 a0 28 0a 02     ...(.... ....(..
     7aa:	80 a0 2f f8 80 a0 28 0a 02 80 a0 27 f1 fc 80 a0     ../...(....'....
     7ba:	28 0a 02 80 a0 2f f8 80 a0 28 0a 02 80 a0 27 f1     (..../...(....'.
     7ca:	fc 80 a0 28 0a 02 80 a0 20 80 a0 28 0a 02 80 a0     ...(.... ..(....
     7da:	27 f1 fc 00 80 20 08 02 00 80 2f f8 ff 80 20 08     '.... ..../... .
     7ea:	02 00 80 20 08 00 00 20 08 02 00 80 20 08 03 fe     ... ... .... ...
     7fa:	fa 28 a2 8a 28 a2 8a 2f 80 fa 28 a2 8a 28 a2 8a     .(..(../..(..(..
     80a:	2f 80 fa 28 a2 8a 28 a2 8a 2f 80                    /..(..(../.

00000815 <Adafruit_SSD1306::display()::dlist1>:
     815:	22 00 ff 21                                         "..!

00000819 <DSEG7_Classic_Regular_16>:
     819:	fa 02 68 00 20 00 7e 00 12                          ..h. .~..

00000822 <font>:
     822:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
     832:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
     842:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
     852:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
     862:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
     872:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
     882:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
     892:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
     8a2:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
     8b2:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
     8c2:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     8d2:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     8e2:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
     8f2:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
     902:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
     912:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
     922:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
     932:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
     942:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
     952:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
     962:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
     972:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     982:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
     992:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     9a2:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     9b2:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
     9c2:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     9d2:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
     9e2:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
     9f2:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
     a02:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
     a12:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
     a22:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
     a32:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
     a42:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
     a52:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
     a62:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
     a72:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
     a82:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
     a92:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
     aa2:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
     ab2:	55 55 79 41 22 54 54 78 42 21 55 54 78 40 20 54     UUyA"TTxB!UTx@ T
     ac2:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
     ad2:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
     ae2:	42 00 01 45 7c 40 7d 12 11 12 7d f0 28 25 28 f0     B..E|@}...}.(%(.
     af2:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
     b02:	49 49 49 32 3a 44 44 44 3a 32 4a 48 48 30 3a 41     III2:DDD:2JHH0:A
     b12:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 3d 42 42     A!z:B@ x....}=BB
     b22:	42 3d 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     B==@@@=<$.$$H~IC
     b32:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
     b42:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
     b52:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
     b62:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
     b72:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
     b82:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
     b92:	55 00 55 00 55 aa 55 aa 55 aa ff 55 ff 55 ff 00     U.U.U.U.U..U.U..
     ba2:	00 00 ff 00 10 10 10 ff 00 14 14 14 ff 00 10 10     ................
     bb2:	ff 00 ff 10 10 f0 10 f0 14 14 14 fc 00 14 14 f7     ................
     bc2:	00 ff 00 00 ff 00 ff 14 14 f4 04 fc 14 14 17 10     ................
     bd2:	1f 10 10 1f 10 1f 14 14 14 1f 00 10 10 10 f0 00     ................
     be2:	00 00 00 1f 10 10 10 10 1f 10 10 10 10 f0 10 00     ................
     bf2:	00 00 ff 10 10 10 10 10 10 10 10 10 ff 10 00 00     ................
     c02:	00 ff 14 00 00 ff 00 ff 00 00 1f 10 17 00 00 fc     ................
     c12:	04 f4 14 14 17 10 17 14 14 f4 04 f4 00 00 ff 00     ................
     c22:	f7 14 14 14 14 14 14 14 f7 00 f7 14 14 14 17 14     ................
     c32:	10 10 1f 10 1f 14 14 14 f4 14 10 10 f0 10 f0 00     ................
     c42:	00 1f 10 1f 00 00 00 1f 14 00 00 00 fc 14 00 00     ................
     c52:	f0 10 f0 10 10 ff 10 ff 14 14 14 ff 14 10 10 10     ................
     c62:	1f 00 00 00 00 f0 10 ff ff ff ff ff f0 f0 f0 f0     ................
     c72:	f0 ff ff ff 00 00 00 00 00 ff ff 0f 0f 0f 0f 0f     ................
     c82:	38 44 44 38 44 fc 4a 4a 4a 34 7e 02 02 06 06 02     8DD8D.JJJ4~.....
     c92:	7e 02 7e 02 63 55 49 41 63 38 44 44 3c 04 40 7e     ~.~.cUIAc8DD<.@~
     ca2:	20 1e 20 06 02 7e 02 02 99 a5 e7 a5 99 1c 2a 49      . ..~........*I
     cb2:	2a 1c 4c 72 01 72 4c 30 4a 4d 4d 30 30 48 78 48     *.Lr.rL0JMM00HxH
     cc2:	30 bc 62 5a 46 3d 3e 49 49 49 00 7e 01 01 01 7e     0.bZF=>III.~...~
     cd2:	2a 2a 2a 2a 2a 44 44 5f 44 44 40 51 4a 44 40 40     *****DD_DD@QJD@@
     ce2:	44 4a 51 40 00 00 ff 01 03 e0 80 ff 00 00 08 08     DJQ@............
     cf2:	6b 6b 08 36 12 36 24 36 06 0f 09 0f 06 00 00 18     kk.6.6$6........
     d02:	18 00 00 00 10 10 00 30 40 ff 01 01 00 1f 01 01     .......0@.......
     d12:	1e 00 19 1d 17 12 00 3c 3c 3c 3c 00 00 00 00 00     .......<<<<.....

00000d22 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)::postmask>:
     d22:	00 01 03 07 0f 1f 3f 7f                             ......?.

00000d2a <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)::premask>:
     d2a:	00 80 c0 e0 f0 f8 fc fe                             ........

00000d32 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)::init5>:
     d32:	db 40 a4 a6 2e af                                   .@....

00000d38 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)::init3>:
     d38:	20 00 a1 c8                                          ...

00000d3c <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)::init2>:
     d3c:	d3 00 40 8d                                         ..@.

00000d40 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)::init1>:
     d40:	ae d5 80 a8                                         ....

00000d44 <splash2_data>:
     d44:	00 00 60 00 00 00 00 00 00 00 00 00 00 00 00 00     ..`.............
     d54:	00 e0 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
     d64:	e0 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f0     ................
	...
     d80:	00 03 f0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     d90:	07 f0 00 00 00 00 00 00 00 00 00 00 00 00 00 07     ................
     da0:	f8 00 00 00 00 00 00 00 00 00 00 00 00 00 0f f8     ................
     db0:	00 00 00 03 c0 00 7e 00 00 01 e0 00 7f 0f f8 00     ......~.........
     dc0:	00 00 03 c0 00 fe 00 00 01 e0 00 ff ef f8 00 00     ................
     dd0:	00 03 c0 00 fe 00 00 01 e0 00 ff ff f8 00 00 00     ................
     de0:	03 c0 00 f0 00 00 00 0f 00 7f fe 7f c0 00 00 03     ................
     df0:	c0 00 f0 00 00 00 0f 00 3f fe 7f f8 3f f1 fb cf     ........?...?...
     e00:	fc fe f3 bc 3d ef e0 1f fe 7f ff 7f fb ff df fe     ....=...........
     e10:	fe ff bc 3d ef e0 1f c6 ff ff 7f fb ff df fe fe     ...=............
     e20:	ff bc 3d ef e0 0f e3 c7 fe 78 7b c3 de 1e f0 ff     ..=......x{.....
     e30:	bc 3d ef 00 07 ff 87 fc 78 7b c3 de 1e f0 f8 3c     .=......x{.....<
     e40:	3d ef 00 01 ff ff f0 00 7b c3 c0 1e f0 f0 3c 3d     =.......{.....<=
     e50:	ef 00 01 f3 7f e0 3f fb c3 cf fe f0 f0 3c 3d ef     ......?......<=.
     e60:	00 03 e3 3f 80 7f fb c3 df fe f0 f0 3c 3d ef 00     ...?........<=..
     e70:	07 e7 3c 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 07     ..<.x{.....<=...
     e80:	ff be 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 07 ff     ...x{.....<=....
     e90:	fe 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 0f ff fe     ..x{.....<=.....
     ea0:	00 7f fb ff df fe f0 f0 3f fd ef e0 0f ff ff 00     ........?.......
     eb0:	7f fb ff df fe f0 f0 3f fd ef e0 0f f9 ff 00 3e     .......?.......>
     ec0:	79 f9 cf 9e f0 f0 1f 3d e7 e0 1f f1 ff 00 00 00     y......=........
	...
     ed8:	00 1f 80 ff 00 7f ff ff ff ff ff ff ff ff ff e0     ................
     ee8:	1c 00 7f 00 7f ff ff ff fe b4 6d 88 8d 18 e0 00     ..........m.....
     ef8:	00 1f 00 7f ff ff ff fe 95 ad 7d b5 77 e0 00 00     ..........}.w...
     f08:	0f 00 7f ff ff ff fe a5 ad 9d 8d 19 e0 00 00 06     ................
     f18:	00 7f ff ff ff fe b5 ad ed b5 7e e0                 ..........~.

00000f24 <splash1_data>:
     f24:	00 00 00 00 00 01 80 00 00 00 00 00 00 00 00 00     ................
     f34:	03 80 00 00 00 00 00 00 00 00 00 07 c0 00 00 00     ................
     f44:	00 00 00 00 00 00 07 c0 00 00 00 00 00 00 00 00     ................
     f54:	00 0f c0 00 00 00 00 00 00 00 00 00 1f e0 00 00     ................
     f64:	00 00 00 00 00 00 00 1f e0 00 00 00 00 00 00 00     ................
     f74:	00 00 3f e0 00 00 00 00 00 00 00 00 00 3f f0 00     ..?..........?..
	...
     f8c:	7f f0 00 00 00 00 00 00 00 1f f8 7f f0 00 00 00     ................
     f9c:	00 00 00 00 3f fe 7f f0 00 00 00 00 00 00 00 3f     ....?..........?
     fac:	ff 7f f0 00 00 00 00 00 00 00 1f ff fb e0 00 00     ................
     fbc:	00 00 00 00 00 0f ff f9 ff c0 00 00 00 00 00 00     ................
     fcc:	0f ff f9 ff f8 00 00 00 00 00 00 07 ff f1 ff ff     ................
     fdc:	00 00 00 00 00 00 03 fc 73 ff ff 80 00 00 00 00     ........s.......
     fec:	00 01 fe 3f ff ff 80 00 00 00 00 00 00 ff 1e 0f     ...?............
     ffc:	ff 00 00 00 00 00 00 00 7f fe 1f fc 00 00 00 00     ................
    100c:	00 00 00 3f ff ff f8 00 00 00 00 00 00 00 0f df     ...?............
    101c:	ff e0 00 00 00 00 00 00 00 1f 19 ff c0 00 00 00     ................
    102c:	00 00 00 00 3f 3c ff 00 00 00 00 00 00 00 00 7e     ....?<.........~
    103c:	7c f8 00 00 00 00 00 00 00 00 7f fe 7c 00 00 00     |...........|...
    104c:	00 00 00 00 00 ff ff fc 00 00 00 00 00 00 00 00     ................
    105c:	ff ff fe 00 00 00 00 00 00 00 00 ff ff fe 00 00     ................
    106c:	00 00 00 00 00 01 ff ef fe 00 00 00 00 00 00 00     ................
    107c:	01 ff cf fe 00 00 00 00 00 00 00 03 ff 07 fe 00     ................
    108c:	00 00 00 00 00 00 03 fc 07 fe 00 00 00 00 00 00     ................
    109c:	00 03 f0 03 fe 00 00 00 00 00 00 00 01 80 00 fe     ................
	...
    10b4:	00 00 7e 00 00 00 00 00 00 00 00 00 00 3e 00 00     ..~..........>..
	...
    10cc:	0c 00 00 00 00 00 00 07 80 00 fc 00 00 03 c0 00     ................
    10dc:	00 00 07 80 01 fc 00 00 03 c0 00 00 00 07 80 01     ................
    10ec:	fc 00 00 03 c0 00 00 00 07 80 01 e0 00 00 00 1e     ................
    10fc:	00 00 00 07 80 01 e0 00 00 00 1e 00 7f e3 f7 9f     ................
    110c:	f9 fd e7 78 7b df c0 ff f7 ff bf fd fd ff 78 7b     ...x{.........x{
    111c:	df c0 ff f7 ff bf fd fd ff 78 7b df c0 f0 f7 87     .........x{.....
    112c:	bc 3d e1 ff 78 7b de 00 f0 f7 87 bc 3d e1 f0 78     .=..x{......=..x
    113c:	7b de 00 00 f7 87 80 3d e1 e0 78 7b de 00 7f f7     {......=..x{....
    114c:	87 9f fd e1 e0 78 7b de 00 ff f7 87 bf fd e1 e0     .....x{.........
    115c:	78 7b de 00 f0 f7 87 bc 3d e1 e0 78 7b de 00 f0     x{......=..x{...
    116c:	f7 87 bc 3d e1 e0 78 7b de 00 f0 f7 87 bc 3d e1     ...=..x{......=.
    117c:	e0 78 7b de 00 ff f7 ff bf fd e1 e0 7f fb df c0     .x{.............
    118c:	ff f7 ff bf fd e1 e0 7f fb df c0 7c f3 f3 9f 3d     ...........|...=
    119c:	e1 e0 3e 7b cf c0 00 00 00 00 00 00 00 00 00 00     ..>{............
    11ac:	00 ff ff ff ff ff ff ff ff ff ff c0 ff ff ff ff     ................
    11bc:	fd 68 db 11 1a 31 c0 ff ff ff ff fd 2b 5a fb 6a     .h...1......+Z.j
    11cc:	ef c0 ff ff ff ff fd 4b 5b 3b 1a 33 c0 ff ff ff     .......K[;.3....
    11dc:	ff fd 6b 5b db 6a fd c0                             ..k[.j..

000011e4 <port_to_mode_PGM>:
    11e4:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000011ee <port_to_output_PGM>:
    11ee:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000011f8 <digital_pin_to_port_PGM>:
    11f8:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
    1208:	03 03 03 03 02 02 03                                .......

0000120f <digital_pin_to_bit_mask_PGM>:
    120f:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
    121f:	04 08 10 20 40 80 40                                ... @.@

00001226 <digital_pin_to_timer_PGM>:
    1226:	00 00 00 09 00 03 02 00 00 04 05 08 00 00 00 00     ................
	...

0000123e <__ctors_start>:
__ctors_start():
    123e:	7d 1d       	adc	r23, r13

00001240 <__ctors_end>:
__dtors_start():
    1240:	42 22       	and	r4, r18

00001242 <__dtors_end>:
__dtors_end():
    1242:	11 24       	eor	r1, r1
    1244:	1f be       	out	0x3f, r1	; 63
    1246:	cf ef       	ldi	r28, 0xFF	; 255
    1248:	d8 e0       	ldi	r29, 0x08	; 8
    124a:	de bf       	out	0x3e, r29	; 62
    124c:	cd bf       	out	0x3d, r28	; 61

0000124e <__do_clear_bss>:
__do_clear_bss():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
    124e:	24 e0       	ldi	r18, 0x04	; 4
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
    1250:	aa e3       	ldi	r26, 0x3A	; 58
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
    1252:	b2 e0       	ldi	r27, 0x02	; 2
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
    1254:	01 c0       	rjmp	.+2      	; 0x1258 <.do_clear_bss_start>

00001256 <.do_clear_bss_loop>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
    1256:	1d 92       	st	X+, r1

00001258 <.do_clear_bss_start>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
    1258:	a9 35       	cpi	r26, 0x59	; 89
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
    125a:	b2 07       	cpc	r27, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
    125c:	e1 f7       	brne	.-8      	; 0x1256 <.do_clear_bss_loop>

0000125e <__do_copy_data>:
__do_copy_data():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
    125e:	12 e0       	ldi	r17, 0x02	; 2
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
    1260:	a0 e0       	ldi	r26, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
    1262:	b1 e0       	ldi	r27, 0x01	; 1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
    1264:	e6 ed       	ldi	r30, 0xD6	; 214
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
    1266:	f9 e4       	ldi	r31, 0x49	; 73
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
    1268:	02 c0       	rjmp	.+4      	; 0x126e <__do_copy_data+0x10>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
    126a:	05 90       	lpm	r0, Z+
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
    126c:	0d 92       	st	X+, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
    126e:	aa 33       	cpi	r26, 0x3A	; 58
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
    1270:	b1 07       	cpc	r27, r17
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
    1272:	d9 f7       	brne	.-10     	; 0x126a <__do_copy_data+0xc>

00001274 <__do_global_ctors>:
__do_global_ctors():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
    1274:	19 e0       	ldi	r17, 0x09	; 9
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
    1276:	c0 e2       	ldi	r28, 0x20	; 32
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
    1278:	d9 e0       	ldi	r29, 0x09	; 9
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
    127a:	04 c0       	rjmp	.+8      	; 0x1284 <__do_global_ctors+0x10>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
    127c:	21 97       	sbiw	r28, 0x01	; 1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
    127e:	fe 01       	movw	r30, r28
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
    1280:	0e 94 da 22 	call	0x45b4	; 0x45b4 <__tablejump2__>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
    1284:	cf 31       	cpi	r28, 0x1F	; 31
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
    1286:	d1 07       	cpc	r29, r17
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
    1288:	c9 f7       	brne	.-14     	; 0x127c <__do_global_ctors+0x8>
    128a:	0e 94 f6 1e 	call	0x3dec	; 0x3dec <main>
    128e:	0c 94 de 24 	jmp	0x49bc	; 0x49bc <__do_global_dtors>

00001292 <__bad_interrupt>:
__vector_22():
    1292:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001296 <TwoWire::beginTransmission(unsigned char) [clone .constprop.48]>:
beginTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:196
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    1296:	91 e0       	ldi	r25, 0x01	; 1
    1298:	90 93 e2 02 	sts	0x02E2, r25	; 0x8002e2 <TwoWire::transmitting>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:198
  // set address of targeted slave
  txAddress = address;
    129c:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <TwoWire::txAddress>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:200
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    12a0:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <TwoWire::txBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:201
  txBufferLength = 0;
    12a4:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <TwoWire::txBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:202
}
    12a8:	08 95       	ret

000012aa <SI4844::convertToChar(unsigned long, char*, unsigned char, unsigned char, unsigned char, bool) [clone .constprop.39]>:
convertToChar():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1435
 * @param len final string size (in bytes)
 * @param dot the decimal or thousand separator position
 * @param separator symbol "." or ","
 * @param remove_leading_zeros if true removes up to two leading zeros (default is true)
 */
void SI4844::convertToChar(uint32_t value, char *strValue, uint8_t len, uint8_t dot, uint8_t separator, bool remove_leading_zeros)
    12aa:	4f 92       	push	r4
    12ac:	5f 92       	push	r5
    12ae:	6f 92       	push	r6
    12b0:	7f 92       	push	r7
    12b2:	af 92       	push	r10
    12b4:	bf 92       	push	r11
    12b6:	cf 92       	push	r12
    12b8:	df 92       	push	r13
    12ba:	ef 92       	push	r14
    12bc:	ff 92       	push	r15
    12be:	0f 93       	push	r16
    12c0:	1f 93       	push	r17
    12c2:	cf 93       	push	r28
    12c4:	df 93       	push	r29
    12c6:	dc 01       	movw	r26, r24
    12c8:	cb 01       	movw	r24, r22
    12ca:	ea 01       	movw	r28, r20
    12cc:	e2 2e       	mov	r14, r18
    12ce:	f1 2c       	mov	r15, r1
    12d0:	e4 0e       	add	r14, r20
    12d2:	f5 1e       	adc	r15, r21
    12d4:	67 01       	movw	r12, r14
    12d6:	57 01       	movw	r10, r14
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1440
{
    char d;
    for (int i = (len - 1); i >= 0; i--)
    {
        d = value % 10;
    12d8:	2a e0       	ldi	r18, 0x0A	; 10
    12da:	42 2e       	mov	r4, r18
    12dc:	51 2c       	mov	r5, r1
    12de:	61 2c       	mov	r6, r1
    12e0:	71 2c       	mov	r7, r1
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1441
        value = value / 10;
    12e2:	bc 01       	movw	r22, r24
    12e4:	cd 01       	movw	r24, r26
    12e6:	a3 01       	movw	r20, r6
    12e8:	92 01       	movw	r18, r4
    12ea:	0e 94 b0 22 	call	0x4560	; 0x4560 <__udivmodsi4>
    12ee:	da 01       	movw	r26, r20
    12f0:	c9 01       	movw	r24, r18
    12f2:	f5 01       	movw	r30, r10
    12f4:	31 97       	sbiw	r30, 0x01	; 1
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1442
        strValue[i] = d + 48;
    12f6:	60 5d       	subi	r22, 0xD0	; 208
    12f8:	60 83       	st	Z, r22
    12fa:	22 e0       	ldi	r18, 0x02	; 2
    12fc:	a2 1a       	sub	r10, r18
    12fe:	b1 08       	sbc	r11, r1
    1300:	95 01       	movw	r18, r10
    1302:	2c 1b       	sub	r18, r28
    1304:	3d 0b       	sbc	r19, r29
    1306:	5f 01       	movw	r10, r30
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1438
 * @param remove_leading_zeros if true removes up to two leading zeros (default is true)
 */
void SI4844::convertToChar(uint32_t value, char *strValue, uint8_t len, uint8_t dot, uint8_t separator, bool remove_leading_zeros)
{
    char d;
    for (int i = (len - 1); i >= 0; i--)
    1308:	37 ff       	sbrs	r19, 7
    130a:	eb cf       	rjmp	.-42     	; 0x12e2 <SI4844::convertToChar(unsigned long, char*, unsigned char, unsigned char, unsigned char, bool) [clone .constprop.39]+0x38>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1444
    {
        d = value % 10;
        value = value / 10;
        strValue[i] = d + 48;
    }
    strValue[len] = '\0';
    130c:	f7 01       	movw	r30, r14
    130e:	10 82       	st	Z, r1
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1445
    if (dot > 0)
    1310:	00 23       	and	r16, r16
    1312:	99 f0       	breq	.+38     	; 0x133a <SI4844::convertToChar(unsigned long, char*, unsigned char, unsigned char, unsigned char, bool) [clone .constprop.39]+0x90>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1447
    {
        for (int i = len; i >= dot; i--)
    1314:	10 e0       	ldi	r17, 0x00	; 0
    1316:	c6 01       	movw	r24, r12
    1318:	8c 1b       	sub	r24, r28
    131a:	9d 0b       	sbc	r25, r29
    131c:	80 17       	cp	r24, r16
    131e:	91 07       	cpc	r25, r17
    1320:	3c f0       	brlt	.+14     	; 0x1330 <SI4844::convertToChar(unsigned long, char*, unsigned char, unsigned char, unsigned char, bool) [clone .constprop.39]+0x86>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1449
        {
            strValue[i + 1] = strValue[i];
    1322:	f6 01       	movw	r30, r12
    1324:	80 81       	ld	r24, Z
    1326:	81 83       	std	Z+1, r24	; 0x01
    1328:	f1 e0       	ldi	r31, 0x01	; 1
    132a:	cf 1a       	sub	r12, r31
    132c:	d1 08       	sbc	r13, r1
    132e:	f3 cf       	rjmp	.-26     	; 0x1316 <SI4844::convertToChar(unsigned long, char*, unsigned char, unsigned char, unsigned char, bool) [clone .constprop.39]+0x6c>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1451
        }
        strValue[dot] = separator;
    1330:	0c 0f       	add	r16, r28
    1332:	1d 1f       	adc	r17, r29
    1334:	8e e2       	ldi	r24, 0x2E	; 46
    1336:	f8 01       	movw	r30, r16
    1338:	80 83       	st	Z, r24
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1456
    }

    if (remove_leading_zeros)
    {
        if (strValue[0] == '0')
    133a:	88 81       	ld	r24, Y
    133c:	80 33       	cpi	r24, 0x30	; 48
    133e:	31 f4       	brne	.+12     	; 0x134c <SI4844::convertToChar(unsigned long, char*, unsigned char, unsigned char, unsigned char, bool) [clone .constprop.39]+0xa2>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1458
        {
            strValue[0] = ' ';
    1340:	80 e2       	ldi	r24, 0x20	; 32
    1342:	88 83       	st	Y, r24
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1459
            if (strValue[1] == '0')
    1344:	99 81       	ldd	r25, Y+1	; 0x01
    1346:	90 33       	cpi	r25, 0x30	; 48
    1348:	09 f4       	brne	.+2      	; 0x134c <SI4844::convertToChar(unsigned long, char*, unsigned char, unsigned char, unsigned char, bool) [clone .constprop.39]+0xa2>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1460
                strValue[1] = ' ';
    134a:	89 83       	std	Y+1, r24	; 0x01
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1463
        }
    }
}
    134c:	df 91       	pop	r29
    134e:	cf 91       	pop	r28
    1350:	1f 91       	pop	r17
    1352:	0f 91       	pop	r16
    1354:	ff 90       	pop	r15
    1356:	ef 90       	pop	r14
    1358:	df 90       	pop	r13
    135a:	cf 90       	pop	r12
    135c:	bf 90       	pop	r11
    135e:	af 90       	pop	r10
    1360:	7f 90       	pop	r7
    1362:	6f 90       	pop	r6
    1364:	5f 90       	pop	r5
    1366:	4f 90       	pop	r4
    1368:	08 95       	ret

0000136a <twi_readFrom.part.0.constprop.38>:
twi_readFrom.part.0():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:160
 *          data: pointer to byte array
 *          length: number of bytes to read into array
 *          sendStop: Boolean indicating whether to send a stop at the end
 * Output   number of bytes read
 */
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
    136a:	98 2f       	mov	r25, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:177
        twi_handleTimeout(twi_do_reset_on_timeout);
        return 0;
      }
    }
  #else
    while(TWI_READY != twi_state){
    136c:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <twi_state>
    1370:	81 11       	cpse	r24, r1
    1372:	fc cf       	rjmp	.-8      	; 0x136c <twi_readFrom.part.0.constprop.38+0x2>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:181
      continue;
    }
  #endif
  twi_state = TWI_MRX;
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <twi_state>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:182
  twi_sendStop = sendStop;
    137a:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <twi_sendStop>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:184
  // reset error state (0xFF.. no error occurred)
  twi_error = 0xFF;
    137e:	2f ef       	ldi	r18, 0xFF	; 255
    1380:	20 93 dc 02 	sts	0x02DC, r18	; 0x8002dc <twi_error>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:187

  // initialize buffer iteration vars
  twi_masterBuffer = data;
    1384:	26 eb       	ldi	r18, 0xB6	; 182
    1386:	32 e0       	ldi	r19, 0x02	; 2
    1388:	30 93 db 02 	sts	0x02DB, r19	; 0x8002db <twi_masterBuffer+0x1>
    138c:	20 93 da 02 	sts	0x02DA, r18	; 0x8002da <twi_masterBuffer>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:188
  twi_masterBufferIndex = 0;
    1390:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <twi_masterBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:189
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    1394:	2f ef       	ldi	r18, 0xFF	; 255
    1396:	26 0f       	add	r18, r22
    1398:	20 93 d8 02 	sts	0x02D8, r18	; 0x8002d8 <twi_masterBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:197
  // Therefore we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    139c:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <twi_slarw>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:198
  twi_slarw |= address << 1;
    13a0:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <twi_slarw>
    13a4:	99 0f       	add	r25, r25
    13a6:	98 2b       	or	r25, r24
    13a8:	90 93 d7 02 	sts	0x02D7, r25	; 0x8002d7 <twi_slarw>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:200

  if (true == twi_inRepStart) {
    13ac:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <twi_inRepStart>
    13b0:	81 30       	cpi	r24, 0x01	; 1
    13b2:	c9 f4       	brne	.+50     	; 0x13e6 <twi_readFrom.part.0.constprop.38+0x7c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:207
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // Remember, we're dealing with an ASYNC ISR
    13b4:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <twi_inRepStart>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:219
          return 0;
        }
      } while(TWCR & _BV(TWWC));
    #else
      do {
        TWDR = twi_slarw;
    13b8:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <twi_slarw>
    13bc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:220
      } while(TWCR & _BV(TWWC));
    13c0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    13c4:	83 fd       	sbrc	r24, 3
    13c6:	f8 cf       	rjmp	.-16     	; 0x13b8 <twi_readFrom.part.0.constprop.38+0x4e>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:222
    #endif
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
    13c8:	85 ec       	ldi	r24, 0xC5	; 197
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:226
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    13ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:238
        twi_handleTimeout(twi_do_reset_on_timeout);
        return 0;
      }
    }
  #else
    while(TWI_MRX == twi_state){
    13ce:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <twi_state>
    13d2:	81 30       	cpi	r24, 0x01	; 1
    13d4:	e1 f3       	breq	.-8      	; 0x13ce <twi_readFrom.part.0.constprop.38+0x64>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:243
      continue;
    }
  #endif

  if (twi_masterBufferIndex < length)
    13d6:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <twi_masterBufferIndex>
    13da:	86 17       	cp	r24, r22
    13dc:	10 f4       	brcc	.+4      	; 0x13e2 <twi_readFrom.part.0.constprop.38+0x78>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:244
    length = twi_masterBufferIndex;
    13de:	60 91 d9 02 	lds	r22, 0x02D9	; 0x8002d9 <twi_masterBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:247

  return length;
}
    13e2:	86 2f       	mov	r24, r22
    13e4:	08 95       	ret
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:226
    #endif
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    13e6:	85 ee       	ldi	r24, 0xE5	; 229
    13e8:	f0 cf       	rjmp	.-32     	; 0x13ca <twi_readFrom.part.0.constprop.38+0x60>

000013ea <Adafruit_GFX::startWrite()>:
flush():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:326
}

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
    13ea:	08 95       	ret

000013ec <digitalWrite>:
digitalWrite():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring_digital.c:189
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
  uint8_t timer = digitalPinToTimer(pin);
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	fc 01       	movw	r30, r24
    13f0:	ea 5d       	subi	r30, 0xDA	; 218
    13f2:	fd 4e       	sbci	r31, 0xED	; 237
    13f4:	24 91       	lpm	r18, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    13f6:	fc 01       	movw	r30, r24
    13f8:	e1 5f       	subi	r30, 0xF1	; 241
    13fa:	fd 4e       	sbci	r31, 0xED	; 237
    13fc:	34 91       	lpm	r19, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    13fe:	fc 01       	movw	r30, r24
    1400:	e8 50       	subi	r30, 0x08	; 8
    1402:	fe 4e       	sbci	r31, 0xEE	; 238
    1404:	e4 91       	lpm	r30, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    1406:	ee 23       	and	r30, r30
    1408:	c9 f0       	breq	.+50     	; 0x143c <digitalWrite+0x50>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    140a:	22 23       	and	r18, r18
    140c:	39 f0       	breq	.+14     	; 0x141c <digitalWrite+0x30>
turnOffPWM():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    140e:	24 30       	cpi	r18, 0x04	; 4
    1410:	01 f1       	breq	.+64     	; 0x1452 <digitalWrite+0x66>
    1412:	a8 f4       	brcc	.+42     	; 0x143e <digitalWrite+0x52>
    1414:	22 30       	cpi	r18, 0x02	; 2
    1416:	69 f1       	breq	.+90     	; 0x1472 <digitalWrite+0x86>
    1418:	23 30       	cpi	r18, 0x03	; 3
    141a:	79 f1       	breq	.+94     	; 0x147a <digitalWrite+0x8e>
digitalWrite():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring_digital.c:200

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);

  out = portOutputRegister(port);
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	ee 0f       	add	r30, r30
    1420:	ff 1f       	adc	r31, r31
    1422:	e2 51       	subi	r30, 0x12	; 18
    1424:	fe 4e       	sbci	r31, 0xEE	; 238
    1426:	a5 91       	lpm	r26, Z+
    1428:	b4 91       	lpm	r27, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    142a:	8f b7       	in	r24, 0x3f	; 63
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring_digital.c:203
  cli();
    142c:	f8 94       	cli
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    142e:	ec 91       	ld	r30, X
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    1430:	61 11       	cpse	r22, r1
    1432:	26 c0       	rjmp	.+76     	; 0x1480 <digitalWrite+0x94>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    1434:	30 95       	com	r19
    1436:	3e 23       	and	r19, r30
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    1438:	3c 93       	st	X, r19
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    143a:	8f bf       	out	0x3f, r24	; 63
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring_digital.c:212
}
    143c:	08 95       	ret
turnOffPWM():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    143e:	28 30       	cpi	r18, 0x08	; 8
    1440:	71 f0       	breq	.+28     	; 0x145e <digitalWrite+0x72>
    1442:	29 30       	cpi	r18, 0x09	; 9
    1444:	91 f0       	breq	.+36     	; 0x146a <digitalWrite+0x7e>
    1446:	25 30       	cpi	r18, 0x05	; 5
    1448:	49 f7       	brne	.-46     	; 0x141c <digitalWrite+0x30>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    144a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    144e:	8f 7d       	andi	r24, 0xDF	; 223
    1450:	03 c0       	rjmp	.+6      	; 0x1458 <digitalWrite+0x6c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring_digital.c:82
  switch (timer)
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    1452:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1456:	8f 77       	andi	r24, 0x7F	; 127
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    1458:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    145c:	df cf       	rjmp	.-66     	; 0x141c <digitalWrite+0x30>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
    145e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1462:	8f 77       	andi	r24, 0x7F	; 127
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    1464:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1468:	d9 cf       	rjmp	.-78     	; 0x141c <digitalWrite+0x30>
    146a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    146e:	8f 7d       	andi	r24, 0xDF	; 223
    1470:	f9 cf       	rjmp	.-14     	; 0x1464 <digitalWrite+0x78>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
    1472:	84 b5       	in	r24, 0x24	; 36
    1474:	8f 77       	andi	r24, 0x7F	; 127
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    1476:	84 bd       	out	0x24, r24	; 36
    1478:	d1 cf       	rjmp	.-94     	; 0x141c <digitalWrite+0x30>
    147a:	84 b5       	in	r24, 0x24	; 36
    147c:	8f 7d       	andi	r24, 0xDF	; 223
    147e:	fb cf       	rjmp	.-10     	; 0x1476 <digitalWrite+0x8a>
digitalWrite():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    1480:	3e 2b       	or	r19, r30
    1482:	da cf       	rjmp	.-76     	; 0x1438 <digitalWrite+0x4c>

00001484 <pinMode>:
pinMode():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1484:	cf 93       	push	r28
    1486:	df 93       	push	r29
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	fc 01       	movw	r30, r24
    148c:	e1 5f       	subi	r30, 0xF1	; 241
    148e:	fd 4e       	sbci	r31, 0xED	; 237
    1490:	24 91       	lpm	r18, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    1492:	88 50       	subi	r24, 0x08	; 8
    1494:	9e 4e       	sbci	r25, 0xEE	; 238
    1496:	fc 01       	movw	r30, r24
    1498:	84 91       	lpm	r24, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    149a:	88 23       	and	r24, r24
    149c:	d1 f0       	breq	.+52     	; 0x14d2 <pinMode+0x4e>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	88 0f       	add	r24, r24
    14a2:	99 1f       	adc	r25, r25
    14a4:	fc 01       	movw	r30, r24
    14a6:	ec 51       	subi	r30, 0x1C	; 28
    14a8:	fe 4e       	sbci	r31, 0xEE	; 238
    14aa:	a5 91       	lpm	r26, Z+
    14ac:	b4 91       	lpm	r27, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    14ae:	fc 01       	movw	r30, r24
    14b0:	e2 51       	subi	r30, 0x12	; 18
    14b2:	fe 4e       	sbci	r31, 0xEE	; 238
    14b4:	c5 91       	lpm	r28, Z+
    14b6:	d4 91       	lpm	r29, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    14b8:	61 11       	cpse	r22, r1
    14ba:	0e c0       	rjmp	.+28     	; 0x14d8 <pinMode+0x54>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    14bc:	9f b7       	in	r25, 0x3f	; 63
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring_digital.c:43
    cli();
    14be:	f8 94       	cli
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    14c0:	8c 91       	ld	r24, X
    14c2:	e2 2f       	mov	r30, r18
    14c4:	e0 95       	com	r30
    14c6:	8e 23       	and	r24, r30
    14c8:	8c 93       	st	X, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    14ca:	28 81       	ld	r18, Y
    14cc:	e2 23       	and	r30, r18
    14ce:	e8 83       	st	Y, r30
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring_digital.c:46
    SREG = oldSREG;
    14d0:	9f bf       	out	0x3f, r25	; 63
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    14d2:	df 91       	pop	r29
    14d4:	cf 91       	pop	r28
    14d6:	08 95       	ret
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring_digital.c:54
    cli();
    *reg &= ~bit;
    *out |= bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    14d8:	8f b7       	in	r24, 0x3f	; 63
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring_digital.c:55
    cli();
    14da:	f8 94       	cli
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    14dc:	ec 91       	ld	r30, X
    14de:	e2 2b       	or	r30, r18
    14e0:	ec 93       	st	X, r30
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    14e2:	8f bf       	out	0x3f, r24	; 63
    14e4:	f6 cf       	rjmp	.-20     	; 0x14d2 <pinMode+0x4e>

000014e6 <delayMicroseconds>:
delayMicroseconds():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring.c:624
  if (us <= 1) return; //  = 3 cycles, (4 when true)

  // the following loop takes 1/4 of a microsecond (4 cycles)
  // per iteration, so execute it four times for each microsecond of
  // delay requested.
  us <<= 2; // x4 us, = 4 cycles
    14e6:	88 0f       	add	r24, r24
    14e8:	99 1f       	adc	r25, r25
    14ea:	88 0f       	add	r24, r24
    14ec:	99 1f       	adc	r25, r25
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring.c:629

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // to 2nd us is at least 8 so we can substract 5
  us -= 5; // = 2 cycles,
    14ee:	05 97       	sbiw	r24, 0x05	; 5
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
    14f0:	01 97       	sbiw	r24, 0x01	; 1
    14f2:	f1 f7       	brne	.-4      	; 0x14f0 <delayMicroseconds+0xa>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    14f4:	08 95       	ret

000014f6 <micros>:
micros():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
    14f6:	3f b7       	in	r19, 0x3f	; 63
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
    14f8:	f8 94       	cli
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
    14fa:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <timer0_overflow_count>
    14fe:	90 91 b0 02 	lds	r25, 0x02B0	; 0x8002b0 <timer0_overflow_count+0x1>
    1502:	a0 91 b1 02 	lds	r26, 0x02B1	; 0x8002b1 <timer0_overflow_count+0x2>
    1506:	b0 91 b2 02 	lds	r27, 0x02B2	; 0x8002b2 <timer0_overflow_count+0x3>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
    150a:	26 b5       	in	r18, 0x26	; 38
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
    150c:	a8 9b       	sbis	0x15, 0	; 21
    150e:	05 c0       	rjmp	.+10     	; 0x151a <micros+0x24>
    1510:	2f 3f       	cpi	r18, 0xFF	; 255
    1512:	19 f0       	breq	.+6      	; 0x151a <micros+0x24>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
    1514:	01 96       	adiw	r24, 0x01	; 1
    1516:	a1 1d       	adc	r26, r1
    1518:	b1 1d       	adc	r27, r1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
    151a:	3f bf       	out	0x3f, r19	; 63
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
    151c:	ba 2f       	mov	r27, r26
    151e:	a9 2f       	mov	r26, r25
    1520:	98 2f       	mov	r25, r24
    1522:	88 27       	eor	r24, r24
    1524:	bc 01       	movw	r22, r24
    1526:	cd 01       	movw	r24, r26
    1528:	62 0f       	add	r22, r18
    152a:	71 1d       	adc	r23, r1
    152c:	81 1d       	adc	r24, r1
    152e:	91 1d       	adc	r25, r1
    1530:	42 e0       	ldi	r20, 0x02	; 2
    1532:	66 0f       	add	r22, r22
    1534:	77 1f       	adc	r23, r23
    1536:	88 1f       	adc	r24, r24
    1538:	99 1f       	adc	r25, r25
    153a:	4a 95       	dec	r20
    153c:	d1 f7       	brne	.-12     	; 0x1532 <micros+0x3c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
    153e:	08 95       	ret

00001540 <delay>:
delay():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
    1540:	8f 92       	push	r8
    1542:	9f 92       	push	r9
    1544:	af 92       	push	r10
    1546:	bf 92       	push	r11
    1548:	cf 92       	push	r12
    154a:	df 92       	push	r13
    154c:	ef 92       	push	r14
    154e:	ff 92       	push	r15
    1550:	4b 01       	movw	r8, r22
    1552:	5c 01       	movw	r10, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
    1554:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <micros>
    1558:	6b 01       	movw	r12, r22
    155a:	7c 01       	movw	r14, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring.c:401

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    155c:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <micros>
    1560:	6c 19       	sub	r22, r12
    1562:	7d 09       	sbc	r23, r13
    1564:	8e 09       	sbc	r24, r14
    1566:	9f 09       	sbc	r25, r15
    1568:	68 3e       	cpi	r22, 0xE8	; 232
    156a:	73 40       	sbci	r23, 0x03	; 3
    156c:	81 05       	cpc	r24, r1
    156e:	91 05       	cpc	r25, r1
    1570:	a8 f3       	brcs	.-22     	; 0x155c <delay+0x1c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring.c:402
      ms--;
    1572:	21 e0       	ldi	r18, 0x01	; 1
    1574:	82 1a       	sub	r8, r18
    1576:	91 08       	sbc	r9, r1
    1578:	a1 08       	sbc	r10, r1
    157a:	b1 08       	sbc	r11, r1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring.c:403
      start += 1000UL;
    157c:	88 ee       	ldi	r24, 0xE8	; 232
    157e:	c8 0e       	add	r12, r24
    1580:	83 e0       	ldi	r24, 0x03	; 3
    1582:	d8 1e       	adc	r13, r24
    1584:	e1 1c       	adc	r14, r1
    1586:	f1 1c       	adc	r15, r1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    1588:	81 14       	cp	r8, r1
    158a:	91 04       	cpc	r9, r1
    158c:	a1 04       	cpc	r10, r1
    158e:	b1 04       	cpc	r11, r1
    1590:	29 f7       	brne	.-54     	; 0x155c <delay+0x1c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
    1592:	ff 90       	pop	r15
    1594:	ef 90       	pop	r14
    1596:	df 90       	pop	r13
    1598:	cf 90       	pop	r12
    159a:	bf 90       	pop	r11
    159c:	af 90       	pop	r10
    159e:	9f 90       	pop	r9
    15a0:	8f 90       	pop	r8
    15a2:	08 95       	ret

000015a4 <interrupt_handler()>:
interrupt_handler():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:41
#ifdef ESP8266    // if the controller is ESP8266, add IRAM_ATTR.
  IRAM_ATTR 
#endif
void interrupt_handler()
{
   data_from_device = true;
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <_ZL16data_from_device.lto_priv.60>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:42
}
    15aa:	08 95       	ret

000015ac <TwoWire::onRequestService()>:
onRequestService():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:366
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
  txBufferLength = 0;
  // alert user program
  user_onRequest();
}
    15ac:	08 95       	ret

000015ae <TwoWire::onReceiveService(unsigned char*, int)>:
onReceiveService():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:351
  // set rx iterator vars
  rxBufferIndex = 0;
  rxBufferLength = numBytes;
  // alert user program
  user_onReceive(numBytes);
}
    15ae:	08 95       	ret

000015b0 <nothing>:
nothing():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/WInterrupts.c:36

#include "wiring_private.h"

static void nothing(void)
{
}
    15b0:	08 95       	ret

000015b2 <Print::write(unsigned char const*, unsigned int)>:
write():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    15b2:	af 92       	push	r10
    15b4:	bf 92       	push	r11
    15b6:	cf 92       	push	r12
    15b8:	df 92       	push	r13
    15ba:	ef 92       	push	r14
    15bc:	ff 92       	push	r15
    15be:	0f 93       	push	r16
    15c0:	1f 93       	push	r17
    15c2:	cf 93       	push	r28
    15c4:	df 93       	push	r29
    15c6:	6c 01       	movw	r12, r24
    15c8:	7b 01       	movw	r14, r22
    15ca:	8b 01       	movw	r16, r22
    15cc:	04 0f       	add	r16, r20
    15ce:	15 1f       	adc	r17, r21
    15d0:	eb 01       	movw	r28, r22
    15d2:	5e 01       	movw	r10, r28
    15d4:	ae 18       	sub	r10, r14
    15d6:	bf 08       	sbc	r11, r15
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
    15d8:	c0 17       	cp	r28, r16
    15da:	d1 07       	cpc	r29, r17
    15dc:	59 f0       	breq	.+22     	; 0x15f4 <Print::write(unsigned char const*, unsigned int)+0x42>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
    15de:	69 91       	ld	r22, Y+
    15e0:	d6 01       	movw	r26, r12
    15e2:	ed 91       	ld	r30, X+
    15e4:	fc 91       	ld	r31, X
    15e6:	01 90       	ld	r0, Z+
    15e8:	f0 81       	ld	r31, Z
    15ea:	e0 2d       	mov	r30, r0
    15ec:	c6 01       	movw	r24, r12
    15ee:	09 95       	icall
    15f0:	89 2b       	or	r24, r25
    15f2:	79 f7       	brne	.-34     	; 0x15d2 <Print::write(unsigned char const*, unsigned int)+0x20>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
    15f4:	c5 01       	movw	r24, r10
    15f6:	df 91       	pop	r29
    15f8:	cf 91       	pop	r28
    15fa:	1f 91       	pop	r17
    15fc:	0f 91       	pop	r16
    15fe:	ff 90       	pop	r15
    1600:	ef 90       	pop	r14
    1602:	df 90       	pop	r13
    1604:	cf 90       	pop	r12
    1606:	bf 90       	pop	r11
    1608:	af 90       	pop	r10
    160a:	08 95       	ret

0000160c <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]>:
_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij.part.9():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:854
    @return None (void).
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y,
    160c:	ef 92       	push	r14
    160e:	ff 92       	push	r15
    1610:	0f 93       	push	r16
    1612:	1f 93       	push	r17
    1614:	cf 93       	push	r28
    1616:	df 93       	push	r29
    1618:	ec 01       	movw	r28, r24
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:857
                                             int16_t __h, uint16_t color) {

  if ((x >= 0) && (x < WIDTH)) { // X coord in bounds?
    161a:	ec 80       	ldd	r14, Y+4	; 0x04
    161c:	fd 80       	ldd	r15, Y+5	; 0x05
    161e:	6e 15       	cp	r22, r14
    1620:	7f 05       	cpc	r23, r15
    1622:	0c f0       	brlt	.+2      	; 0x1626 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0x1a>
    1624:	70 c0       	rjmp	.+224    	; 0x1706 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0xfa>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:858
    if (__y < 0) {               // Clip top
    1626:	57 ff       	sbrs	r21, 7
    1628:	04 c0       	rjmp	.+8      	; 0x1632 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0x26>
    162a:	24 0f       	add	r18, r20
    162c:	35 1f       	adc	r19, r21
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:860
      __h += __y;
      __y = 0;
    162e:	50 e0       	ldi	r21, 0x00	; 0
    1630:	40 e0       	ldi	r20, 0x00	; 0
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:862
    }
    if ((__y + __h) > HEIGHT) { // Clip bottom
    1632:	8e 81       	ldd	r24, Y+6	; 0x06
    1634:	9f 81       	ldd	r25, Y+7	; 0x07
    1636:	fa 01       	movw	r30, r20
    1638:	e2 0f       	add	r30, r18
    163a:	f3 1f       	adc	r31, r19
    163c:	8e 17       	cp	r24, r30
    163e:	9f 07       	cpc	r25, r31
    1640:	1c f4       	brge	.+6      	; 0x1648 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0x3c>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:863
      __h = (HEIGHT - __y);
    1642:	9c 01       	movw	r18, r24
    1644:	24 1b       	sub	r18, r20
    1646:	35 0b       	sbc	r19, r21
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:865
    }
    if (__h > 0) { // Proceed only if height is now positive
    1648:	12 16       	cp	r1, r18
    164a:	13 06       	cpc	r1, r19
    164c:	0c f0       	brlt	.+2      	; 0x1650 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0x44>
    164e:	5b c0       	rjmp	.+182    	; 0x1706 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0xfa>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:868
      // this display doesn't need ints for coordinates,
      // use local byte registers for faster juggling
      uint8_t y = __y, h = __h;
    1650:	92 2f       	mov	r25, r18
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:869
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
    1652:	84 2f       	mov	r24, r20
    1654:	86 95       	lsr	r24
    1656:	86 95       	lsr	r24
    1658:	86 95       	lsr	r24
    165a:	8e 9d       	mul	r24, r14
    165c:	d0 01       	movw	r26, r0
    165e:	8f 9d       	mul	r24, r15
    1660:	b0 0d       	add	r27, r0
    1662:	11 24       	eor	r1, r1
    1664:	6a 0f       	add	r22, r26
    1666:	7b 1f       	adc	r23, r27
    1668:	af 8d       	ldd	r26, Y+31	; 0x1f
    166a:	b8 a1       	ldd	r27, Y+32	; 0x20
    166c:	a6 0f       	add	r26, r22
    166e:	b7 1f       	adc	r27, r23
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:872

      // do the first partial byte, if necessary - this requires some masking
      uint8_t mod = (y & 7);
    1670:	47 70       	andi	r20, 0x07	; 7
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:873
      if (mod) {
    1672:	49 f1       	breq	.+82     	; 0x16c6 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0xba>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:875
        // mask off the high n bits we want to set
        mod = 8 - mod;
    1674:	88 e0       	ldi	r24, 0x08	; 8
    1676:	84 1b       	sub	r24, r20
    1678:	48 2f       	mov	r20, r24
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:881
        // note - lookup table results in a nearly 10% performance
        // improvement in fill* functions
        // uint8_t mask = ~(0xFF >> mod);
        static const uint8_t PROGMEM premask[8] = {0x00, 0x80, 0xC0, 0xE0,
                                                   0xF0, 0xF8, 0xFC, 0xFE};
        uint8_t mask = pgm_read_byte(&premask[mod]);
    167a:	68 2f       	mov	r22, r24
    167c:	70 e0       	ldi	r23, 0x00	; 0
    167e:	fb 01       	movw	r30, r22
    1680:	e6 5d       	subi	r30, 0xD6	; 214
    1682:	f2 4f       	sbci	r31, 0xF2	; 242
    1684:	e4 91       	lpm	r30, Z
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:883
        // adjust the mask if we're not going to reach the end of this byte
        if (h < mod)
    1686:	28 17       	cp	r18, r24
    1688:	08 f0       	brcs	.+2      	; 0x168c <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0x80>
    168a:	63 c0       	rjmp	.+198    	; 0x1752 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0x146>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:884
          mask &= (0XFF >> (mod - h));
    168c:	62 1b       	sub	r22, r18
    168e:	71 09       	sbc	r23, r1
    1690:	2f ef       	ldi	r18, 0xFF	; 255
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	02 c0       	rjmp	.+4      	; 0x169a <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0x8e>
    1696:	35 95       	asr	r19
    1698:	27 95       	ror	r18
    169a:	6a 95       	dec	r22
    169c:	e2 f7       	brpl	.-8      	; 0x1696 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0x8a>
    169e:	e2 23       	and	r30, r18
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:886

        switch (color) {
    16a0:	01 30       	cpi	r16, 0x01	; 1
    16a2:	11 05       	cpc	r17, r1
    16a4:	39 f0       	breq	.+14     	; 0x16b4 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0xa8>
    16a6:	b0 f1       	brcs	.+108    	; 0x1714 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0x108>
    16a8:	02 30       	cpi	r16, 0x02	; 2
    16aa:	11 05       	cpc	r17, r1
    16ac:	61 f5       	brne	.+88     	; 0x1706 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0xfa>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:894
          break;
        case SSD1306_BLACK:
          *pBuf &= ~mask;
          break;
        case SSD1306_INVERSE:
          *pBuf ^= mask;
    16ae:	8c 91       	ld	r24, X
    16b0:	e8 27       	eor	r30, r24
    16b2:	02 c0       	rjmp	.+4      	; 0x16b8 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0xac>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:888
        if (h < mod)
          mask &= (0XFF >> (mod - h));

        switch (color) {
        case SSD1306_WHITE:
          *pBuf |= mask;
    16b4:	8c 91       	ld	r24, X
    16b6:	e8 2b       	or	r30, r24
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:894
          break;
        case SSD1306_BLACK:
          *pBuf &= ~mask;
          break;
        case SSD1306_INVERSE:
          *pBuf ^= mask;
    16b8:	ec 93       	st	X, r30
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:900
          break;
        }
        pBuf += WIDTH;
      }

      if (h >= mod) { // More to go?
    16ba:	94 17       	cp	r25, r20
    16bc:	20 f1       	brcs	.+72     	; 0x1706 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0xfa>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:897
          break;
        case SSD1306_INVERSE:
          *pBuf ^= mask;
          break;
        }
        pBuf += WIDTH;
    16be:	2c 81       	ldd	r18, Y+4	; 0x04
    16c0:	3d 81       	ldd	r19, Y+5	; 0x05
    16c2:	a2 0f       	add	r26, r18
    16c4:	b3 1f       	adc	r27, r19
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:901
      }

      if (h >= mod) { // More to go?
        h -= mod;
    16c6:	e9 2f       	mov	r30, r25
    16c8:	e4 1b       	sub	r30, r20
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:903
        // Write solid bytes while we can - effectively 8 rows at a time
        if (h >= 8) {
    16ca:	e8 30       	cpi	r30, 0x08	; 8
    16cc:	78 f0       	brcs	.+30     	; 0x16ec <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0xe0>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:904
          if (color == SSD1306_INVERSE) {
    16ce:	02 30       	cpi	r16, 0x02	; 2
    16d0:	11 05       	cpc	r17, r1
    16d2:	21 f5       	brne	.+72     	; 0x171c <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0x110>
    16d4:	8e 2f       	mov	r24, r30
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:908
            // separate copy of the code so we don't impact performance of
            // black/white write version with an extra comparison per loop
            do {
              *pBuf ^= 0xFF; // Invert byte
    16d6:	9c 91       	ld	r25, X
    16d8:	90 95       	com	r25
    16da:	9c 93       	st	X, r25
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:909
              pBuf += WIDTH; // Advance pointer 8 rows
    16dc:	2c 81       	ldd	r18, Y+4	; 0x04
    16de:	3d 81       	ldd	r19, Y+5	; 0x05
    16e0:	a2 0f       	add	r26, r18
    16e2:	b3 1f       	adc	r27, r19
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:910
              h -= 8;        // Subtract 8 rows from height
    16e4:	88 50       	subi	r24, 0x08	; 8
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:911
            } while (h >= 8);
    16e6:	88 30       	cpi	r24, 0x08	; 8
    16e8:	b0 f7       	brcc	.-20     	; 0x16d6 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0xca>
    16ea:	e7 70       	andi	r30, 0x07	; 7
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:923
              h -= 8;        // Subtract 8 rows from height
            } while (h >= 8);
          }
        }

        if (h) { // Do the final partial byte, if necessary
    16ec:	ee 23       	and	r30, r30
    16ee:	59 f0       	breq	.+22     	; 0x1706 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0xfa>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:932
          // uint8_t mask = (1 << mod) - 1;
          // note - lookup table results in a nearly 10% performance
          // improvement in fill* functions
          static const uint8_t PROGMEM postmask[8] = {0x00, 0x01, 0x03, 0x07,
                                                      0x0F, 0x1F, 0x3F, 0x7F};
          uint8_t mask = pgm_read_byte(&postmask[mod]);
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	ee 5d       	subi	r30, 0xDE	; 222
    16f4:	f2 4f       	sbci	r31, 0xF2	; 242
    16f6:	e4 91       	lpm	r30, Z
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:933
          switch (color) {
    16f8:	01 30       	cpi	r16, 0x01	; 1
    16fa:	11 05       	cpc	r17, r1
    16fc:	f9 f0       	breq	.+62     	; 0x173c <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0x130>
    16fe:	10 f1       	brcs	.+68     	; 0x1744 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0x138>
    1700:	02 30       	cpi	r16, 0x02	; 2
    1702:	11 05       	cpc	r17, r1
    1704:	19 f1       	breq	.+70     	; 0x174c <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0x140>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:948
          }
        }
      }
    } // endif positive height
  } // endif x in bounds
}
    1706:	df 91       	pop	r29
    1708:	cf 91       	pop	r28
    170a:	1f 91       	pop	r17
    170c:	0f 91       	pop	r16
    170e:	ff 90       	pop	r15
    1710:	ef 90       	pop	r14
    1712:	08 95       	ret
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:891
        switch (color) {
        case SSD1306_WHITE:
          *pBuf |= mask;
          break;
        case SSD1306_BLACK:
          *pBuf &= ~mask;
    1714:	e0 95       	com	r30
    1716:	8c 91       	ld	r24, X
    1718:	e8 23       	and	r30, r24
    171a:	ce cf       	rjmp	.-100    	; 0x16b8 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0xac>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:914
              pBuf += WIDTH; // Advance pointer 8 rows
              h -= 8;        // Subtract 8 rows from height
            } while (h >= 8);
          } else {
            // store a local value to work with
            uint8_t val = (color != SSD1306_BLACK) ? 255 : 0;
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	01 15       	cp	r16, r1
    1720:	11 05       	cpc	r17, r1
    1722:	09 f4       	brne	.+2      	; 0x1726 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0x11a>
    1724:	80 e0       	ldi	r24, 0x00	; 0
    1726:	81 95       	neg	r24
    1728:	9e 2f       	mov	r25, r30
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:916
            do {
              *pBuf = val;   // Set byte
    172a:	8c 93       	st	X, r24
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:917
              pBuf += WIDTH; // Advance pointer 8 rows
    172c:	2c 81       	ldd	r18, Y+4	; 0x04
    172e:	3d 81       	ldd	r19, Y+5	; 0x05
    1730:	a2 0f       	add	r26, r18
    1732:	b3 1f       	adc	r27, r19
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:918
              h -= 8;        // Subtract 8 rows from height
    1734:	98 50       	subi	r25, 0x08	; 8
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:919
            } while (h >= 8);
    1736:	98 30       	cpi	r25, 0x08	; 8
    1738:	c0 f7       	brcc	.-16     	; 0x172a <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0x11e>
    173a:	d7 cf       	rjmp	.-82     	; 0x16ea <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0xde>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:935
          static const uint8_t PROGMEM postmask[8] = {0x00, 0x01, 0x03, 0x07,
                                                      0x0F, 0x1F, 0x3F, 0x7F};
          uint8_t mask = pgm_read_byte(&postmask[mod]);
          switch (color) {
          case SSD1306_WHITE:
            *pBuf |= mask;
    173c:	8c 91       	ld	r24, X
    173e:	e8 2b       	or	r30, r24
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:941
            break;
          case SSD1306_BLACK:
            *pBuf &= ~mask;
            break;
          case SSD1306_INVERSE:
            *pBuf ^= mask;
    1740:	ec 93       	st	X, r30
    1742:	e1 cf       	rjmp	.-62     	; 0x1706 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0xfa>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:938
          switch (color) {
          case SSD1306_WHITE:
            *pBuf |= mask;
            break;
          case SSD1306_BLACK:
            *pBuf &= ~mask;
    1744:	e0 95       	com	r30
    1746:	8c 91       	ld	r24, X
    1748:	e8 23       	and	r30, r24
    174a:	fa cf       	rjmp	.-12     	; 0x1740 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0x134>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:941
            break;
          case SSD1306_INVERSE:
            *pBuf ^= mask;
    174c:	8c 91       	ld	r24, X
    174e:	e8 27       	eor	r30, r24
    1750:	f7 cf       	rjmp	.-18     	; 0x1740 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0x134>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:886
        uint8_t mask = pgm_read_byte(&premask[mod]);
        // adjust the mask if we're not going to reach the end of this byte
        if (h < mod)
          mask &= (0XFF >> (mod - h));

        switch (color) {
    1752:	01 30       	cpi	r16, 0x01	; 1
    1754:	11 05       	cpc	r17, r1
    1756:	09 f4       	brne	.+2      	; 0x175a <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0x14e>
    1758:	ad cf       	rjmp	.-166    	; 0x16b4 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0xa8>
    175a:	e0 f2       	brcs	.-72     	; 0x1714 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0x108>
    175c:	02 30       	cpi	r16, 0x02	; 2
    175e:	11 05       	cpc	r17, r1
    1760:	09 f4       	brne	.+2      	; 0x1764 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0x158>
    1762:	a5 cf       	rjmp	.-182    	; 0x16ae <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0xa2>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:897
          break;
        case SSD1306_INVERSE:
          *pBuf ^= mask;
          break;
        }
        pBuf += WIDTH;
    1764:	ae 0d       	add	r26, r14
    1766:	bf 1d       	adc	r27, r15
    1768:	ae cf       	rjmp	.-164    	; 0x16c6 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]+0xba>

0000176a <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int) [clone .part.8]>:
_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij.part.8():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:755
    @return None (void).
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w,
    176a:	0f 93       	push	r16
    176c:	1f 93       	push	r17
    176e:	cf 93       	push	r28
    1770:	df 93       	push	r29
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:759
                                             uint16_t color) {

  if ((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
    if (x < 0) {                  // Clip left
    1772:	77 ff       	sbrs	r23, 7
    1774:	04 c0       	rjmp	.+8      	; 0x177e <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int) [clone .part.8]+0x14>
    1776:	26 0f       	add	r18, r22
    1778:	37 1f       	adc	r19, r23
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:761
      w += x;
      x = 0;
    177a:	70 e0       	ldi	r23, 0x00	; 0
    177c:	60 e0       	ldi	r22, 0x00	; 0
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:763
    }
    if ((x + w) > WIDTH) { // Clip right
    177e:	dc 01       	movw	r26, r24
    1780:	14 96       	adiw	r26, 0x04	; 4
    1782:	cd 91       	ld	r28, X+
    1784:	dc 91       	ld	r29, X
    1786:	fb 01       	movw	r30, r22
    1788:	e2 0f       	add	r30, r18
    178a:	f3 1f       	adc	r31, r19
    178c:	ce 17       	cp	r28, r30
    178e:	df 07       	cpc	r29, r31
    1790:	1c f4       	brge	.+6      	; 0x1798 <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int) [clone .part.8]+0x2e>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:764
      w = (WIDTH - x);
    1792:	9e 01       	movw	r18, r28
    1794:	26 1b       	sub	r18, r22
    1796:	37 0b       	sbc	r19, r23
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:766
    }
    if (w > 0) { // Proceed only if width is positive
    1798:	12 16       	cp	r1, r18
    179a:	13 06       	cpc	r1, r19
    179c:	4c f5       	brge	.+82     	; 0x17f0 <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int) [clone .part.8]+0x86>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:767
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x], mask = 1 << (y & 7);
    179e:	fa 01       	movw	r30, r20
    17a0:	57 fd       	sbrc	r21, 7
    17a2:	37 96       	adiw	r30, 0x07	; 7
    17a4:	a3 e0       	ldi	r26, 0x03	; 3
    17a6:	f5 95       	asr	r31
    17a8:	e7 95       	ror	r30
    17aa:	aa 95       	dec	r26
    17ac:	e1 f7       	brne	.-8      	; 0x17a6 <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int) [clone .part.8]+0x3c>
    17ae:	ec 9f       	mul	r30, r28
    17b0:	d0 01       	movw	r26, r0
    17b2:	ed 9f       	mul	r30, r29
    17b4:	b0 0d       	add	r27, r0
    17b6:	fc 9f       	mul	r31, r28
    17b8:	b0 0d       	add	r27, r0
    17ba:	11 24       	eor	r1, r1
    17bc:	6a 0f       	add	r22, r26
    17be:	7b 1f       	adc	r23, r27
    17c0:	dc 01       	movw	r26, r24
    17c2:	5f 96       	adiw	r26, 0x1f	; 31
    17c4:	ed 91       	ld	r30, X+
    17c6:	fc 91       	ld	r31, X
    17c8:	e6 0f       	add	r30, r22
    17ca:	f7 1f       	adc	r31, r23
    17cc:	47 70       	andi	r20, 0x07	; 7
    17ce:	55 27       	eor	r21, r21
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	01 c0       	rjmp	.+2      	; 0x17d8 <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int) [clone .part.8]+0x6e>
    17d6:	88 0f       	add	r24, r24
    17d8:	4a 95       	dec	r20
    17da:	ea f7       	brpl	.-6      	; 0x17d6 <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int) [clone .part.8]+0x6c>
    17dc:	48 2f       	mov	r20, r24
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:768
      switch (color) {
    17de:	01 30       	cpi	r16, 0x01	; 1
    17e0:	11 05       	cpc	r17, r1
    17e2:	59 f0       	breq	.+22     	; 0x17fa <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int) [clone .part.8]+0x90>
    17e4:	a8 f0       	brcs	.+42     	; 0x1810 <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int) [clone .part.8]+0xa6>
    17e6:	2e 0f       	add	r18, r30
    17e8:	3f 1f       	adc	r19, r31
    17ea:	02 30       	cpi	r16, 0x02	; 2
    17ec:	11 05       	cpc	r17, r1
    17ee:	e1 f0       	breq	.+56     	; 0x1828 <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int) [clone .part.8]+0xbe>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:788
        };
        break;
      }
    }
  }
}
    17f0:	df 91       	pop	r29
    17f2:	cf 91       	pop	r28
    17f4:	1f 91       	pop	r17
    17f6:	0f 91       	pop	r16
    17f8:	08 95       	ret
    17fa:	2e 0f       	add	r18, r30
    17fc:	3f 1f       	adc	r19, r31
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:770
    }
    if (w > 0) { // Proceed only if width is positive
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x], mask = 1 << (y & 7);
      switch (color) {
      case SSD1306_WHITE:
        while (w--) {
    17fe:	e2 17       	cp	r30, r18
    1800:	f3 07       	cpc	r31, r19
    1802:	b1 f3       	breq	.-20     	; 0x17f0 <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int) [clone .part.8]+0x86>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:771
          *pBuf++ |= mask;
    1804:	81 91       	ld	r24, Z+
    1806:	df 01       	movw	r26, r30
    1808:	11 97       	sbiw	r26, 0x01	; 1
    180a:	84 2b       	or	r24, r20
    180c:	8c 93       	st	X, r24
    180e:	f7 cf       	rjmp	.-18     	; 0x17fe <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int) [clone .part.8]+0x94>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:775
        };
        break;
      case SSD1306_BLACK:
        mask = ~mask;
    1810:	80 95       	com	r24
    1812:	2e 0f       	add	r18, r30
    1814:	3f 1f       	adc	r19, r31
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:776
        while (w--) {
    1816:	e2 17       	cp	r30, r18
    1818:	f3 07       	cpc	r31, r19
    181a:	51 f3       	breq	.-44     	; 0x17f0 <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int) [clone .part.8]+0x86>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:777
          *pBuf++ &= mask;
    181c:	91 91       	ld	r25, Z+
    181e:	df 01       	movw	r26, r30
    1820:	11 97       	sbiw	r26, 0x01	; 1
    1822:	98 23       	and	r25, r24
    1824:	9c 93       	st	X, r25
    1826:	f7 cf       	rjmp	.-18     	; 0x1816 <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int) [clone .part.8]+0xac>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:781
        };
        break;
      case SSD1306_INVERSE:
        while (w--) {
    1828:	e2 17       	cp	r30, r18
    182a:	f3 07       	cpc	r31, r19
    182c:	09 f3       	breq	.-62     	; 0x17f0 <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int) [clone .part.8]+0x86>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:782
          *pBuf++ ^= mask;
    182e:	81 91       	ld	r24, Z+
    1830:	df 01       	movw	r26, r30
    1832:	11 97       	sbiw	r26, 0x01	; 1
    1834:	84 27       	eor	r24, r20
    1836:	8c 93       	st	X, r24
    1838:	f7 cf       	rjmp	.-18     	; 0x1828 <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int) [clone .part.8]+0xbe>

0000183a <Adafruit_SSD1306::drawFastVLine(int, int, int, unsigned int)>:
drawFastVLine():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:807
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h,
                                     uint16_t color) {
    183a:	0f 93       	push	r16
    183c:	1f 93       	push	r17
    183e:	fa 01       	movw	r30, r20
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:809
  bool bSwap = false;
  switch (rotation) {
    1840:	dc 01       	movw	r26, r24
    1842:	56 96       	adiw	r26, 0x16	; 22
    1844:	4c 91       	ld	r20, X
    1846:	56 97       	sbiw	r26, 0x16	; 22
    1848:	42 30       	cpi	r20, 0x02	; 2
    184a:	e9 f0       	breq	.+58     	; 0x1886 <Adafruit_SSD1306::drawFastVLine(int, int, int, unsigned int)+0x4c>
    184c:	43 30       	cpi	r20, 0x03	; 3
    184e:	a1 f1       	breq	.+104    	; 0x18b8 <Adafruit_SSD1306::drawFastVLine(int, int, int, unsigned int)+0x7e>
    1850:	41 30       	cpi	r20, 0x01	; 1
    1852:	61 f5       	brne	.+88     	; 0x18ac <Adafruit_SSD1306::drawFastVLine(int, int, int, unsigned int)+0x72>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:815
  case 1:
    // 90 degree rotation, swap x & y for rotation,
    // then invert x and adjust x for h (now to become w)
    bSwap = true;
    ssd1306_swap(x, y);
    x = WIDTH - x - 1;
    1854:	14 96       	adiw	r26, 0x04	; 4
    1856:	4d 91       	ld	r20, X+
    1858:	5c 91       	ld	r21, X
    185a:	da 01       	movw	r26, r20
    185c:	ae 1b       	sub	r26, r30
    185e:	bf 0b       	sbc	r27, r31
    1860:	fd 01       	movw	r30, r26
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:816
    x -= (h - 1);
    1862:	e2 1b       	sub	r30, r18
    1864:	f3 0b       	sbc	r31, r19
drawFastHLineInternal():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:758
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w,
                                             uint16_t color) {

  if ((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
    1866:	77 fd       	sbrc	r23, 7
    1868:	0b c0       	rjmp	.+22     	; 0x1880 <Adafruit_SSD1306::drawFastVLine(int, int, int, unsigned int)+0x46>
    186a:	dc 01       	movw	r26, r24
    186c:	16 96       	adiw	r26, 0x06	; 6
    186e:	4d 91       	ld	r20, X+
    1870:	5c 91       	ld	r21, X
    1872:	64 17       	cp	r22, r20
    1874:	75 07       	cpc	r23, r21
    1876:	24 f4       	brge	.+8      	; 0x1880 <Adafruit_SSD1306::drawFastVLine(int, int, int, unsigned int)+0x46>
    1878:	ab 01       	movw	r20, r22
    187a:	bf 01       	movw	r22, r30
    187c:	0e 94 b5 0b 	call	0x176a	; 0x176a <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int) [clone .part.8]>
drawFastVLine():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:836

  if (bSwap)
    drawFastHLineInternal(x, y, h, color);
  else
    drawFastVLineInternal(x, y, h, color);
}
    1880:	1f 91       	pop	r17
    1882:	0f 91       	pop	r16
    1884:	08 95       	ret
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:820
    x = WIDTH - x - 1;
    x -= (h - 1);
    break;
  case 2:
    // 180 degree rotation, invert x and y, then shift y around for height.
    x = WIDTH - x - 1;
    1886:	14 96       	adiw	r26, 0x04	; 4
    1888:	4d 91       	ld	r20, X+
    188a:	5c 91       	ld	r21, X
    188c:	da 01       	movw	r26, r20
    188e:	a6 1b       	sub	r26, r22
    1890:	b7 0b       	sbc	r27, r23
    1892:	bd 01       	movw	r22, r26
    1894:	61 50       	subi	r22, 0x01	; 1
    1896:	71 09       	sbc	r23, r1
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:821
    y = HEIGHT - y - 1;
    1898:	dc 01       	movw	r26, r24
    189a:	16 96       	adiw	r26, 0x06	; 6
    189c:	4d 91       	ld	r20, X+
    189e:	5c 91       	ld	r21, X
    18a0:	da 01       	movw	r26, r20
    18a2:	ae 1b       	sub	r26, r30
    18a4:	bf 0b       	sbc	r27, r31
    18a6:	fd 01       	movw	r30, r26
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:822
    y -= (h - 1);
    18a8:	e2 1b       	sub	r30, r18
    18aa:	f3 0b       	sbc	r31, r19
drawFastVLineInternal():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:857
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y,
                                             int16_t __h, uint16_t color) {

  if ((x >= 0) && (x < WIDTH)) { // X coord in bounds?
    18ac:	77 fd       	sbrc	r23, 7
    18ae:	e8 cf       	rjmp	.-48     	; 0x1880 <Adafruit_SSD1306::drawFastVLine(int, int, int, unsigned int)+0x46>
    18b0:	af 01       	movw	r20, r30
    18b2:	0e 94 06 0b 	call	0x160c	; 0x160c <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]>
    18b6:	e4 cf       	rjmp	.-56     	; 0x1880 <Adafruit_SSD1306::drawFastVLine(int, int, int, unsigned int)+0x46>
drawFastVLine():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:828
    break;
  case 3:
    // 270 degree rotation, swap x & y for rotation, then invert y
    bSwap = true;
    ssd1306_swap(x, y);
    y = HEIGHT - y - 1;
    18b8:	16 96       	adiw	r26, 0x06	; 6
    18ba:	4d 91       	ld	r20, X+
    18bc:	5c 91       	ld	r21, X
    18be:	da 01       	movw	r26, r20
    18c0:	a6 1b       	sub	r26, r22
    18c2:	b7 0b       	sbc	r27, r23
    18c4:	bd 01       	movw	r22, r26
    18c6:	61 50       	subi	r22, 0x01	; 1
    18c8:	71 09       	sbc	r23, r1
    18ca:	cd cf       	rjmp	.-102    	; 0x1866 <Adafruit_SSD1306::drawFastVLine(int, int, int, unsigned int)+0x2c>

000018cc <Adafruit_SSD1306::drawFastHLine(int, int, int, unsigned int)>:
drawFastHLine():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:707
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w,
                                     uint16_t color) {
    18cc:	0f 93       	push	r16
    18ce:	1f 93       	push	r17
    18d0:	fa 01       	movw	r30, r20
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:709
  bool bSwap = false;
  switch (rotation) {
    18d2:	dc 01       	movw	r26, r24
    18d4:	56 96       	adiw	r26, 0x16	; 22
    18d6:	4c 91       	ld	r20, X
    18d8:	56 97       	sbiw	r26, 0x16	; 22
    18da:	42 30       	cpi	r20, 0x02	; 2
    18dc:	a9 f0       	breq	.+42     	; 0x1908 <Adafruit_SSD1306::drawFastHLine(int, int, int, unsigned int)+0x3c>
    18de:	43 30       	cpi	r20, 0x03	; 3
    18e0:	91 f1       	breq	.+100    	; 0x1946 <Adafruit_SSD1306::drawFastHLine(int, int, int, unsigned int)+0x7a>
    18e2:	41 30       	cpi	r20, 0x01	; 1
    18e4:	19 f5       	brne	.+70     	; 0x192c <Adafruit_SSD1306::drawFastHLine(int, int, int, unsigned int)+0x60>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:714
  case 1:
    // 90 degree rotation, swap x & y for rotation, then invert x
    bSwap = true;
    ssd1306_swap(x, y);
    x = WIDTH - x - 1;
    18e6:	14 96       	adiw	r26, 0x04	; 4
    18e8:	4d 91       	ld	r20, X+
    18ea:	5c 91       	ld	r21, X
    18ec:	da 01       	movw	r26, r20
    18ee:	ae 1b       	sub	r26, r30
    18f0:	bf 0b       	sbc	r27, r31
    18f2:	fd 01       	movw	r30, r26
    18f4:	31 97       	sbiw	r30, 0x01	; 1
drawFastVLineInternal():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:857
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y,
                                             int16_t __h, uint16_t color) {

  if ((x >= 0) && (x < WIDTH)) { // X coord in bounds?
    18f6:	f7 fd       	sbrc	r31, 7
    18f8:	04 c0       	rjmp	.+8      	; 0x1902 <Adafruit_SSD1306::drawFastHLine(int, int, int, unsigned int)+0x36>
    18fa:	ab 01       	movw	r20, r22
    18fc:	bf 01       	movw	r22, r30
    18fe:	0e 94 06 0b 	call	0x160c	; 0x160c <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int) [clone .part.9]>
drawFastHLine():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:736

  if (bSwap)
    drawFastVLineInternal(x, y, w, color);
  else
    drawFastHLineInternal(x, y, w, color);
}
    1902:	1f 91       	pop	r17
    1904:	0f 91       	pop	r16
    1906:	08 95       	ret
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:719
    x = WIDTH - x - 1;
    break;
  case 2:
    // 180 degree rotation, invert x and y, then shift y around for height.
    x = WIDTH - x - 1;
    y = HEIGHT - y - 1;
    1908:	16 96       	adiw	r26, 0x06	; 6
    190a:	4d 91       	ld	r20, X+
    190c:	5c 91       	ld	r21, X
    190e:	da 01       	movw	r26, r20
    1910:	ae 1b       	sub	r26, r30
    1912:	bf 0b       	sbc	r27, r31
    1914:	fd 01       	movw	r30, r26
    1916:	31 97       	sbiw	r30, 0x01	; 1
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:718
    ssd1306_swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    // 180 degree rotation, invert x and y, then shift y around for height.
    x = WIDTH - x - 1;
    1918:	dc 01       	movw	r26, r24
    191a:	14 96       	adiw	r26, 0x04	; 4
    191c:	4d 91       	ld	r20, X+
    191e:	5c 91       	ld	r21, X
    1920:	da 01       	movw	r26, r20
    1922:	a6 1b       	sub	r26, r22
    1924:	b7 0b       	sbc	r27, r23
    1926:	bd 01       	movw	r22, r26
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:720
    y = HEIGHT - y - 1;
    x -= (w - 1);
    1928:	62 1b       	sub	r22, r18
    192a:	73 0b       	sbc	r23, r19
drawFastHLineInternal():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:758
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w,
                                             uint16_t color) {

  if ((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
    192c:	f7 fd       	sbrc	r31, 7
    192e:	e9 cf       	rjmp	.-46     	; 0x1902 <Adafruit_SSD1306::drawFastHLine(int, int, int, unsigned int)+0x36>
    1930:	dc 01       	movw	r26, r24
    1932:	16 96       	adiw	r26, 0x06	; 6
    1934:	4d 91       	ld	r20, X+
    1936:	5c 91       	ld	r21, X
    1938:	e4 17       	cp	r30, r20
    193a:	f5 07       	cpc	r31, r21
    193c:	14 f7       	brge	.-60     	; 0x1902 <Adafruit_SSD1306::drawFastHLine(int, int, int, unsigned int)+0x36>
    193e:	af 01       	movw	r20, r30
    1940:	0e 94 b5 0b 	call	0x176a	; 0x176a <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int) [clone .part.8]>
    1944:	de cf       	rjmp	.-68     	; 0x1902 <Adafruit_SSD1306::drawFastHLine(int, int, int, unsigned int)+0x36>
drawFastHLine():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:727
  case 3:
    // 270 degree rotation, swap x & y for rotation,
    // then invert y and adjust y for w (not to become h)
    bSwap = true;
    ssd1306_swap(x, y);
    y = HEIGHT - y - 1;
    1946:	16 96       	adiw	r26, 0x06	; 6
    1948:	4d 91       	ld	r20, X+
    194a:	5c 91       	ld	r21, X
    194c:	da 01       	movw	r26, r20
    194e:	a6 1b       	sub	r26, r22
    1950:	b7 0b       	sbc	r27, r23
    1952:	bd 01       	movw	r22, r26
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:728
    y -= (w - 1);
    1954:	62 1b       	sub	r22, r18
    1956:	73 0b       	sbc	r23, r19
    1958:	ce cf       	rjmp	.-100    	; 0x18f6 <Adafruit_SSD1306::drawFastHLine(int, int, int, unsigned int)+0x2a>

0000195a <Adafruit_SSD1306::drawPixel(int, int, unsigned int)>:
drawPixel():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:648
    @return None (void).
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
    195a:	fc 01       	movw	r30, r24
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:649
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
    195c:	77 fd       	sbrc	r23, 7
    195e:	64 c0       	rjmp	.+200    	; 0x1a28 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0xce>
    1960:	80 85       	ldd	r24, Z+8	; 0x08
    1962:	91 85       	ldd	r25, Z+9	; 0x09
    1964:	68 17       	cp	r22, r24
    1966:	79 07       	cpc	r23, r25
    1968:	0c f0       	brlt	.+2      	; 0x196c <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x12>
    196a:	5e c0       	rjmp	.+188    	; 0x1a28 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0xce>
    196c:	57 fd       	sbrc	r21, 7
    196e:	5c c0       	rjmp	.+184    	; 0x1a28 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0xce>
    1970:	82 85       	ldd	r24, Z+10	; 0x0a
    1972:	93 85       	ldd	r25, Z+11	; 0x0b
    1974:	48 17       	cp	r20, r24
    1976:	59 07       	cpc	r21, r25
    1978:	0c f0       	brlt	.+2      	; 0x197c <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x22>
    197a:	56 c0       	rjmp	.+172    	; 0x1a28 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0xce>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:651
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch (getRotation()) {
    197c:	86 89       	ldd	r24, Z+22	; 0x16
    197e:	82 30       	cpi	r24, 0x02	; 2
    1980:	b1 f0       	breq	.+44     	; 0x19ae <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x54>
    1982:	83 30       	cpi	r24, 0x03	; 3
    1984:	29 f1       	breq	.+74     	; 0x19d0 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x76>
    1986:	81 30       	cpi	r24, 0x01	; 1
    1988:	41 f4       	brne	.+16     	; 0x199a <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x40>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:654
    case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
    198a:	84 81       	ldd	r24, Z+4	; 0x04
    198c:	95 81       	ldd	r25, Z+5	; 0x05
    198e:	84 1b       	sub	r24, r20
    1990:	95 0b       	sbc	r25, r21
    1992:	ab 01       	movw	r20, r22
    1994:	bc 01       	movw	r22, r24
    1996:	61 50       	subi	r22, 0x01	; 1
    1998:	71 09       	sbc	r23, r1
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:665
    case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch (color) {
    199a:	21 30       	cpi	r18, 0x01	; 1
    199c:	31 05       	cpc	r19, r1
    199e:	09 f1       	breq	.+66     	; 0x19e2 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x88>
    19a0:	08 f4       	brcc	.+2      	; 0x19a4 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x4a>
    19a2:	43 c0       	rjmp	.+134    	; 0x1a2a <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0xd0>
    19a4:	22 30       	cpi	r18, 0x02	; 2
    19a6:	31 05       	cpc	r19, r1
    19a8:	09 f4       	brne	.+2      	; 0x19ac <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x52>
    19aa:	63 c0       	rjmp	.+198    	; 0x1a72 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x118>
    19ac:	08 95       	ret
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:657
    case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
      break;
    case 2:
      x = WIDTH - x - 1;
    19ae:	84 81       	ldd	r24, Z+4	; 0x04
    19b0:	95 81       	ldd	r25, Z+5	; 0x05
    19b2:	dc 01       	movw	r26, r24
    19b4:	a6 1b       	sub	r26, r22
    19b6:	b7 0b       	sbc	r27, r23
    19b8:	bd 01       	movw	r22, r26
    19ba:	61 50       	subi	r22, 0x01	; 1
    19bc:	71 09       	sbc	r23, r1
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:658
      y = HEIGHT - y - 1;
    19be:	86 81       	ldd	r24, Z+6	; 0x06
    19c0:	97 81       	ldd	r25, Z+7	; 0x07
    19c2:	dc 01       	movw	r26, r24
    19c4:	a4 1b       	sub	r26, r20
    19c6:	b5 0b       	sbc	r27, r21
    19c8:	ad 01       	movw	r20, r26
    19ca:	41 50       	subi	r20, 0x01	; 1
    19cc:	51 09       	sbc	r21, r1
    19ce:	e5 cf       	rjmp	.-54     	; 0x199a <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x40>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:662
      break;
    case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
    19d0:	86 81       	ldd	r24, Z+6	; 0x06
    19d2:	97 81       	ldd	r25, Z+7	; 0x07
    19d4:	86 1b       	sub	r24, r22
    19d6:	97 0b       	sbc	r25, r23
    19d8:	ba 01       	movw	r22, r20
    19da:	ac 01       	movw	r20, r24
    19dc:	41 50       	subi	r20, 0x01	; 1
    19de:	51 09       	sbc	r21, r1
    19e0:	dc cf       	rjmp	.-72     	; 0x199a <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x40>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:667
      break;
    }
    switch (color) {
    case SSD1306_WHITE:
      buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
    19e2:	ca 01       	movw	r24, r20
    19e4:	57 fd       	sbrc	r21, 7
    19e6:	07 96       	adiw	r24, 0x07	; 7
    19e8:	a3 e0       	ldi	r26, 0x03	; 3
    19ea:	95 95       	asr	r25
    19ec:	87 95       	ror	r24
    19ee:	aa 95       	dec	r26
    19f0:	e1 f7       	brne	.-8      	; 0x19ea <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x90>
    19f2:	a4 81       	ldd	r26, Z+4	; 0x04
    19f4:	b5 81       	ldd	r27, Z+5	; 0x05
    19f6:	8a 9f       	mul	r24, r26
    19f8:	90 01       	movw	r18, r0
    19fa:	8b 9f       	mul	r24, r27
    19fc:	30 0d       	add	r19, r0
    19fe:	9a 9f       	mul	r25, r26
    1a00:	30 0d       	add	r19, r0
    1a02:	11 24       	eor	r1, r1
    1a04:	62 0f       	add	r22, r18
    1a06:	73 1f       	adc	r23, r19
    1a08:	07 8c       	ldd	r0, Z+31	; 0x1f
    1a0a:	f0 a1       	ldd	r31, Z+32	; 0x20
    1a0c:	e0 2d       	mov	r30, r0
    1a0e:	e6 0f       	add	r30, r22
    1a10:	f7 1f       	adc	r31, r23
    1a12:	47 70       	andi	r20, 0x07	; 7
    1a14:	55 27       	eor	r21, r21
    1a16:	21 e0       	ldi	r18, 0x01	; 1
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	01 c0       	rjmp	.+2      	; 0x1a1e <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0xc4>
    1a1c:	22 0f       	add	r18, r18
    1a1e:	4a 95       	dec	r20
    1a20:	ea f7       	brpl	.-6      	; 0x1a1c <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0xc2>
    1a22:	80 81       	ld	r24, Z
    1a24:	82 2b       	or	r24, r18
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:673
      break;
    case SSD1306_BLACK:
      buffer[x + (y / 8) * WIDTH] &= ~(1 << (y & 7));
      break;
    case SSD1306_INVERSE:
      buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
    1a26:	80 83       	st	Z, r24
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:677
      break;
    }
  }
}
    1a28:	08 95       	ret
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:670
    switch (color) {
    case SSD1306_WHITE:
      buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
      break;
    case SSD1306_BLACK:
      buffer[x + (y / 8) * WIDTH] &= ~(1 << (y & 7));
    1a2a:	ca 01       	movw	r24, r20
    1a2c:	57 fd       	sbrc	r21, 7
    1a2e:	07 96       	adiw	r24, 0x07	; 7
    1a30:	33 e0       	ldi	r19, 0x03	; 3
    1a32:	95 95       	asr	r25
    1a34:	87 95       	ror	r24
    1a36:	3a 95       	dec	r19
    1a38:	e1 f7       	brne	.-8      	; 0x1a32 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0xd8>
    1a3a:	a4 81       	ldd	r26, Z+4	; 0x04
    1a3c:	b5 81       	ldd	r27, Z+5	; 0x05
    1a3e:	8a 9f       	mul	r24, r26
    1a40:	90 01       	movw	r18, r0
    1a42:	8b 9f       	mul	r24, r27
    1a44:	30 0d       	add	r19, r0
    1a46:	9a 9f       	mul	r25, r26
    1a48:	30 0d       	add	r19, r0
    1a4a:	11 24       	eor	r1, r1
    1a4c:	62 0f       	add	r22, r18
    1a4e:	73 1f       	adc	r23, r19
    1a50:	07 8c       	ldd	r0, Z+31	; 0x1f
    1a52:	f0 a1       	ldd	r31, Z+32	; 0x20
    1a54:	e0 2d       	mov	r30, r0
    1a56:	e6 0f       	add	r30, r22
    1a58:	f7 1f       	adc	r31, r23
    1a5a:	47 70       	andi	r20, 0x07	; 7
    1a5c:	55 27       	eor	r21, r21
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	01 c0       	rjmp	.+2      	; 0x1a66 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x10c>
    1a64:	88 0f       	add	r24, r24
    1a66:	4a 95       	dec	r20
    1a68:	ea f7       	brpl	.-6      	; 0x1a64 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x10a>
    1a6a:	80 95       	com	r24
    1a6c:	90 81       	ld	r25, Z
    1a6e:	89 23       	and	r24, r25
    1a70:	da cf       	rjmp	.-76     	; 0x1a26 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0xcc>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:673
      break;
    case SSD1306_INVERSE:
      buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
    1a72:	ca 01       	movw	r24, r20
    1a74:	57 fd       	sbrc	r21, 7
    1a76:	07 96       	adiw	r24, 0x07	; 7
    1a78:	23 e0       	ldi	r18, 0x03	; 3
    1a7a:	95 95       	asr	r25
    1a7c:	87 95       	ror	r24
    1a7e:	2a 95       	dec	r18
    1a80:	e1 f7       	brne	.-8      	; 0x1a7a <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x120>
    1a82:	a4 81       	ldd	r26, Z+4	; 0x04
    1a84:	b5 81       	ldd	r27, Z+5	; 0x05
    1a86:	8a 9f       	mul	r24, r26
    1a88:	90 01       	movw	r18, r0
    1a8a:	8b 9f       	mul	r24, r27
    1a8c:	30 0d       	add	r19, r0
    1a8e:	9a 9f       	mul	r25, r26
    1a90:	30 0d       	add	r19, r0
    1a92:	11 24       	eor	r1, r1
    1a94:	62 0f       	add	r22, r18
    1a96:	73 1f       	adc	r23, r19
    1a98:	07 8c       	ldd	r0, Z+31	; 0x1f
    1a9a:	f0 a1       	ldd	r31, Z+32	; 0x20
    1a9c:	e0 2d       	mov	r30, r0
    1a9e:	e6 0f       	add	r30, r22
    1aa0:	f7 1f       	adc	r31, r23
    1aa2:	47 70       	andi	r20, 0x07	; 7
    1aa4:	55 27       	eor	r21, r21
    1aa6:	21 e0       	ldi	r18, 0x01	; 1
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	01 c0       	rjmp	.+2      	; 0x1aae <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x154>
    1aac:	22 0f       	add	r18, r18
    1aae:	4a 95       	dec	r20
    1ab0:	ea f7       	brpl	.-6      	; 0x1aac <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x152>
    1ab2:	80 81       	ld	r24, Z
    1ab4:	82 27       	eor	r24, r18
    1ab6:	b7 cf       	rjmp	.-146    	; 0x1a26 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0xcc>

00001ab8 <SPIClass::endTransaction()>:
endTransaction():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/SPI/src/SPI.h:287
      #endif
      {
        SREG = interruptSave;
      }
    }
  }
    1ab8:	08 95       	ret

00001aba <SPIClass::transfer(unsigned char)>:
transfer():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/SPI/src/SPI.h:212
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
    1aba:	8e bd       	out	0x2e, r24	; 46
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/SPI/src/SPI.h:219
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
    1abc:	00 00       	nop
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/SPI/src/SPI.h:220
    while (!(SPSR & _BV(SPIF))) ; // wait
    1abe:	0d b4       	in	r0, 0x2d	; 45
    1ac0:	07 fe       	sbrs	r0, 7
    1ac2:	fd cf       	rjmp	.-6      	; 0x1abe <SPIClass::transfer(unsigned char)+0x4>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/SPI/src/SPI.h:221
    return SPDR;
    1ac4:	8e b5       	in	r24, 0x2e	; 46
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/SPI/src/SPI.h:222
  }
    1ac6:	08 95       	ret

00001ac8 <SPIClass::beginTransaction(SPISettings)>:
beginTransaction():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/SPI/src/SPI.h:206
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
    1ac8:	8c bd       	out	0x2c, r24	; 44
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/SPI/src/SPI.h:207
    SPSR = settings.spsr;
    1aca:	9d bd       	out	0x2d, r25	; 45
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/SPI/src/SPI.h:208
  }
    1acc:	08 95       	ret

00001ace <Adafruit_GFX::invertDisplay(bool)>:
invertDisplay():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1543
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(bool i) {
  // Do nothing, must be subclassed if supported by hardware
  (void)i; // disable -Wunused-parameter warning
}
    1ace:	08 95       	ret

00001ad0 <Adafruit_GFX::setRotation(unsigned char)>:
setRotation():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1316
/*!
    @brief      Set rotation setting for display
    @param  x   0 thru 3 corresponding to 4 cardinal rotations
*/
/**************************************************************************/
void Adafruit_GFX::setRotation(uint8_t x) {
    1ad0:	fc 01       	movw	r30, r24
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1317
  rotation = (x & 3);
    1ad2:	63 70       	andi	r22, 0x03	; 3
    1ad4:	66 8b       	std	Z+22, r22	; 0x16
    1ad6:	84 81       	ldd	r24, Z+4	; 0x04
    1ad8:	95 81       	ldd	r25, Z+5	; 0x05
    1ada:	26 81       	ldd	r18, Z+6	; 0x06
    1adc:	37 81       	ldd	r19, Z+7	; 0x07
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1318
  switch (rotation) {
    1ade:	61 30       	cpi	r22, 0x01	; 1
    1ae0:	39 f0       	breq	.+14     	; 0x1af0 <Adafruit_GFX::setRotation(unsigned char)+0x20>
    1ae2:	63 30       	cpi	r22, 0x03	; 3
    1ae4:	29 f0       	breq	.+10     	; 0x1af0 <Adafruit_GFX::setRotation(unsigned char)+0x20>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1321
  case 0:
  case 2:
    _width = WIDTH;
    1ae6:	91 87       	std	Z+9, r25	; 0x09
    1ae8:	80 87       	std	Z+8, r24	; 0x08
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1322
    _height = HEIGHT;
    1aea:	33 87       	std	Z+11, r19	; 0x0b
    1aec:	22 87       	std	Z+10, r18	; 0x0a
    1aee:	08 95       	ret
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1326
    break;
  case 1:
  case 3:
    _width = HEIGHT;
    1af0:	31 87       	std	Z+9, r19	; 0x09
    1af2:	20 87       	std	Z+8, r18	; 0x08
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1327
    _height = WIDTH;
    1af4:	93 87       	std	Z+11, r25	; 0x0b
    1af6:	82 87       	std	Z+10, r24	; 0x0a
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1330
    break;
  }
}
    1af8:	08 95       	ret

00001afa <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)>:
drawChar():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1136
    @param    size_y  Font magnification level in Y-axis, 1 is 'original' size
*/
/**************************************************************************/
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
                            uint16_t color, uint16_t bg, uint8_t size_x,
                            uint8_t size_y) {
    1afa:	2f 92       	push	r2
    1afc:	3f 92       	push	r3
    1afe:	4f 92       	push	r4
    1b00:	5f 92       	push	r5
    1b02:	6f 92       	push	r6
    1b04:	7f 92       	push	r7
    1b06:	8f 92       	push	r8
    1b08:	9f 92       	push	r9
    1b0a:	af 92       	push	r10
    1b0c:	bf 92       	push	r11
    1b0e:	cf 92       	push	r12
    1b10:	df 92       	push	r13
    1b12:	ef 92       	push	r14
    1b14:	ff 92       	push	r15
    1b16:	0f 93       	push	r16
    1b18:	1f 93       	push	r17
    1b1a:	cf 93       	push	r28
    1b1c:	df 93       	push	r29
    1b1e:	cd b7       	in	r28, 0x3d	; 61
    1b20:	de b7       	in	r29, 0x3e	; 62
    1b22:	6a 97       	sbiw	r28, 0x1a	; 26
    1b24:	0f b6       	in	r0, 0x3f	; 63
    1b26:	f8 94       	cli
    1b28:	de bf       	out	0x3e, r29	; 62
    1b2a:	0f be       	out	0x3f, r0	; 63
    1b2c:	cd bf       	out	0x3d, r28	; 61
    1b2e:	9a 8f       	std	Y+26, r25	; 0x1a
    1b30:	89 8f       	std	Y+25, r24	; 0x19
    1b32:	7a 83       	std	Y+2, r23	; 0x02
    1b34:	69 83       	std	Y+1, r22	; 0x01
    1b36:	4a 01       	movw	r8, r20
    1b38:	d2 2e       	mov	r13, r18
    1b3a:	18 87       	std	Y+8, r17	; 0x08
    1b3c:	0f 83       	std	Y+7, r16	; 0x07
    1b3e:	37 01       	movw	r6, r14
    1b40:	bc 2c       	mov	r11, r12
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1138

  if (!gfxFont) { // 'Classic' built-in font
    1b42:	dc 01       	movw	r26, r24
    1b44:	59 96       	adiw	r26, 0x19	; 25
    1b46:	2d 91       	ld	r18, X+
    1b48:	3c 91       	ld	r19, X
    1b4a:	5a 97       	sbiw	r26, 0x1a	; 26
    1b4c:	21 15       	cp	r18, r1
    1b4e:	31 05       	cpc	r19, r1
    1b50:	09 f0       	breq	.+2      	; 0x1b54 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x5a>
    1b52:	15 c1       	rjmp	.+554    	; 0x1d7e <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x284>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1140

    if ((x >= _width) ||              // Clip right
    1b54:	18 96       	adiw	r26, 0x08	; 8
    1b56:	8d 91       	ld	r24, X+
    1b58:	9c 91       	ld	r25, X
    1b5a:	19 97       	sbiw	r26, 0x09	; 9
    1b5c:	68 17       	cp	r22, r24
    1b5e:	79 07       	cpc	r23, r25
    1b60:	0c f0       	brlt	.+2      	; 0x1b64 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x6a>
    1b62:	d7 c1       	rjmp	.+942    	; 0x1f12 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x418>
    1b64:	1a 96       	adiw	r26, 0x0a	; 10
    1b66:	8d 91       	ld	r24, X+
    1b68:	9c 91       	ld	r25, X
    1b6a:	48 17       	cp	r20, r24
    1b6c:	59 07       	cpc	r21, r25
    1b6e:	0c f0       	brlt	.+2      	; 0x1b72 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x78>
    1b70:	d0 c1       	rjmp	.+928    	; 0x1f12 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x418>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1142
        (y >= _height) ||             // Clip bottom
        ((x + 6 * size_x - 1) < 0) || // Clip left
    1b72:	4c 2c       	mov	r4, r12
    1b74:	51 2c       	mov	r5, r1
    1b76:	b6 e0       	ldi	r27, 0x06	; 6
    1b78:	cb 9e       	mul	r12, r27
    1b7a:	60 0d       	add	r22, r0
    1b7c:	71 1d       	adc	r23, r1
    1b7e:	11 24       	eor	r1, r1
    1b80:	7c 87       	std	Y+12, r23	; 0x0c
    1b82:	6b 87       	std	Y+11, r22	; 0x0b
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1141
                            uint8_t size_y) {

  if (!gfxFont) { // 'Classic' built-in font

    if ((x >= _width) ||              // Clip right
        (y >= _height) ||             // Clip bottom
    1b84:	16 16       	cp	r1, r22
    1b86:	17 06       	cpc	r1, r23
    1b88:	0c f0       	brlt	.+2      	; 0x1b8c <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x92>
    1b8a:	c3 c1       	rjmp	.+902    	; 0x1f12 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x418>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1143
        ((x + 6 * size_x - 1) < 0) || // Clip left
        ((y + 8 * size_y - 1) < 0))   // Clip top
    1b8c:	ea 2d       	mov	r30, r10
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	fa 87       	std	Y+10, r31	; 0x0a
    1b92:	e9 87       	std	Y+9, r30	; 0x09
    1b94:	93 e0       	ldi	r25, 0x03	; 3
    1b96:	ee 0f       	add	r30, r30
    1b98:	ff 1f       	adc	r31, r31
    1b9a:	9a 95       	dec	r25
    1b9c:	e1 f7       	brne	.-8      	; 0x1b96 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x9c>
    1b9e:	f8 8b       	std	Y+16, r31	; 0x10
    1ba0:	ef 87       	std	Y+15, r30	; 0x0f
    1ba2:	cf 01       	movw	r24, r30
    1ba4:	84 0f       	add	r24, r20
    1ba6:	95 1f       	adc	r25, r21
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1142

  if (!gfxFont) { // 'Classic' built-in font

    if ((x >= _width) ||              // Clip right
        (y >= _height) ||             // Clip bottom
        ((x + 6 * size_x - 1) < 0) || // Clip left
    1ba8:	18 16       	cp	r1, r24
    1baa:	19 06       	cpc	r1, r25
    1bac:	0c f0       	brlt	.+2      	; 0x1bb0 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0xb6>
    1bae:	b1 c1       	rjmp	.+866    	; 0x1f12 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x418>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1146
        ((y + 8 * size_y - 1) < 0))   // Clip top
      return;

    if (!_cp437 && (c >= 176))
    1bb0:	a9 8d       	ldd	r26, Y+25	; 0x19
    1bb2:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1bb4:	58 96       	adiw	r26, 0x18	; 24
    1bb6:	8c 91       	ld	r24, X
    1bb8:	81 11       	cpse	r24, r1
    1bba:	04 c0       	rjmp	.+8      	; 0x1bc4 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0xca>
    1bbc:	bf ea       	ldi	r27, 0xAF	; 175
    1bbe:	bd 15       	cp	r27, r13
    1bc0:	08 f4       	brcc	.+2      	; 0x1bc4 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0xca>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1147
      c++; // Handle 'classic' charset behavior
    1bc2:	d3 94       	inc	r13
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1149

    startWrite();
    1bc4:	a9 8d       	ldd	r26, Y+25	; 0x19
    1bc6:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1bc8:	ed 91       	ld	r30, X+
    1bca:	fc 91       	ld	r31, X
    1bcc:	11 97       	sbiw	r26, 0x01	; 1
    1bce:	02 84       	ldd	r0, Z+10	; 0x0a
    1bd0:	f3 85       	ldd	r31, Z+11	; 0x0b
    1bd2:	e0 2d       	mov	r30, r0
    1bd4:	cd 01       	movw	r24, r26
    1bd6:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1151
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
    1bd8:	b5 e0       	ldi	r27, 0x05	; 5
    1bda:	db 9e       	mul	r13, r27
    1bdc:	c0 01       	movw	r24, r0
    1bde:	11 24       	eor	r1, r1
    1be0:	e9 81       	ldd	r30, Y+1	; 0x01
    1be2:	fa 81       	ldd	r31, Y+2	; 0x02
    1be4:	fc 83       	std	Y+4, r31	; 0x04
    1be6:	eb 83       	std	Y+3, r30	; 0x03
    1be8:	31 2c       	mov	r3, r1
    1bea:	21 2c       	mov	r2, r1
    1bec:	9c 01       	movw	r18, r24
    1bee:	2e 5d       	subi	r18, 0xDE	; 222
    1bf0:	37 4f       	sbci	r19, 0xF7	; 247
    1bf2:	38 8f       	std	Y+24, r19	; 0x18
    1bf4:	2f 8b       	std	Y+23, r18	; 0x17
    1bf6:	4a 2d       	mov	r20, r10
    1bf8:	50 e0       	ldi	r21, 0x00	; 0
    1bfa:	5e 8b       	std	Y+22, r21	; 0x16
    1bfc:	4d 8b       	std	Y+21, r20	; 0x15
    1bfe:	ef 89       	ldd	r30, Y+23	; 0x17
    1c00:	f8 8d       	ldd	r31, Y+24	; 0x18
    1c02:	e2 0d       	add	r30, r2
    1c04:	f3 1d       	adc	r31, r3
    1c06:	44 91       	lpm	r20, Z
    1c08:	9e 82       	std	Y+6, r9	; 0x06
    1c0a:	8d 82       	std	Y+5, r8	; 0x05
    1c0c:	d1 2c       	mov	r13, r1
    1c0e:	c1 2c       	mov	r12, r1
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1161
          else
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y,
                          color);
        } else if (bg != color) {
          if (size_x == 1 && size_y == 1)
            writePixel(x + i, y + j, bg);
    1c10:	69 81       	ldd	r22, Y+1	; 0x01
    1c12:	7a 81       	ldd	r23, Y+2	; 0x02
    1c14:	62 0d       	add	r22, r2
    1c16:	73 1d       	adc	r23, r3
    1c18:	7a 8b       	std	Y+18, r23	; 0x12
    1c1a:	69 8b       	std	Y+17, r22	; 0x11
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1153

    startWrite();
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
        if (line & 1) {
    1c1c:	84 2f       	mov	r24, r20
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	9c 8b       	std	Y+20, r25	; 0x14
    1c22:	8b 8b       	std	Y+19, r24	; 0x13
    1c24:	e9 8d       	ldd	r30, Y+25	; 0x19
    1c26:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1c28:	a0 81       	ld	r26, Z
    1c2a:	b1 81       	ldd	r27, Z+1	; 0x01
    1c2c:	40 ff       	sbrs	r20, 0
    1c2e:	82 c0       	rjmp	.+260    	; 0x1d34 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x23a>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1154
          if (size_x == 1 && size_y == 1)
    1c30:	f1 e0       	ldi	r31, 0x01	; 1
    1c32:	bf 12       	cpse	r11, r31
    1c34:	6f c0       	rjmp	.+222    	; 0x1d14 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x21a>
    1c36:	af 12       	cpse	r10, r31
    1c38:	6d c0       	rjmp	.+218    	; 0x1d14 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x21a>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1155
            writePixel(x + i, y + j, color);
    1c3a:	1c 96       	adiw	r26, 0x0c	; 12
    1c3c:	ed 91       	ld	r30, X+
    1c3e:	fc 91       	ld	r31, X
    1c40:	2f 81       	ldd	r18, Y+7	; 0x07
    1c42:	38 85       	ldd	r19, Y+8	; 0x08
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1161
          else
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y,
                          color);
        } else if (bg != color) {
          if (size_x == 1 && size_y == 1)
            writePixel(x + i, y + j, bg);
    1c44:	a4 01       	movw	r20, r8
    1c46:	4c 0d       	add	r20, r12
    1c48:	5d 1d       	adc	r21, r13
    1c4a:	69 89       	ldd	r22, Y+17	; 0x11
    1c4c:	7a 89       	ldd	r23, Y+18	; 0x12
    1c4e:	89 8d       	ldd	r24, Y+25	; 0x19
    1c50:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1c52:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1152
      c++; // Handle 'classic' charset behavior

    startWrite();
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
    1c54:	eb 89       	ldd	r30, Y+19	; 0x13
    1c56:	fc 89       	ldd	r31, Y+20	; 0x14
    1c58:	f5 95       	asr	r31
    1c5a:	e7 95       	ror	r30
    1c5c:	4e 2f       	mov	r20, r30
    1c5e:	5f ef       	ldi	r21, 0xFF	; 255
    1c60:	c5 1a       	sub	r12, r21
    1c62:	d5 0a       	sbc	r13, r21
    1c64:	6d 81       	ldd	r22, Y+5	; 0x05
    1c66:	7e 81       	ldd	r23, Y+6	; 0x06
    1c68:	8d 89       	ldd	r24, Y+21	; 0x15
    1c6a:	9e 89       	ldd	r25, Y+22	; 0x16
    1c6c:	68 0f       	add	r22, r24
    1c6e:	79 1f       	adc	r23, r25
    1c70:	7e 83       	std	Y+6, r23	; 0x06
    1c72:	6d 83       	std	Y+5, r22	; 0x05
    1c74:	98 e0       	ldi	r25, 0x08	; 8
    1c76:	c9 16       	cp	r12, r25
    1c78:	d1 04       	cpc	r13, r1
    1c7a:	81 f6       	brne	.-96     	; 0x1c1c <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x122>
    1c7c:	af ef       	ldi	r26, 0xFF	; 255
    1c7e:	2a 1a       	sub	r2, r26
    1c80:	3a 0a       	sbc	r3, r26
    1c82:	eb 81       	ldd	r30, Y+3	; 0x03
    1c84:	fc 81       	ldd	r31, Y+4	; 0x04
    1c86:	e4 0d       	add	r30, r4
    1c88:	f5 1d       	adc	r31, r5
    1c8a:	fc 83       	std	Y+4, r31	; 0x04
    1c8c:	eb 83       	std	Y+3, r30	; 0x03
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1150

    if (!_cp437 && (c >= 176))
      c++; // Handle 'classic' charset behavior

    startWrite();
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
    1c8e:	f5 e0       	ldi	r31, 0x05	; 5
    1c90:	2f 16       	cp	r2, r31
    1c92:	31 04       	cpc	r3, r1
    1c94:	09 f0       	breq	.+2      	; 0x1c98 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x19e>
    1c96:	b3 cf       	rjmp	.-154    	; 0x1bfe <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x104>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1167
          else
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
        }
      }
    }
    if (bg != color) { // If opaque, draw vertical line for last column
    1c98:	2f 81       	ldd	r18, Y+7	; 0x07
    1c9a:	38 85       	ldd	r19, Y+8	; 0x08
    1c9c:	26 15       	cp	r18, r6
    1c9e:	37 05       	cpc	r19, r7
    1ca0:	b9 f0       	breq	.+46     	; 0x1cd0 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x1d6>
    1ca2:	a9 8d       	ldd	r26, Y+25	; 0x19
    1ca4:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1ca6:	ed 91       	ld	r30, X+
    1ca8:	fc 91       	ld	r31, X
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1168
      if (size_x == 1 && size_y == 1)
    1caa:	b1 e0       	ldi	r27, 0x01	; 1
    1cac:	bb 12       	cpse	r11, r27
    1cae:	57 c0       	rjmp	.+174    	; 0x1d5e <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x264>
    1cb0:	ab 12       	cpse	r10, r27
    1cb2:	55 c0       	rjmp	.+170    	; 0x1d5e <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x264>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1169
        writeFastVLine(x + 5, y, 8, bg);
    1cb4:	69 81       	ldd	r22, Y+1	; 0x01
    1cb6:	7a 81       	ldd	r23, Y+2	; 0x02
    1cb8:	6b 5f       	subi	r22, 0xFB	; 251
    1cba:	7f 4f       	sbci	r23, 0xFF	; 255
    1cbc:	00 88       	ldd	r0, Z+16	; 0x10
    1cbe:	f1 89       	ldd	r31, Z+17	; 0x11
    1cc0:	e0 2d       	mov	r30, r0
    1cc2:	83 01       	movw	r16, r6
    1cc4:	28 e0       	ldi	r18, 0x08	; 8
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	a4 01       	movw	r20, r8
    1cca:	89 8d       	ldd	r24, Y+25	; 0x19
    1ccc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1cce:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1232
          }
        }
        bits <<= 1;
      }
    }
    endWrite();
    1cd0:	a9 8d       	ldd	r26, Y+25	; 0x19
    1cd2:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1cd4:	ed 91       	ld	r30, X+
    1cd6:	fc 91       	ld	r31, X
    1cd8:	11 97       	sbiw	r26, 0x01	; 1
    1cda:	06 88       	ldd	r0, Z+22	; 0x16
    1cdc:	f7 89       	ldd	r31, Z+23	; 0x17
    1cde:	e0 2d       	mov	r30, r0
    1ce0:	cd 01       	movw	r24, r26
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1235

  } // End classic vs custom font
}
    1ce2:	6a 96       	adiw	r28, 0x1a	; 26
    1ce4:	0f b6       	in	r0, 0x3f	; 63
    1ce6:	f8 94       	cli
    1ce8:	de bf       	out	0x3e, r29	; 62
    1cea:	0f be       	out	0x3f, r0	; 63
    1cec:	cd bf       	out	0x3d, r28	; 61
    1cee:	df 91       	pop	r29
    1cf0:	cf 91       	pop	r28
    1cf2:	1f 91       	pop	r17
    1cf4:	0f 91       	pop	r16
    1cf6:	ff 90       	pop	r15
    1cf8:	ef 90       	pop	r14
    1cfa:	df 90       	pop	r13
    1cfc:	cf 90       	pop	r12
    1cfe:	bf 90       	pop	r11
    1d00:	af 90       	pop	r10
    1d02:	9f 90       	pop	r9
    1d04:	8f 90       	pop	r8
    1d06:	7f 90       	pop	r7
    1d08:	6f 90       	pop	r6
    1d0a:	5f 90       	pop	r5
    1d0c:	4f 90       	pop	r4
    1d0e:	3f 90       	pop	r3
    1d10:	2f 90       	pop	r2
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1232
          }
        }
        bits <<= 1;
      }
    }
    endWrite();
    1d12:	09 94       	ijmp
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1157
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
        if (line & 1) {
          if (size_x == 1 && size_y == 1)
            writePixel(x + i, y + j, color);
          else
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y,
    1d14:	1e 96       	adiw	r26, 0x0e	; 14
    1d16:	ed 91       	ld	r30, X+
    1d18:	fc 91       	ld	r31, X
    1d1a:	ef 80       	ldd	r14, Y+7	; 0x07
    1d1c:	f8 84       	ldd	r15, Y+8	; 0x08
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1163
                          color);
        } else if (bg != color) {
          if (size_x == 1 && size_y == 1)
            writePixel(x + i, y + j, bg);
          else
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
    1d1e:	09 85       	ldd	r16, Y+9	; 0x09
    1d20:	1a 85       	ldd	r17, Y+10	; 0x0a
    1d22:	92 01       	movw	r18, r4
    1d24:	4d 81       	ldd	r20, Y+5	; 0x05
    1d26:	5e 81       	ldd	r21, Y+6	; 0x06
    1d28:	6b 81       	ldd	r22, Y+3	; 0x03
    1d2a:	7c 81       	ldd	r23, Y+4	; 0x04
    1d2c:	89 8d       	ldd	r24, Y+25	; 0x19
    1d2e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1d30:	09 95       	icall
    1d32:	90 cf       	rjmp	.-224    	; 0x1c54 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x15a>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1159
          if (size_x == 1 && size_y == 1)
            writePixel(x + i, y + j, color);
          else
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y,
                          color);
        } else if (bg != color) {
    1d34:	2f 81       	ldd	r18, Y+7	; 0x07
    1d36:	38 85       	ldd	r19, Y+8	; 0x08
    1d38:	26 15       	cp	r18, r6
    1d3a:	37 05       	cpc	r19, r7
    1d3c:	09 f4       	brne	.+2      	; 0x1d40 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x246>
    1d3e:	8a cf       	rjmp	.-236    	; 0x1c54 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x15a>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1160
          if (size_x == 1 && size_y == 1)
    1d40:	31 e0       	ldi	r19, 0x01	; 1
    1d42:	b3 12       	cpse	r11, r19
    1d44:	07 c0       	rjmp	.+14     	; 0x1d54 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x25a>
    1d46:	a3 12       	cpse	r10, r19
    1d48:	05 c0       	rjmp	.+10     	; 0x1d54 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x25a>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1161
            writePixel(x + i, y + j, bg);
    1d4a:	1c 96       	adiw	r26, 0x0c	; 12
    1d4c:	ed 91       	ld	r30, X+
    1d4e:	fc 91       	ld	r31, X
    1d50:	93 01       	movw	r18, r6
    1d52:	78 cf       	rjmp	.-272    	; 0x1c44 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x14a>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1163
          else
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
    1d54:	1e 96       	adiw	r26, 0x0e	; 14
    1d56:	ed 91       	ld	r30, X+
    1d58:	fc 91       	ld	r31, X
    1d5a:	73 01       	movw	r14, r6
    1d5c:	e0 cf       	rjmp	.-64     	; 0x1d1e <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x224>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1171
    }
    if (bg != color) { // If opaque, draw vertical line for last column
      if (size_x == 1 && size_y == 1)
        writeFastVLine(x + 5, y, 8, bg);
      else
        writeFillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
    1d5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d60:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d62:	64 19       	sub	r22, r4
    1d64:	75 09       	sbc	r23, r5
    1d66:	06 84       	ldd	r0, Z+14	; 0x0e
    1d68:	f7 85       	ldd	r31, Z+15	; 0x0f
    1d6a:	e0 2d       	mov	r30, r0
    1d6c:	73 01       	movw	r14, r6
    1d6e:	0f 85       	ldd	r16, Y+15	; 0x0f
    1d70:	18 89       	ldd	r17, Y+16	; 0x10
    1d72:	92 01       	movw	r18, r4
    1d74:	a4 01       	movw	r20, r8
    1d76:	89 8d       	ldd	r24, Y+25	; 0x19
    1d78:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1d7a:	09 95       	icall
    1d7c:	a9 cf       	rjmp	.-174    	; 0x1cd0 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x1d6>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1181

    // Character is assumed previously filtered by write() to eliminate
    // newlines, returns, non-printable characters, etc.  Calling
    // drawChar() directly with 'bad' characters of font may cause mayhem!

    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
    1d7e:	f9 01       	movw	r30, r18
    1d80:	34 96       	adiw	r30, 0x04	; 4
    1d82:	94 91       	lpm	r25, Z
pgm_read_glyph_ptr():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:67
#define pgm_read_pointer(addr) ((void *)pgm_read_word(addr))
#endif

inline GFXglyph *pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c) {
#ifdef __AVR__
  return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    1d84:	32 97       	sbiw	r30, 0x02	; 2
    1d86:	45 91       	lpm	r20, Z+
    1d88:	54 91       	lpm	r21, Z
drawChar():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1181

    // Character is assumed previously filtered by write() to eliminate
    // newlines, returns, non-printable characters, etc.  Calling
    // drawChar() directly with 'bad' characters of font may cause mayhem!

    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
    1d8a:	d9 1a       	sub	r13, r25
pgm_read_glyph_ptr():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:67
#define pgm_read_pointer(addr) ((void *)pgm_read_word(addr))
#endif

inline GFXglyph *pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c) {
#ifdef __AVR__
  return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    1d8c:	b7 e0       	ldi	r27, 0x07	; 7
    1d8e:	db 9e       	mul	r13, r27
    1d90:	40 0d       	add	r20, r0
    1d92:	51 1d       	adc	r21, r1
    1d94:	11 24       	eor	r1, r1
_Z19pgm_read_bitmap_ptrPK7GFXfont():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:79
#endif //__AVR__
}

inline uint8_t *pgm_read_bitmap_ptr(const GFXfont *gfxFont) {
#ifdef __AVR__
  return (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);
    1d96:	f9 01       	movw	r30, r18
    1d98:	25 91       	lpm	r18, Z+
    1d9a:	34 91       	lpm	r19, Z
    1d9c:	3c 8b       	std	Y+20, r19	; 0x14
    1d9e:	2b 8b       	std	Y+19, r18	; 0x13
drawChar():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1185

    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
    GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c);
    uint8_t *bitmap = pgm_read_bitmap_ptr(gfxFont);

    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
    1da0:	fa 01       	movw	r30, r20
    1da2:	25 90       	lpm	r2, Z+
    1da4:	34 90       	lpm	r3, Z
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1186
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
    1da6:	fa 01       	movw	r30, r20
    1da8:	32 96       	adiw	r30, 0x02	; 2
    1daa:	74 90       	lpm	r7, Z
    1dac:	31 96       	adiw	r30, 0x01	; 1
    1dae:	34 91       	lpm	r19, Z
    1db0:	39 8b       	std	Y+17, r19	; 0x11
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1187
    int8_t xo = pgm_read_byte(&glyph->xOffset),
    1db2:	32 96       	adiw	r30, 0x02	; 2
    1db4:	64 90       	lpm	r6, Z
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1188
           yo = pgm_read_byte(&glyph->yOffset);
    1db6:	31 96       	adiw	r30, 0x01	; 1
    1db8:	44 90       	lpm	r4, Z
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1192
    uint8_t xx, yy, bits = 0, bit = 0;
    int16_t xo16 = 0, yo16 = 0;

    if (size_x > 1 || size_y > 1) {
    1dba:	41 e0       	ldi	r20, 0x01	; 1
    1dbc:	4c 15       	cp	r20, r12
    1dbe:	18 f0       	brcs	.+6      	; 0x1dc6 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x2cc>
    1dc0:	4a 15       	cp	r20, r10
    1dc2:	08 f0       	brcs	.+2      	; 0x1dc6 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x2cc>
    1dc4:	7f c0       	rjmp	.+254    	; 0x1ec4 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3ca>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1193
      xo16 = xo;
    1dc6:	66 2d       	mov	r22, r6
    1dc8:	06 2c       	mov	r0, r6
    1dca:	00 0c       	add	r0, r0
    1dcc:	77 0b       	sbc	r23, r23
    1dce:	7c 83       	std	Y+4, r23	; 0x04
    1dd0:	6b 83       	std	Y+3, r22	; 0x03
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1194
      yo16 = yo;
    1dd2:	84 2d       	mov	r24, r4
    1dd4:	04 2c       	mov	r0, r4
    1dd6:	00 0c       	add	r0, r0
    1dd8:	99 0b       	sbc	r25, r25
    1dda:	9e 83       	std	Y+6, r25	; 0x06
    1ddc:	8d 83       	std	Y+5, r24	; 0x05
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1215
    // only creates a new set of problems.  Have an idea to work around
    // this (a canvas object type for MCUs that can afford the RAM and
    // displays supporting setAddrWindow() and pushColors()), but haven't
    // implemented this yet.

    startWrite();
    1dde:	a9 8d       	ldd	r26, Y+25	; 0x19
    1de0:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1de2:	ed 91       	ld	r30, X+
    1de4:	fc 91       	ld	r31, X
    1de6:	11 97       	sbiw	r26, 0x01	; 1
    1de8:	02 84       	ldd	r0, Z+10	; 0x0a
    1dea:	f3 85       	ldd	r31, Z+11	; 0x0b
    1dec:	e0 2d       	mov	r30, r0
    1dee:	cd 01       	movw	r24, r26
    1df0:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1189

    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
    int8_t xo = pgm_read_byte(&glyph->xOffset),
           yo = pgm_read_byte(&glyph->yOffset);
    uint8_t xx, yy, bits = 0, bit = 0;
    1df2:	51 2c       	mov	r5, r1
    1df4:	d1 2c       	mov	r13, r1
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1216
    // this (a canvas object type for MCUs that can afford the RAM and
    // displays supporting setAddrWindow() and pushColors()), but haven't
    // implemented this yet.

    startWrite();
    for (yy = 0; yy < h; yy++) {
    1df6:	c1 2c       	mov	r12, r1
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1225
        }
        if (bits & 0x80) {
          if (size_x == 1 && size_y == 1) {
            writePixel(x + xo + xx, y + yo + yy, color);
          } else {
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
    1df8:	ea 2d       	mov	r30, r10
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	fa 87       	std	Y+10, r31	; 0x0a
    1dfe:	e9 87       	std	Y+9, r30	; 0x09
    1e00:	2b 2d       	mov	r18, r11
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	3c 87       	std	Y+12, r19	; 0x0c
    1e06:	2b 87       	std	Y+11, r18	; 0x0b
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1223
        if (!(bit++ & 7)) {
          bits = pgm_read_byte(&bitmap[bo++]);
        }
        if (bits & 0x80) {
          if (size_x == 1 && size_y == 1) {
            writePixel(x + xo + xx, y + yo + yy, color);
    1e08:	a4 01       	movw	r20, r8
    1e0a:	44 0d       	add	r20, r4
    1e0c:	51 1d       	adc	r21, r1
    1e0e:	47 fc       	sbrc	r4, 7
    1e10:	5a 95       	dec	r21
    1e12:	58 8f       	std	Y+24, r21	; 0x18
    1e14:	4f 8b       	std	Y+23, r20	; 0x17
    1e16:	69 81       	ldd	r22, Y+1	; 0x01
    1e18:	7a 81       	ldd	r23, Y+2	; 0x02
    1e1a:	66 0d       	add	r22, r6
    1e1c:	71 1d       	adc	r23, r1
    1e1e:	67 fc       	sbrc	r6, 7
    1e20:	7a 95       	dec	r23
    1e22:	7e 87       	std	Y+14, r23	; 0x0e
    1e24:	6d 87       	std	Y+13, r22	; 0x0d
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1216
    // this (a canvas object type for MCUs that can afford the RAM and
    // displays supporting setAddrWindow() and pushColors()), but haven't
    // implemented this yet.

    startWrite();
    for (yy = 0; yy < h; yy++) {
    1e26:	79 89       	ldd	r23, Y+17	; 0x11
    1e28:	c7 16       	cp	r12, r23
    1e2a:	08 f0       	brcs	.+2      	; 0x1e2e <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x334>
    1e2c:	51 cf       	rjmp	.-350    	; 0x1cd0 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x1d6>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1225
        }
        if (bits & 0x80) {
          if (size_x == 1 && size_y == 1) {
            writePixel(x + xo + xx, y + yo + yy, color);
          } else {
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
    1e2e:	2c 2d       	mov	r18, r12
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	4d 81       	ldd	r20, Y+5	; 0x05
    1e34:	5e 81       	ldd	r21, Y+6	; 0x06
    1e36:	42 0f       	add	r20, r18
    1e38:	53 1f       	adc	r21, r19
    1e3a:	a9 85       	ldd	r26, Y+9	; 0x09
    1e3c:	ba 85       	ldd	r27, Y+10	; 0x0a
    1e3e:	4a 9f       	mul	r20, r26
    1e40:	c0 01       	movw	r24, r0
    1e42:	4b 9f       	mul	r20, r27
    1e44:	90 0d       	add	r25, r0
    1e46:	5a 9f       	mul	r21, r26
    1e48:	90 0d       	add	r25, r0
    1e4a:	11 24       	eor	r1, r1
    1e4c:	fc 01       	movw	r30, r24
    1e4e:	e8 0d       	add	r30, r8
    1e50:	f9 1d       	adc	r31, r9
    1e52:	f8 8b       	std	Y+16, r31	; 0x10
    1e54:	ef 87       	std	Y+15, r30	; 0x0f
    1e56:	85 2d       	mov	r24, r5
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1217
    // displays supporting setAddrWindow() and pushColors()), but haven't
    // implemented this yet.

    startWrite();
    for (yy = 0; yy < h; yy++) {
      for (xx = 0; xx < w; xx++) {
    1e58:	61 2c       	mov	r6, r1
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1223
        if (!(bit++ & 7)) {
          bits = pgm_read_byte(&bitmap[bo++]);
        }
        if (bits & 0x80) {
          if (size_x == 1 && size_y == 1) {
            writePixel(x + xo + xx, y + yo + yy, color);
    1e5a:	4f 89       	ldd	r20, Y+23	; 0x17
    1e5c:	58 8d       	ldd	r21, Y+24	; 0x18
    1e5e:	42 0f       	add	r20, r18
    1e60:	53 1f       	adc	r21, r19
    1e62:	5e 8b       	std	Y+22, r21	; 0x16
    1e64:	4d 8b       	std	Y+21, r20	; 0x15
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1217
    // displays supporting setAddrWindow() and pushColors()), but haven't
    // implemented this yet.

    startWrite();
    for (yy = 0; yy < h; yy++) {
      for (xx = 0; xx < w; xx++) {
    1e66:	67 14       	cp	r6, r7
    1e68:	08 f0       	brcs	.+2      	; 0x1e6c <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x372>
    1e6a:	50 c0       	rjmp	.+160    	; 0x1f0c <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x412>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1218
        if (!(bit++ & 7)) {
    1e6c:	44 24       	eor	r4, r4
    1e6e:	43 94       	inc	r4
    1e70:	48 0e       	add	r4, r24
    1e72:	87 70       	andi	r24, 0x07	; 7
    1e74:	41 f4       	brne	.+16     	; 0x1e86 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x38c>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1219
          bits = pgm_read_byte(&bitmap[bo++]);
    1e76:	c1 01       	movw	r24, r2
    1e78:	01 96       	adiw	r24, 0x01	; 1
    1e7a:	eb 89       	ldd	r30, Y+19	; 0x13
    1e7c:	fc 89       	ldd	r31, Y+20	; 0x14
    1e7e:	e2 0d       	add	r30, r2
    1e80:	f3 1d       	adc	r31, r3
    1e82:	d4 90       	lpm	r13, Z
    1e84:	1c 01       	movw	r2, r24
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1221
        }
        if (bits & 0x80) {
    1e86:	d7 fe       	sbrs	r13, 7
    1e88:	19 c0       	rjmp	.+50     	; 0x1ebc <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3c2>
    1e8a:	a9 8d       	ldd	r26, Y+25	; 0x19
    1e8c:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1e8e:	ed 91       	ld	r30, X+
    1e90:	fc 91       	ld	r31, X
    1e92:	66 2d       	mov	r22, r6
    1e94:	70 e0       	ldi	r23, 0x00	; 0
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1222
          if (size_x == 1 && size_y == 1) {
    1e96:	b1 e0       	ldi	r27, 0x01	; 1
    1e98:	bb 12       	cpse	r11, r27
    1e9a:	19 c0       	rjmp	.+50     	; 0x1ece <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3d4>
    1e9c:	ab 12       	cpse	r10, r27
    1e9e:	17 c0       	rjmp	.+46     	; 0x1ece <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3d4>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1223
            writePixel(x + xo + xx, y + yo + yy, color);
    1ea0:	2d 85       	ldd	r18, Y+13	; 0x0d
    1ea2:	3e 85       	ldd	r19, Y+14	; 0x0e
    1ea4:	62 0f       	add	r22, r18
    1ea6:	73 1f       	adc	r23, r19
    1ea8:	04 84       	ldd	r0, Z+12	; 0x0c
    1eaa:	f5 85       	ldd	r31, Z+13	; 0x0d
    1eac:	e0 2d       	mov	r30, r0
    1eae:	2f 81       	ldd	r18, Y+7	; 0x07
    1eb0:	38 85       	ldd	r19, Y+8	; 0x08
    1eb2:	4d 89       	ldd	r20, Y+21	; 0x15
    1eb4:	5e 89       	ldd	r21, Y+22	; 0x16
    1eb6:	89 8d       	ldd	r24, Y+25	; 0x19
    1eb8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1eba:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1229
          } else {
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
                          size_x, size_y, color);
          }
        }
        bits <<= 1;
    1ebc:	dd 0c       	add	r13, r13
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1217
    // displays supporting setAddrWindow() and pushColors()), but haven't
    // implemented this yet.

    startWrite();
    for (yy = 0; yy < h; yy++) {
      for (xx = 0; xx < w; xx++) {
    1ebe:	63 94       	inc	r6
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1218
        if (!(bit++ & 7)) {
    1ec0:	84 2d       	mov	r24, r4
    1ec2:	d1 cf       	rjmp	.-94     	; 0x1e66 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x36c>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1190
    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
    int8_t xo = pgm_read_byte(&glyph->xOffset),
           yo = pgm_read_byte(&glyph->yOffset);
    uint8_t xx, yy, bits = 0, bit = 0;
    int16_t xo16 = 0, yo16 = 0;
    1ec4:	1e 82       	std	Y+6, r1	; 0x06
    1ec6:	1d 82       	std	Y+5, r1	; 0x05
    1ec8:	1c 82       	std	Y+4, r1	; 0x04
    1eca:	1b 82       	std	Y+3, r1	; 0x03
    1ecc:	88 cf       	rjmp	.-240    	; 0x1dde <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x2e4>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1225
        }
        if (bits & 0x80) {
          if (size_x == 1 && size_y == 1) {
            writePixel(x + xo + xx, y + yo + yy, color);
          } else {
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
    1ece:	4b 81       	ldd	r20, Y+3	; 0x03
    1ed0:	5c 81       	ldd	r21, Y+4	; 0x04
    1ed2:	64 0f       	add	r22, r20
    1ed4:	75 1f       	adc	r23, r21
    1ed6:	ab 85       	ldd	r26, Y+11	; 0x0b
    1ed8:	bc 85       	ldd	r27, Y+12	; 0x0c
    1eda:	6a 9f       	mul	r22, r26
    1edc:	c0 01       	movw	r24, r0
    1ede:	6b 9f       	mul	r22, r27
    1ee0:	90 0d       	add	r25, r0
    1ee2:	7a 9f       	mul	r23, r26
    1ee4:	90 0d       	add	r25, r0
    1ee6:	11 24       	eor	r1, r1
    1ee8:	69 81       	ldd	r22, Y+1	; 0x01
    1eea:	7a 81       	ldd	r23, Y+2	; 0x02
    1eec:	68 0f       	add	r22, r24
    1eee:	79 1f       	adc	r23, r25
    1ef0:	06 84       	ldd	r0, Z+14	; 0x0e
    1ef2:	f7 85       	ldd	r31, Z+15	; 0x0f
    1ef4:	e0 2d       	mov	r30, r0
    1ef6:	ef 80       	ldd	r14, Y+7	; 0x07
    1ef8:	f8 84       	ldd	r15, Y+8	; 0x08
    1efa:	09 85       	ldd	r16, Y+9	; 0x09
    1efc:	1a 85       	ldd	r17, Y+10	; 0x0a
    1efe:	9d 01       	movw	r18, r26
    1f00:	4f 85       	ldd	r20, Y+15	; 0x0f
    1f02:	58 89       	ldd	r21, Y+16	; 0x10
    1f04:	89 8d       	ldd	r24, Y+25	; 0x19
    1f06:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1f08:	09 95       	icall
    1f0a:	d8 cf       	rjmp	.-80     	; 0x1ebc <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3c2>
    1f0c:	57 0c       	add	r5, r7
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1216
    // this (a canvas object type for MCUs that can afford the RAM and
    // displays supporting setAddrWindow() and pushColors()), but haven't
    // implemented this yet.

    startWrite();
    for (yy = 0; yy < h; yy++) {
    1f0e:	c3 94       	inc	r12
    1f10:	8a cf       	rjmp	.-236    	; 0x1e26 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x32c>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1235
      }
    }
    endWrite();

  } // End classic vs custom font
}
    1f12:	6a 96       	adiw	r28, 0x1a	; 26
    1f14:	0f b6       	in	r0, 0x3f	; 63
    1f16:	f8 94       	cli
    1f18:	de bf       	out	0x3e, r29	; 62
    1f1a:	0f be       	out	0x3f, r0	; 63
    1f1c:	cd bf       	out	0x3d, r28	; 61
    1f1e:	df 91       	pop	r29
    1f20:	cf 91       	pop	r28
    1f22:	1f 91       	pop	r17
    1f24:	0f 91       	pop	r16
    1f26:	ff 90       	pop	r15
    1f28:	ef 90       	pop	r14
    1f2a:	df 90       	pop	r13
    1f2c:	cf 90       	pop	r12
    1f2e:	bf 90       	pop	r11
    1f30:	af 90       	pop	r10
    1f32:	9f 90       	pop	r9
    1f34:	8f 90       	pop	r8
    1f36:	7f 90       	pop	r7
    1f38:	6f 90       	pop	r6
    1f3a:	5f 90       	pop	r5
    1f3c:	4f 90       	pop	r4
    1f3e:	3f 90       	pop	r3
    1f40:	2f 90       	pop	r2
    1f42:	08 95       	ret

00001f44 <Adafruit_GFX::write(unsigned char)>:
write():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1242
/*!
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t Adafruit_GFX::write(uint8_t c) {
    1f44:	8f 92       	push	r8
    1f46:	9f 92       	push	r9
    1f48:	af 92       	push	r10
    1f4a:	cf 92       	push	r12
    1f4c:	ef 92       	push	r14
    1f4e:	ff 92       	push	r15
    1f50:	0f 93       	push	r16
    1f52:	1f 93       	push	r17
    1f54:	cf 93       	push	r28
    1f56:	df 93       	push	r29
    1f58:	ec 01       	movw	r28, r24
    1f5a:	26 2f       	mov	r18, r22
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1243
  if (!gfxFont) { // 'Classic' built-in font
    1f5c:	89 8d       	ldd	r24, Y+25	; 0x19
    1f5e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1f60:	00 97       	sbiw	r24, 0x00	; 0
    1f62:	09 f0       	breq	.+2      	; 0x1f66 <Adafruit_GFX::write(unsigned char)+0x22>
    1f64:	51 c0       	rjmp	.+162    	; 0x2008 <Adafruit_GFX::write(unsigned char)+0xc4>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1245

    if (c == '\n') {              // Newline?
    1f66:	6a 30       	cpi	r22, 0x0A	; 10
    1f68:	d1 f4       	brne	.+52     	; 0x1f9e <Adafruit_GFX::write(unsigned char)+0x5a>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1246
      cursor_x = 0;               // Reset x to zero,
    1f6a:	1d 86       	std	Y+13, r1	; 0x0d
    1f6c:	1c 86       	std	Y+12, r1	; 0x0c
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1247
      cursor_y += textsize_y * 8; // advance y one line
    1f6e:	8d 89       	ldd	r24, Y+21	; 0x15
    1f70:	48 e0       	ldi	r20, 0x08	; 8
    1f72:	84 9f       	mul	r24, r20
    1f74:	90 01       	movw	r18, r0
    1f76:	11 24       	eor	r1, r1
    1f78:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f7a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f7c:	82 0f       	add	r24, r18
    1f7e:	93 1f       	adc	r25, r19
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1262

  } else { // Custom font

    if (c == '\n') {
      cursor_x = 0;
      cursor_y +=
    1f80:	9f 87       	std	Y+15, r25	; 0x0f
    1f82:	8e 87       	std	Y+14, r24	; 0x0e
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1286
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
      }
    }
  }
  return 1;
}
    1f84:	81 e0       	ldi	r24, 0x01	; 1
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	df 91       	pop	r29
    1f8a:	cf 91       	pop	r28
    1f8c:	1f 91       	pop	r17
    1f8e:	0f 91       	pop	r16
    1f90:	ff 90       	pop	r15
    1f92:	ef 90       	pop	r14
    1f94:	cf 90       	pop	r12
    1f96:	af 90       	pop	r10
    1f98:	9f 90       	pop	r9
    1f9a:	8f 90       	pop	r8
    1f9c:	08 95       	ret
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1248
  if (!gfxFont) { // 'Classic' built-in font

    if (c == '\n') {              // Newline?
      cursor_x = 0;               // Reset x to zero,
      cursor_y += textsize_y * 8; // advance y one line
    } else if (c != '\r') {       // Ignore carriage returns
    1f9e:	6d 30       	cpi	r22, 0x0D	; 13
    1fa0:	89 f3       	breq	.-30     	; 0x1f84 <Adafruit_GFX::write(unsigned char)+0x40>
    1fa2:	cc 88       	ldd	r12, Y+20	; 0x14
    1fa4:	ad 88       	ldd	r10, Y+21	; 0x15
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1249
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
    1fa6:	8f 89       	ldd	r24, Y+23	; 0x17
    1fa8:	88 23       	and	r24, r24
    1faa:	c1 f0       	breq	.+48     	; 0x1fdc <Adafruit_GFX::write(unsigned char)+0x98>
    1fac:	8c 85       	ldd	r24, Y+12	; 0x0c
    1fae:	9d 85       	ldd	r25, Y+13	; 0x0d
    1fb0:	36 e0       	ldi	r19, 0x06	; 6
    1fb2:	c3 9e       	mul	r12, r19
    1fb4:	80 0d       	add	r24, r0
    1fb6:	91 1d       	adc	r25, r1
    1fb8:	11 24       	eor	r1, r1
    1fba:	48 85       	ldd	r20, Y+8	; 0x08
    1fbc:	59 85       	ldd	r21, Y+9	; 0x09
    1fbe:	48 17       	cp	r20, r24
    1fc0:	59 07       	cpc	r21, r25
    1fc2:	64 f4       	brge	.+24     	; 0x1fdc <Adafruit_GFX::write(unsigned char)+0x98>
    1fc4:	4e 85       	ldd	r20, Y+14	; 0x0e
    1fc6:	5f 85       	ldd	r21, Y+15	; 0x0f
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1250
        cursor_x = 0;                                       // Reset x to zero,
    1fc8:	1d 86       	std	Y+13, r1	; 0x0d
    1fca:	1c 86       	std	Y+12, r1	; 0x0c
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1251
        cursor_y += textsize_y * 8; // advance y one line
    1fcc:	38 e0       	ldi	r19, 0x08	; 8
    1fce:	a3 9e       	mul	r10, r19
    1fd0:	c0 01       	movw	r24, r0
    1fd2:	11 24       	eor	r1, r1
    1fd4:	84 0f       	add	r24, r20
    1fd6:	95 1f       	adc	r25, r21
    1fd8:	9f 87       	std	Y+15, r25	; 0x0f
    1fda:	8e 87       	std	Y+14, r24	; 0x0e
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1253
      }
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
    1fdc:	ea 88       	ldd	r14, Y+18	; 0x12
    1fde:	fb 88       	ldd	r15, Y+19	; 0x13
    1fe0:	08 89       	ldd	r16, Y+16	; 0x10
    1fe2:	19 89       	ldd	r17, Y+17	; 0x11
    1fe4:	4e 85       	ldd	r20, Y+14	; 0x0e
    1fe6:	5f 85       	ldd	r21, Y+15	; 0x0f
    1fe8:	6c 85       	ldd	r22, Y+12	; 0x0c
    1fea:	7d 85       	ldd	r23, Y+13	; 0x0d
    1fec:	ce 01       	movw	r24, r28
    1fee:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1255
               textsize_y);
      cursor_x += textsize_x * 6; // Advance x one char
    1ff2:	2c 89       	ldd	r18, Y+20	; 0x14
    1ff4:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ff6:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ff8:	46 e0       	ldi	r20, 0x06	; 6
    1ffa:	24 9f       	mul	r18, r20
    1ffc:	80 0d       	add	r24, r0
    1ffe:	91 1d       	adc	r25, r1
    2000:	11 24       	eor	r1, r1
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1280
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
                   textsize_y);
        }
        cursor_x +=
    2002:	9d 87       	std	Y+13, r25	; 0x0d
    2004:	8c 87       	std	Y+12, r24	; 0x0c
    2006:	be cf       	rjmp	.-132    	; 0x1f84 <Adafruit_GFX::write(unsigned char)+0x40>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1260
      cursor_x += textsize_x * 6; // Advance x one char
    }

  } else { // Custom font

    if (c == '\n') {
    2008:	6a 30       	cpi	r22, 0x0A	; 10
    200a:	69 f4       	brne	.+26     	; 0x2026 <Adafruit_GFX::write(unsigned char)+0xe2>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1261
      cursor_x = 0;
    200c:	1d 86       	std	Y+13, r1	; 0x0d
    200e:	1c 86       	std	Y+12, r1	; 0x0c
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1263
      cursor_y +=
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    2010:	fc 01       	movw	r30, r24
    2012:	38 96       	adiw	r30, 0x08	; 8
    2014:	e4 91       	lpm	r30, Z
    2016:	2d 89       	ldd	r18, Y+21	; 0x15
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1262

  } else { // Custom font

    if (c == '\n') {
      cursor_x = 0;
      cursor_y +=
    2018:	8e 85       	ldd	r24, Y+14	; 0x0e
    201a:	9f 85       	ldd	r25, Y+15	; 0x0f
    201c:	e2 9f       	mul	r30, r18
    201e:	80 0d       	add	r24, r0
    2020:	91 1d       	adc	r25, r1
    2022:	11 24       	eor	r1, r1
    2024:	ad cf       	rjmp	.-166    	; 0x1f80 <Adafruit_GFX::write(unsigned char)+0x3c>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1264
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    } else if (c != '\r') {
    2026:	6d 30       	cpi	r22, 0x0D	; 13
    2028:	09 f4       	brne	.+2      	; 0x202c <Adafruit_GFX::write(unsigned char)+0xe8>
    202a:	ac cf       	rjmp	.-168    	; 0x1f84 <Adafruit_GFX::write(unsigned char)+0x40>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1265
      uint8_t first = pgm_read_byte(&gfxFont->first);
    202c:	fc 01       	movw	r30, r24
    202e:	34 96       	adiw	r30, 0x04	; 4
    2030:	34 91       	lpm	r19, Z
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1266
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
    2032:	63 17       	cp	r22, r19
    2034:	08 f4       	brcc	.+2      	; 0x2038 <Adafruit_GFX::write(unsigned char)+0xf4>
    2036:	a6 cf       	rjmp	.-180    	; 0x1f84 <Adafruit_GFX::write(unsigned char)+0x40>
    2038:	32 96       	adiw	r30, 0x02	; 2
    203a:	e4 91       	lpm	r30, Z
    203c:	e6 17       	cp	r30, r22
    203e:	08 f4       	brcc	.+2      	; 0x2042 <Adafruit_GFX::write(unsigned char)+0xfe>
    2040:	a1 cf       	rjmp	.-190    	; 0x1f84 <Adafruit_GFX::write(unsigned char)+0x40>
pgm_read_glyph_ptr():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:67
#define pgm_read_pointer(addr) ((void *)pgm_read_word(addr))
#endif

inline GFXglyph *pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c) {
#ifdef __AVR__
  return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    2042:	fc 01       	movw	r30, r24
    2044:	32 96       	adiw	r30, 0x02	; 2
    2046:	85 90       	lpm	r8, Z+
    2048:	94 90       	lpm	r9, Z
write():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1267
      cursor_y +=
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    } else if (c != '\r') {
      uint8_t first = pgm_read_byte(&gfxFont->first);
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
    204a:	46 2f       	mov	r20, r22
    204c:	43 1b       	sub	r20, r19
    204e:	34 2f       	mov	r19, r20
pgm_read_glyph_ptr():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:67
#define pgm_read_pointer(addr) ((void *)pgm_read_word(addr))
#endif

inline GFXglyph *pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c) {
#ifdef __AVR__
  return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    2050:	47 e0       	ldi	r20, 0x07	; 7
    2052:	34 9f       	mul	r19, r20
    2054:	80 0c       	add	r8, r0
    2056:	91 1c       	adc	r9, r1
    2058:	11 24       	eor	r1, r1
write():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1268
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    } else if (c != '\r') {
      uint8_t first = pgm_read_byte(&gfxFont->first);
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
        uint8_t w = pgm_read_byte(&glyph->width),
    205a:	f4 01       	movw	r30, r8
    205c:	32 96       	adiw	r30, 0x02	; 2
    205e:	34 91       	lpm	r19, Z
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1269
                h = pgm_read_byte(&glyph->height);
    2060:	31 96       	adiw	r30, 0x01	; 1
    2062:	e4 91       	lpm	r30, Z
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1270
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
    2064:	33 23       	and	r19, r19
    2066:	a9 f1       	breq	.+106    	; 0x20d2 <Adafruit_GFX::write(unsigned char)+0x18e>
    2068:	ee 23       	and	r30, r30
    206a:	99 f1       	breq	.+102    	; 0x20d2 <Adafruit_GFX::write(unsigned char)+0x18e>
    206c:	cc 88       	ldd	r12, Y+20	; 0x14
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1271
          int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
    206e:	f4 01       	movw	r30, r8
    2070:	35 96       	adiw	r30, 0x05	; 5
    2072:	e4 91       	lpm	r30, Z
    2074:	ad 88       	ldd	r10, Y+21	; 0x15
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1272
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    2076:	4f 89       	ldd	r20, Y+23	; 0x17
    2078:	44 23       	and	r20, r20
    207a:	01 f1       	breq	.+64     	; 0x20bc <Adafruit_GFX::write(unsigned char)+0x178>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1271
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
        uint8_t w = pgm_read_byte(&glyph->width),
                h = pgm_read_byte(&glyph->height);
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
          int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
    207c:	0e 2e       	mov	r0, r30
    207e:	00 0c       	add	r0, r0
    2080:	ff 0b       	sbc	r31, r31
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1272
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    2082:	e3 0f       	add	r30, r19
    2084:	f1 1d       	adc	r31, r1
    2086:	ce 9e       	mul	r12, r30
    2088:	a0 01       	movw	r20, r0
    208a:	cf 9e       	mul	r12, r31
    208c:	50 0d       	add	r21, r0
    208e:	11 24       	eor	r1, r1
    2090:	6c 85       	ldd	r22, Y+12	; 0x0c
    2092:	7d 85       	ldd	r23, Y+13	; 0x0d
    2094:	46 0f       	add	r20, r22
    2096:	57 1f       	adc	r21, r23
    2098:	68 85       	ldd	r22, Y+8	; 0x08
    209a:	79 85       	ldd	r23, Y+9	; 0x09
    209c:	64 17       	cp	r22, r20
    209e:	75 07       	cpc	r23, r21
    20a0:	6c f4       	brge	.+26     	; 0x20bc <Adafruit_GFX::write(unsigned char)+0x178>
    20a2:	4e 85       	ldd	r20, Y+14	; 0x0e
    20a4:	5f 85       	ldd	r21, Y+15	; 0x0f
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1273
            cursor_x = 0;
    20a6:	1d 86       	std	Y+13, r1	; 0x0d
    20a8:	1c 86       	std	Y+12, r1	; 0x0c
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1275
            cursor_y += (int16_t)textsize_y *
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    20aa:	fc 01       	movw	r30, r24
    20ac:	38 96       	adiw	r30, 0x08	; 8
    20ae:	e4 91       	lpm	r30, Z
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1274
                h = pgm_read_byte(&glyph->height);
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
          int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
            cursor_x = 0;
            cursor_y += (int16_t)textsize_y *
    20b0:	ae 9e       	mul	r10, r30
    20b2:	40 0d       	add	r20, r0
    20b4:	51 1d       	adc	r21, r1
    20b6:	11 24       	eor	r1, r1
    20b8:	5f 87       	std	Y+15, r21	; 0x0f
    20ba:	4e 87       	std	Y+14, r20	; 0x0e
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1277
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
    20bc:	ea 88       	ldd	r14, Y+18	; 0x12
    20be:	fb 88       	ldd	r15, Y+19	; 0x13
    20c0:	08 89       	ldd	r16, Y+16	; 0x10
    20c2:	19 89       	ldd	r17, Y+17	; 0x11
    20c4:	4e 85       	ldd	r20, Y+14	; 0x0e
    20c6:	5f 85       	ldd	r21, Y+15	; 0x0f
    20c8:	6c 85       	ldd	r22, Y+12	; 0x0c
    20ca:	7d 85       	ldd	r23, Y+13	; 0x0d
    20cc:	ce 01       	movw	r24, r28
    20ce:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1281
                   textsize_y);
        }
        cursor_x +=
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
    20d2:	f4 01       	movw	r30, r8
    20d4:	34 96       	adiw	r30, 0x04	; 4
    20d6:	e4 91       	lpm	r30, Z
    20d8:	2c 89       	ldd	r18, Y+20	; 0x14
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1280
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
                   textsize_y);
        }
        cursor_x +=
    20da:	8c 85       	ldd	r24, Y+12	; 0x0c
    20dc:	9d 85       	ldd	r25, Y+13	; 0x0d
    20de:	e2 9f       	mul	r30, r18
    20e0:	80 0d       	add	r24, r0
    20e2:	91 1d       	adc	r25, r1
    20e4:	11 24       	eor	r1, r1
    20e6:	8d cf       	rjmp	.-230    	; 0x2002 <Adafruit_GFX::write(unsigned char)+0xbe>

000020e8 <Adafruit_GFX::drawRect(int, int, int, int, unsigned int)>:
drawRect():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:524
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
    20e8:	6f 92       	push	r6
    20ea:	7f 92       	push	r7
    20ec:	8f 92       	push	r8
    20ee:	9f 92       	push	r9
    20f0:	af 92       	push	r10
    20f2:	bf 92       	push	r11
    20f4:	cf 92       	push	r12
    20f6:	df 92       	push	r13
    20f8:	ef 92       	push	r14
    20fa:	ff 92       	push	r15
    20fc:	0f 93       	push	r16
    20fe:	1f 93       	push	r17
    2100:	cf 93       	push	r28
    2102:	df 93       	push	r29
    2104:	ec 01       	movw	r28, r24
    2106:	6b 01       	movw	r12, r22
    2108:	5a 01       	movw	r10, r20
    210a:	39 01       	movw	r6, r18
    210c:	48 01       	movw	r8, r16
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:525
  startWrite();
    210e:	e8 81       	ld	r30, Y
    2110:	f9 81       	ldd	r31, Y+1	; 0x01
    2112:	02 84       	ldd	r0, Z+10	; 0x0a
    2114:	f3 85       	ldd	r31, Z+11	; 0x0b
    2116:	e0 2d       	mov	r30, r0
    2118:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:526
  writeFastHLine(x, y, w, color);
    211a:	e8 81       	ld	r30, Y
    211c:	f9 81       	ldd	r31, Y+1	; 0x01
    211e:	02 88       	ldd	r0, Z+18	; 0x12
    2120:	f3 89       	ldd	r31, Z+19	; 0x13
    2122:	e0 2d       	mov	r30, r0
    2124:	87 01       	movw	r16, r14
    2126:	93 01       	movw	r18, r6
    2128:	a5 01       	movw	r20, r10
    212a:	b6 01       	movw	r22, r12
    212c:	ce 01       	movw	r24, r28
    212e:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:527
  writeFastHLine(x, y + h - 1, w, color);
    2130:	a5 01       	movw	r20, r10
    2132:	48 0d       	add	r20, r8
    2134:	59 1d       	adc	r21, r9
    2136:	41 50       	subi	r20, 0x01	; 1
    2138:	51 09       	sbc	r21, r1
    213a:	e8 81       	ld	r30, Y
    213c:	f9 81       	ldd	r31, Y+1	; 0x01
    213e:	02 88       	ldd	r0, Z+18	; 0x12
    2140:	f3 89       	ldd	r31, Z+19	; 0x13
    2142:	e0 2d       	mov	r30, r0
    2144:	93 01       	movw	r18, r6
    2146:	b6 01       	movw	r22, r12
    2148:	ce 01       	movw	r24, r28
    214a:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:528
  writeFastVLine(x, y, h, color);
    214c:	e8 81       	ld	r30, Y
    214e:	f9 81       	ldd	r31, Y+1	; 0x01
    2150:	00 88       	ldd	r0, Z+16	; 0x10
    2152:	f1 89       	ldd	r31, Z+17	; 0x11
    2154:	e0 2d       	mov	r30, r0
    2156:	94 01       	movw	r18, r8
    2158:	a5 01       	movw	r20, r10
    215a:	b6 01       	movw	r22, r12
    215c:	ce 01       	movw	r24, r28
    215e:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:529
  writeFastVLine(x + w - 1, y, h, color);
    2160:	c6 0c       	add	r12, r6
    2162:	d7 1c       	adc	r13, r7
    2164:	b6 01       	movw	r22, r12
    2166:	61 50       	subi	r22, 0x01	; 1
    2168:	71 09       	sbc	r23, r1
    216a:	e8 81       	ld	r30, Y
    216c:	f9 81       	ldd	r31, Y+1	; 0x01
    216e:	00 88       	ldd	r0, Z+16	; 0x10
    2170:	f1 89       	ldd	r31, Z+17	; 0x11
    2172:	e0 2d       	mov	r30, r0
    2174:	94 01       	movw	r18, r8
    2176:	a5 01       	movw	r20, r10
    2178:	ce 01       	movw	r24, r28
    217a:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:530
  endWrite();
    217c:	e8 81       	ld	r30, Y
    217e:	f9 81       	ldd	r31, Y+1	; 0x01
    2180:	06 88       	ldd	r0, Z+22	; 0x16
    2182:	f7 89       	ldd	r31, Z+23	; 0x17
    2184:	e0 2d       	mov	r30, r0
    2186:	ce 01       	movw	r24, r28
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:531
}
    2188:	df 91       	pop	r29
    218a:	cf 91       	pop	r28
    218c:	1f 91       	pop	r17
    218e:	0f 91       	pop	r16
    2190:	ff 90       	pop	r15
    2192:	ef 90       	pop	r14
    2194:	df 90       	pop	r13
    2196:	cf 90       	pop	r12
    2198:	bf 90       	pop	r11
    219a:	af 90       	pop	r10
    219c:	9f 90       	pop	r9
    219e:	8f 90       	pop	r8
    21a0:	7f 90       	pop	r7
    21a2:	6f 90       	pop	r6
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:530
  startWrite();
  writeFastHLine(x, y, w, color);
  writeFastHLine(x, y + h - 1, w, color);
  writeFastVLine(x, y, h, color);
  writeFastVLine(x + w - 1, y, h, color);
  endWrite();
    21a4:	09 94       	ijmp

000021a6 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)>:
drawLine():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:331
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
                            uint16_t color) {
    21a6:	6f 92       	push	r6
    21a8:	7f 92       	push	r7
    21aa:	8f 92       	push	r8
    21ac:	9f 92       	push	r9
    21ae:	af 92       	push	r10
    21b0:	bf 92       	push	r11
    21b2:	cf 92       	push	r12
    21b4:	df 92       	push	r13
    21b6:	ef 92       	push	r14
    21b8:	ff 92       	push	r15
    21ba:	0f 93       	push	r16
    21bc:	1f 93       	push	r17
    21be:	cf 93       	push	r28
    21c0:	df 93       	push	r29
    21c2:	5c 01       	movw	r10, r24
    21c4:	eb 01       	movw	r28, r22
    21c6:	6a 01       	movw	r12, r20
    21c8:	49 01       	movw	r8, r18
    21ca:	38 01       	movw	r6, r16
    21cc:	87 01       	movw	r16, r14
    21ce:	dc 01       	movw	r26, r24
    21d0:	ed 91       	ld	r30, X+
    21d2:	fc 91       	ld	r31, X
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:333
  // Update in subclasses if desired!
  if (x0 == x1) {
    21d4:	62 17       	cp	r22, r18
    21d6:	73 07       	cpc	r23, r19
    21d8:	19 f5       	brne	.+70     	; 0x2220 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0x7a>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:334
    if (y0 > y1)
    21da:	64 16       	cp	r6, r20
    21dc:	75 06       	cpc	r7, r21
    21de:	2c f0       	brlt	.+10     	; 0x21ea <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0x44>
    21e0:	96 2d       	mov	r25, r6
    21e2:	87 2d       	mov	r24, r7
    21e4:	3a 01       	movw	r6, r20
    21e6:	c9 2e       	mov	r12, r25
    21e8:	d8 2e       	mov	r13, r24
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:336
      _swap_int16_t(y0, y1);
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
    21ea:	96 01       	movw	r18, r12
    21ec:	26 19       	sub	r18, r6
    21ee:	37 09       	sbc	r19, r7
    21f0:	2f 5f       	subi	r18, 0xFF	; 255
    21f2:	3f 4f       	sbci	r19, 0xFF	; 255
    21f4:	04 8c       	ldd	r0, Z+28	; 0x1c
    21f6:	f5 8d       	ldd	r31, Z+29	; 0x1d
    21f8:	e0 2d       	mov	r30, r0
    21fa:	a3 01       	movw	r20, r6
    21fc:	be 01       	movw	r22, r28
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:340
  } else if (y0 == y1) {
    if (x0 > x1)
      _swap_int16_t(x0, x1);
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
    21fe:	c5 01       	movw	r24, r10
    2200:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:346
  } else {
    startWrite();
    writeLine(x0, y0, x1, y1, color);
    endWrite();
  }
}
    2202:	df 91       	pop	r29
    2204:	cf 91       	pop	r28
    2206:	1f 91       	pop	r17
    2208:	0f 91       	pop	r16
    220a:	ff 90       	pop	r15
    220c:	ef 90       	pop	r14
    220e:	df 90       	pop	r13
    2210:	cf 90       	pop	r12
    2212:	bf 90       	pop	r11
    2214:	af 90       	pop	r10
    2216:	9f 90       	pop	r9
    2218:	8f 90       	pop	r8
    221a:	7f 90       	pop	r7
    221c:	6f 90       	pop	r6
    221e:	08 95       	ret
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:337
  // Update in subclasses if desired!
  if (x0 == x1) {
    if (y0 > y1)
      _swap_int16_t(y0, y1);
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
  } else if (y0 == y1) {
    2220:	46 15       	cp	r20, r6
    2222:	57 05       	cpc	r21, r7
    2224:	91 f4       	brne	.+36     	; 0x224a <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0xa4>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:338
    if (x0 > x1)
    2226:	26 17       	cp	r18, r22
    2228:	37 07       	cpc	r19, r23
    222a:	24 f0       	brlt	.+8      	; 0x2234 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0x8e>
    222c:	89 2d       	mov	r24, r9
    222e:	4b 01       	movw	r8, r22
    2230:	c2 2f       	mov	r28, r18
    2232:	d8 2f       	mov	r29, r24
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:340
      _swap_int16_t(x0, x1);
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
    2234:	9e 01       	movw	r18, r28
    2236:	28 19       	sub	r18, r8
    2238:	39 09       	sbc	r19, r9
    223a:	2f 5f       	subi	r18, 0xFF	; 255
    223c:	3f 4f       	sbci	r19, 0xFF	; 255
    223e:	06 8c       	ldd	r0, Z+30	; 0x1e
    2240:	f7 8d       	ldd	r31, Z+31	; 0x1f
    2242:	e0 2d       	mov	r30, r0
    2244:	a6 01       	movw	r20, r12
    2246:	b4 01       	movw	r22, r8
    2248:	da cf       	rjmp	.-76     	; 0x21fe <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0x58>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:342
  } else {
    startWrite();
    224a:	02 84       	ldd	r0, Z+10	; 0x0a
    224c:	f3 85       	ldd	r31, Z+11	; 0x0b
    224e:	e0 2d       	mov	r30, r0
    2250:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:343
    writeLine(x0, y0, x1, y1, color);
    2252:	d5 01       	movw	r26, r10
    2254:	ed 91       	ld	r30, X+
    2256:	fc 91       	ld	r31, X
    2258:	04 88       	ldd	r0, Z+20	; 0x14
    225a:	f5 89       	ldd	r31, Z+21	; 0x15
    225c:	e0 2d       	mov	r30, r0
    225e:	83 01       	movw	r16, r6
    2260:	94 01       	movw	r18, r8
    2262:	a6 01       	movw	r20, r12
    2264:	be 01       	movw	r22, r28
    2266:	c5 01       	movw	r24, r10
    2268:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:344
    endWrite();
    226a:	d5 01       	movw	r26, r10
    226c:	ed 91       	ld	r30, X+
    226e:	fc 91       	ld	r31, X
    2270:	06 88       	ldd	r0, Z+22	; 0x16
    2272:	f7 89       	ldd	r31, Z+23	; 0x17
    2274:	e0 2d       	mov	r30, r0
    2276:	c5 01       	movw	r24, r10
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:346
  }
}
    2278:	df 91       	pop	r29
    227a:	cf 91       	pop	r28
    227c:	1f 91       	pop	r17
    227e:	0f 91       	pop	r16
    2280:	ff 90       	pop	r15
    2282:	ef 90       	pop	r14
    2284:	df 90       	pop	r13
    2286:	cf 90       	pop	r12
    2288:	bf 90       	pop	r11
    228a:	af 90       	pop	r10
    228c:	9f 90       	pop	r9
    228e:	8f 90       	pop	r8
    2290:	7f 90       	pop	r7
    2292:	6f 90       	pop	r6
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:344
      _swap_int16_t(x0, x1);
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
  } else {
    startWrite();
    writeLine(x0, y0, x1, y1, color);
    endWrite();
    2294:	09 94       	ijmp

00002296 <Adafruit_GFX::fillScreen(unsigned int)>:
fillScreen():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:316
   @brief    Fill the screen completely with one color. Update in subclasses if
   desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
    2296:	ef 92       	push	r14
    2298:	ff 92       	push	r15
    229a:	0f 93       	push	r16
    229c:	1f 93       	push	r17
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:317
  fillRect(0, 0, _width, _height, color);
    229e:	dc 01       	movw	r26, r24
    22a0:	1a 96       	adiw	r26, 0x0a	; 10
    22a2:	0d 91       	ld	r16, X+
    22a4:	1c 91       	ld	r17, X
    22a6:	1b 97       	sbiw	r26, 0x0b	; 11
    22a8:	18 96       	adiw	r26, 0x08	; 8
    22aa:	2d 91       	ld	r18, X+
    22ac:	3c 91       	ld	r19, X
    22ae:	19 97       	sbiw	r26, 0x09	; 9
    22b0:	ed 91       	ld	r30, X+
    22b2:	fc 91       	ld	r31, X
    22b4:	00 a0       	ldd	r0, Z+32	; 0x20
    22b6:	f1 a1       	ldd	r31, Z+33	; 0x21
    22b8:	e0 2d       	mov	r30, r0
    22ba:	7b 01       	movw	r14, r22
    22bc:	50 e0       	ldi	r21, 0x00	; 0
    22be:	40 e0       	ldi	r20, 0x00	; 0
    22c0:	70 e0       	ldi	r23, 0x00	; 0
    22c2:	60 e0       	ldi	r22, 0x00	; 0
    22c4:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:318
}
    22c6:	1f 91       	pop	r17
    22c8:	0f 91       	pop	r16
    22ca:	ff 90       	pop	r15
    22cc:	ef 90       	pop	r14
    22ce:	08 95       	ret

000022d0 <Adafruit_GFX::fillRect(int, int, int, int, unsigned int)>:
fillRect():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:301
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
    22d0:	4f 92       	push	r4
    22d2:	5f 92       	push	r5
    22d4:	6f 92       	push	r6
    22d6:	7f 92       	push	r7
    22d8:	8f 92       	push	r8
    22da:	9f 92       	push	r9
    22dc:	af 92       	push	r10
    22de:	bf 92       	push	r11
    22e0:	cf 92       	push	r12
    22e2:	df 92       	push	r13
    22e4:	ef 92       	push	r14
    22e6:	ff 92       	push	r15
    22e8:	0f 93       	push	r16
    22ea:	1f 93       	push	r17
    22ec:	cf 93       	push	r28
    22ee:	df 93       	push	r29
    22f0:	6c 01       	movw	r12, r24
    22f2:	2b 01       	movw	r4, r22
    22f4:	5a 01       	movw	r10, r20
    22f6:	39 01       	movw	r6, r18
    22f8:	48 01       	movw	r8, r16
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:302
  startWrite();
    22fa:	dc 01       	movw	r26, r24
    22fc:	ed 91       	ld	r30, X+
    22fe:	fc 91       	ld	r31, X
    2300:	02 84       	ldd	r0, Z+10	; 0x0a
    2302:	f3 85       	ldd	r31, Z+11	; 0x0b
    2304:	e0 2d       	mov	r30, r0
    2306:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:303
  for (int16_t i = x; i < x + w; i++) {
    2308:	e2 01       	movw	r28, r4
    230a:	64 0c       	add	r6, r4
    230c:	75 1c       	adc	r7, r5
    230e:	d6 01       	movw	r26, r12
    2310:	ed 91       	ld	r30, X+
    2312:	fc 91       	ld	r31, X
    2314:	c6 15       	cp	r28, r6
    2316:	d7 05       	cpc	r29, r7
    2318:	5c f4       	brge	.+22     	; 0x2330 <Adafruit_GFX::fillRect(int, int, int, int, unsigned int)+0x60>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:304
    writeFastVLine(i, y, h, color);
    231a:	00 88       	ldd	r0, Z+16	; 0x10
    231c:	f1 89       	ldd	r31, Z+17	; 0x11
    231e:	e0 2d       	mov	r30, r0
    2320:	87 01       	movw	r16, r14
    2322:	94 01       	movw	r18, r8
    2324:	a5 01       	movw	r20, r10
    2326:	be 01       	movw	r22, r28
    2328:	c6 01       	movw	r24, r12
    232a:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:303
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
  startWrite();
  for (int16_t i = x; i < x + w; i++) {
    232c:	21 96       	adiw	r28, 0x01	; 1
    232e:	ef cf       	rjmp	.-34     	; 0x230e <Adafruit_GFX::fillRect(int, int, int, int, unsigned int)+0x3e>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:306
    writeFastVLine(i, y, h, color);
  }
  endWrite();
    2330:	06 88       	ldd	r0, Z+22	; 0x16
    2332:	f7 89       	ldd	r31, Z+23	; 0x17
    2334:	e0 2d       	mov	r30, r0
    2336:	c6 01       	movw	r24, r12
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:307
}
    2338:	df 91       	pop	r29
    233a:	cf 91       	pop	r28
    233c:	1f 91       	pop	r17
    233e:	0f 91       	pop	r16
    2340:	ff 90       	pop	r15
    2342:	ef 90       	pop	r14
    2344:	df 90       	pop	r13
    2346:	cf 90       	pop	r12
    2348:	bf 90       	pop	r11
    234a:	af 90       	pop	r10
    234c:	9f 90       	pop	r9
    234e:	8f 90       	pop	r8
    2350:	7f 90       	pop	r7
    2352:	6f 90       	pop	r6
    2354:	5f 90       	pop	r5
    2356:	4f 90       	pop	r4
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:306
                            uint16_t color) {
  startWrite();
  for (int16_t i = x; i < x + w; i++) {
    writeFastVLine(i, y, h, color);
  }
  endWrite();
    2358:	09 94       	ijmp

0000235a <Adafruit_GFX::drawFastHLine(int, int, int, unsigned int)>:
drawFastHLine():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:283
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y, int16_t w,
                                 uint16_t color) {
    235a:	8f 92       	push	r8
    235c:	9f 92       	push	r9
    235e:	af 92       	push	r10
    2360:	bf 92       	push	r11
    2362:	cf 92       	push	r12
    2364:	df 92       	push	r13
    2366:	ef 92       	push	r14
    2368:	ff 92       	push	r15
    236a:	0f 93       	push	r16
    236c:	1f 93       	push	r17
    236e:	cf 93       	push	r28
    2370:	df 93       	push	r29
    2372:	ec 01       	movw	r28, r24
    2374:	5b 01       	movw	r10, r22
    2376:	4a 01       	movw	r8, r20
    2378:	69 01       	movw	r12, r18
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:284
  startWrite();
    237a:	e8 81       	ld	r30, Y
    237c:	f9 81       	ldd	r31, Y+1	; 0x01
    237e:	02 84       	ldd	r0, Z+10	; 0x0a
    2380:	f3 85       	ldd	r31, Z+11	; 0x0b
    2382:	e0 2d       	mov	r30, r0
    2384:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:285
  writeLine(x, y, x + w - 1, y, color);
    2386:	95 01       	movw	r18, r10
    2388:	2c 0d       	add	r18, r12
    238a:	3d 1d       	adc	r19, r13
    238c:	21 50       	subi	r18, 0x01	; 1
    238e:	31 09       	sbc	r19, r1
    2390:	e8 81       	ld	r30, Y
    2392:	f9 81       	ldd	r31, Y+1	; 0x01
    2394:	04 88       	ldd	r0, Z+20	; 0x14
    2396:	f5 89       	ldd	r31, Z+21	; 0x15
    2398:	e0 2d       	mov	r30, r0
    239a:	78 01       	movw	r14, r16
    239c:	84 01       	movw	r16, r8
    239e:	a4 01       	movw	r20, r8
    23a0:	b5 01       	movw	r22, r10
    23a2:	ce 01       	movw	r24, r28
    23a4:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:286
  endWrite();
    23a6:	e8 81       	ld	r30, Y
    23a8:	f9 81       	ldd	r31, Y+1	; 0x01
    23aa:	06 88       	ldd	r0, Z+22	; 0x16
    23ac:	f7 89       	ldd	r31, Z+23	; 0x17
    23ae:	e0 2d       	mov	r30, r0
    23b0:	ce 01       	movw	r24, r28
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:287
}
    23b2:	df 91       	pop	r29
    23b4:	cf 91       	pop	r28
    23b6:	1f 91       	pop	r17
    23b8:	0f 91       	pop	r16
    23ba:	ff 90       	pop	r15
    23bc:	ef 90       	pop	r14
    23be:	df 90       	pop	r13
    23c0:	cf 90       	pop	r12
    23c2:	bf 90       	pop	r11
    23c4:	af 90       	pop	r10
    23c6:	9f 90       	pop	r9
    23c8:	8f 90       	pop	r8
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:286
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y, int16_t w,
                                 uint16_t color) {
  startWrite();
  writeLine(x, y, x + w - 1, y, color);
  endWrite();
    23ca:	09 94       	ijmp

000023cc <Adafruit_GFX::drawFastVLine(int, int, int, unsigned int)>:
drawFastVLine():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:266
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y, int16_t h,
                                 uint16_t color) {
    23cc:	8f 92       	push	r8
    23ce:	9f 92       	push	r9
    23d0:	af 92       	push	r10
    23d2:	bf 92       	push	r11
    23d4:	cf 92       	push	r12
    23d6:	df 92       	push	r13
    23d8:	ef 92       	push	r14
    23da:	ff 92       	push	r15
    23dc:	0f 93       	push	r16
    23de:	1f 93       	push	r17
    23e0:	cf 93       	push	r28
    23e2:	df 93       	push	r29
    23e4:	ec 01       	movw	r28, r24
    23e6:	5b 01       	movw	r10, r22
    23e8:	4a 01       	movw	r8, r20
    23ea:	69 01       	movw	r12, r18
    23ec:	78 01       	movw	r14, r16
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:267
  startWrite();
    23ee:	e8 81       	ld	r30, Y
    23f0:	f9 81       	ldd	r31, Y+1	; 0x01
    23f2:	02 84       	ldd	r0, Z+10	; 0x0a
    23f4:	f3 85       	ldd	r31, Z+11	; 0x0b
    23f6:	e0 2d       	mov	r30, r0
    23f8:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:268
  writeLine(x, y, x, y + h - 1, color);
    23fa:	c8 0c       	add	r12, r8
    23fc:	d9 1c       	adc	r13, r9
    23fe:	86 01       	movw	r16, r12
    2400:	01 50       	subi	r16, 0x01	; 1
    2402:	11 09       	sbc	r17, r1
    2404:	e8 81       	ld	r30, Y
    2406:	f9 81       	ldd	r31, Y+1	; 0x01
    2408:	04 88       	ldd	r0, Z+20	; 0x14
    240a:	f5 89       	ldd	r31, Z+21	; 0x15
    240c:	e0 2d       	mov	r30, r0
    240e:	95 01       	movw	r18, r10
    2410:	a4 01       	movw	r20, r8
    2412:	b5 01       	movw	r22, r10
    2414:	ce 01       	movw	r24, r28
    2416:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:269
  endWrite();
    2418:	e8 81       	ld	r30, Y
    241a:	f9 81       	ldd	r31, Y+1	; 0x01
    241c:	06 88       	ldd	r0, Z+22	; 0x16
    241e:	f7 89       	ldd	r31, Z+23	; 0x17
    2420:	e0 2d       	mov	r30, r0
    2422:	ce 01       	movw	r24, r28
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:270
}
    2424:	df 91       	pop	r29
    2426:	cf 91       	pop	r28
    2428:	1f 91       	pop	r17
    242a:	0f 91       	pop	r16
    242c:	ff 90       	pop	r15
    242e:	ef 90       	pop	r14
    2430:	df 90       	pop	r13
    2432:	cf 90       	pop	r12
    2434:	bf 90       	pop	r11
    2436:	af 90       	pop	r10
    2438:	9f 90       	pop	r9
    243a:	8f 90       	pop	r8
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:269
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y, int16_t h,
                                 uint16_t color) {
  startWrite();
  writeLine(x, y, x, y + h - 1, color);
  endWrite();
    243c:	09 94       	ijmp

0000243e <Adafruit_GFX::writeFillRect(int, int, int, int, unsigned int)>:
writeFillRect():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:242
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                                 uint16_t color) {
    243e:	ef 92       	push	r14
    2440:	ff 92       	push	r15
    2442:	0f 93       	push	r16
    2444:	1f 93       	push	r17
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:244
  // Overwrite in subclasses if desired!
  fillRect(x, y, w, h, color);
    2446:	dc 01       	movw	r26, r24
    2448:	ed 91       	ld	r30, X+
    244a:	fc 91       	ld	r31, X
    244c:	00 a0       	ldd	r0, Z+32	; 0x20
    244e:	f1 a1       	ldd	r31, Z+33	; 0x21
    2450:	e0 2d       	mov	r30, r0
    2452:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:245
}
    2454:	1f 91       	pop	r17
    2456:	0f 91       	pop	r16
    2458:	ff 90       	pop	r15
    245a:	ef 90       	pop	r14
    245c:	08 95       	ret

0000245e <Adafruit_GFX::writeFastHLine(int, int, int, unsigned int)>:
writeFastHLine():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:223
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y, int16_t w,
                                  uint16_t color) {
    245e:	0f 93       	push	r16
    2460:	1f 93       	push	r17
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:227
  // Overwrite in subclasses if startWrite is defined!
  // Example: writeLine(x, y, x+w-1, y, color);
  // or writeFillRect(x, y, w, 1, color);
  drawFastHLine(x, y, w, color);
    2462:	dc 01       	movw	r26, r24
    2464:	ed 91       	ld	r30, X+
    2466:	fc 91       	ld	r31, X
    2468:	06 8c       	ldd	r0, Z+30	; 0x1e
    246a:	f7 8d       	ldd	r31, Z+31	; 0x1f
    246c:	e0 2d       	mov	r30, r0
    246e:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:228
}
    2470:	1f 91       	pop	r17
    2472:	0f 91       	pop	r16
    2474:	08 95       	ret

00002476 <Adafruit_GFX::writeFastVLine(int, int, int, unsigned int)>:
writeFastVLine():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:205
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y, int16_t h,
                                  uint16_t color) {
    2476:	0f 93       	push	r16
    2478:	1f 93       	push	r17
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:209
  // Overwrite in subclasses if startWrite is defined!
  // Can be just writeLine(x, y, x, y+h-1, color);
  // or writeFillRect(x, y, 1, h, color);
  drawFastVLine(x, y, h, color);
    247a:	dc 01       	movw	r26, r24
    247c:	ed 91       	ld	r30, X+
    247e:	fc 91       	ld	r31, X
    2480:	04 8c       	ldd	r0, Z+28	; 0x1c
    2482:	f5 8d       	ldd	r31, Z+29	; 0x1d
    2484:	e0 2d       	mov	r30, r0
    2486:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:210
}
    2488:	1f 91       	pop	r17
    248a:	0f 91       	pop	r16
    248c:	08 95       	ret

0000248e <Adafruit_GFX::writePixel(int, int, unsigned int)>:
writePixel():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:191
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color) {
  drawPixel(x, y, color);
    248e:	dc 01       	movw	r26, r24
    2490:	ed 91       	ld	r30, X+
    2492:	fc 91       	ld	r31, X
    2494:	00 84       	ldd	r0, Z+8	; 0x08
    2496:	f1 85       	ldd	r31, Z+9	; 0x09
    2498:	e0 2d       	mov	r30, r0
    249a:	09 94       	ijmp

0000249c <Adafruit_GFX::drawBitmap(int, int, unsigned char const*, int, int, unsigned int) [clone .constprop.4]>:
drawBitmap():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:717
    @param    w   Width of bitmap in pixels
    @param    h   Height of bitmap in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawBitmap(int16_t x, int16_t y, const uint8_t bitmap[],
    249c:	3f 92       	push	r3
    249e:	4f 92       	push	r4
    24a0:	5f 92       	push	r5
    24a2:	6f 92       	push	r6
    24a4:	7f 92       	push	r7
    24a6:	8f 92       	push	r8
    24a8:	9f 92       	push	r9
    24aa:	af 92       	push	r10
    24ac:	bf 92       	push	r11
    24ae:	cf 92       	push	r12
    24b0:	df 92       	push	r13
    24b2:	ef 92       	push	r14
    24b4:	ff 92       	push	r15
    24b6:	0f 93       	push	r16
    24b8:	1f 93       	push	r17
    24ba:	cf 93       	push	r28
    24bc:	df 93       	push	r29
    24be:	5c 01       	movw	r10, r24
    24c0:	7b 01       	movw	r14, r22
    24c2:	4a 01       	movw	r8, r20
    24c4:	69 01       	movw	r12, r18
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:720
                              int16_t w, int16_t h, uint16_t color) {

  int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
    24c6:	39 01       	movw	r6, r18
    24c8:	87 e0       	ldi	r24, 0x07	; 7
    24ca:	68 0e       	add	r6, r24
    24cc:	71 1c       	adc	r7, r1
    24ce:	93 e0       	ldi	r25, 0x03	; 3
    24d0:	75 94       	asr	r7
    24d2:	67 94       	ror	r6
    24d4:	9a 95       	dec	r25
    24d6:	e1 f7       	brne	.-8      	; 0x24d0 <Adafruit_GFX::drawBitmap(int, int, unsigned char const*, int, int, unsigned int) [clone .constprop.4]+0x34>
    24d8:	2b 01       	movw	r4, r22
    24da:	40 0e       	add	r4, r16
    24dc:	51 1e       	adc	r5, r17
    24de:	10 e0       	ldi	r17, 0x00	; 0
    24e0:	00 e0       	ldi	r16, 0x00	; 0
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:721
  uint8_t b = 0;
    24e2:	31 2c       	mov	r3, r1
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:725

  startWrite();
  for (int16_t j = 0; j < h; j++, y++) {
    for (int16_t i = 0; i < w; i++) {
    24e4:	d0 e0       	ldi	r29, 0x00	; 0
    24e6:	c0 e0       	ldi	r28, 0x00	; 0
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:726
      if (i & 7)
    24e8:	ce 01       	movw	r24, r28
    24ea:	87 70       	andi	r24, 0x07	; 7
    24ec:	99 27       	eor	r25, r25
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:727
        b <<= 1;
    24ee:	33 0c       	add	r3, r3
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:726
  uint8_t b = 0;

  startWrite();
  for (int16_t j = 0; j < h; j++, y++) {
    for (int16_t i = 0; i < w; i++) {
      if (i & 7)
    24f0:	89 2b       	or	r24, r25
    24f2:	59 f4       	brne	.+22     	; 0x250a <Adafruit_GFX::drawBitmap(int, int, unsigned char const*, int, int, unsigned int) [clone .constprop.4]+0x6e>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:729
        b <<= 1;
      else
        b = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
    24f4:	fe 01       	movw	r30, r28
    24f6:	83 e0       	ldi	r24, 0x03	; 3
    24f8:	f5 95       	asr	r31
    24fa:	e7 95       	ror	r30
    24fc:	8a 95       	dec	r24
    24fe:	e1 f7       	brne	.-8      	; 0x24f8 <Adafruit_GFX::drawBitmap(int, int, unsigned char const*, int, int, unsigned int) [clone .constprop.4]+0x5c>
    2500:	e0 0f       	add	r30, r16
    2502:	f1 1f       	adc	r31, r17
    2504:	e8 0d       	add	r30, r8
    2506:	f9 1d       	adc	r31, r9
    2508:	34 90       	lpm	r3, Z
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:730
      if (b & 0x80)
    250a:	37 fe       	sbrs	r3, 7
    250c:	0a c0       	rjmp	.+20     	; 0x2522 <Adafruit_GFX::drawBitmap(int, int, unsigned char const*, int, int, unsigned int) [clone .constprop.4]+0x86>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:731
        writePixel(x + i, y, color);
    250e:	21 e0       	ldi	r18, 0x01	; 1
    2510:	30 e0       	ldi	r19, 0x00	; 0
    2512:	a7 01       	movw	r20, r14
    2514:	b5 01       	movw	r22, r10
    2516:	6c 0f       	add	r22, r28
    2518:	7d 1f       	adc	r23, r29
    251a:	8f e1       	ldi	r24, 0x1F	; 31
    251c:	93 e0       	ldi	r25, 0x03	; 3
    251e:	0e 94 47 12 	call	0x248e	; 0x248e <Adafruit_GFX::writePixel(int, int, unsigned int)>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:725
  int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
  uint8_t b = 0;

  startWrite();
  for (int16_t j = 0; j < h; j++, y++) {
    for (int16_t i = 0; i < w; i++) {
    2522:	21 96       	adiw	r28, 0x01	; 1
    2524:	cc 16       	cp	r12, r28
    2526:	dd 06       	cpc	r13, r29
    2528:	f9 f6       	brne	.-66     	; 0x24e8 <Adafruit_GFX::drawBitmap(int, int, unsigned char const*, int, int, unsigned int) [clone .constprop.4]+0x4c>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:724

  int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
  uint8_t b = 0;

  startWrite();
  for (int16_t j = 0; j < h; j++, y++) {
    252a:	8f ef       	ldi	r24, 0xFF	; 255
    252c:	e8 1a       	sub	r14, r24
    252e:	f8 0a       	sbc	r15, r24
    2530:	06 0d       	add	r16, r6
    2532:	17 1d       	adc	r17, r7
    2534:	e4 14       	cp	r14, r4
    2536:	f5 04       	cpc	r15, r5
    2538:	a9 f6       	brne	.-86     	; 0x24e4 <Adafruit_GFX::drawBitmap(int, int, unsigned char const*, int, int, unsigned int) [clone .constprop.4]+0x48>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:735
      if (b & 0x80)
        writePixel(x + i, y, color);
    }
  }
  endWrite();
}
    253a:	df 91       	pop	r29
    253c:	cf 91       	pop	r28
    253e:	1f 91       	pop	r17
    2540:	0f 91       	pop	r16
    2542:	ff 90       	pop	r15
    2544:	ef 90       	pop	r14
    2546:	df 90       	pop	r13
    2548:	cf 90       	pop	r12
    254a:	bf 90       	pop	r11
    254c:	af 90       	pop	r10
    254e:	9f 90       	pop	r9
    2550:	8f 90       	pop	r8
    2552:	7f 90       	pop	r7
    2554:	6f 90       	pop	r6
    2556:	5f 90       	pop	r5
    2558:	4f 90       	pop	r4
    255a:	3f 90       	pop	r3
    255c:	08 95       	ret

0000255e <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)>:
writeLine():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:133
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
                             uint16_t color) {
    255e:	2f 92       	push	r2
    2560:	3f 92       	push	r3
    2562:	4f 92       	push	r4
    2564:	5f 92       	push	r5
    2566:	6f 92       	push	r6
    2568:	7f 92       	push	r7
    256a:	8f 92       	push	r8
    256c:	9f 92       	push	r9
    256e:	af 92       	push	r10
    2570:	bf 92       	push	r11
    2572:	cf 92       	push	r12
    2574:	df 92       	push	r13
    2576:	ef 92       	push	r14
    2578:	ff 92       	push	r15
    257a:	0f 93       	push	r16
    257c:	1f 93       	push	r17
    257e:	cf 93       	push	r28
    2580:	df 93       	push	r29
    2582:	00 d0       	rcall	.+0      	; 0x2584 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x26>
    2584:	00 d0       	rcall	.+0      	; 0x2586 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x28>
    2586:	00 d0       	rcall	.+0      	; 0x2588 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x2a>
    2588:	cd b7       	in	r28, 0x3d	; 61
    258a:	de b7       	in	r29, 0x3e	; 62
    258c:	3c 01       	movw	r6, r24
    258e:	6a 01       	movw	r12, r20
    2590:	3e 83       	std	Y+6, r19	; 0x06
    2592:	2d 83       	std	Y+5, r18	; 0x05
    2594:	fc 82       	std	Y+4, r15	; 0x04
    2596:	eb 82       	std	Y+3, r14	; 0x03
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:137
#if defined(ESP8266)
  yield();
#endif
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
    2598:	58 01       	movw	r10, r16
    259a:	a4 1a       	sub	r10, r20
    259c:	b5 0a       	sbc	r11, r21
    259e:	b7 fe       	sbrs	r11, 7
    25a0:	03 c0       	rjmp	.+6      	; 0x25a8 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x4a>
    25a2:	b1 94       	neg	r11
    25a4:	a1 94       	neg	r10
    25a6:	b1 08       	sbc	r11, r1
    25a8:	8d 80       	ldd	r8, Y+5	; 0x05
    25aa:	9e 80       	ldd	r9, Y+6	; 0x06
    25ac:	86 1a       	sub	r8, r22
    25ae:	97 0a       	sbc	r9, r23
    25b0:	97 fe       	sbrs	r9, 7
    25b2:	03 c0       	rjmp	.+6      	; 0x25ba <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x5c>
    25b4:	91 94       	neg	r9
    25b6:	81 94       	neg	r8
    25b8:	91 08       	sbc	r9, r1
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:138
  if (steep) {
    25ba:	8a 14       	cp	r8, r10
    25bc:	9b 04       	cpc	r9, r11
    25be:	5c f0       	brlt	.+22     	; 0x25d6 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x78>
    25c0:	90 2f       	mov	r25, r16
    25c2:	81 2f       	mov	r24, r17
    25c4:	0d 81       	ldd	r16, Y+5	; 0x05
    25c6:	1e 81       	ldd	r17, Y+6	; 0x06
    25c8:	9d 83       	std	Y+5, r25	; 0x05
    25ca:	8e 83       	std	Y+6, r24	; 0x06
    25cc:	9c 2d       	mov	r25, r12
    25ce:	8d 2d       	mov	r24, r13
    25d0:	6b 01       	movw	r12, r22
    25d2:	69 2f       	mov	r22, r25
    25d4:	78 2f       	mov	r23, r24
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:143
    _swap_int16_t(x0, y0);
    _swap_int16_t(x1, y1);
  }

  if (x0 > x1) {
    25d6:	0c 15       	cp	r16, r12
    25d8:	1d 05       	cpc	r17, r13
    25da:	5c f0       	brlt	.+22     	; 0x25f2 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x94>
    25dc:	9d 81       	ldd	r25, Y+5	; 0x05
    25de:	8e 81       	ldd	r24, Y+6	; 0x06
    25e0:	7e 83       	std	Y+6, r23	; 0x06
    25e2:	6d 83       	std	Y+5, r22	; 0x05
    25e4:	69 2f       	mov	r22, r25
    25e6:	78 2f       	mov	r23, r24
    25e8:	90 2f       	mov	r25, r16
    25ea:	81 2f       	mov	r24, r17
    25ec:	86 01       	movw	r16, r12
    25ee:	c9 2e       	mov	r12, r25
    25f0:	d8 2e       	mov	r13, r24
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:149
    _swap_int16_t(x0, x1);
    _swap_int16_t(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
    25f2:	16 01       	movw	r2, r12
    25f4:	20 1a       	sub	r2, r16
    25f6:	31 0a       	sbc	r3, r17
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:150
  dy = abs(y1 - y0);
    25f8:	2b 01       	movw	r4, r22
    25fa:	2d 81       	ldd	r18, Y+5	; 0x05
    25fc:	3e 81       	ldd	r19, Y+6	; 0x06
    25fe:	42 1a       	sub	r4, r18
    2600:	53 0a       	sbc	r5, r19
    2602:	57 fe       	sbrs	r5, 7
    2604:	03 c0       	rjmp	.+6      	; 0x260c <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xae>
    2606:	51 94       	neg	r5
    2608:	41 94       	neg	r4
    260a:	51 08       	sbc	r5, r1
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:152

  int16_t err = dx / 2;
    260c:	71 01       	movw	r14, r2
    260e:	37 fe       	sbrs	r3, 7
    2610:	03 c0       	rjmp	.+6      	; 0x2618 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xba>
    2612:	3f ef       	ldi	r19, 0xFF	; 255
    2614:	e3 1a       	sub	r14, r19
    2616:	f3 0a       	sbc	r15, r19
    2618:	f5 94       	asr	r15
    261a:	e7 94       	ror	r14
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:155
  int16_t ystep;

  if (y0 < y1) {
    261c:	8d 81       	ldd	r24, Y+5	; 0x05
    261e:	9e 81       	ldd	r25, Y+6	; 0x06
    2620:	86 17       	cp	r24, r22
    2622:	97 07       	cpc	r25, r23
    2624:	5c f5       	brge	.+86     	; 0x267c <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x11e>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:156
    ystep = 1;
    2626:	a1 e0       	ldi	r26, 0x01	; 1
    2628:	b0 e0       	ldi	r27, 0x00	; 0
    262a:	ba 83       	std	Y+2, r27	; 0x02
    262c:	a9 83       	std	Y+1, r26	; 0x01
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:161
  } else {
    ystep = -1;
  }

  for (; x0 <= x1; x0++) {
    262e:	c0 16       	cp	r12, r16
    2630:	d1 06       	cpc	r13, r17
    2632:	4c f1       	brlt	.+82     	; 0x2686 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x128>
    2634:	d3 01       	movw	r26, r6
    2636:	ed 91       	ld	r30, X+
    2638:	fc 91       	ld	r31, X
    263a:	04 84       	ldd	r0, Z+12	; 0x0c
    263c:	f5 85       	ldd	r31, Z+13	; 0x0d
    263e:	e0 2d       	mov	r30, r0
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:163
    if (steep) {
      writePixel(y0, x0, color);
    2640:	2b 81       	ldd	r18, Y+3	; 0x03
    2642:	3c 81       	ldd	r19, Y+4	; 0x04
    2644:	a8 01       	movw	r20, r16
    2646:	6d 81       	ldd	r22, Y+5	; 0x05
    2648:	7e 81       	ldd	r23, Y+6	; 0x06
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:162
  } else {
    ystep = -1;
  }

  for (; x0 <= x1; x0++) {
    if (steep) {
    264a:	8a 14       	cp	r8, r10
    264c:	9b 04       	cpc	r9, r11
    264e:	1c f0       	brlt	.+6      	; 0x2656 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xf8>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:165
      writePixel(y0, x0, color);
    } else {
      writePixel(x0, y0, color);
    2650:	4d 81       	ldd	r20, Y+5	; 0x05
    2652:	5e 81       	ldd	r21, Y+6	; 0x06
    2654:	b8 01       	movw	r22, r16
    2656:	c3 01       	movw	r24, r6
    2658:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:167
    }
    err -= dy;
    265a:	e4 18       	sub	r14, r4
    265c:	f5 08       	sbc	r15, r5
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:168
    if (err < 0) {
    265e:	f7 fe       	sbrs	r15, 7
    2660:	0a c0       	rjmp	.+20     	; 0x2676 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x118>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:169
      y0 += ystep;
    2662:	2d 81       	ldd	r18, Y+5	; 0x05
    2664:	3e 81       	ldd	r19, Y+6	; 0x06
    2666:	89 81       	ldd	r24, Y+1	; 0x01
    2668:	9a 81       	ldd	r25, Y+2	; 0x02
    266a:	28 0f       	add	r18, r24
    266c:	39 1f       	adc	r19, r25
    266e:	3e 83       	std	Y+6, r19	; 0x06
    2670:	2d 83       	std	Y+5, r18	; 0x05
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:170
      err += dx;
    2672:	e2 0c       	add	r14, r2
    2674:	f3 1c       	adc	r15, r3
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:161
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0 <= x1; x0++) {
    2676:	0f 5f       	subi	r16, 0xFF	; 255
    2678:	1f 4f       	sbci	r17, 0xFF	; 255
    267a:	d9 cf       	rjmp	.-78     	; 0x262e <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xd0>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:158
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
    267c:	2f ef       	ldi	r18, 0xFF	; 255
    267e:	3f ef       	ldi	r19, 0xFF	; 255
    2680:	3a 83       	std	Y+2, r19	; 0x02
    2682:	29 83       	std	Y+1, r18	; 0x01
    2684:	d4 cf       	rjmp	.-88     	; 0x262e <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xd0>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:173
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}
    2686:	26 96       	adiw	r28, 0x06	; 6
    2688:	0f b6       	in	r0, 0x3f	; 63
    268a:	f8 94       	cli
    268c:	de bf       	out	0x3e, r29	; 62
    268e:	0f be       	out	0x3f, r0	; 63
    2690:	cd bf       	out	0x3d, r28	; 61
    2692:	df 91       	pop	r29
    2694:	cf 91       	pop	r28
    2696:	1f 91       	pop	r17
    2698:	0f 91       	pop	r16
    269a:	ff 90       	pop	r15
    269c:	ef 90       	pop	r14
    269e:	df 90       	pop	r13
    26a0:	cf 90       	pop	r12
    26a2:	bf 90       	pop	r11
    26a4:	af 90       	pop	r10
    26a6:	9f 90       	pop	r9
    26a8:	8f 90       	pop	r8
    26aa:	7f 90       	pop	r7
    26ac:	6f 90       	pop	r6
    26ae:	5f 90       	pop	r5
    26b0:	4f 90       	pop	r4
    26b2:	3f 90       	pop	r3
    26b4:	2f 90       	pop	r2
    26b6:	08 95       	ret

000026b8 <Print::flush()>:
flush():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/Print.h:65

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    26b8:	08 95       	ret

000026ba <twi_stop>:
twi_stop():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:436
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    26ba:	85 ed       	ldi	r24, 0xD5	; 213
    26bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:456
          return;
        }
      }
    }
  #else
    while(TWCR & _BV(TWSTO)){
    26c0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    26c4:	84 fd       	sbrc	r24, 4
    26c6:	fc cf       	rjmp	.-8      	; 0x26c0 <twi_stop+0x6>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:462
      continue;
    }
  #endif

  // update twi state
  twi_state = TWI_READY;
    26c8:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <twi_state>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:463
}
    26cc:	08 95       	ret

000026ce <twi_transmit>:
twi_transmit():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:371
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    26ce:	20 91 82 02 	lds	r18, 0x0282	; 0x800282 <twi_txBufferLength>
    26d2:	26 0f       	add	r18, r22
    26d4:	33 27       	eor	r19, r19
    26d6:	33 1f       	adc	r19, r19
    26d8:	21 32       	cpi	r18, 0x21	; 33
    26da:	31 05       	cpc	r19, r1
    26dc:	ec f4       	brge	.+58     	; 0x2718 <twi_transmit+0x4a>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:376
    return 1;
  }

  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    26de:	20 91 de 02 	lds	r18, 0x02DE	; 0x8002de <twi_state>
    26e2:	fc 01       	movw	r30, r24
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	80 e0       	ldi	r24, 0x00	; 0
    26e8:	24 30       	cpi	r18, 0x04	; 4
    26ea:	69 f0       	breq	.+26     	; 0x2706 <twi_transmit+0x38>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:377
    return 2;
    26ec:	82 e0       	ldi	r24, 0x02	; 2
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:387
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;

  return 0;
}
    26ee:	08 95       	ret
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:382
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    twi_txBuffer[twi_txBufferLength+i] = data[i];
    26f0:	a0 91 82 02 	lds	r26, 0x0282	; 0x800282 <twi_txBufferLength>
    26f4:	21 91       	ld	r18, Z+
    26f6:	ac 01       	movw	r20, r24
    26f8:	4e 59       	subi	r20, 0x9E	; 158
    26fa:	5d 4f       	sbci	r21, 0xFD	; 253
    26fc:	a4 0f       	add	r26, r20
    26fe:	b5 2f       	mov	r27, r21
    2700:	b1 1d       	adc	r27, r1
    2702:	2c 93       	st	X, r18
    2704:	01 96       	adiw	r24, 0x01	; 1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:381
  if(TWI_STX != twi_state){
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    2706:	86 17       	cp	r24, r22
    2708:	98 f3       	brcs	.-26     	; 0x26f0 <twi_transmit+0x22>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:384
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
    270a:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <twi_txBufferLength>
    270e:	68 0f       	add	r22, r24
    2710:	60 93 82 02 	sts	0x0282, r22	; 0x800282 <twi_txBufferLength>
    2714:	80 e0       	ldi	r24, 0x00	; 0
    2716:	08 95       	ret
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:372
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    return 1;
    2718:	81 e0       	ldi	r24, 0x01	; 1
    271a:	08 95       	ret

0000271c <TwoWire::peek()>:
peek():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:316
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;

  if(rxBufferIndex < rxBufferLength){
    271c:	e0 91 b5 02 	lds	r30, 0x02B5	; 0x8002b5 <TwoWire::rxBufferIndex>
    2720:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <TwoWire::rxBufferLength>
    2724:	e8 17       	cp	r30, r24
    2726:	30 f4       	brcc	.+12     	; 0x2734 <TwoWire::peek()+0x18>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:317
    value = rxBuffer[rxBufferIndex];
    2728:	f0 e0       	ldi	r31, 0x00	; 0
    272a:	ea 54       	subi	r30, 0x4A	; 74
    272c:	fd 4f       	sbci	r31, 0xFD	; 253
    272e:	80 81       	ld	r24, Z
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	08 95       	ret
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:314
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
    2734:	8f ef       	ldi	r24, 0xFF	; 255
    2736:	9f ef       	ldi	r25, 0xFF	; 255
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:321
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
    2738:	08 95       	ret

0000273a <TwoWire::read()>:
read():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:301
int TwoWire::read(void)
{
  int value = -1;

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    273a:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <TwoWire::rxBufferIndex>
    273e:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <TwoWire::rxBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:298
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
    2742:	2f ef       	ldi	r18, 0xFF	; 255
    2744:	3f ef       	ldi	r19, 0xFF	; 255
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:301

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    2746:	98 17       	cp	r25, r24
    2748:	48 f4       	brcc	.+18     	; 0x275c <TwoWire::read()+0x22>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:302
    value = rxBuffer[rxBufferIndex];
    274a:	e9 2f       	mov	r30, r25
    274c:	f0 e0       	ldi	r31, 0x00	; 0
    274e:	ea 54       	subi	r30, 0x4A	; 74
    2750:	fd 4f       	sbci	r31, 0xFD	; 253
    2752:	20 81       	ld	r18, Z
    2754:	30 e0       	ldi	r19, 0x00	; 0
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:303
    ++rxBufferIndex;
    2756:	9f 5f       	subi	r25, 0xFF	; 255
    2758:	90 93 b5 02 	sts	0x02B5, r25	; 0x8002b5 <TwoWire::rxBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:307
  }

  return value;
}
    275c:	c9 01       	movw	r24, r18
    275e:	08 95       	ret

00002760 <TwoWire::available()>:
available():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:290
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
    2760:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <TwoWire::rxBufferLength>
    2764:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <TwoWire::rxBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:291
}
    2768:	89 1b       	sub	r24, r25
    276a:	99 0b       	sbc	r25, r25
    276c:	08 95       	ret

0000276e <TwoWire::write(unsigned char const*, unsigned int)>:
write():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:271

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    276e:	cf 92       	push	r12
    2770:	df 92       	push	r13
    2772:	ef 92       	push	r14
    2774:	ff 92       	push	r15
    2776:	0f 93       	push	r16
    2778:	1f 93       	push	r17
    277a:	cf 93       	push	r28
    277c:	df 93       	push	r29
    277e:	7c 01       	movw	r14, r24
    2780:	cb 01       	movw	r24, r22
    2782:	8a 01       	movw	r16, r20
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:272
  if(transmitting){
    2784:	20 91 e2 02 	lds	r18, 0x02E2	; 0x8002e2 <TwoWire::transmitting>
    2788:	22 23       	and	r18, r18
    278a:	89 f0       	breq	.+34     	; 0x27ae <TwoWire::write(unsigned char const*, unsigned int)+0x40>
    278c:	eb 01       	movw	r28, r22
    278e:	6b 01       	movw	r12, r22
    2790:	c4 0e       	add	r12, r20
    2792:	d5 1e       	adc	r13, r21
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:274
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    2794:	cc 15       	cp	r28, r12
    2796:	dd 05       	cpc	r29, r13
    2798:	69 f0       	breq	.+26     	; 0x27b4 <TwoWire::write(unsigned char const*, unsigned int)+0x46>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:275
      write(data[i]);
    279a:	69 91       	ld	r22, Y+
    279c:	d7 01       	movw	r26, r14
    279e:	ed 91       	ld	r30, X+
    27a0:	fc 91       	ld	r31, X
    27a2:	01 90       	ld	r0, Z+
    27a4:	f0 81       	ld	r31, Z
    27a6:	e0 2d       	mov	r30, r0
    27a8:	c7 01       	movw	r24, r14
    27aa:	09 95       	icall
    27ac:	f3 cf       	rjmp	.-26     	; 0x2794 <TwoWire::write(unsigned char const*, unsigned int)+0x26>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:280
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    27ae:	64 2f       	mov	r22, r20
    27b0:	0e 94 67 13 	call	0x26ce	; 0x26ce <twi_transmit>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:283
  }
  return quantity;
}
    27b4:	c8 01       	movw	r24, r16
    27b6:	df 91       	pop	r29
    27b8:	cf 91       	pop	r28
    27ba:	1f 91       	pop	r17
    27bc:	0f 91       	pop	r16
    27be:	ff 90       	pop	r15
    27c0:	ef 90       	pop	r14
    27c2:	df 90       	pop	r13
    27c4:	cf 90       	pop	r12
    27c6:	08 95       	ret

000027c8 <TwoWire::write(unsigned char)>:
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:246

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
    27c8:	cf 93       	push	r28
    27ca:	df 93       	push	r29
    27cc:	1f 92       	push	r1
    27ce:	cd b7       	in	r28, 0x3d	; 61
    27d0:	de b7       	in	r29, 0x3e	; 62
    27d2:	69 83       	std	Y+1, r22	; 0x01
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:247
  if(transmitting){
    27d4:	20 91 e2 02 	lds	r18, 0x02E2	; 0x8002e2 <TwoWire::transmitting>
    27d8:	22 23       	and	r18, r18
    27da:	f9 f0       	breq	.+62     	; 0x281a <TwoWire::write(unsigned char)+0x52>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:250
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= TWI_BUFFER_SIZE){
    27dc:	20 91 df 02 	lds	r18, 0x02DF	; 0x8002df <TwoWire::txBufferLength>
    27e0:	20 32       	cpi	r18, 0x20	; 32
    27e2:	58 f0       	brcs	.+22     	; 0x27fa <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/Print.h:44
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    27e4:	21 e0       	ldi	r18, 0x01	; 1
    27e6:	30 e0       	ldi	r19, 0x00	; 0
    27e8:	fc 01       	movw	r30, r24
    27ea:	33 83       	std	Z+3, r19	; 0x03
    27ec:	22 83       	std	Z+2, r18	; 0x02
write():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:252
      setWriteError();
      return 0;
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	80 e0       	ldi	r24, 0x00	; 0
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:265
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
}
    27f2:	0f 90       	pop	r0
    27f4:	df 91       	pop	r29
    27f6:	cf 91       	pop	r28
    27f8:	08 95       	ret
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:255
    if(txBufferLength >= TWI_BUFFER_SIZE){
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    27fa:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <TwoWire::txBufferIndex>
    27fe:	e8 2f       	mov	r30, r24
    2800:	f0 e0       	ldi	r31, 0x00	; 0
    2802:	ee 5b       	subi	r30, 0xBE	; 190
    2804:	fd 4f       	sbci	r31, 0xFD	; 253
    2806:	99 81       	ldd	r25, Y+1	; 0x01
    2808:	90 83       	st	Z, r25
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:256
    ++txBufferIndex;
    280a:	8f 5f       	subi	r24, 0xFF	; 255
    280c:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <TwoWire::txBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:258
    // update amount in buffer
    txBufferLength = txBufferIndex;
    2810:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <TwoWire::txBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:264
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
    2814:	81 e0       	ldi	r24, 0x01	; 1
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	ec cf       	rjmp	.-40     	; 0x27f2 <TwoWire::write(unsigned char)+0x2a>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:262
    // update amount in buffer
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    281a:	61 e0       	ldi	r22, 0x01	; 1
    281c:	ce 01       	movw	r24, r28
    281e:	01 96       	adiw	r24, 0x01	; 1
    2820:	0e 94 67 13 	call	0x26ce	; 0x26ce <twi_transmit>
    2824:	f7 cf       	rjmp	.-18     	; 0x2814 <TwoWire::write(unsigned char)+0x4c>

00002826 <TwoWire::write(int) [clone .constprop.33]>:
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.h:87
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    2826:	68 2f       	mov	r22, r24
    2828:	83 e1       	ldi	r24, 0x13	; 19
    282a:	93 e0       	ldi	r25, 0x03	; 3
    282c:	0c 94 e4 13 	jmp	0x27c8	; 0x27c8 <TwoWire::write(unsigned char)>

00002830 <TwoWire::endTransmission()>:
endTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:225
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
  // transmit buffer (blocking)
  uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
    2830:	90 91 df 02 	lds	r25, 0x02DF	; 0x8002df <TwoWire::txBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:269
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    return 1;
    2834:	81 e0       	ldi	r24, 0x01	; 1
twi_writeTo():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:268
 *          5 .. timeout
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    2836:	91 32       	cpi	r25, 0x21	; 33
    2838:	08 f0       	brcs	.+2      	; 0x283c <TwoWire::endTransmission()+0xc>
    283a:	43 c0       	rjmp	.+134    	; 0x28c2 <TwoWire::endTransmission()+0x92>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:282
        twi_handleTimeout(twi_do_reset_on_timeout);
        return (5);
      }
    }
  #else
    while(TWI_READY != twi_state){
    283c:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <twi_state>
    2840:	81 11       	cpse	r24, r1
    2842:	fc cf       	rjmp	.-8      	; 0x283c <TwoWire::endTransmission()+0xc>
endTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:225
    2844:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <TwoWire::txAddress>
twi_writeTo():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:287
      continue;
    }
  #endif

  twi_state = TWI_MTX;
    2848:	22 e0       	ldi	r18, 0x02	; 2
    284a:	20 93 de 02 	sts	0x02DE, r18	; 0x8002de <twi_state>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:288
  twi_sendStop = sendStop;
    284e:	21 e0       	ldi	r18, 0x01	; 1
    2850:	20 93 dd 02 	sts	0x02DD, r18	; 0x8002dd <twi_sendStop>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:290
  // reset error state (0xFF.. no error occurred)
  twi_error = 0xFF;
    2854:	2f ef       	ldi	r18, 0xFF	; 255
    2856:	20 93 dc 02 	sts	0x02DC, r18	; 0x8002dc <twi_error>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:293

  // initialize buffer iteration vars
  twi_masterBuffer = data;
    285a:	22 e4       	ldi	r18, 0x42	; 66
    285c:	32 e0       	ldi	r19, 0x02	; 2
    285e:	30 93 db 02 	sts	0x02DB, r19	; 0x8002db <twi_masterBuffer+0x1>
    2862:	20 93 da 02 	sts	0x02DA, r18	; 0x8002da <twi_masterBuffer>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:294
  twi_masterBufferIndex = 0;
    2866:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <twi_masterBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:295
  twi_masterBufferLength = length;
    286a:	90 93 d8 02 	sts	0x02D8, r25	; 0x8002d8 <twi_masterBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:298

  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    286e:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <twi_slarw>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:299
  twi_slarw |= address << 1;
    2872:	90 91 d7 02 	lds	r25, 0x02D7	; 0x8002d7 <twi_slarw>
    2876:	88 0f       	add	r24, r24
    2878:	89 2b       	or	r24, r25
    287a:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <twi_slarw>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:304

  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    287e:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <twi_inRepStart>
    2882:	81 30       	cpi	r24, 0x01	; 1
    2884:	29 f5       	brne	.+74     	; 0x28d0 <TwoWire::endTransmission()+0xa0>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:311
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // Remember, we're dealing with an ASYNC ISR
    2886:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <twi_inRepStart>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:322
          return (5);
        }
      } while(TWCR & _BV(TWWC));
    #else
      do {
        TWDR = twi_slarw;
    288a:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <twi_slarw>
    288e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:323
      } while(TWCR & _BV(TWWC));
    2892:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2896:	83 fd       	sbrc	r24, 3
    2898:	f8 cf       	rjmp	.-16     	; 0x288a <TwoWire::endTransmission()+0x5a>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:325
    #endif
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
    289a:	85 ec       	ldi	r24, 0xC5	; 197
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:329
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
    289c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:341
        twi_handleTimeout(twi_do_reset_on_timeout);
        return (5);
      }
    }
  #else
    while(wait && (TWI_MTX == twi_state)){
    28a0:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <twi_state>
    28a4:	82 30       	cpi	r24, 0x02	; 2
    28a6:	e1 f3       	breq	.-8      	; 0x28a0 <TwoWire::endTransmission()+0x70>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:346
      continue;
    }
  #endif

  if (twi_error == 0xFF)
    28a8:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <twi_error>
    28ac:	8f 3f       	cpi	r24, 0xFF	; 255
    28ae:	91 f0       	breq	.+36     	; 0x28d4 <TwoWire::endTransmission()+0xa4>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:348
    return 0; // success
  else if (twi_error == TW_MT_SLA_NACK)
    28b0:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <twi_error>
    28b4:	80 32       	cpi	r24, 0x20	; 32
    28b6:	81 f0       	breq	.+32     	; 0x28d8 <TwoWire::endTransmission()+0xa8>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:350
    return 2; // error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    28b8:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <twi_error>
    28bc:	80 33       	cpi	r24, 0x30	; 48
    28be:	71 f0       	breq	.+28     	; 0x28dc <TwoWire::endTransmission()+0xac>
endTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:353
    return 3; // error: data send, nack received
  else
    return 4; // other twi error
    28c0:	84 e0       	ldi	r24, 0x04	; 4
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:227
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    28c2:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <TwoWire::txBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:228
  txBufferLength = 0;
    28c6:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <TwoWire::txBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:230
  // indicate that we are done transmitting
  transmitting = 0;
    28ca:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <TwoWire::transmitting>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:240
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
}
    28ce:	08 95       	ret
twi_writeTo():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:329
    #endif
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
    28d0:	85 ee       	ldi	r24, 0xE5	; 229
    28d2:	e4 cf       	rjmp	.-56     	; 0x289c <TwoWire::endTransmission()+0x6c>
endTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:347
      continue;
    }
  #endif

  if (twi_error == 0xFF)
    return 0; // success
    28d4:	80 e0       	ldi	r24, 0x00	; 0
    28d6:	f5 cf       	rjmp	.-22     	; 0x28c2 <TwoWire::endTransmission()+0x92>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:349
  else if (twi_error == TW_MT_SLA_NACK)
    return 2; // error: address send, nack received
    28d8:	82 e0       	ldi	r24, 0x02	; 2
    28da:	f3 cf       	rjmp	.-26     	; 0x28c2 <TwoWire::endTransmission()+0x92>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:351
  else if (twi_error == TW_MT_DATA_NACK)
    return 3; // error: data send, nack received
    28dc:	83 e0       	ldi	r24, 0x03	; 3
    28de:	f1 cf       	rjmp	.-30     	; 0x28c2 <TwoWire::endTransmission()+0x92>

000028e0 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char) [clone .constprop.47]>:
ssd1306_commandList():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:420
                   number of commands in the list

    @return None (void).
    @note
*/
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
    28e0:	ef 92       	push	r14
    28e2:	ff 92       	push	r15
    28e4:	0f 93       	push	r16
    28e6:	1f 93       	push	r17
    28e8:	cf 93       	push	r28
    28ea:	7c 01       	movw	r14, r24
    28ec:	c6 2f       	mov	r28, r22
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:421
  if (wire) { // I2C
    28ee:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <display+0x1d>
    28f2:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <display+0x1e>
    28f6:	89 2b       	or	r24, r25
    28f8:	09 f4       	brne	.+2      	; 0x28fc <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char) [clone .constprop.47]+0x1c>
    28fa:	4e c0       	rjmp	.+156    	; 0x2998 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char) [clone .constprop.47]+0xb8>
beginTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:206
  txBufferLength = 0;
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
    28fc:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <display+0x21>
    2900:	0e 94 4b 09 	call	0x1296	; 0x1296 <TwoWire::beginTransmission(unsigned char) [clone .constprop.48]>
ssd1306_commandList():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:423
    wire->beginTransmission(i2caddr);
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
    2904:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <display+0x1d>
    2908:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <display+0x1e>
    290c:	dc 01       	movw	r26, r24
    290e:	ed 91       	ld	r30, X+
    2910:	fc 91       	ld	r31, X
    2912:	01 90       	ld	r0, Z+
    2914:	f0 81       	ld	r31, Z
    2916:	e0 2d       	mov	r30, r0
    2918:	60 e0       	ldi	r22, 0x00	; 0
    291a:	09 95       	icall
    291c:	87 01       	movw	r16, r14
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:424
    uint16_t bytesOut = 1;
    291e:	ee 24       	eor	r14, r14
    2920:	e3 94       	inc	r14
    2922:	f1 2c       	mov	r15, r1
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:425
    while (n--) {
    2924:	c1 50       	subi	r28, 0x01	; 1
    2926:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <display+0x1d>
    292a:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <display+0x1e>
    292e:	cf 3f       	cpi	r28, 0xFF	; 255
    2930:	61 f1       	breq	.+88     	; 0x298a <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char) [clone .constprop.47]+0xaa>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:426
      if (bytesOut >= WIRE_MAX) {
    2932:	b0 e2       	ldi	r27, 0x20	; 32
    2934:	eb 16       	cp	r14, r27
    2936:	f1 04       	cpc	r15, r1
    2938:	a8 f0       	brcs	.+42     	; 0x2964 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char) [clone .constprop.47]+0x84>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:427
        wire->endTransmission();
    293a:	0e 94 18 14 	call	0x2830	; 0x2830 <TwoWire::endTransmission()>
beginTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:206
    293e:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <display+0x21>
    2942:	0e 94 4b 09 	call	0x1296	; 0x1296 <TwoWire::beginTransmission(unsigned char) [clone .constprop.48]>
ssd1306_commandList():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:429
        wire->beginTransmission(i2caddr);
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
    2946:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <display+0x1d>
    294a:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <display+0x1e>
    294e:	dc 01       	movw	r26, r24
    2950:	ed 91       	ld	r30, X+
    2952:	fc 91       	ld	r31, X
    2954:	01 90       	ld	r0, Z+
    2956:	f0 81       	ld	r31, Z
    2958:	e0 2d       	mov	r30, r0
    295a:	60 e0       	ldi	r22, 0x00	; 0
    295c:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:430
        bytesOut = 1;
    295e:	ee 24       	eor	r14, r14
    2960:	e3 94       	inc	r14
    2962:	f1 2c       	mov	r15, r1
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:432
      }
      WIRE_WRITE(pgm_read_byte(c++));
    2964:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <display+0x1d>
    2968:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <display+0x1e>
    296c:	f8 01       	movw	r30, r16
    296e:	64 91       	lpm	r22, Z
    2970:	dc 01       	movw	r26, r24
    2972:	ed 91       	ld	r30, X+
    2974:	fc 91       	ld	r31, X
    2976:	01 90       	ld	r0, Z+
    2978:	f0 81       	ld	r31, Z
    297a:	e0 2d       	mov	r30, r0
    297c:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:433
      bytesOut++;
    297e:	bf ef       	ldi	r27, 0xFF	; 255
    2980:	eb 1a       	sub	r14, r27
    2982:	fb 0a       	sbc	r15, r27
    2984:	0f 5f       	subi	r16, 0xFF	; 255
    2986:	1f 4f       	sbci	r17, 0xFF	; 255
    2988:	cd cf       	rjmp	.-102    	; 0x2924 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char) [clone .constprop.47]+0x44>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:441
  } else { // SPI -- transaction started in calling function
    SSD1306_MODE_COMMAND
    while (n--)
      SPIwrite(pgm_read_byte(c++));
  }
}
    298a:	cf 91       	pop	r28
    298c:	1f 91       	pop	r17
    298e:	0f 91       	pop	r16
    2990:	ff 90       	pop	r15
    2992:	ef 90       	pop	r14
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:435
        bytesOut = 1;
      }
      WIRE_WRITE(pgm_read_byte(c++));
      bytesOut++;
    }
    wire->endTransmission();
    2994:	0c 94 18 14 	jmp	0x2830	; 0x2830 <TwoWire::endTransmission()>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:437
  } else { // SPI -- transaction started in calling function
    SSD1306_MODE_COMMAND
    2998:	e0 91 4c 03 	lds	r30, 0x034C	; 0x80034c <display+0x2d>
    299c:	f0 91 4d 03 	lds	r31, 0x034D	; 0x80034d <display+0x2e>
    29a0:	90 81       	ld	r25, Z
    29a2:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <display+0x33>
    29a6:	80 95       	com	r24
    29a8:	89 23       	and	r24, r25
    29aa:	80 83       	st	Z, r24
    29ac:	87 01       	movw	r16, r14
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:438
    while (n--)
    29ae:	c1 50       	subi	r28, 0x01	; 1
    29b0:	08 f4       	brcc	.+2      	; 0x29b4 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char) [clone .constprop.47]+0xd4>
    29b2:	38 c0       	rjmp	.+112    	; 0x2a24 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char) [clone .constprop.47]+0x144>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:439
      SPIwrite(pgm_read_byte(c++));
    29b4:	f8 01       	movw	r30, r16
    29b6:	84 91       	lpm	r24, Z
_ZN16Adafruit_SSD13068SPIwriteEh():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:364
    @return void
    @note   See HAVE_PORTREG which defines if the method uses a port or bit-bang
   method
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    29b8:	20 91 3a 03 	lds	r18, 0x033A	; 0x80033a <display+0x1b>
    29bc:	30 91 3b 03 	lds	r19, 0x033B	; 0x80033b <display+0x1c>
    29c0:	23 2b       	or	r18, r19
    29c2:	29 f0       	breq	.+10     	; 0x29ce <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char) [clone .constprop.47]+0xee>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:365
    (void)spi->transfer(d);
    29c4:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <SPIClass::transfer(unsigned char)>
    29c8:	0f 5f       	subi	r16, 0xFF	; 255
    29ca:	1f 4f       	sbci	r17, 0xFF	; 255
    29cc:	f0 cf       	rjmp	.-32     	; 0x29ae <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char) [clone .constprop.47]+0xce>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:364
    @return void
    @note   See HAVE_PORTREG which defines if the method uses a port or bit-bang
   method
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    29ce:	28 e0       	ldi	r18, 0x08	; 8
    29d0:	30 e0       	ldi	r19, 0x00	; 0
ssd1306_commandList():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:367
    (void)spi->transfer(d);
  } else {
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    29d2:	40 e8       	ldi	r20, 0x80	; 128
    29d4:	e0 91 48 03 	lds	r30, 0x0348	; 0x800348 <display+0x29>
    29d8:	f0 91 49 03 	lds	r31, 0x0349	; 0x800349 <display+0x2a>
    29dc:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <display+0x31>
_ZN16Adafruit_SSD13068SPIwriteEh():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:369
#ifdef HAVE_PORTREG
      if (d & bit)
    29e0:	58 2f       	mov	r21, r24
    29e2:	54 23       	and	r21, r20
    29e4:	d9 f0       	breq	.+54     	; 0x2a1c <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char) [clone .constprop.47]+0x13c>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:370
        *mosiPort |= mosiPinMask;
    29e6:	50 81       	ld	r21, Z
    29e8:	95 2b       	or	r25, r21
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:372
      else
        *mosiPort &= ~mosiPinMask;
    29ea:	90 83       	st	Z, r25
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:373
      *clkPort |= clkPinMask;  // Clock high
    29ec:	e0 91 4a 03 	lds	r30, 0x034A	; 0x80034a <display+0x2b>
    29f0:	f0 91 4b 03 	lds	r31, 0x034B	; 0x80034b <display+0x2c>
    29f4:	90 81       	ld	r25, Z
    29f6:	50 91 51 03 	lds	r21, 0x0351	; 0x800351 <display+0x32>
    29fa:	95 2b       	or	r25, r21
    29fc:	90 83       	st	Z, r25
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:374
      *clkPort &= ~clkPinMask; // Clock low
    29fe:	e0 91 4a 03 	lds	r30, 0x034A	; 0x80034a <display+0x2b>
    2a02:	f0 91 4b 03 	lds	r31, 0x034B	; 0x80034b <display+0x2c>
    2a06:	50 81       	ld	r21, Z
    2a08:	90 91 51 03 	lds	r25, 0x0351	; 0x800351 <display+0x32>
    2a0c:	90 95       	com	r25
    2a0e:	95 23       	and	r25, r21
    2a10:	90 83       	st	Z, r25
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:367
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    (void)spi->transfer(d);
  } else {
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    2a12:	46 95       	lsr	r20
    2a14:	21 50       	subi	r18, 0x01	; 1
    2a16:	31 09       	sbc	r19, r1
    2a18:	e9 f6       	brne	.-70     	; 0x29d4 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char) [clone .constprop.47]+0xf4>
    2a1a:	d6 cf       	rjmp	.-84     	; 0x29c8 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char) [clone .constprop.47]+0xe8>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:372
#ifdef HAVE_PORTREG
      if (d & bit)
        *mosiPort |= mosiPinMask;
      else
        *mosiPort &= ~mosiPinMask;
    2a1c:	50 81       	ld	r21, Z
    2a1e:	90 95       	com	r25
    2a20:	95 23       	and	r25, r21
    2a22:	e3 cf       	rjmp	.-58     	; 0x29ea <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char) [clone .constprop.47]+0x10a>
ssd1306_commandList():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:441
  } else { // SPI -- transaction started in calling function
    SSD1306_MODE_COMMAND
    while (n--)
      SPIwrite(pgm_read_byte(c++));
  }
}
    2a24:	cf 91       	pop	r28
    2a26:	1f 91       	pop	r17
    2a28:	0f 91       	pop	r16
    2a2a:	ff 90       	pop	r15
    2a2c:	ef 90       	pop	r14
    2a2e:	08 95       	ret

00002a30 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>:
ssd1306_command1():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:396
                   the command character to send to the display.
                   Refer to ssd1306 data sheet for commands
    @return None (void).
    @note
*/
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
    2a30:	1f 93       	push	r17
    2a32:	cf 93       	push	r28
    2a34:	df 93       	push	r29
    2a36:	ec 01       	movw	r28, r24
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:397
  if (wire) { // I2C
    2a38:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a3a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a3c:	89 2b       	or	r24, r25
    2a3e:	f9 f0       	breq	.+62     	; 0x2a7e <Adafruit_SSD1306::ssd1306_command1(unsigned char)+0x4e>
    2a40:	16 2f       	mov	r17, r22
beginTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:206
    2a42:	89 a1       	ldd	r24, Y+33	; 0x21
    2a44:	0e 94 4b 09 	call	0x1296	; 0x1296 <TwoWire::beginTransmission(unsigned char) [clone .constprop.48]>
ssd1306_command1():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:399
    wire->beginTransmission(i2caddr);
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
    2a48:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a4a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a4c:	dc 01       	movw	r26, r24
    2a4e:	ed 91       	ld	r30, X+
    2a50:	fc 91       	ld	r31, X
    2a52:	01 90       	ld	r0, Z+
    2a54:	f0 81       	ld	r31, Z
    2a56:	e0 2d       	mov	r30, r0
    2a58:	60 e0       	ldi	r22, 0x00	; 0
    2a5a:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:400
    WIRE_WRITE(c);
    2a5c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a5e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a60:	dc 01       	movw	r26, r24
    2a62:	ed 91       	ld	r30, X+
    2a64:	fc 91       	ld	r31, X
    2a66:	01 90       	ld	r0, Z+
    2a68:	f0 81       	ld	r31, Z
    2a6a:	e0 2d       	mov	r30, r0
    2a6c:	61 2f       	mov	r22, r17
    2a6e:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:401
    wire->endTransmission();
    2a70:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a72:	9e 8d       	ldd	r25, Y+30	; 0x1e
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:406
  } else { // SPI (hw or soft) -- transaction started in calling function
    SSD1306_MODE_COMMAND
    SPIwrite(c);
  }
}
    2a74:	df 91       	pop	r29
    2a76:	cf 91       	pop	r28
    2a78:	1f 91       	pop	r17
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:401
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
  if (wire) { // I2C
    wire->beginTransmission(i2caddr);
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
    WIRE_WRITE(c);
    wire->endTransmission();
    2a7a:	0c 94 18 14 	jmp	0x2830	; 0x2830 <TwoWire::endTransmission()>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:403
  } else { // SPI (hw or soft) -- transaction started in calling function
    SSD1306_MODE_COMMAND
    2a7e:	ad a5       	ldd	r26, Y+45	; 0x2d
    2a80:	be a5       	ldd	r27, Y+46	; 0x2e
    2a82:	9c 91       	ld	r25, X
    2a84:	8b a9       	ldd	r24, Y+51	; 0x33
    2a86:	80 95       	com	r24
    2a88:	89 23       	and	r24, r25
    2a8a:	8c 93       	st	X, r24
_ZN16Adafruit_SSD13068SPIwriteEh():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:364
    @return void
    @note   See HAVE_PORTREG which defines if the method uses a port or bit-bang
   method
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    2a8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a90:	89 2b       	or	r24, r25
    2a92:	31 f0       	breq	.+12     	; 0x2aa0 <Adafruit_SSD1306::ssd1306_command1(unsigned char)+0x70>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:365
    (void)spi->transfer(d);
    2a94:	86 2f       	mov	r24, r22
ssd1306_command1():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:406
    wire->endTransmission();
  } else { // SPI (hw or soft) -- transaction started in calling function
    SSD1306_MODE_COMMAND
    SPIwrite(c);
  }
}
    2a96:	df 91       	pop	r29
    2a98:	cf 91       	pop	r28
    2a9a:	1f 91       	pop	r17
_ZN16Adafruit_SSD13068SPIwriteEh():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:365
    @note   See HAVE_PORTREG which defines if the method uses a port or bit-bang
   method
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    (void)spi->transfer(d);
    2a9c:	0c 94 5d 0d 	jmp	0x1aba	; 0x1aba <SPIClass::transfer(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:364
    @return void
    @note   See HAVE_PORTREG which defines if the method uses a port or bit-bang
   method
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    2aa0:	28 e0       	ldi	r18, 0x08	; 8
    2aa2:	30 e0       	ldi	r19, 0x00	; 0
ssd1306_command1():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:367
    (void)spi->transfer(d);
  } else {
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    2aa4:	80 e8       	ldi	r24, 0x80	; 128
    2aa6:	a9 a5       	ldd	r26, Y+41	; 0x29
    2aa8:	ba a5       	ldd	r27, Y+42	; 0x2a
    2aaa:	99 a9       	ldd	r25, Y+49	; 0x31
_ZN16Adafruit_SSD13068SPIwriteEh():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:369
#ifdef HAVE_PORTREG
      if (d & bit)
    2aac:	46 2f       	mov	r20, r22
    2aae:	48 23       	and	r20, r24
    2ab0:	c1 f0       	breq	.+48     	; 0x2ae2 <Adafruit_SSD1306::ssd1306_command1(unsigned char)+0xb2>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:370
        *mosiPort |= mosiPinMask;
    2ab2:	4c 91       	ld	r20, X
    2ab4:	94 2b       	or	r25, r20
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:372
      else
        *mosiPort &= ~mosiPinMask;
    2ab6:	9c 93       	st	X, r25
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:373
      *clkPort |= clkPinMask;  // Clock high
    2ab8:	ab a5       	ldd	r26, Y+43	; 0x2b
    2aba:	bc a5       	ldd	r27, Y+44	; 0x2c
    2abc:	9c 91       	ld	r25, X
    2abe:	4a a9       	ldd	r20, Y+50	; 0x32
    2ac0:	94 2b       	or	r25, r20
    2ac2:	9c 93       	st	X, r25
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:374
      *clkPort &= ~clkPinMask; // Clock low
    2ac4:	ab a5       	ldd	r26, Y+43	; 0x2b
    2ac6:	bc a5       	ldd	r27, Y+44	; 0x2c
    2ac8:	4c 91       	ld	r20, X
    2aca:	9a a9       	ldd	r25, Y+50	; 0x32
    2acc:	90 95       	com	r25
    2ace:	94 23       	and	r25, r20
    2ad0:	9c 93       	st	X, r25
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:367
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    (void)spi->transfer(d);
  } else {
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    2ad2:	86 95       	lsr	r24
    2ad4:	21 50       	subi	r18, 0x01	; 1
    2ad6:	31 09       	sbc	r19, r1
    2ad8:	31 f7       	brne	.-52     	; 0x2aa6 <Adafruit_SSD1306::ssd1306_command1(unsigned char)+0x76>
ssd1306_command1():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:406
    wire->endTransmission();
  } else { // SPI (hw or soft) -- transaction started in calling function
    SSD1306_MODE_COMMAND
    SPIwrite(c);
  }
}
    2ada:	df 91       	pop	r29
    2adc:	cf 91       	pop	r28
    2ade:	1f 91       	pop	r17
    2ae0:	08 95       	ret
_ZN16Adafruit_SSD13068SPIwriteEh():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:372
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
#ifdef HAVE_PORTREG
      if (d & bit)
        *mosiPort |= mosiPinMask;
      else
        *mosiPort &= ~mosiPinMask;
    2ae2:	4c 91       	ld	r20, X
    2ae4:	90 95       	com	r25
    2ae6:	94 23       	and	r25, r20
    2ae8:	e6 cf       	rjmp	.-52     	; 0x2ab6 <Adafruit_SSD1306::ssd1306_command1(unsigned char)+0x86>

00002aea <Adafruit_SSD1306::invertDisplay(bool)>:
invertDisplay():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1178
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing SSD1306_BLACK (value 0) pixels will actually draw
   white, SSD1306_WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(bool i) {
    2aea:	1f 93       	push	r17
    2aec:	cf 93       	push	r28
    2aee:	df 93       	push	r29
    2af0:	ec 01       	movw	r28, r24
    2af2:	16 2f       	mov	r17, r22
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1179
  TRANSACTION_START
    2af4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2af6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2af8:	89 2b       	or	r24, r25
    2afa:	b1 f1       	breq	.+108    	; 0x2b68 <Adafruit_SSD1306::invertDisplay(bool)+0x7e>
twi_setFrequency():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:142
 * Input    Clock frequency
 * Output   none
 */
void twi_setFrequency(uint32_t frequency)
{
  TWBR = ((F_CPU / frequency) - 16) / 2;
    2afc:	2d a9       	ldd	r18, Y+53	; 0x35
    2afe:	3e a9       	ldd	r19, Y+54	; 0x36
    2b00:	4f a9       	ldd	r20, Y+55	; 0x37
    2b02:	58 ad       	ldd	r21, Y+56	; 0x38
    2b04:	60 e0       	ldi	r22, 0x00	; 0
    2b06:	74 e2       	ldi	r23, 0x24	; 36
    2b08:	84 ef       	ldi	r24, 0xF4	; 244
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	0e 94 b0 22 	call	0x4560	; 0x4560 <__udivmodsi4>
    2b10:	20 51       	subi	r18, 0x10	; 16
    2b12:	31 09       	sbc	r19, r1
    2b14:	41 09       	sbc	r20, r1
    2b16:	51 09       	sbc	r21, r1
    2b18:	56 95       	lsr	r21
    2b1a:	47 95       	ror	r20
    2b1c:	37 95       	ror	r19
    2b1e:	27 95       	ror	r18
    2b20:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
invertDisplay():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1180
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
    2b24:	66 ea       	ldi	r22, 0xA6	; 166
    2b26:	11 11       	cpse	r17, r1
    2b28:	67 ea       	ldi	r22, 0xA7	; 167
    2b2a:	ce 01       	movw	r24, r28
    2b2c:	0e 94 18 15 	call	0x2a30	; 0x2a30 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1181
  TRANSACTION_END
    2b30:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b32:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b34:	89 2b       	or	r24, r25
    2b36:	41 f1       	breq	.+80     	; 0x2b88 <Adafruit_SSD1306::invertDisplay(bool)+0x9e>
twi_setFrequency():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:142
    2b38:	29 ad       	ldd	r18, Y+57	; 0x39
    2b3a:	3a ad       	ldd	r19, Y+58	; 0x3a
    2b3c:	4b ad       	ldd	r20, Y+59	; 0x3b
    2b3e:	5c ad       	ldd	r21, Y+60	; 0x3c
    2b40:	60 e0       	ldi	r22, 0x00	; 0
    2b42:	74 e2       	ldi	r23, 0x24	; 36
    2b44:	84 ef       	ldi	r24, 0xF4	; 244
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	0e 94 b0 22 	call	0x4560	; 0x4560 <__udivmodsi4>
    2b4c:	20 51       	subi	r18, 0x10	; 16
    2b4e:	31 09       	sbc	r19, r1
    2b50:	41 09       	sbc	r20, r1
    2b52:	51 09       	sbc	r21, r1
    2b54:	56 95       	lsr	r21
    2b56:	47 95       	ror	r20
    2b58:	37 95       	ror	r19
    2b5a:	27 95       	ror	r18
    2b5c:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
invertDisplay():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1182
}
    2b60:	df 91       	pop	r29
    2b62:	cf 91       	pop	r28
    2b64:	1f 91       	pop	r17
    2b66:	08 95       	ret
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1179
            different pixel mode of the display hardware is used. When
            enabled, drawing SSD1306_BLACK (value 0) pixels will actually draw
   white, SSD1306_WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(bool i) {
  TRANSACTION_START
    2b68:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b6c:	89 2b       	or	r24, r25
    2b6e:	21 f0       	breq	.+8      	; 0x2b78 <Adafruit_SSD1306::invertDisplay(bool)+0x8e>
    2b70:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b72:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b74:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <SPIClass::beginTransaction(SPISettings)>
    2b78:	ef a5       	ldd	r30, Y+47	; 0x2f
    2b7a:	f8 a9       	ldd	r31, Y+48	; 0x30
    2b7c:	90 81       	ld	r25, Z
    2b7e:	8c a9       	ldd	r24, Y+52	; 0x34
    2b80:	80 95       	com	r24
    2b82:	89 23       	and	r24, r25
    2b84:	80 83       	st	Z, r24
    2b86:	ce cf       	rjmp	.-100    	; 0x2b24 <Adafruit_SSD1306::invertDisplay(bool)+0x3a>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1181
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
  TRANSACTION_END
    2b88:	ef a5       	ldd	r30, Y+47	; 0x2f
    2b8a:	f8 a9       	ldd	r31, Y+48	; 0x30
    2b8c:	80 81       	ld	r24, Z
    2b8e:	9c a9       	ldd	r25, Y+52	; 0x34
    2b90:	89 2b       	or	r24, r25
    2b92:	80 83       	st	Z, r24
    2b94:	e5 cf       	rjmp	.-54     	; 0x2b60 <Adafruit_SSD1306::invertDisplay(bool)+0x76>

00002b96 <Print::availableForWrite()>:
availableForWrite():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/Print.h:63
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	80 e0       	ldi	r24, 0x00	; 0
    2b9a:	08 95       	ret

00002b9c <SI4844::waitInterrupt() [clone .isra.2]>:
_ZN6SI484413waitInterruptEv.isra.2():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:166
 * @details It can occur, for example, when you use the analog tuner.  
 */
void SI4844::waitInterrupt(void)
{
    
    while (!data_from_device)
    2b9c:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <_ZL16data_from_device.lto_priv.60>
    2ba0:	88 23       	and	r24, r24
    2ba2:	e1 f3       	breq	.-8      	; 0x2b9c <SI4844::waitInterrupt() [clone .isra.2]>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:169
        ;
        
}
    2ba4:	08 95       	ret

00002ba6 <SI4844::reset() [clone .constprop.14]>:
reset():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:363
 * @ingroup GB1
 * @brief Resets the SI4844 device
 * @details Prepares the system  to be started.
 * @see pages 7, 8, 9 and 10 of the programming guide.
 */
void SI4844::reset()
    2ba6:	cf 93       	push	r28
    2ba8:	df 93       	push	r29
twi_setFrequency():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:142
    2baa:	88 e1       	ldi	r24, 0x18	; 24
    2bac:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
reset():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:368
{
    // waitToSend();

    setClockLow(); // See *Note on page 5
    data_from_device = false;
    2bb0:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <_ZL16data_from_device.lto_priv.60>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:369
    digitalWrite(resetPin, LOW);
    2bb4:	c3 ee       	ldi	r28, 0xE3	; 227
    2bb6:	d2 e0       	ldi	r29, 0x02	; 2
    2bb8:	60 e0       	ldi	r22, 0x00	; 0
    2bba:	8e 85       	ldd	r24, Y+14	; 0x0e
    2bbc:	0e 94 f6 09 	call	0x13ec	; 0x13ec <digitalWrite>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:370
    delayMicroseconds(200);
    2bc0:	88 ec       	ldi	r24, 0xC8	; 200
    2bc2:	90 e0       	ldi	r25, 0x00	; 0
    2bc4:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <delayMicroseconds>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:371
    digitalWrite(resetPin, HIGH);
    2bc8:	61 e0       	ldi	r22, 0x01	; 1
    2bca:	8e 85       	ldd	r24, Y+14	; 0x0e
    2bcc:	0e 94 f6 09 	call	0x13ec	; 0x13ec <digitalWrite>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:372
    delayMicroseconds(200);
    2bd0:	88 ec       	ldi	r24, 0xC8	; 200
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <delayMicroseconds>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:373
    waitInterrupt();
    2bd8:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <SI4844::waitInterrupt() [clone .isra.2]>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:374
    delayMicroseconds(2500);
    2bdc:	84 ec       	ldi	r24, 0xC4	; 196
    2bde:	99 e0       	ldi	r25, 0x09	; 9
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:375
}
    2be0:	df 91       	pop	r29
    2be2:	cf 91       	pop	r28
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:374
    digitalWrite(resetPin, LOW);
    delayMicroseconds(200);
    digitalWrite(resetPin, HIGH);
    delayMicroseconds(200);
    waitInterrupt();
    delayMicroseconds(2500);
    2be4:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <delayMicroseconds>

00002be8 <SI4844::getStatus() [clone .constprop.12]>:
beginTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:206
    2be8:	81 e1       	ldi	r24, 0x11	; 17
    2bea:	0e 94 4b 09 	call	0x1296	; 0x1296 <TwoWire::beginTransmission(unsigned char) [clone .constprop.48]>
getStatus():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:987
 * @details this method updates the first byte of all_receiver_status member variable
 * @return  pointer to a structure type si4844_device_status
 */
 si4844_device_status *SI4844::getStatus() {
    Wire.beginTransmission(SI4844_ADDRESS);
    Wire.write(ATDD_GET_STATUS);
    2bee:	80 ee       	ldi	r24, 0xE0	; 224
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	0e 94 13 14 	call	0x2826	; 0x2826 <TwoWire::write(int) [clone .constprop.33]>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:988
    Wire.endTransmission();
    2bf6:	83 e1       	ldi	r24, 0x13	; 19
    2bf8:	93 e0       	ldi	r25, 0x03	; 3
    2bfa:	0e 94 18 14 	call	0x2830	; 0x2830 <TwoWire::endTransmission()>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:989
    delayMicroseconds(2000);
    2bfe:	80 ed       	ldi	r24, 0xD0	; 208
    2c00:	97 e0       	ldi	r25, 0x07	; 7
    2c02:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <delayMicroseconds>
twi_readFrom():
    2c06:	61 e0       	ldi	r22, 0x01	; 1
    2c08:	81 e1       	ldi	r24, 0x11	; 17
    2c0a:	0e 94 b5 09 	call	0x136a	; 0x136a <twi_readFrom.part.0.constprop.38>
requestFrom():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:120
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    2c0e:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <TwoWire::rxBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:121
  rxBufferLength = read;
    2c12:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <TwoWire::rxBufferLength>
getStatus():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:991
    Wire.requestFrom(SI4844_ADDRESS, 1);
    all_receiver_status.raw[0] = Wire.read();
    2c16:	83 e1       	ldi	r24, 0x13	; 19
    2c18:	93 e0       	ldi	r25, 0x03	; 3
    2c1a:	0e 94 9d 13 	call	0x273a	; 0x273a <TwoWire::read()>
    2c1e:	e3 ee       	ldi	r30, 0xE3	; 227
    2c20:	f2 e0       	ldi	r31, 0x02	; 2
    2c22:	81 83       	std	Z+1, r24	; 0x01
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:992
    device_status.raw = all_receiver_status.raw[0];
    2c24:	80 83       	st	Z, r24
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:994
    return &device_status; 
 }
    2c26:	cf 01       	movw	r24, r30
    2c28:	08 95       	ret

00002c2a <SI4844::getAllReceiverInfo() [clone .constprop.31]>:
getAllReceiverInfo():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1004
 * @details Use this method only if you want to deal with that information by yourself. 
 * @details all data of the receiver is storted in "all_receiver_status" member variable 
 * @details This library has other methods to get that information easier. 
 * @return pointer to a structure type si4844_status_response
 */
si4844_status_response *SI4844::getAllReceiverInfo()
    2c2a:	cf 93       	push	r28
    2c2c:	df 93       	push	r29
twi_setFrequency():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:142
    2c2e:	20 91 f8 02 	lds	r18, 0x02F8	; 0x8002f8 <rx+0x15>
    2c32:	30 91 f9 02 	lds	r19, 0x02F9	; 0x8002f9 <rx+0x16>
    2c36:	40 91 fa 02 	lds	r20, 0x02FA	; 0x8002fa <rx+0x17>
    2c3a:	50 91 fb 02 	lds	r21, 0x02FB	; 0x8002fb <rx+0x18>
    2c3e:	60 e0       	ldi	r22, 0x00	; 0
    2c40:	74 e2       	ldi	r23, 0x24	; 36
    2c42:	84 ef       	ldi	r24, 0xF4	; 244
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	0e 94 b0 22 	call	0x4560	; 0x4560 <__udivmodsi4>
    2c4a:	20 51       	subi	r18, 0x10	; 16
    2c4c:	31 09       	sbc	r19, r1
    2c4e:	41 09       	sbc	r20, r1
    2c50:	51 09       	sbc	r21, r1
    2c52:	56 95       	lsr	r21
    2c54:	47 95       	ror	r20
    2c56:	37 95       	ror	r19
    2c58:	27 95       	ror	r18
    2c5a:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
beginTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:206
  txBufferLength = 0;
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
    2c5e:	81 e1       	ldi	r24, 0x11	; 17
    2c60:	0e 94 4b 09 	call	0x1296	; 0x1296 <TwoWire::beginTransmission(unsigned char) [clone .constprop.48]>
getAllReceiverInfo():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1010
{
    setClockHigh();
    do
    {
        Wire.beginTransmission(SI4844_ADDRESS);
        Wire.write(ATDD_GET_STATUS);
    2c64:	80 ee       	ldi	r24, 0xE0	; 224
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	0e 94 13 14 	call	0x2826	; 0x2826 <TwoWire::write(int) [clone .constprop.33]>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1011
        Wire.endTransmission();
    2c6c:	83 e1       	ldi	r24, 0x13	; 19
    2c6e:	93 e0       	ldi	r25, 0x03	; 3
    2c70:	0e 94 18 14 	call	0x2830	; 0x2830 <TwoWire::endTransmission()>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1012
        delayMicroseconds(2500);
    2c74:	84 ec       	ldi	r24, 0xC4	; 196
    2c76:	99 e0       	ldi	r25, 0x09	; 9
    2c78:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <delayMicroseconds>
twi_readFrom():
    2c7c:	64 e0       	ldi	r22, 0x04	; 4
    2c7e:	81 e1       	ldi	r24, 0x11	; 17
    2c80:	0e 94 b5 09 	call	0x136a	; 0x136a <twi_readFrom.part.0.constprop.38>
requestFrom():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:120
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    2c84:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <TwoWire::rxBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:121
  rxBufferLength = read;
    2c88:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <TwoWire::rxBufferLength>
    2c8c:	c4 ee       	ldi	r28, 0xE4	; 228
    2c8e:	d2 e0       	ldi	r29, 0x02	; 2
getAllReceiverInfo():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1016
        // request 4 bytes response from atdd (si4844)
        Wire.requestFrom(SI4844_ADDRESS, 0x04);
        for (int i = 0; i < 4; i++)
            all_receiver_status.raw[i] = Wire.read();
    2c90:	83 e1       	ldi	r24, 0x13	; 19
    2c92:	93 e0       	ldi	r25, 0x03	; 3
    2c94:	0e 94 9d 13 	call	0x273a	; 0x273a <TwoWire::read()>
    2c98:	89 93       	st	Y+, r24
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1015
        Wire.write(ATDD_GET_STATUS);
        Wire.endTransmission();
        delayMicroseconds(2500);
        // request 4 bytes response from atdd (si4844)
        Wire.requestFrom(SI4844_ADDRESS, 0x04);
        for (int i = 0; i < 4; i++)
    2c9a:	82 e0       	ldi	r24, 0x02	; 2
    2c9c:	c8 3e       	cpi	r28, 0xE8	; 232
    2c9e:	d8 07       	cpc	r29, r24
    2ca0:	b9 f7       	brne	.-18     	; 0x2c90 <SI4844::getAllReceiverInfo() [clone .constprop.31]+0x66>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1019
            all_receiver_status.raw[i] = Wire.read();
        // check response error. Exit when no error found. See page 7.
        // if INFORDY is 0, the system is not ready yet. You may need to check if CHFREQ is 0 too.
    } while ( all_receiver_status.refined.INFORDY == 0 );
    2ca2:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <rx+0x1>
    2ca6:	84 ff       	sbrs	r24, 4
    2ca8:	da cf       	rjmp	.-76     	; 0x2c5e <SI4844::getAllReceiverInfo() [clone .constprop.31]+0x34>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1021

    device_status.raw = all_receiver_status.raw[0];
    2caa:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <rx>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1023
    return &all_receiver_status;
}
    2cae:	84 ee       	ldi	r24, 0xE4	; 228
    2cb0:	92 e0       	ldi	r25, 0x02	; 2
    2cb2:	df 91       	pop	r29
    2cb4:	cf 91       	pop	r28
    2cb6:	08 95       	ret

00002cb8 <SI4844::getFrequencyInteger() [clone .constprop.30]>:
getFrequencyInteger():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1149
 * @details For example: FM, 103900 KHz (103.9 MHz); SW, 7335 KHz (7.34 MHz, 41m)   
 * @details It is useful to save memory
 * 
 * @return uint32_t current frequency in KHz.  
 */
uint32_t SI4844::getFrequencyInteger(void)
    2cb8:	cf 92       	push	r12
    2cba:	df 92       	push	r13
    2cbc:	ef 92       	push	r14
    2cbe:	ff 92       	push	r15
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1151
{
    this->getAllReceiverInfo();
    2cc0:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <SI4844::getAllReceiverInfo() [clone .constprop.31]>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1156
    int addFactor = 0;
    int multFactor = 1;
    // Check CHFREQ bit[15] MSB = 1
    // See Page 15 of Si48XX ATDD PROGRAMMING GUIDE
    if (all_receiver_status.refined.BANDMODE == 0)
    2cc4:	90 91 e5 02 	lds	r25, 0x02E5	; 0x8002e5 <rx+0x2>
    2cc8:	90 7c       	andi	r25, 0xC0	; 192
    2cca:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <rx+0x3>
    2cce:	91 11       	cpse	r25, r1
    2cd0:	54 c0       	rjmp	.+168    	; 0x2d7a <SI4844::getFrequencyInteger() [clone .constprop.30]+0xc2>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1159
    {
        multFactor = 100;
        if (all_receiver_status.refined.d1 & 0b00001000)
    2cd2:	98 2f       	mov	r25, r24
    2cd4:	92 95       	swap	r25
    2cd6:	9f 70       	andi	r25, 0x0F	; 15
    2cd8:	87 ff       	sbrs	r24, 7
    2cda:	64 c0       	rjmp	.+200    	; 0x2da4 <SI4844::getFrequencyInteger() [clone .constprop.30]+0xec>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1161
        {
            all_receiver_status.refined.d1 &= 0b11110111;
    2cdc:	97 70       	andi	r25, 0x07	; 7
    2cde:	92 95       	swap	r25
    2ce0:	90 7f       	andi	r25, 0xF0	; 240
    2ce2:	8f 70       	andi	r24, 0x0F	; 15
    2ce4:	89 2b       	or	r24, r25
    2ce6:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <rx+0x3>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1158
    int multFactor = 1;
    // Check CHFREQ bit[15] MSB = 1
    // See Page 15 of Si48XX ATDD PROGRAMMING GUIDE
    if (all_receiver_status.refined.BANDMODE == 0)
    {
        multFactor = 100;
    2cea:	a4 e6       	ldi	r26, 0x64	; 100
    2cec:	b0 e0       	ldi	r27, 0x00	; 0
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1162
        if (all_receiver_status.refined.d1 & 0b00001000)
        {
            all_receiver_status.refined.d1 &= 0b11110111;
            addFactor = 50;
    2cee:	e2 e3       	ldi	r30, 0x32	; 50
    2cf0:	f0 e0       	ldi	r31, 0x00	; 0
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1177
        }
    }

    uint32_t f;

    f = (all_receiver_status.refined.d4);
    2cf2:	20 91 e7 02 	lds	r18, 0x02E7	; 0x8002e7 <rx+0x4>
    2cf6:	62 2f       	mov	r22, r18
    2cf8:	6f 70       	andi	r22, 0x0F	; 15
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1178
    f += (all_receiver_status.refined.d3) * 10;
    2cfa:	22 95       	swap	r18
    2cfc:	2f 70       	andi	r18, 0x0F	; 15
    2cfe:	7a e0       	ldi	r23, 0x0A	; 10
    2d00:	27 9f       	mul	r18, r23
    2d02:	90 01       	movw	r18, r0
    2d04:	11 24       	eor	r1, r1
    2d06:	03 2e       	mov	r0, r19
    2d08:	00 0c       	add	r0, r0
    2d0a:	44 0b       	sbc	r20, r20
    2d0c:	55 0b       	sbc	r21, r21
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1179
    f += (all_receiver_status.refined.d2) * 100;
    2d0e:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <rx+0x3>
    2d12:	89 2f       	mov	r24, r25
    2d14:	8f 70       	andi	r24, 0x0F	; 15
    2d16:	74 e6       	ldi	r23, 0x64	; 100
    2d18:	87 9f       	mul	r24, r23
    2d1a:	60 01       	movw	r12, r0
    2d1c:	11 24       	eor	r1, r1
    2d1e:	0d 2c       	mov	r0, r13
    2d20:	00 0c       	add	r0, r0
    2d22:	ee 08       	sbc	r14, r14
    2d24:	ff 08       	sbc	r15, r15
    2d26:	2c 0d       	add	r18, r12
    2d28:	3d 1d       	adc	r19, r13
    2d2a:	4e 1d       	adc	r20, r14
    2d2c:	5f 1d       	adc	r21, r15
    2d2e:	26 0f       	add	r18, r22
    2d30:	31 1d       	adc	r19, r1
    2d32:	41 1d       	adc	r20, r1
    2d34:	51 1d       	adc	r21, r1
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1180
    f += (all_receiver_status.refined.d1) * 1000;
    2d36:	92 95       	swap	r25
    2d38:	9f 70       	andi	r25, 0x0F	; 15
    2d3a:	68 ee       	ldi	r22, 0xE8	; 232
    2d3c:	73 e0       	ldi	r23, 0x03	; 3
    2d3e:	96 9f       	mul	r25, r22
    2d40:	60 01       	movw	r12, r0
    2d42:	97 9f       	mul	r25, r23
    2d44:	d0 0c       	add	r13, r0
    2d46:	11 24       	eor	r1, r1
    2d48:	0d 2c       	mov	r0, r13
    2d4a:	00 0c       	add	r0, r0
    2d4c:	ee 08       	sbc	r14, r14
    2d4e:	ff 08       	sbc	r15, r15
    2d50:	2c 0d       	add	r18, r12
    2d52:	3d 1d       	adc	r19, r13
    2d54:	4e 1d       	adc	r20, r14
    2d56:	5f 1d       	adc	r21, r15
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1182

    data_from_device = false;
    2d58:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <_ZL16data_from_device.lto_priv.60>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1184

    return (f * multFactor + addFactor);
    2d5c:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <__mulshisi3>
    2d60:	6f 01       	movw	r12, r30
    2d62:	ff 0f       	add	r31, r31
    2d64:	ee 08       	sbc	r14, r14
    2d66:	ff 08       	sbc	r15, r15
    2d68:	6c 0d       	add	r22, r12
    2d6a:	7d 1d       	adc	r23, r13
    2d6c:	8e 1d       	adc	r24, r14
    2d6e:	9f 1d       	adc	r25, r15
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1185
}
    2d70:	ff 90       	pop	r15
    2d72:	ef 90       	pop	r14
    2d74:	df 90       	pop	r13
    2d76:	cf 90       	pop	r12
    2d78:	08 95       	ret
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1153
 */
uint32_t SI4844::getFrequencyInteger(void)
{
    this->getAllReceiverInfo();
    int addFactor = 0;
    int multFactor = 1;
    2d7a:	a1 e0       	ldi	r26, 0x01	; 1
    2d7c:	b0 e0       	ldi	r27, 0x00	; 0
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1165
        {
            all_receiver_status.refined.d1 &= 0b11110111;
            addFactor = 50;
        }
    }
    else if (all_receiver_status.refined.BANDMODE == 2)
    2d7e:	90 38       	cpi	r25, 0x80	; 128
    2d80:	99 f4       	brne	.+38     	; 0x2da8 <SI4844::getFrequencyInteger() [clone .constprop.30]+0xf0>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1168
    {
        multFactor = 10;
        if (all_receiver_status.refined.d1 & 0b00001000)
    2d82:	98 2f       	mov	r25, r24
    2d84:	92 95       	swap	r25
    2d86:	9f 70       	andi	r25, 0x0F	; 15
    2d88:	87 ff       	sbrs	r24, 7
    2d8a:	11 c0       	rjmp	.+34     	; 0x2dae <SI4844::getFrequencyInteger() [clone .constprop.30]+0xf6>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1170
        {
            all_receiver_status.refined.d1 &= 0b11110111;   
    2d8c:	97 70       	andi	r25, 0x07	; 7
    2d8e:	92 95       	swap	r25
    2d90:	90 7f       	andi	r25, 0xF0	; 240
    2d92:	8f 70       	andi	r24, 0x0F	; 15
    2d94:	89 2b       	or	r24, r25
    2d96:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <rx+0x3>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1167
            addFactor = 50;
        }
    }
    else if (all_receiver_status.refined.BANDMODE == 2)
    {
        multFactor = 10;
    2d9a:	aa e0       	ldi	r26, 0x0A	; 10
    2d9c:	b0 e0       	ldi	r27, 0x00	; 0
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1171
        if (all_receiver_status.refined.d1 & 0b00001000)
        {
            all_receiver_status.refined.d1 &= 0b11110111;   
            addFactor = 5;
    2d9e:	e5 e0       	ldi	r30, 0x05	; 5
    2da0:	f0 e0       	ldi	r31, 0x00	; 0
    2da2:	a7 cf       	rjmp	.-178    	; 0x2cf2 <SI4844::getFrequencyInteger() [clone .constprop.30]+0x3a>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1158
    int multFactor = 1;
    // Check CHFREQ bit[15] MSB = 1
    // See Page 15 of Si48XX ATDD PROGRAMMING GUIDE
    if (all_receiver_status.refined.BANDMODE == 0)
    {
        multFactor = 100;
    2da4:	a4 e6       	ldi	r26, 0x64	; 100
    2da6:	b0 e0       	ldi	r27, 0x00	; 0
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1152
 * @return uint32_t current frequency in KHz.  
 */
uint32_t SI4844::getFrequencyInteger(void)
{
    this->getAllReceiverInfo();
    int addFactor = 0;
    2da8:	f0 e0       	ldi	r31, 0x00	; 0
    2daa:	e0 e0       	ldi	r30, 0x00	; 0
    2dac:	a2 cf       	rjmp	.-188    	; 0x2cf2 <SI4844::getFrequencyInteger() [clone .constprop.30]+0x3a>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1167
            addFactor = 50;
        }
    }
    else if (all_receiver_status.refined.BANDMODE == 2)
    {
        multFactor = 10;
    2dae:	aa e0       	ldi	r26, 0x0A	; 10
    2db0:	b0 e0       	ldi	r27, 0x00	; 0
    2db2:	fa cf       	rjmp	.-12     	; 0x2da8 <SI4844::getFrequencyInteger() [clone .constprop.30]+0xf0>

00002db4 <SI4844::waitToSend() [clone .constprop.22]>:
_ZN6SI484413isClearToSendEv.isra.4():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:736
 * @return true 
 * @return false 
 */
bool SI4844::isClearToSend(void)
{
    delayMicroseconds(2000);
    2db4:	80 ed       	ldi	r24, 0xD0	; 208
    2db6:	97 e0       	ldi	r25, 0x07	; 7
    2db8:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <delayMicroseconds>
beginTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:206
  txBufferLength = 0;
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
    2dbc:	81 e1       	ldi	r24, 0x11	; 17
    2dbe:	0e 94 4b 09 	call	0x1296	; 0x1296 <TwoWire::beginTransmission(unsigned char) [clone .constprop.48]>
_ZN6SI484413isClearToSendEv.isra.4():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:738
    Wire.beginTransmission(SI4844_ADDRESS);
    Wire.write(ATDD_GET_STATUS);
    2dc2:	80 ee       	ldi	r24, 0xE0	; 224
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	0e 94 13 14 	call	0x2826	; 0x2826 <TwoWire::write(int) [clone .constprop.33]>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:739
    Wire.endTransmission();
    2dca:	83 e1       	ldi	r24, 0x13	; 19
    2dcc:	93 e0       	ldi	r25, 0x03	; 3
    2dce:	0e 94 18 14 	call	0x2830	; 0x2830 <TwoWire::endTransmission()>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:740
    delayMicroseconds(2000);
    2dd2:	80 ed       	ldi	r24, 0xD0	; 208
    2dd4:	97 e0       	ldi	r25, 0x07	; 7
    2dd6:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <delayMicroseconds>
twi_readFrom():
    2dda:	61 e0       	ldi	r22, 0x01	; 1
    2ddc:	81 e1       	ldi	r24, 0x11	; 17
    2dde:	0e 94 b5 09 	call	0x136a	; 0x136a <twi_readFrom.part.0.constprop.38>
requestFrom():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:120
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    2de2:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <TwoWire::rxBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:121
  rxBufferLength = read;
    2de6:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <TwoWire::rxBufferLength>
_ZN6SI484413isClearToSendEv.isra.4():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:742
    Wire.requestFrom(SI4844_ADDRESS, 1);
    all_receiver_status.raw[0] = Wire.read();
    2dea:	83 e1       	ldi	r24, 0x13	; 19
    2dec:	93 e0       	ldi	r25, 0x03	; 3
    2dee:	0e 94 9d 13 	call	0x273a	; 0x273a <TwoWire::read()>
    2df2:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <rx+0x1>
waitToSend():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:754
 * @details Waits for CTS status
 */
inline void SI4844::waitToSend()
{

    while (!isClearToSend())
    2df6:	87 ff       	sbrs	r24, 7
    2df8:	dd cf       	rjmp	.-70     	; 0x2db4 <SI4844::waitToSend() [clone .constprop.22]>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:756
        ;
}
    2dfa:	08 95       	ret

00002dfc <SI4844::setVolume(unsigned char) [clone .part.5] [clone .constprop.20]>:
_ZN6SI48449setVolumeEh.part.5():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:827
 * @brief Sets the volume level. 
 * @details Sets a value to the audio volume.
 * @see Table 4, Si48XX ATDD PROGRAMMING GUIDE; AN610; page 11
 * @param byte volumeLevel (domain: 0 to 63) 
 */
void SI4844::setVolume(byte volumeLavel)
    2dfc:	cf 93       	push	r28
    2dfe:	c8 2f       	mov	r28, r24
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:832
{
    if (volumeLavel > 63)
        return;

    waitToSend();
    2e00:	0e 94 da 16 	call	0x2db4	; 0x2db4 <SI4844::waitToSend() [clone .constprop.22]>
setProperty():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:62
    si4844_property property;
    si4844_property param;

    property.value = propertyNumber;
    param.value = parameter;
    waitToSend();
    2e04:	0e 94 da 16 	call	0x2db4	; 0x2db4 <SI4844::waitToSend() [clone .constprop.22]>
beginTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:206
  txBufferLength = 0;
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
    2e08:	81 e1       	ldi	r24, 0x11	; 17
    2e0a:	0e 94 4b 09 	call	0x1296	; 0x1296 <TwoWire::beginTransmission(unsigned char) [clone .constprop.48]>
setProperty():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:64
    Wire.beginTransmission(SI4844_ADDRESS);
    Wire.write(SET_PROPERTY);
    2e0e:	82 e1       	ldi	r24, 0x12	; 18
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	0e 94 13 14 	call	0x2826	; 0x2826 <TwoWire::write(int) [clone .constprop.33]>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:65
    Wire.write(0x00);
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	80 e0       	ldi	r24, 0x00	; 0
    2e1a:	0e 94 13 14 	call	0x2826	; 0x2826 <TwoWire::write(int) [clone .constprop.33]>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:66
    Wire.write(property.raw.byteHigh); // Send property - High byte - most significant first
    2e1e:	60 e4       	ldi	r22, 0x40	; 64
    2e20:	83 e1       	ldi	r24, 0x13	; 19
    2e22:	93 e0       	ldi	r25, 0x03	; 3
    2e24:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:67
    Wire.write(property.raw.byteLow);  // Send property - Low byte - less significant after
    2e28:	60 e0       	ldi	r22, 0x00	; 0
    2e2a:	83 e1       	ldi	r24, 0x13	; 19
    2e2c:	93 e0       	ldi	r25, 0x03	; 3
    2e2e:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:68
    Wire.write(param.raw.byteHigh);    // Send the argments. High Byte - Most significant first
    2e32:	60 e0       	ldi	r22, 0x00	; 0
    2e34:	83 e1       	ldi	r24, 0x13	; 19
    2e36:	93 e0       	ldi	r25, 0x03	; 3
    2e38:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:69
    Wire.write(param.raw.byteLow);     // Send the argments. Low Byte - Less significant after
    2e3c:	6c 2f       	mov	r22, r28
    2e3e:	83 e1       	ldi	r24, 0x13	; 19
    2e40:	93 e0       	ldi	r25, 0x03	; 3
    2e42:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:70
    Wire.endTransmission();
    2e46:	83 e1       	ldi	r24, 0x13	; 19
    2e48:	93 e0       	ldi	r25, 0x03	; 3
    2e4a:	0e 94 18 14 	call	0x2830	; 0x2830 <TwoWire::endTransmission()>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:71
    delayMicroseconds(550);
    2e4e:	86 e2       	ldi	r24, 0x26	; 38
    2e50:	92 e0       	ldi	r25, 0x02	; 2
    2e52:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <delayMicroseconds>
_ZN6SI48449setVolumeEh.part.5():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:835
        return;

    waitToSend();
    setProperty(RX_VOLUME, volumeLavel);

    this->volume = volumeLavel;
    2e56:	c0 93 11 03 	sts	0x0311, r28	; 0x800311 <rx+0x2e>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:836
}
    2e5a:	cf 91       	pop	r28
    2e5c:	08 95       	ret

00002e5e <SI4844::setBandSlideSwitch() [clone .constprop.13]>:
setBandSlideSwitch():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:624
 * @see See Table 8. Pre-defined Band Table in Si48XX ATDD PROGRAMMING GUIDE; AN610; pages 17 and 18  
 * @param band  band index number. 
 * @see Si4822/26/27/40/44 A NTENNA , SCHEMATIC , LAYOUT, AND DESIGN GUIDELINES 
 * @todo The functions setBand and setBandSlideSwitch will be rewritten with the goal of improving the final code.
 */
void SI4844::setBandSlideSwitch()
    2e5e:	8f 92       	push	r8
    2e60:	9f 92       	push	r9
    2e62:	af 92       	push	r10
    2e64:	bf 92       	push	r11
    2e66:	cf 92       	push	r12
    2e68:	df 92       	push	r13
    2e6a:	ef 92       	push	r14
    2e6c:	ff 92       	push	r15
    2e6e:	0f 93       	push	r16
    2e70:	1f 93       	push	r17
    2e72:	cf 93       	push	r28
    2e74:	df 93       	push	r29
    2e76:	00 d0       	rcall	.+0      	; 0x2e78 <SI4844::setBandSlideSwitch() [clone .constprop.13]+0x1a>
    2e78:	00 d0       	rcall	.+0      	; 0x2e7a <SI4844::setBandSlideSwitch() [clone .constprop.13]+0x1c>
    2e7a:	00 d0       	rcall	.+0      	; 0x2e7c <SI4844::setBandSlideSwitch() [clone .constprop.13]+0x1e>
    2e7c:	1f 92       	push	r1
    2e7e:	cd b7       	in	r28, 0x3d	; 61
    2e80:	de b7       	in	r29, 0x3e	; 62
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:626
{
    this->waitToSend();
    2e82:	0e 94 da 16 	call	0x2db4	; 0x2db4 <SI4844::waitToSend() [clone .constprop.22]>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:627
    this->getAllReceiverInfo();
    2e86:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <SI4844::getAllReceiverInfo() [clone .constprop.31]>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:628
    uint8_t bandIndex = this->all_receiver_status.refined.BANDIDX;
    2e8a:	10 91 e5 02 	lds	r17, 0x02E5	; 0x8002e5 <rx+0x2>
    2e8e:	1f 73       	andi	r17, 0x3F	; 63
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:631

   // If band mode changed, reset the device. 
   if (all_receiver_status.refined.HOSTRST == 1) {
    2e90:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <rx+0x1>
    2e94:	86 fd       	sbrc	r24, 6
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:632
       this->reset();
    2e96:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <SI4844::reset() [clone .constprop.14]>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:635
    }   

    this->waitToSend();
    2e9a:	0e 94 da 16 	call	0x2db4	; 0x2db4 <SI4844::waitToSend() [clone .constprop.22]>
findBand():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/BandList.h:77
      }
    }

    // Find a custom band by its bandIdx and return its pointer
    BandNode* findBand(int8_t bandIdx) {
      BandNode* current = head;
    2e9e:	e0 91 fd 02 	lds	r30, 0x02FD	; 0x8002fd <rx+0x1a>
    2ea2:	f0 91 fe 02 	lds	r31, 0x02FE	; 0x8002fe <rx+0x1b>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/BandList.h:78
      while (current) {
    2ea6:	30 97       	sbiw	r30, 0x00	; 0
    2ea8:	41 f0       	breq	.+16     	; 0x2eba <SI4844::setBandSlideSwitch() [clone .constprop.13]+0x5c>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/BandList.h:79
        if (current->bandIdx == bandIdx) return current; // Return the pointer if found
    2eaa:	80 81       	ld	r24, Z
    2eac:	18 17       	cp	r17, r24
    2eae:	09 f4       	brne	.+2      	; 0x2eb2 <SI4844::setBandSlideSwitch() [clone .constprop.13]+0x54>
    2eb0:	56 c0       	rjmp	.+172    	; 0x2f5e <SI4844::setBandSlideSwitch() [clone .constprop.13]+0x100>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/BandList.h:80
        current = current->next; // Move to the next node
    2eb2:	02 84       	ldd	r0, Z+10	; 0x0a
    2eb4:	f3 85       	ldd	r31, Z+11	; 0x0b
    2eb6:	e0 2d       	mov	r30, r0
    2eb8:	f6 cf       	rjmp	.-20     	; 0x2ea6 <SI4844::setBandSlideSwitch() [clone .constprop.13]+0x48>
setPredefinedBand():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:508

void SI4844::setPredefinedBand(uint8_t bandIdx) {

    si4844_arg_band_index rxBandSetup; 

    this->currentBand = bandIdx;
    2eba:	10 93 f5 02 	sts	0x02F5, r17	; 0x8002f5 <rx+0x12>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:510

    data_from_device = false;
    2ebe:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <_ZL16data_from_device.lto_priv.60>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:512

    rxBandSetup.refined.XOSCEN = this->xoscen;
    2ec2:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <rx+0x13>
    2ec6:	60 e0       	ldi	r22, 0x00	; 0
    2ec8:	80 fb       	bst	r24, 0
    2eca:	67 f9       	bld	r22, 7
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:513
    rxBandSetup.refined.XOWAIT = this->xowait;
    2ecc:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <rx+0x14>
    2ed0:	80 fb       	bst	r24, 0
    2ed2:	66 f9       	bld	r22, 6
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:514
    rxBandSetup.refined.BANDIDX = this->currentBand;
    2ed4:	60 7c       	andi	r22, 0xC0	; 192
    2ed6:	16 2b       	or	r17, r22
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:515
    waitToSend();
    2ed8:	0e 94 da 16 	call	0x2db4	; 0x2db4 <SI4844::waitToSend() [clone .constprop.22]>
beginTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:206
    2edc:	81 e1       	ldi	r24, 0x11	; 17
    2ede:	0e 94 4b 09 	call	0x1296	; 0x1296 <TwoWire::beginTransmission(unsigned char) [clone .constprop.48]>
setPredefinedBand():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:517
    Wire.beginTransmission(SI4844_ADDRESS);
    Wire.write(ATDD_POWER_UP);
    2ee2:	81 ee       	ldi	r24, 0xE1	; 225
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	0e 94 13 14 	call	0x2826	; 0x2826 <TwoWire::write(int) [clone .constprop.33]>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:518
    Wire.write(rxBandSetup.raw);
    2eea:	61 2f       	mov	r22, r17
setUserDefinedBand():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:571
    Wire.write(customband.raw[1]);
    Wire.write(customband.raw[2]);
    Wire.write(customband.raw[3]);
    Wire.write(customband.raw[4]);
    Wire.write(customband.raw[5]);
    Wire.write(customband.raw[6]);
    2eec:	83 e1       	ldi	r24, 0x13	; 19
    2eee:	93 e0       	ldi	r25, 0x03	; 3
    2ef0:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:572
    Wire.endTransmission();
    2ef4:	83 e1       	ldi	r24, 0x13	; 19
    2ef6:	93 e0       	ldi	r25, 0x03	; 3
    2ef8:	0e 94 18 14 	call	0x2830	; 0x2830 <TwoWire::endTransmission()>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:573
    delayMicroseconds(2500);
    2efc:	84 ec       	ldi	r24, 0xC4	; 196
    2efe:	99 e0       	ldi	r25, 0x09	; 9
    2f00:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <delayMicroseconds>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:574
    waitInterrupt();
    2f04:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <SI4844::waitInterrupt() [clone .isra.2]>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:575
    delayMicroseconds(2500);
    2f08:	84 ec       	ldi	r24, 0xC4	; 196
    2f0a:	99 e0       	ldi	r25, 0x09	; 9
    2f0c:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <delayMicroseconds>
waitDetectFrequency():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:765
 * @ingroup BF
 * @brief Wait for the ATDD detect a valid frequency (frequency not zero). 
 */
void SI4844::waitDetectFrequency() {
    do { 
        delay(1);
    2f10:	61 e0       	ldi	r22, 0x01	; 1
    2f12:	70 e0       	ldi	r23, 0x00	; 0
    2f14:	80 e0       	ldi	r24, 0x00	; 0
    2f16:	90 e0       	ldi	r25, 0x00	; 0
    2f18:	0e 94 a0 0a 	call	0x1540	; 0x1540 <delay>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:766
        this->getAllReceiverInfo();
    2f1c:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <SI4844::getAllReceiverInfo() [clone .constprop.31]>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:767
    } while ( (all_receiver_status.raw[2] | all_receiver_status.raw[3]) == 0  );   
    2f20:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <rx+0x3>
    2f24:	90 91 e7 02 	lds	r25, 0x02E7	; 0x8002e7 <rx+0x4>
    2f28:	89 2b       	or	r24, r25
    2f2a:	91 f3       	breq	.-28     	; 0x2f10 <SI4844::setBandSlideSwitch() [clone .constprop.13]+0xb2>
setBandSlideSwitch():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:646
        // if the current band is a custom band, sets the new parameters for the band.
        this->setUserDefinedBand(bandIndex, bandNode->bottomFrequency, bandNode->topFrequency, bandNode->space);
    }
     
    this->waitDetectFrequency(); 
    this->setVolume(this->volume);
    2f2c:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <rx+0x2e>
setVolume():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:829
 * @see Table 4, Si48XX ATDD PROGRAMMING GUIDE; AN610; page 11
 * @param byte volumeLevel (domain: 0 to 63) 
 */
void SI4844::setVolume(byte volumeLavel)
{
    if (volumeLavel > 63)
    2f30:	80 34       	cpi	r24, 0x40	; 64
    2f32:	08 f0       	brcs	.+2      	; 0x2f36 <SI4844::setBandSlideSwitch() [clone .constprop.13]+0xd8>
    2f34:	5d c0       	rjmp	.+186    	; 0x2ff0 <SI4844::setBandSlideSwitch() [clone .constprop.13]+0x192>
setBandSlideSwitch():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:648
    }
     
    this->waitDetectFrequency(); 
    this->setVolume(this->volume);

}
    2f36:	27 96       	adiw	r28, 0x07	; 7
    2f38:	0f b6       	in	r0, 0x3f	; 63
    2f3a:	f8 94       	cli
    2f3c:	de bf       	out	0x3e, r29	; 62
    2f3e:	0f be       	out	0x3f, r0	; 63
    2f40:	cd bf       	out	0x3d, r28	; 61
    2f42:	df 91       	pop	r29
    2f44:	cf 91       	pop	r28
    2f46:	1f 91       	pop	r17
    2f48:	0f 91       	pop	r16
    2f4a:	ff 90       	pop	r15
    2f4c:	ef 90       	pop	r14
    2f4e:	df 90       	pop	r13
    2f50:	cf 90       	pop	r12
    2f52:	bf 90       	pop	r11
    2f54:	af 90       	pop	r10
    2f56:	9f 90       	pop	r9
    2f58:	8f 90       	pop	r8
setVolume():
    2f5a:	0c 94 fe 16 	jmp	0x2dfc	; 0x2dfc <SI4844::setVolume(unsigned char) [clone .part.5] [clone .constprop.20]>
setBandSlideSwitch():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:642
    BandNode *bandNode = this->findCustomBand(bandIndex);
    if ( bandNode  == nullptr )  {   
        this->setPredefinedBand(bandIndex);
    } else {
        // if the current band is a custom band, sets the new parameters for the band.
        this->setUserDefinedBand(bandIndex, bandNode->bottomFrequency, bandNode->topFrequency, bandNode->space);
    2f5e:	01 85       	ldd	r16, Z+9	; 0x09
    2f60:	c5 80       	ldd	r12, Z+5	; 0x05
    2f62:	d6 80       	ldd	r13, Z+6	; 0x06
    2f64:	e7 80       	ldd	r14, Z+7	; 0x07
    2f66:	f0 84       	ldd	r15, Z+8	; 0x08
    2f68:	81 80       	ldd	r8, Z+1	; 0x01
    2f6a:	92 80       	ldd	r9, Z+2	; 0x02
    2f6c:	a3 80       	ldd	r10, Z+3	; 0x03
    2f6e:	b4 80       	ldd	r11, Z+4	; 0x04
setUserDefinedBand():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:543
 */
void SI4844::setUserDefinedBand(int8_t bandIdx, uint32_t bottomFrequency, uint32_t topFrequency, uint8_t space ) {

    SI4844_arg_band customband;

    this->currentBand = bandIdx;
    2f70:	10 93 f5 02 	sts	0x02F5, r17	; 0x8002f5 <rx+0x12>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:546

    // Now we can customize the band.
    data_from_device = false;
    2f74:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <_ZL16data_from_device.lto_priv.60>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:547
    customband.refined.BANDIDX = bandIdx;
    2f78:	69 81       	ldd	r22, Y+1	; 0x01
    2f7a:	60 7c       	andi	r22, 0xC0	; 192
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:548
    customband.refined.XOSCEN = this->xoscen;
    2f7c:	61 2b       	or	r22, r17
    2f7e:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <rx+0x13>
    2f82:	80 fb       	bst	r24, 0
    2f84:	67 f9       	bld	r22, 7
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:549
    customband.refined.XOWAIT = this->xowait;
    2f86:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <rx+0x14>
    2f8a:	80 fb       	bst	r24, 0
    2f8c:	66 f9       	bld	r22, 6
    2f8e:	69 83       	std	Y+1, r22	; 0x01
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:558
    customband.refined.BANDTOP_LOW = lowByte(topFrequency);
    customband.refined.CHSPC = space;
    customband.refined.DFBAND = 0; 
    customband.refined.UNI_AM = 0;
    customband.refined.TVFREQ = 0;
    customband.refined.DUMMY = 0;
    2f90:	1f 82       	std	Y+7, r1	; 0x07
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:561

    // Wait until rady to send a command
    waitToSend();
    2f92:	0e 94 da 16 	call	0x2db4	; 0x2db4 <SI4844::waitToSend() [clone .constprop.22]>
beginTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:206
    2f96:	81 e1       	ldi	r24, 0x11	; 17
    2f98:	0e 94 4b 09 	call	0x1296	; 0x1296 <TwoWire::beginTransmission(unsigned char) [clone .constprop.48]>
setUserDefinedBand():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:564

    Wire.beginTransmission(SI4844_ADDRESS);
    Wire.write(ATDD_POWER_UP);
    2f9c:	81 ee       	ldi	r24, 0xE1	; 225
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	0e 94 13 14 	call	0x2826	; 0x2826 <TwoWire::write(int) [clone .constprop.33]>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:565
    Wire.write(customband.raw[0]);
    2fa4:	69 81       	ldd	r22, Y+1	; 0x01
    2fa6:	83 e1       	ldi	r24, 0x13	; 19
    2fa8:	93 e0       	ldi	r25, 0x03	; 3
    2faa:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:550
    // Now we can customize the band.
    data_from_device = false;
    customband.refined.BANDIDX = bandIdx;
    customband.refined.XOSCEN = this->xoscen;
    customband.refined.XOWAIT = this->xowait;
    customband.refined.BANDBOT_HIGH = highByte(bottomFrequency);
    2fae:	99 27       	eor	r25, r25
    2fb0:	8b 2d       	mov	r24, r11
    2fb2:	7a 2d       	mov	r23, r10
    2fb4:	69 2d       	mov	r22, r9
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:566
    waitToSend();

    Wire.beginTransmission(SI4844_ADDRESS);
    Wire.write(ATDD_POWER_UP);
    Wire.write(customband.raw[0]);
    Wire.write(customband.raw[1]);
    2fb6:	83 e1       	ldi	r24, 0x13	; 19
    2fb8:	93 e0       	ldi	r25, 0x03	; 3
    2fba:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:567
    Wire.write(customband.raw[2]);
    2fbe:	68 2d       	mov	r22, r8
    2fc0:	83 e1       	ldi	r24, 0x13	; 19
    2fc2:	93 e0       	ldi	r25, 0x03	; 3
    2fc4:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:552
    customband.refined.BANDIDX = bandIdx;
    customband.refined.XOSCEN = this->xoscen;
    customband.refined.XOWAIT = this->xowait;
    customband.refined.BANDBOT_HIGH = highByte(bottomFrequency);
    customband.refined.BANDBOT_LOW = lowByte(bottomFrequency);
    customband.refined.BANDTOP_HIGH = highByte(topFrequency);
    2fc8:	99 27       	eor	r25, r25
    2fca:	8f 2d       	mov	r24, r15
    2fcc:	7e 2d       	mov	r23, r14
    2fce:	6d 2d       	mov	r22, r13
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:568
    Wire.beginTransmission(SI4844_ADDRESS);
    Wire.write(ATDD_POWER_UP);
    Wire.write(customband.raw[0]);
    Wire.write(customband.raw[1]);
    Wire.write(customband.raw[2]);
    Wire.write(customband.raw[3]);
    2fd0:	83 e1       	ldi	r24, 0x13	; 19
    2fd2:	93 e0       	ldi	r25, 0x03	; 3
    2fd4:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:569
    Wire.write(customband.raw[4]);
    2fd8:	6c 2d       	mov	r22, r12
    2fda:	83 e1       	ldi	r24, 0x13	; 19
    2fdc:	93 e0       	ldi	r25, 0x03	; 3
    2fde:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:570
    Wire.write(customband.raw[5]);
    2fe2:	60 2f       	mov	r22, r16
    2fe4:	83 e1       	ldi	r24, 0x13	; 19
    2fe6:	93 e0       	ldi	r25, 0x03	; 3
    2fe8:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:571
    Wire.write(customband.raw[6]);
    2fec:	6f 81       	ldd	r22, Y+7	; 0x07
    2fee:	7e cf       	rjmp	.-260    	; 0x2eec <SI4844::setBandSlideSwitch() [clone .constprop.13]+0x8e>
setBandSlideSwitch():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:648
    }
     
    this->waitDetectFrequency(); 
    this->setVolume(this->volume);

}
    2ff0:	27 96       	adiw	r28, 0x07	; 7
    2ff2:	0f b6       	in	r0, 0x3f	; 63
    2ff4:	f8 94       	cli
    2ff6:	de bf       	out	0x3e, r29	; 62
    2ff8:	0f be       	out	0x3f, r0	; 63
    2ffa:	cd bf       	out	0x3d, r28	; 61
    2ffc:	df 91       	pop	r29
    2ffe:	cf 91       	pop	r28
    3000:	1f 91       	pop	r17
    3002:	0f 91       	pop	r16
    3004:	ff 90       	pop	r15
    3006:	ef 90       	pop	r14
    3008:	df 90       	pop	r13
    300a:	cf 90       	pop	r12
    300c:	bf 90       	pop	r11
    300e:	af 90       	pop	r10
    3010:	9f 90       	pop	r9
    3012:	8f 90       	pop	r8
    3014:	08 95       	ret

00003016 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.28]>:
printNumber():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/Print.cpp:232
  return vfprintf_P(&f, (const char *)format, ap);
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
    3016:	8f 92       	push	r8
    3018:	9f 92       	push	r9
    301a:	af 92       	push	r10
    301c:	bf 92       	push	r11
    301e:	0f 93       	push	r16
    3020:	1f 93       	push	r17
    3022:	cf 93       	push	r28
    3024:	df 93       	push	r29
    3026:	cd b7       	in	r28, 0x3d	; 61
    3028:	de b7       	in	r29, 0x3e	; 62
    302a:	a1 97       	sbiw	r28, 0x21	; 33
    302c:	0f b6       	in	r0, 0x3f	; 63
    302e:	f8 94       	cli
    3030:	de bf       	out	0x3e, r29	; 62
    3032:	0f be       	out	0x3f, r0	; 63
    3034:	cd bf       	out	0x3d, r28	; 61
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/Print.cpp:237
{
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    3036:	19 a2       	std	Y+33, r1	; 0x21
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/Print.cpp:240

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    3038:	42 30       	cpi	r20, 0x02	; 2
    303a:	08 f4       	brcc	.+2      	; 0x303e <Print::printNumber(unsigned long, unsigned char) [clone .constprop.28]+0x28>
    303c:	4a e0       	ldi	r20, 0x0A	; 10
    303e:	8e 01       	movw	r16, r28
    3040:	0f 5d       	subi	r16, 0xDF	; 223
    3042:	1f 4f       	sbci	r17, 0xFF	; 255
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/Print.cpp:243

  do {
    char c = n % base;
    3044:	84 2e       	mov	r8, r20
    3046:	91 2c       	mov	r9, r1
    3048:	b1 2c       	mov	r11, r1
    304a:	a1 2c       	mov	r10, r1
    304c:	a5 01       	movw	r20, r10
    304e:	94 01       	movw	r18, r8
    3050:	0e 94 b0 22 	call	0x4560	; 0x4560 <__udivmodsi4>
    3054:	e6 2f       	mov	r30, r22
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/Print.cpp:244
    n /= base;
    3056:	b9 01       	movw	r22, r18
    3058:	ca 01       	movw	r24, r20
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/Print.cpp:246

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    305a:	ea 30       	cpi	r30, 0x0A	; 10
    305c:	44 f5       	brge	.+80     	; 0x30ae <Print::printNumber(unsigned long, unsigned char) [clone .constprop.28]+0x98>
    305e:	e0 5d       	subi	r30, 0xD0	; 208
    3060:	d8 01       	movw	r26, r16
    3062:	ee 93       	st	-X, r30
    3064:	8d 01       	movw	r16, r26
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/Print.cpp:247
  } while(n);
    3066:	23 2b       	or	r18, r19
    3068:	24 2b       	or	r18, r20
    306a:	25 2b       	or	r18, r21
    306c:	79 f7       	brne	.-34     	; 0x304c <Print::printNumber(unsigned long, unsigned char) [clone .constprop.28]+0x36>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    306e:	90 e0       	ldi	r25, 0x00	; 0
    3070:	80 e0       	ldi	r24, 0x00	; 0
write():
    3072:	10 97       	sbiw	r26, 0x00	; 0
    3074:	69 f0       	breq	.+26     	; 0x3090 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.28]+0x7a>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/Print.h:54
      return write((const uint8_t *)str, strlen(str));
    3076:	fd 01       	movw	r30, r26
    3078:	01 90       	ld	r0, Z+
    307a:	00 20       	and	r0, r0
    307c:	e9 f7       	brne	.-6      	; 0x3078 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.28]+0x62>
    307e:	31 97       	sbiw	r30, 0x01	; 1
    3080:	af 01       	movw	r20, r30
    3082:	4a 1b       	sub	r20, r26
    3084:	5b 0b       	sbc	r21, r27
    3086:	bd 01       	movw	r22, r26
    3088:	8f e1       	ldi	r24, 0x1F	; 31
    308a:	93 e0       	ldi	r25, 0x03	; 3
    308c:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <Print::write(unsigned char const*, unsigned int)>
printNumber():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/Print.cpp:250

  return write(str);
}
    3090:	a1 96       	adiw	r28, 0x21	; 33
    3092:	0f b6       	in	r0, 0x3f	; 63
    3094:	f8 94       	cli
    3096:	de bf       	out	0x3e, r29	; 62
    3098:	0f be       	out	0x3f, r0	; 63
    309a:	cd bf       	out	0x3d, r28	; 61
    309c:	df 91       	pop	r29
    309e:	cf 91       	pop	r28
    30a0:	1f 91       	pop	r17
    30a2:	0f 91       	pop	r16
    30a4:	bf 90       	pop	r11
    30a6:	af 90       	pop	r10
    30a8:	9f 90       	pop	r9
    30aa:	8f 90       	pop	r8
    30ac:	08 95       	ret
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/Print.cpp:246

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    30ae:	e9 5c       	subi	r30, 0xC9	; 201
    30b0:	d7 cf       	rjmp	.-82     	; 0x3060 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.28]+0x4a>

000030b2 <Print::print(char const*) [clone .constprop.43]>:
write():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    30b2:	00 97       	sbiw	r24, 0x00	; 0
    30b4:	69 f0       	breq	.+26     	; 0x30d0 <Print::print(char const*) [clone .constprop.43]+0x1e>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/Print.h:54
      return write((const uint8_t *)str, strlen(str));
    30b6:	fc 01       	movw	r30, r24
    30b8:	01 90       	ld	r0, Z+
    30ba:	00 20       	and	r0, r0
    30bc:	e9 f7       	brne	.-6      	; 0x30b8 <Print::print(char const*) [clone .constprop.43]+0x6>
    30be:	31 97       	sbiw	r30, 0x01	; 1
    30c0:	af 01       	movw	r20, r30
    30c2:	48 1b       	sub	r20, r24
    30c4:	59 0b       	sbc	r21, r25
    30c6:	bc 01       	movw	r22, r24
    30c8:	8f e1       	ldi	r24, 0x1F	; 31
    30ca:	93 e0       	ldi	r25, 0x03	; 3
    30cc:	0c 94 d9 0a 	jmp	0x15b2	; 0x15b2 <Print::write(unsigned char const*, unsigned int)>
print():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/Print.cpp:65
}

size_t Print::print(const char str[])
{
  return write(str);
}
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	80 e0       	ldi	r24, 0x00	; 0
    30d4:	08 95       	ret

000030d6 <Adafruit_SSD1306::clearDisplay() [clone .constprop.23]>:
clearDisplay():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:687
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::clearDisplay(void) {
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
    30d6:	20 91 25 03 	lds	r18, 0x0325	; 0x800325 <display+0x6>
    30da:	30 91 26 03 	lds	r19, 0x0326	; 0x800326 <display+0x7>
    30de:	c9 01       	movw	r24, r18
    30e0:	07 96       	adiw	r24, 0x07	; 7
    30e2:	97 fd       	sbrc	r25, 7
    30e4:	07 96       	adiw	r24, 0x07	; 7
    30e6:	23 e0       	ldi	r18, 0x03	; 3
    30e8:	95 95       	asr	r25
    30ea:	87 95       	ror	r24
    30ec:	2a 95       	dec	r18
    30ee:	e1 f7       	brne	.-8      	; 0x30e8 <Adafruit_SSD1306::clearDisplay() [clone .constprop.23]+0x12>
    30f0:	20 91 23 03 	lds	r18, 0x0323	; 0x800323 <display+0x4>
    30f4:	30 91 24 03 	lds	r19, 0x0324	; 0x800324 <display+0x5>
    30f8:	82 9f       	mul	r24, r18
    30fa:	a0 01       	movw	r20, r0
    30fc:	83 9f       	mul	r24, r19
    30fe:	50 0d       	add	r21, r0
    3100:	92 9f       	mul	r25, r18
    3102:	50 0d       	add	r21, r0
    3104:	11 24       	eor	r1, r1
    3106:	70 e0       	ldi	r23, 0x00	; 0
    3108:	60 e0       	ldi	r22, 0x00	; 0
    310a:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <display+0x1f>
    310e:	90 91 3f 03 	lds	r25, 0x033F	; 0x80033f <display+0x20>
    3112:	0c 94 d0 24 	jmp	0x49a0	; 0x49a0 <memset>

00003116 <__cxa_pure_virtual>:
terminate():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/abi.cpp:26
extern "C" void __cxa_pure_virtual(void) __attribute__ ((__noreturn__));
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

namespace std {
  [[gnu::weak, noreturn]] void terminate() {
    abort();
    3116:	0e 94 c2 24 	call	0x4984	; 0x4984 <abort>

0000311a <String::~String()>:
__base_dtor ():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  if(buffer)
    311a:	fc 01       	movw	r30, r24
    311c:	80 81       	ld	r24, Z
    311e:	91 81       	ldd	r25, Z+1	; 0x01
    3120:	00 97       	sbiw	r24, 0x00	; 0
    3122:	11 f0       	breq	.+4      	; 0x3128 <String::~String()+0xe>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/WString.cpp:125
    free(buffer);
    3124:	0c 94 7c 23 	jmp	0x46f8	; 0x46f8 <free>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/WString.cpp:126
}
    3128:	08 95       	ret

0000312a <String::reserve(unsigned int)>:
reserve():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/WString.cpp:147
  buffer = NULL;
  capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
    312a:	0f 93       	push	r16
    312c:	1f 93       	push	r17
    312e:	cf 93       	push	r28
    3130:	df 93       	push	r29
    3132:	ec 01       	movw	r28, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/WString.cpp:148
  if (buffer && capacity >= size) return 1;
    3134:	88 81       	ld	r24, Y
    3136:	99 81       	ldd	r25, Y+1	; 0x01
    3138:	00 97       	sbiw	r24, 0x00	; 0
    313a:	59 f0       	breq	.+22     	; 0x3152 <String::reserve(unsigned int)+0x28>
    313c:	2a 81       	ldd	r18, Y+2	; 0x02
    313e:	3b 81       	ldd	r19, Y+3	; 0x03
    3140:	26 17       	cp	r18, r22
    3142:	37 07       	cpc	r19, r23
    3144:	30 f0       	brcs	.+12     	; 0x3152 <String::reserve(unsigned int)+0x28>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/WString.cpp:150
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
    3146:	81 e0       	ldi	r24, 0x01	; 1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/WString.cpp:154
    return 1;
  }
  return 0;
}
    3148:	df 91       	pop	r29
    314a:	cf 91       	pop	r28
    314c:	1f 91       	pop	r17
    314e:	0f 91       	pop	r16
    3150:	08 95       	ret
    3152:	8b 01       	movw	r16, r22
changeBuffer():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/WString.cpp:158

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
  char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    3154:	6f 5f       	subi	r22, 0xFF	; 255
    3156:	7f 4f       	sbci	r23, 0xFF	; 255
    3158:	0e 94 05 24 	call	0x480a	; 0x480a <realloc>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/WString.cpp:159
  if (newbuffer) {
    315c:	00 97       	sbiw	r24, 0x00	; 0
    315e:	59 f0       	breq	.+22     	; 0x3176 <String::reserve(unsigned int)+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/WString.cpp:160
    buffer = newbuffer;
    3160:	99 83       	std	Y+1, r25	; 0x01
    3162:	88 83       	st	Y, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/WString.cpp:161
    capacity = maxStrLen;
    3164:	1b 83       	std	Y+3, r17	; 0x03
    3166:	0a 83       	std	Y+2, r16	; 0x02
reserve():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/WString.cpp:150

unsigned char String::reserve(unsigned int size)
{
  if (buffer && capacity >= size) return 1;
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
    3168:	2c 81       	ldd	r18, Y+4	; 0x04
    316a:	3d 81       	ldd	r19, Y+5	; 0x05
    316c:	23 2b       	or	r18, r19
    316e:	59 f7       	brne	.-42     	; 0x3146 <String::reserve(unsigned int)+0x1c>
    3170:	fc 01       	movw	r30, r24
    3172:	10 82       	st	Z, r1
    3174:	e8 cf       	rjmp	.-48     	; 0x3146 <String::reserve(unsigned int)+0x1c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/WString.cpp:153
    return 1;
  }
  return 0;
    3176:	80 e0       	ldi	r24, 0x00	; 0
    3178:	e7 cf       	rjmp	.-50     	; 0x3148 <String::reserve(unsigned int)+0x1e>

0000317a <String::String(char const*)>:
__base_ctor ():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/WString.cpp:28

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    317a:	ef 92       	push	r14
    317c:	ff 92       	push	r15
    317e:	0f 93       	push	r16
    3180:	1f 93       	push	r17
    3182:	cf 93       	push	r28
    3184:	df 93       	push	r29
    3186:	ec 01       	movw	r28, r24
    3188:	7b 01       	movw	r14, r22
_ZN6String4initEv():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/WString.cpp:134
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
    318a:	19 82       	std	Y+1, r1	; 0x01
    318c:	18 82       	st	Y, r1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/WString.cpp:135
  capacity = 0;
    318e:	1b 82       	std	Y+3, r1	; 0x03
    3190:	1a 82       	std	Y+2, r1	; 0x02
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/WString.cpp:136
  len = 0;
    3192:	1d 82       	std	Y+5, r1	; 0x05
    3194:	1c 82       	std	Y+4, r1	; 0x04
__base_ctor ():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/WString.cpp:31
/*********************************************/

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
    3196:	fb 01       	movw	r30, r22
    3198:	01 90       	ld	r0, Z+
    319a:	00 20       	and	r0, r0
    319c:	e9 f7       	brne	.-6      	; 0x3198 <String::String(char const*)+0x1e>
    319e:	31 97       	sbiw	r30, 0x01	; 1
    31a0:	8f 01       	movw	r16, r30
    31a2:	06 1b       	sub	r16, r22
    31a4:	17 0b       	sbc	r17, r23
copy():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/WString.cpp:173
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
  if (!reserve(length)) {
    31a6:	b8 01       	movw	r22, r16
    31a8:	0e 94 95 18 	call	0x312a	; 0x312a <String::reserve(unsigned int)>
    31ac:	28 81       	ld	r18, Y
    31ae:	39 81       	ldd	r19, Y+1	; 0x01
    31b0:	81 11       	cpse	r24, r1
    31b2:	13 c0       	rjmp	.+38     	; 0x31da <String::String(char const*)+0x60>
invalidate():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/WString.cpp:141
  len = 0;
}

void String::invalidate(void)
{
  if (buffer) free(buffer);
    31b4:	21 15       	cp	r18, r1
    31b6:	31 05       	cpc	r19, r1
    31b8:	19 f0       	breq	.+6      	; 0x31c0 <String::String(char const*)+0x46>
    31ba:	c9 01       	movw	r24, r18
    31bc:	0e 94 7c 23 	call	0x46f8	; 0x46f8 <free>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/WString.cpp:142
  buffer = NULL;
    31c0:	19 82       	std	Y+1, r1	; 0x01
    31c2:	18 82       	st	Y, r1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/WString.cpp:143
  capacity = len = 0;
    31c4:	1d 82       	std	Y+5, r1	; 0x05
    31c6:	1c 82       	std	Y+4, r1	; 0x04
    31c8:	1b 82       	std	Y+3, r1	; 0x03
    31ca:	1a 82       	std	Y+2, r1	; 0x02
__base_ctor ():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/WString.cpp:32

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
}
    31cc:	df 91       	pop	r29
    31ce:	cf 91       	pop	r28
    31d0:	1f 91       	pop	r17
    31d2:	0f 91       	pop	r16
    31d4:	ff 90       	pop	r15
    31d6:	ef 90       	pop	r14
    31d8:	08 95       	ret
copy():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/WString.cpp:177
{
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
    31da:	1d 83       	std	Y+5, r17	; 0x05
    31dc:	0c 83       	std	Y+4, r16	; 0x04
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/WString.cpp:178
  strcpy(buffer, cstr);
    31de:	b7 01       	movw	r22, r14
    31e0:	c9 01       	movw	r24, r18
__base_ctor ():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/WString.cpp:32

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
}
    31e2:	df 91       	pop	r29
    31e4:	cf 91       	pop	r28
    31e6:	1f 91       	pop	r17
    31e8:	0f 91       	pop	r16
    31ea:	ff 90       	pop	r15
    31ec:	ef 90       	pop	r14
copy():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/WString.cpp:178
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
  strcpy(buffer, cstr);
    31ee:	0c 94 d7 24 	jmp	0x49ae	; 0x49ae <strcpy>

000031f2 <String::operator=(char const*) [clone .part.3]>:
_ZN6StringaSEPKc.part.3():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/WString.cpp:239
  if (this != &rval) move(rval);
  return *this;
}
#endif

String & String::operator = (const char *cstr)
    31f2:	ef 92       	push	r14
    31f4:	ff 92       	push	r15
    31f6:	0f 93       	push	r16
    31f8:	1f 93       	push	r17
    31fa:	cf 93       	push	r28
    31fc:	df 93       	push	r29
    31fe:	ec 01       	movw	r28, r24
    3200:	7b 01       	movw	r14, r22
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/WString.cpp:241
{
  if (cstr) copy(cstr, strlen(cstr));
    3202:	fb 01       	movw	r30, r22
    3204:	01 90       	ld	r0, Z+
    3206:	00 20       	and	r0, r0
    3208:	e9 f7       	brne	.-6      	; 0x3204 <String::operator=(char const*) [clone .part.3]+0x12>
    320a:	31 97       	sbiw	r30, 0x01	; 1
    320c:	8f 01       	movw	r16, r30
    320e:	06 1b       	sub	r16, r22
    3210:	17 0b       	sbc	r17, r23
copy():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/WString.cpp:173
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
  if (!reserve(length)) {
    3212:	b8 01       	movw	r22, r16
    3214:	0e 94 95 18 	call	0x312a	; 0x312a <String::reserve(unsigned int)>
    3218:	28 81       	ld	r18, Y
    321a:	39 81       	ldd	r19, Y+1	; 0x01
    321c:	81 11       	cpse	r24, r1
    321e:	13 c0       	rjmp	.+38     	; 0x3246 <String::operator=(char const*) [clone .part.3]+0x54>
invalidate():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/WString.cpp:141
  len = 0;
}

void String::invalidate(void)
{
  if (buffer) free(buffer);
    3220:	21 15       	cp	r18, r1
    3222:	31 05       	cpc	r19, r1
    3224:	19 f0       	breq	.+6      	; 0x322c <String::operator=(char const*) [clone .part.3]+0x3a>
    3226:	c9 01       	movw	r24, r18
    3228:	0e 94 7c 23 	call	0x46f8	; 0x46f8 <free>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/WString.cpp:142
  buffer = NULL;
    322c:	19 82       	std	Y+1, r1	; 0x01
    322e:	18 82       	st	Y, r1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/WString.cpp:143
  capacity = len = 0;
    3230:	1d 82       	std	Y+5, r1	; 0x05
    3232:	1c 82       	std	Y+4, r1	; 0x04
    3234:	1b 82       	std	Y+3, r1	; 0x03
    3236:	1a 82       	std	Y+2, r1	; 0x02
_ZN6StringaSEPKc.part.3():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/WString.cpp:245
{
  if (cstr) copy(cstr, strlen(cstr));
  else invalidate();
  
  return *this;
}
    3238:	df 91       	pop	r29
    323a:	cf 91       	pop	r28
    323c:	1f 91       	pop	r17
    323e:	0f 91       	pop	r16
    3240:	ff 90       	pop	r15
    3242:	ef 90       	pop	r14
    3244:	08 95       	ret
copy():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/WString.cpp:177
{
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
    3246:	1d 83       	std	Y+5, r17	; 0x05
    3248:	0c 83       	std	Y+4, r16	; 0x04
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/WString.cpp:178
  strcpy(buffer, cstr);
    324a:	b7 01       	movw	r22, r14
    324c:	c9 01       	movw	r24, r18
_ZN6StringaSEPKc.part.3():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/WString.cpp:245
{
  if (cstr) copy(cstr, strlen(cstr));
  else invalidate();
  
  return *this;
}
    324e:	df 91       	pop	r29
    3250:	cf 91       	pop	r28
    3252:	1f 91       	pop	r17
    3254:	0f 91       	pop	r16
    3256:	ff 90       	pop	r15
    3258:	ef 90       	pop	r14
copy():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/WString.cpp:178
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
  strcpy(buffer, cstr);
    325a:	0c 94 d7 24 	jmp	0x49ae	; 0x49ae <strcpy>

0000325e <displayDial()>:
displayDial():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:106
  delay(100);
  displayDial();
}


void displayDial() {
    325e:	cf 92       	push	r12
    3260:	df 92       	push	r13
    3262:	ef 92       	push	r14
    3264:	ff 92       	push	r15
    3266:	0f 93       	push	r16
    3268:	1f 93       	push	r17
    326a:	cf 93       	push	r28
    326c:	df 93       	push	r29
    326e:	cd b7       	in	r28, 0x3d	; 61
    3270:	de b7       	in	r29, 0x3e	; 62
    3272:	62 97       	sbiw	r28, 0x12	; 18
    3274:	0f b6       	in	r0, 0x3f	; 63
    3276:	f8 94       	cli
    3278:	de bf       	out	0x3e, r29	; 62
    327a:	0f be       	out	0x3f, r0	; 63
    327c:	cd bf       	out	0x3d, r28	; 61
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:107
  String unit, freqDisplay, stereo;
    327e:	62 e7       	ldi	r22, 0x72	; 114
    3280:	71 e0       	ldi	r23, 0x01	; 1
    3282:	ce 01       	movw	r24, r28
    3284:	01 96       	adiw	r24, 0x01	; 1
    3286:	0e 94 bd 18 	call	0x317a	; 0x317a <String::String(char const*)>
    328a:	62 e7       	ldi	r22, 0x72	; 114
    328c:	71 e0       	ldi	r23, 0x01	; 1
    328e:	ce 01       	movw	r24, r28
    3290:	07 96       	adiw	r24, 0x07	; 7
    3292:	0e 94 bd 18 	call	0x317a	; 0x317a <String::String(char const*)>
    3296:	62 e7       	ldi	r22, 0x72	; 114
    3298:	71 e0       	ldi	r23, 0x01	; 1
    329a:	ce 01       	movw	r24, r28
    329c:	0d 96       	adiw	r24, 0x0d	; 13
    329e:	0e 94 bd 18 	call	0x317a	; 0x317a <String::String(char const*)>
setFont():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1350
  } else if (gfxFont) { // NULL passed.  Current font struct defined?
    // Switching from new to classic font behavior.
    // Move cursor pos up 6 pixels so it's at top-left of char.
    cursor_y -= 6;
  }
  gfxFont = (GFXfont *)f;
    32a2:	10 92 39 03 	sts	0x0339, r1	; 0x800339 <display+0x1a>
    32a6:	10 92 38 03 	sts	0x0338, r1	; 0x800338 <display+0x19>
_ZN12Adafruit_GFX9setCursorEii():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.h:132
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    32aa:	10 92 2c 03 	sts	0x032C, r1	; 0x80032c <display+0xd>
    32ae:	10 92 2b 03 	sts	0x032B, r1	; 0x80032b <display+0xc>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.h:133
    cursor_y = y;
    32b2:	10 92 2e 03 	sts	0x032E, r1	; 0x80032e <display+0xf>
    32b6:	10 92 2d 03 	sts	0x032D, r1	; 0x80032d <display+0xe>
displayDial():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:111

  display.setFont(NULL);
  display.setCursor(0, 0);
  display.print("TESTE");
    32ba:	82 e5       	ldi	r24, 0x52	; 82
    32bc:	91 e0       	ldi	r25, 0x01	; 1
    32be:	0e 94 59 18 	call	0x30b2	; 0x30b2 <Print::print(char const*) [clone .constprop.43]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:113

  if (rx.getFrequencyInteger() > 999)
    32c2:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <SI4844::getFrequencyInteger() [clone .constprop.30]>
    32c6:	68 3e       	cpi	r22, 0xE8	; 232
    32c8:	73 40       	sbci	r23, 0x03	; 3
    32ca:	81 05       	cpc	r24, r1
    32cc:	91 05       	cpc	r25, r1
    32ce:	08 f4       	brcc	.+2      	; 0x32d2 <displayDial()+0x74>
    32d0:	8d c1       	rjmp	.+794    	; 0x35ec <displayDial()+0x38e>
operator=():
    32d2:	68 e5       	ldi	r22, 0x58	; 88
    32d4:	71 e0       	ldi	r23, 0x01	; 1
    32d6:	ce 01       	movw	r24, r28
    32d8:	01 96       	adiw	r24, 0x01	; 1
    32da:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <String::operator=(char const*) [clone .part.3]>
setFont():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1345
    if (!gfxFont) { // And no current font struct?
      // Switching from classic to new font behavior.
      // Move cursor pos down 6 pixels so it's on baseline.
      cursor_y += 6;
    }
  } else if (gfxFont) { // NULL passed.  Current font struct defined?
    32de:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <display+0x19>
    32e2:	90 91 39 03 	lds	r25, 0x0339	; 0x800339 <display+0x1a>
    32e6:	89 2b       	or	r24, r25
    32e8:	49 f0       	breq	.+18     	; 0x32fc <displayDial()+0x9e>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1348
    // Switching from new to classic font behavior.
    // Move cursor pos up 6 pixels so it's at top-left of char.
    cursor_y -= 6;
    32ea:	80 91 2d 03 	lds	r24, 0x032D	; 0x80032d <display+0xe>
    32ee:	90 91 2e 03 	lds	r25, 0x032E	; 0x80032e <display+0xf>
    32f2:	06 97       	sbiw	r24, 0x06	; 6
    32f4:	90 93 2e 03 	sts	0x032E, r25	; 0x80032e <display+0xf>
    32f8:	80 93 2d 03 	sts	0x032D, r24	; 0x80032d <display+0xe>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1350
  }
  gfxFont = (GFXfont *)f;
    32fc:	10 92 39 03 	sts	0x0339, r1	; 0x800339 <display+0x1a>
    3300:	10 92 38 03 	sts	0x0338, r1	; 0x800338 <display+0x19>
displayDial():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:119
    unit = (char *)"MHZ";
  else
    unit = (char *)"kHz";

  display.setFont(NULL);
  display.clearDisplay();
    3304:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <Adafruit_SSD1306::clearDisplay() [clone .constprop.23]>
_ZN12Adafruit_GFX9setCursorEii():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.h:132
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    3308:	10 92 2c 03 	sts	0x032C, r1	; 0x80032c <display+0xd>
    330c:	10 92 2b 03 	sts	0x032B, r1	; 0x80032b <display+0xc>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.h:133
    cursor_y = y;
    3310:	10 92 2e 03 	sts	0x032E, r1	; 0x80032e <display+0xf>
    3314:	10 92 2d 03 	sts	0x032D, r1	; 0x80032d <display+0xe>
_ZN6SI484411getBandModeEv():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.h:464
   * @ingroup GB1 
   * @brief Get the Band Mode 
   * @return char*   "FM", "AM" or "SW"
   * @see getStatusBandMode()
   */
  inline char * getBandMode(){ return (char *) bandmode_table[all_receiver_status.refined.BANDMODE]; };
    3318:	e0 91 e5 02 	lds	r30, 0x02E5	; 0x8002e5 <rx+0x2>
    331c:	e2 95       	swap	r30
    331e:	e6 95       	lsr	r30
    3320:	e6 95       	lsr	r30
    3322:	e3 70       	andi	r30, 0x03	; 3
    3324:	f0 e0       	ldi	r31, 0x00	; 0
    3326:	ee 0f       	add	r30, r30
    3328:	ff 1f       	adc	r31, r31
    332a:	e1 50       	subi	r30, 0x01	; 1
    332c:	fd 4f       	sbci	r31, 0xFD	; 253
displayDial():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:123


  display.setCursor(0, 0);
  display.print(rx.getBandMode());
    332e:	80 81       	ld	r24, Z
    3330:	91 81       	ldd	r25, Z+1	; 0x01
    3332:	0e 94 59 18 	call	0x30b2	; 0x30b2 <Print::print(char const*) [clone .constprop.43]>
_ZN12Adafruit_GFX9setCursorEii():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.h:132
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    3336:	80 e3       	ldi	r24, 0x30	; 48
    3338:	90 e0       	ldi	r25, 0x00	; 0
    333a:	90 93 2c 03 	sts	0x032C, r25	; 0x80032c <display+0xd>
    333e:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <display+0xc>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.h:133
    cursor_y = y;
    3342:	10 92 2e 03 	sts	0x032E, r1	; 0x80032e <display+0xf>
    3346:	10 92 2d 03 	sts	0x032D, r1	; 0x80032d <display+0xe>
_ZN6SI484425getStatusStationIndicatorEv():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.h:509
   * @ingroup GB1 
   * @brief Gets Station Indicator.
   * @details **Call getStatus or getAllReceiverInfo before calling this function** 
   * @return 0 = Invalid Station; 1 = Valid Station
   */
  inline uint16_t  getStatusStationIndicator() { return device_status.refined.STATION; };
    334a:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <rx>
displayDial():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:126

  display.setCursor(48, 0);
  if (rx.getStatusStationIndicator() != 0) {
    334e:	83 ff       	sbrs	r24, 3
    3350:	50 c1       	rjmp	.+672    	; 0x35f2 <displayDial()+0x394>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:127
    display.print("OK");
    3352:	80 e6       	ldi	r24, 0x60	; 96
    3354:	91 e0       	ldi	r25, 0x01	; 1
    3356:	0e 94 59 18 	call	0x30b2	; 0x30b2 <Print::print(char const*) [clone .constprop.43]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:128
    digitalWrite(TUNE_LED, HIGH);
    335a:	61 e0       	ldi	r22, 0x01	; 1
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:132
  }
  else {
    display.print("  ");
    digitalWrite(TUNE_LED, LOW);    
    335c:	8a e0       	ldi	r24, 0x0A	; 10
    335e:	0e 94 f6 09 	call	0x13ec	; 0x13ec <digitalWrite>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:135
  }

  bandIdx = rx.getCurrentBand();
    3362:	c0 90 f5 02 	lds	r12, 0x02F5	; 0x8002f5 <rx+0x12>
    3366:	c0 92 41 02 	sts	0x0241, r12	; 0x800241 <bandIdx>
_ZN12Adafruit_GFX9setCursorEii():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.h:132
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    336a:	80 e5       	ldi	r24, 0x50	; 80
    336c:	90 e0       	ldi	r25, 0x00	; 0
    336e:	90 93 2c 03 	sts	0x032C, r25	; 0x80032c <display+0xd>
    3372:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <display+0xc>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.h:133
    cursor_y = y;
    3376:	10 92 2e 03 	sts	0x032E, r1	; 0x80032e <display+0xf>
    337a:	10 92 2d 03 	sts	0x032D, r1	; 0x80032d <display+0xe>
print():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/Print.cpp:79
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    337e:	0c 2c       	mov	r0, r12
    3380:	00 0c       	add	r0, r0
    3382:	dd 08       	sbc	r13, r13
    3384:	ee 08       	sbc	r14, r14
    3386:	ff 08       	sbc	r15, r15
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/Print.cpp:97
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    3388:	4a e0       	ldi	r20, 0x0A	; 10
    338a:	c7 01       	movw	r24, r14
    338c:	b6 01       	movw	r22, r12
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/Print.cpp:92
size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
    338e:	f7 fe       	sbrs	r15, 7
    3390:	0d c0       	rjmp	.+26     	; 0x33ac <displayDial()+0x14e>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/Print.cpp:69
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    3392:	6d e2       	ldi	r22, 0x2D	; 45
    3394:	8f e1       	ldi	r24, 0x1F	; 31
    3396:	93 e0       	ldi	r25, 0x03	; 3
    3398:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <Adafruit_GFX::write(unsigned char)>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/Print.cpp:94
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
    339c:	66 27       	eor	r22, r22
    339e:	77 27       	eor	r23, r23
    33a0:	cb 01       	movw	r24, r22
    33a2:	6c 19       	sub	r22, r12
    33a4:	7d 09       	sbc	r23, r13
    33a6:	8e 09       	sbc	r24, r14
    33a8:	9f 09       	sbc	r25, r15
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/Print.cpp:95
      return printNumber(n, 10) + t;
    33aa:	4a e0       	ldi	r20, 0x0A	; 10
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/Print.cpp:97
    }
    return printNumber(n, 10);
    33ac:	0e 94 0b 18 	call	0x3016	; 0x3016 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.28]>
displayDial():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:140


  display.setCursor(80, 0);
  display.print(bandIdx);
  display.print("-");
    33b0:	83 e6       	ldi	r24, 0x63	; 99
    33b2:	91 e0       	ldi	r25, 0x01	; 1
    33b4:	0e 94 59 18 	call	0x30b2	; 0x30b2 <Print::print(char const*) [clone .constprop.43]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:141
  display.print(tabBand[bandIdx]);
    33b8:	e0 91 41 02 	lds	r30, 0x0241	; 0x800241 <bandIdx>
    33bc:	86 e0       	ldi	r24, 0x06	; 6
    33be:	e8 02       	muls	r30, r24
    33c0:	f0 01       	movw	r30, r0
    33c2:	11 24       	eor	r1, r1
    33c4:	e1 5a       	subi	r30, 0xA1	; 161
    33c6:	fc 4f       	sbci	r31, 0xFC	; 252
write():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/Print.h:58
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
    33c8:	44 81       	ldd	r20, Z+4	; 0x04
    33ca:	55 81       	ldd	r21, Z+5	; 0x05
    33cc:	60 81       	ld	r22, Z
    33ce:	71 81       	ldd	r23, Z+1	; 0x01
    33d0:	8f e1       	ldi	r24, 0x1F	; 31
    33d2:	93 e0       	ldi	r25, 0x03	; 3
    33d4:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <Print::write(unsigned char const*, unsigned int)>
setFont():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1350
    33d8:	89 e1       	ldi	r24, 0x19	; 25
    33da:	98 e0       	ldi	r25, 0x08	; 8
    33dc:	90 93 39 03 	sts	0x0339, r25	; 0x800339 <display+0x1a>
    33e0:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <display+0x19>
_ZN12Adafruit_GFX9setCursorEii():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.h:132
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    33e4:	8f e0       	ldi	r24, 0x0F	; 15
    33e6:	90 e0       	ldi	r25, 0x00	; 0
    33e8:	90 93 2c 03 	sts	0x032C, r25	; 0x80032c <display+0xd>
    33ec:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <display+0xc>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.h:133
    cursor_y = y;
    33f0:	8e e1       	ldi	r24, 0x1E	; 30
    33f2:	90 e0       	ldi	r25, 0x00	; 0
    33f4:	90 93 2e 03 	sts	0x032E, r25	; 0x80032e <display+0xf>
    33f8:	80 93 2d 03 	sts	0x032D, r24	; 0x80032d <display+0xe>
getFormattedFrequency():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1475
 * @param  removeRightDigit number of less significant digits to be removed (FM mode only)
 * @return  point to char with the formatted current frequency
 */
char* SI4844::getFormattedFrequency(uint8_t removeRightDigit, uint8_t thousandsSeparator) {

    uint32_t f = this->getFrequencyInteger();
    33fc:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <SI4844::getFrequencyInteger() [clone .constprop.30]>
_ZN6SI484417getStatusBandModeEv():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.h:562
   * @ingroup GB1 
   * @brief Gets the current Band Mode
   * @return 0 = FM mode; 1 = AM mode; 2 = SW mode
   * @see getBandMode()
   */
  inline uint16_t  getStatusBandMode() { return all_receiver_status.refined.BANDMODE; };
    3400:	20 91 e5 02 	lds	r18, 0x02E5	; 0x8002e5 <rx+0x2>
    3404:	22 95       	swap	r18
    3406:	26 95       	lsr	r18
    3408:	26 95       	lsr	r18
    340a:	23 70       	andi	r18, 0x03	; 3
getFormattedFrequency():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1476
    if ( this->getStatusBandMode() == 0 ) { 
    340c:	09 f0       	breq	.+2      	; 0x3410 <displayDial()+0x1b2>
    340e:	f7 c0       	rjmp	.+494    	; 0x35fe <displayDial()+0x3a0>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1477
        this->convertToChar(f,this->strFormattedCurrentFrequenct,6,3,thousandsSeparator,true);
    3410:	03 e0       	ldi	r16, 0x03	; 3
    3412:	26 e0       	ldi	r18, 0x06	; 6
    3414:	49 e0       	ldi	r20, 0x09	; 9
    3416:	53 e0       	ldi	r21, 0x03	; 3
    3418:	0e 94 55 09 	call	0x12aa	; 0x12aa <SI4844::convertToChar(unsigned long, char*, unsigned char, unsigned char, unsigned char, bool) [clone .constprop.39]>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1478
        strFormattedCurrentFrequenct[7-removeRightDigit] = '\0';
    341c:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <rx+0x2b>
displayDial():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:147


  display.setFont(&DSEG7_Classic_Regular_16);

  display.setCursor(15, 30);
  display.print(rx.getFormattedFrequency(2, '.'));
    3420:	89 e0       	ldi	r24, 0x09	; 9
    3422:	93 e0       	ldi	r25, 0x03	; 3
    3424:	0e 94 59 18 	call	0x30b2	; 0x30b2 <Print::print(char const*) [clone .constprop.43]>
_ZN12Adafruit_GFX9setCursorEii():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.h:132
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    3428:	84 e6       	ldi	r24, 0x64	; 100
    342a:	90 e0       	ldi	r25, 0x00	; 0
    342c:	90 93 2c 03 	sts	0x032C, r25	; 0x80032c <display+0xd>
    3430:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <display+0xc>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.h:133
    cursor_y = y;
    3434:	84 e1       	ldi	r24, 0x14	; 20
    3436:	90 e0       	ldi	r25, 0x00	; 0
    3438:	90 93 2e 03 	sts	0x032E, r25	; 0x80032e <display+0xf>
    343c:	80 93 2d 03 	sts	0x032D, r24	; 0x80032d <display+0xe>
setFont():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1345
    if (!gfxFont) { // And no current font struct?
      // Switching from classic to new font behavior.
      // Move cursor pos down 6 pixels so it's on baseline.
      cursor_y += 6;
    }
  } else if (gfxFont) { // NULL passed.  Current font struct defined?
    3440:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <display+0x19>
    3444:	90 91 39 03 	lds	r25, 0x0339	; 0x800339 <display+0x1a>
    3448:	89 2b       	or	r24, r25
    344a:	31 f0       	breq	.+12     	; 0x3458 <displayDial()+0x1fa>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1348
    // Switching from new to classic font behavior.
    // Move cursor pos up 6 pixels so it's at top-left of char.
    cursor_y -= 6;
    344c:	8e e0       	ldi	r24, 0x0E	; 14
    344e:	90 e0       	ldi	r25, 0x00	; 0
    3450:	90 93 2e 03 	sts	0x032E, r25	; 0x80032e <display+0xf>
    3454:	80 93 2d 03 	sts	0x032D, r24	; 0x80032d <display+0xe>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.cpp:1350
  }
  gfxFont = (GFXfont *)f;
    3458:	10 92 39 03 	sts	0x0339, r1	; 0x800339 <display+0x1a>
    345c:	10 92 38 03 	sts	0x0338, r1	; 0x800338 <display+0x19>
displayDial():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:150
  display.setCursor(100, 20);
  display.setFont(NULL);
  display.print(" ");
    3460:	81 e7       	ldi	r24, 0x71	; 113
    3462:	91 e0       	ldi	r25, 0x01	; 1
    3464:	0e 94 59 18 	call	0x30b2	; 0x30b2 <Print::print(char const*) [clone .constprop.43]>
write():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/Print.h:58
    3468:	4d 81       	ldd	r20, Y+5	; 0x05
    346a:	5e 81       	ldd	r21, Y+6	; 0x06
    346c:	69 81       	ldd	r22, Y+1	; 0x01
    346e:	7a 81       	ldd	r23, Y+2	; 0x02
    3470:	8f e1       	ldi	r24, 0x1F	; 31
    3472:	93 e0       	ldi	r25, 0x03	; 3
    3474:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <Print::write(unsigned char const*, unsigned int)>
_ZN6SI484417getStatusBandModeEv():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.h:562
    3478:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <rx+0x2>
    347c:	82 95       	swap	r24
    347e:	86 95       	lsr	r24
    3480:	86 95       	lsr	r24
    3482:	83 70       	andi	r24, 0x03	; 3
displayDial():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:156
  display.print(unit);


// Stereo status does not make sense with Si4827
#ifdef SI4844_DEVICE
  if (rx.getStatusBandMode() == 0) {
    3484:	a1 f4       	brne	.+40     	; 0x34ae <displayDial()+0x250>
_ZN12Adafruit_GFX9setCursorEii():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.h:132
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    3486:	8b e4       	ldi	r24, 0x4B	; 75
    3488:	90 e0       	ldi	r25, 0x00	; 0
    348a:	90 93 2c 03 	sts	0x032C, r25	; 0x80032c <display+0xd>
    348e:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <display+0xc>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.h:133
    cursor_y = y;
    3492:	89 e1       	ldi	r24, 0x19	; 25
    3494:	90 e0       	ldi	r25, 0x00	; 0
    3496:	90 93 2e 03 	sts	0x032E, r25	; 0x80032e <display+0xf>
    349a:	80 93 2d 03 	sts	0x032D, r24	; 0x80032d <display+0xe>
_ZN6SI484415getStatusStereoEv():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.h:500
   * @details Applicable to Si4840/44 parts FM function only (id does not make sense for Si4827).
   * @details **Call getStatus or getAllReceiverInfo before calling this function**  
   * @return 0 = Stereo off; 1 = Stereo on
   * @see getStereoIndicator()
   */
  inline uint16_t  getStatusStereo() { return device_status.refined.STEREO; };
    349e:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <rx>
displayDial():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:158
    display.setCursor(75, 25);
    if (rx.getStatusStereo() == 1)
    34a2:	82 ff       	sbrs	r24, 2
    34a4:	ba c0       	rjmp	.+372    	; 0x361a <displayDial()+0x3bc>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:159
      display.print("Stereo");
    34a6:	85 e6       	ldi	r24, 0x65	; 101
    34a8:	91 e0       	ldi	r25, 0x01	; 1
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:161
    else
      display.print("Mono  ");
    34aa:	0e 94 59 18 	call	0x30b2	; 0x30b2 <Print::print(char const*) [clone .constprop.43]>
display():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1000
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void Adafruit_SSD1306::display(void) {
  TRANSACTION_START
    34ae:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <display+0x1d>
    34b2:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <display+0x1e>
    34b6:	89 2b       	or	r24, r25
    34b8:	09 f4       	brne	.+2      	; 0x34bc <displayDial()+0x25e>
    34ba:	b2 c0       	rjmp	.+356    	; 0x3620 <displayDial()+0x3c2>
twi_setFrequency():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:142
    34bc:	20 91 54 03 	lds	r18, 0x0354	; 0x800354 <display+0x35>
    34c0:	30 91 55 03 	lds	r19, 0x0355	; 0x800355 <display+0x36>
    34c4:	40 91 56 03 	lds	r20, 0x0356	; 0x800356 <display+0x37>
    34c8:	50 91 57 03 	lds	r21, 0x0357	; 0x800357 <display+0x38>
    34cc:	60 e0       	ldi	r22, 0x00	; 0
    34ce:	74 e2       	ldi	r23, 0x24	; 36
    34d0:	84 ef       	ldi	r24, 0xF4	; 244
    34d2:	90 e0       	ldi	r25, 0x00	; 0
    34d4:	0e 94 b0 22 	call	0x4560	; 0x4560 <__udivmodsi4>
    34d8:	20 51       	subi	r18, 0x10	; 16
    34da:	31 09       	sbc	r19, r1
    34dc:	41 09       	sbc	r20, r1
    34de:	51 09       	sbc	r21, r1
    34e0:	56 95       	lsr	r21
    34e2:	47 95       	ror	r20
    34e4:	37 95       	ror	r19
    34e6:	27 95       	ror	r18
    34e8:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
display():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1006
  static const uint8_t PROGMEM dlist1[] = {
      SSD1306_PAGEADDR,
      0,                   // Page start address
      0xFF,                // Page end (not really, but works here)
      SSD1306_COLUMNADDR}; // Column start address
  ssd1306_commandList(dlist1, sizeof(dlist1));
    34ec:	64 e0       	ldi	r22, 0x04	; 4
    34ee:	85 e1       	ldi	r24, 0x15	; 21
    34f0:	98 e0       	ldi	r25, 0x08	; 8
    34f2:	0e 94 70 14 	call	0x28e0	; 0x28e0 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char) [clone .constprop.47]>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1008

  if (WIDTH == 64) {
    34f6:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <display+0x4>
    34fa:	90 91 24 03 	lds	r25, 0x0324	; 0x800324 <display+0x5>
    34fe:	80 34       	cpi	r24, 0x40	; 64
    3500:	91 05       	cpc	r25, r1
    3502:	09 f0       	breq	.+2      	; 0x3506 <displayDial()+0x2a8>
    3504:	a4 c0       	rjmp	.+328    	; 0x364e <displayDial()+0x3f0>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1009
    ssd1306_command1(0x20);             // Column start
    3506:	60 e2       	ldi	r22, 0x20	; 32
    3508:	8f e1       	ldi	r24, 0x1F	; 31
    350a:	93 e0       	ldi	r25, 0x03	; 3
    350c:	0e 94 18 15 	call	0x2a30	; 0x2a30 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1010
    ssd1306_command1(0x20 + WIDTH - 1); // Column end address
    3510:	60 91 23 03 	lds	r22, 0x0323	; 0x800323 <display+0x4>
    3514:	61 5e       	subi	r22, 0xE1	; 225
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1013
  } else {
    ssd1306_command1(0);           // Column start
    ssd1306_command1((WIDTH - 1)); // Column end address
    3516:	8f e1       	ldi	r24, 0x1F	; 31
    3518:	93 e0       	ldi	r25, 0x03	; 3
    351a:	0e 94 18 15 	call	0x2a30	; 0x2a30 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1025
  // a screen write and one immediately after should cover it.  But if
  // not, if this becomes a problem, yields() might be added in the
  // 32-byte transfer condition below.
  yield();
#endif
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
    351e:	20 91 25 03 	lds	r18, 0x0325	; 0x800325 <display+0x6>
    3522:	30 91 26 03 	lds	r19, 0x0326	; 0x800326 <display+0x7>
    3526:	c9 01       	movw	r24, r18
    3528:	07 96       	adiw	r24, 0x07	; 7
    352a:	97 fd       	sbrc	r25, 7
    352c:	07 96       	adiw	r24, 0x07	; 7
    352e:	23 e0       	ldi	r18, 0x03	; 3
    3530:	95 95       	asr	r25
    3532:	87 95       	ror	r24
    3534:	2a 95       	dec	r18
    3536:	e1 f7       	brne	.-8      	; 0x3530 <displayDial()+0x2d2>
    3538:	20 91 23 03 	lds	r18, 0x0323	; 0x800323 <display+0x4>
    353c:	30 91 24 03 	lds	r19, 0x0324	; 0x800324 <display+0x5>
    3540:	82 9f       	mul	r24, r18
    3542:	60 01       	movw	r12, r0
    3544:	83 9f       	mul	r24, r19
    3546:	d0 0c       	add	r13, r0
    3548:	92 9f       	mul	r25, r18
    354a:	d0 0c       	add	r13, r0
    354c:	11 24       	eor	r1, r1
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1026
  uint8_t *ptr = buffer;
    354e:	e0 90 3e 03 	lds	r14, 0x033E	; 0x80033e <display+0x1f>
    3552:	f0 90 3f 03 	lds	r15, 0x033F	; 0x80033f <display+0x20>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1027
  if (wire) { // I2C
    3556:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <display+0x1d>
    355a:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <display+0x1e>
    355e:	ce 0c       	add	r12, r14
    3560:	df 1c       	adc	r13, r15
    3562:	89 2b       	or	r24, r25
    3564:	09 f4       	brne	.+2      	; 0x3568 <displayDial()+0x30a>
    3566:	b8 c0       	rjmp	.+368    	; 0x36d8 <displayDial()+0x47a>
beginTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:206
    3568:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <display+0x21>
    356c:	0e 94 4b 09 	call	0x1296	; 0x1296 <TwoWire::beginTransmission(unsigned char) [clone .constprop.48]>
display():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1029
    wire->beginTransmission(i2caddr);
    WIRE_WRITE((uint8_t)0x40);
    3570:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <display+0x1d>
    3574:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <display+0x1e>
    3578:	dc 01       	movw	r26, r24
    357a:	ed 91       	ld	r30, X+
    357c:	fc 91       	ld	r31, X
    357e:	01 90       	ld	r0, Z+
    3580:	f0 81       	ld	r31, Z
    3582:	e0 2d       	mov	r30, r0
    3584:	60 e4       	ldi	r22, 0x40	; 64
    3586:	09 95       	icall
displayDial():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1030
    uint16_t bytesOut = 1;
    3588:	01 e0       	ldi	r16, 0x01	; 1
    358a:	10 e0       	ldi	r17, 0x00	; 0
    358c:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <display+0x1d>
    3590:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <display+0x1e>
display():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1031
    while (count--) {
    3594:	ce 14       	cp	r12, r14
    3596:	df 04       	cpc	r13, r15
    3598:	09 f4       	brne	.+2      	; 0x359c <displayDial()+0x33e>
    359a:	62 c0       	rjmp	.+196    	; 0x3660 <displayDial()+0x402>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1032
      if (bytesOut >= WIRE_MAX) {
    359c:	00 32       	cpi	r16, 0x20	; 32
    359e:	11 05       	cpc	r17, r1
    35a0:	a0 f0       	brcs	.+40     	; 0x35ca <displayDial()+0x36c>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1033
        wire->endTransmission();
    35a2:	0e 94 18 14 	call	0x2830	; 0x2830 <TwoWire::endTransmission()>
beginTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:206
    35a6:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <display+0x21>
    35aa:	0e 94 4b 09 	call	0x1296	; 0x1296 <TwoWire::beginTransmission(unsigned char) [clone .constprop.48]>
display():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1035
        wire->beginTransmission(i2caddr);
        WIRE_WRITE((uint8_t)0x40);
    35ae:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <display+0x1d>
    35b2:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <display+0x1e>
    35b6:	dc 01       	movw	r26, r24
    35b8:	ed 91       	ld	r30, X+
    35ba:	fc 91       	ld	r31, X
    35bc:	01 90       	ld	r0, Z+
    35be:	f0 81       	ld	r31, Z
    35c0:	e0 2d       	mov	r30, r0
    35c2:	60 e4       	ldi	r22, 0x40	; 64
    35c4:	09 95       	icall
displayDial():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1036
        bytesOut = 1;
    35c6:	01 e0       	ldi	r16, 0x01	; 1
    35c8:	10 e0       	ldi	r17, 0x00	; 0
display():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1038
      }
      WIRE_WRITE(*ptr++);
    35ca:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <display+0x1d>
    35ce:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <display+0x1e>
    35d2:	f7 01       	movw	r30, r14
    35d4:	61 91       	ld	r22, Z+
    35d6:	7f 01       	movw	r14, r30
    35d8:	dc 01       	movw	r26, r24
    35da:	ed 91       	ld	r30, X+
    35dc:	fc 91       	ld	r31, X
    35de:	01 90       	ld	r0, Z+
    35e0:	f0 81       	ld	r31, Z
    35e2:	e0 2d       	mov	r30, r0
    35e4:	09 95       	icall
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1039
      bytesOut++;
    35e6:	0f 5f       	subi	r16, 0xFF	; 255
    35e8:	1f 4f       	sbci	r17, 0xFF	; 255
    35ea:	d0 cf       	rjmp	.-96     	; 0x358c <displayDial()+0x32e>
operator=():
    35ec:	6c e5       	ldi	r22, 0x5C	; 92
    35ee:	71 e0       	ldi	r23, 0x01	; 1
    35f0:	72 ce       	rjmp	.-796    	; 0x32d6 <displayDial()+0x78>
displayDial():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:131
  if (rx.getStatusStationIndicator() != 0) {
    display.print("OK");
    digitalWrite(TUNE_LED, HIGH);
  }
  else {
    display.print("  ");
    35f2:	80 e7       	ldi	r24, 0x70	; 112
    35f4:	91 e0       	ldi	r25, 0x01	; 1
    35f6:	0e 94 59 18 	call	0x30b2	; 0x30b2 <Print::print(char const*) [clone .constprop.43]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:132
    digitalWrite(TUNE_LED, LOW);    
    35fa:	60 e0       	ldi	r22, 0x00	; 0
    35fc:	af ce       	rjmp	.-674    	; 0x335c <displayDial()+0xfe>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1480
    } else { 
         this->convertToChar(f,this->strFormattedCurrentFrequenct,5,(f > 999)? 2:0,'.',true);
    35fe:	02 e0       	ldi	r16, 0x02	; 2
getFormattedFrequency():
    3600:	68 3e       	cpi	r22, 0xE8	; 232
    3602:	a3 e0       	ldi	r26, 0x03	; 3
    3604:	7a 07       	cpc	r23, r26
    3606:	81 05       	cpc	r24, r1
    3608:	91 05       	cpc	r25, r1
    360a:	08 f4       	brcc	.+2      	; 0x360e <displayDial()+0x3b0>
displayDial():
    360c:	00 e0       	ldi	r16, 0x00	; 0
getFormattedFrequency():
    360e:	25 e0       	ldi	r18, 0x05	; 5
    3610:	49 e0       	ldi	r20, 0x09	; 9
    3612:	53 e0       	ldi	r21, 0x03	; 3
    3614:	0e 94 55 09 	call	0x12aa	; 0x12aa <SI4844::convertToChar(unsigned long, char*, unsigned char, unsigned char, unsigned char, bool) [clone .constprop.39]>
    3618:	03 cf       	rjmp	.-506    	; 0x3420 <displayDial()+0x1c2>
displayDial():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:161
  if (rx.getStatusBandMode() == 0) {
    display.setCursor(75, 25);
    if (rx.getStatusStereo() == 1)
      display.print("Stereo");
    else
      display.print("Mono  ");
    361a:	8c e6       	ldi	r24, 0x6C	; 108
    361c:	91 e0       	ldi	r25, 0x01	; 1
    361e:	45 cf       	rjmp	.-374    	; 0x34aa <displayDial()+0x24c>
display():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1000
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void Adafruit_SSD1306::display(void) {
  TRANSACTION_START
    3620:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <display+0x1b>
    3624:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <display+0x1c>
    3628:	89 2b       	or	r24, r25
    362a:	31 f0       	breq	.+12     	; 0x3638 <displayDial()+0x3da>
    362c:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <display+0x3e>
    3630:	90 91 5e 03 	lds	r25, 0x035E	; 0x80035e <display+0x3f>
    3634:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <SPIClass::beginTransaction(SPISettings)>
    3638:	e0 91 4e 03 	lds	r30, 0x034E	; 0x80034e <display+0x2f>
    363c:	f0 91 4f 03 	lds	r31, 0x034F	; 0x80034f <display+0x30>
    3640:	90 81       	ld	r25, Z
    3642:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <display+0x34>
    3646:	80 95       	com	r24
    3648:	89 23       	and	r24, r25
    364a:	80 83       	st	Z, r24
    364c:	4f cf       	rjmp	.-354    	; 0x34ec <displayDial()+0x28e>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1012

  if (WIDTH == 64) {
    ssd1306_command1(0x20);             // Column start
    ssd1306_command1(0x20 + WIDTH - 1); // Column end address
  } else {
    ssd1306_command1(0);           // Column start
    364e:	60 e0       	ldi	r22, 0x00	; 0
    3650:	8f e1       	ldi	r24, 0x1F	; 31
    3652:	93 e0       	ldi	r25, 0x03	; 3
    3654:	0e 94 18 15 	call	0x2a30	; 0x2a30 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1013
    ssd1306_command1((WIDTH - 1)); // Column end address
    3658:	60 91 23 03 	lds	r22, 0x0323	; 0x800323 <display+0x4>
    365c:	61 50       	subi	r22, 0x01	; 1
    365e:	5b cf       	rjmp	.-330    	; 0x3516 <displayDial()+0x2b8>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1041
        bytesOut = 1;
      }
      WIRE_WRITE(*ptr++);
      bytesOut++;
    }
    wire->endTransmission();
    3660:	0e 94 18 14 	call	0x2830	; 0x2830 <TwoWire::endTransmission()>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1047
  } else { // SPI
    SSD1306_MODE_DATA
    while (count--)
      SPIwrite(*ptr++);
  }
  TRANSACTION_END
    3664:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <display+0x1d>
    3668:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <display+0x1e>
    366c:	89 2b       	or	r24, r25
    366e:	09 f4       	brne	.+2      	; 0x3672 <displayDial()+0x414>
    3670:	77 c0       	rjmp	.+238    	; 0x3760 <displayDial()+0x502>
twi_setFrequency():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:142
    3672:	20 91 58 03 	lds	r18, 0x0358	; 0x800358 <display+0x39>
    3676:	30 91 59 03 	lds	r19, 0x0359	; 0x800359 <display+0x3a>
    367a:	40 91 5a 03 	lds	r20, 0x035A	; 0x80035a <display+0x3b>
    367e:	50 91 5b 03 	lds	r21, 0x035B	; 0x80035b <display+0x3c>
    3682:	60 e0       	ldi	r22, 0x00	; 0
    3684:	74 e2       	ldi	r23, 0x24	; 36
    3686:	84 ef       	ldi	r24, 0xF4	; 244
    3688:	90 e0       	ldi	r25, 0x00	; 0
    368a:	0e 94 b0 22 	call	0x4560	; 0x4560 <__udivmodsi4>
    368e:	20 51       	subi	r18, 0x10	; 16
    3690:	31 09       	sbc	r19, r1
    3692:	41 09       	sbc	r20, r1
    3694:	51 09       	sbc	r21, r1
    3696:	56 95       	lsr	r21
    3698:	47 95       	ror	r20
    369a:	37 95       	ror	r19
    369c:	27 95       	ror	r18
    369e:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
displayDial():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:107
  displayDial();
}


void displayDial() {
  String unit, freqDisplay, stereo;
    36a2:	ce 01       	movw	r24, r28
    36a4:	0d 96       	adiw	r24, 0x0d	; 13
    36a6:	0e 94 8d 18 	call	0x311a	; 0x311a <String::~String()>
    36aa:	ce 01       	movw	r24, r28
    36ac:	07 96       	adiw	r24, 0x07	; 7
    36ae:	0e 94 8d 18 	call	0x311a	; 0x311a <String::~String()>
    36b2:	ce 01       	movw	r24, r28
    36b4:	01 96       	adiw	r24, 0x01	; 1
    36b6:	0e 94 8d 18 	call	0x311a	; 0x311a <String::~String()>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:166
      display.print("Mono  ");
  }
#endif

  display.display();
}
    36ba:	62 96       	adiw	r28, 0x12	; 18
    36bc:	0f b6       	in	r0, 0x3f	; 63
    36be:	f8 94       	cli
    36c0:	de bf       	out	0x3e, r29	; 62
    36c2:	0f be       	out	0x3f, r0	; 63
    36c4:	cd bf       	out	0x3d, r28	; 61
    36c6:	df 91       	pop	r29
    36c8:	cf 91       	pop	r28
    36ca:	1f 91       	pop	r17
    36cc:	0f 91       	pop	r16
    36ce:	ff 90       	pop	r15
    36d0:	ef 90       	pop	r14
    36d2:	df 90       	pop	r13
    36d4:	cf 90       	pop	r12
    36d6:	08 95       	ret
display():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1043
      WIRE_WRITE(*ptr++);
      bytesOut++;
    }
    wire->endTransmission();
  } else { // SPI
    SSD1306_MODE_DATA
    36d8:	e0 91 4c 03 	lds	r30, 0x034C	; 0x80034c <display+0x2d>
    36dc:	f0 91 4d 03 	lds	r31, 0x034D	; 0x80034d <display+0x2e>
    36e0:	80 81       	ld	r24, Z
    36e2:	90 91 52 03 	lds	r25, 0x0352	; 0x800352 <display+0x33>
    36e6:	89 2b       	or	r24, r25
    36e8:	80 83       	st	Z, r24
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1044
    while (count--)
    36ea:	ce 14       	cp	r12, r14
    36ec:	df 04       	cpc	r13, r15
    36ee:	09 f4       	brne	.+2      	; 0x36f2 <displayDial()+0x494>
    36f0:	b9 cf       	rjmp	.-142    	; 0x3664 <displayDial()+0x406>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1045
      SPIwrite(*ptr++);
    36f2:	f7 01       	movw	r30, r14
    36f4:	81 91       	ld	r24, Z+
    36f6:	7f 01       	movw	r14, r30
_ZN16Adafruit_SSD13068SPIwriteEh():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:364
    @return void
    @note   See HAVE_PORTREG which defines if the method uses a port or bit-bang
   method
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    36f8:	20 91 3a 03 	lds	r18, 0x033A	; 0x80033a <display+0x1b>
    36fc:	30 91 3b 03 	lds	r19, 0x033B	; 0x80033b <display+0x1c>
    3700:	23 2b       	or	r18, r19
    3702:	19 f0       	breq	.+6      	; 0x370a <displayDial()+0x4ac>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:365
    (void)spi->transfer(d);
    3704:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <SPIClass::transfer(unsigned char)>
    3708:	f0 cf       	rjmp	.-32     	; 0x36ea <displayDial()+0x48c>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:364
    @return void
    @note   See HAVE_PORTREG which defines if the method uses a port or bit-bang
   method
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    370a:	28 e0       	ldi	r18, 0x08	; 8
    370c:	30 e0       	ldi	r19, 0x00	; 0
displayDial():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:367
    (void)spi->transfer(d);
  } else {
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    370e:	40 e8       	ldi	r20, 0x80	; 128
    3710:	e0 91 48 03 	lds	r30, 0x0348	; 0x800348 <display+0x29>
    3714:	f0 91 49 03 	lds	r31, 0x0349	; 0x800349 <display+0x2a>
    3718:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <display+0x31>
_ZN16Adafruit_SSD13068SPIwriteEh():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:369
#ifdef HAVE_PORTREG
      if (d & bit)
    371c:	58 2f       	mov	r21, r24
    371e:	54 23       	and	r21, r20
    3720:	d9 f0       	breq	.+54     	; 0x3758 <displayDial()+0x4fa>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:370
        *mosiPort |= mosiPinMask;
    3722:	50 81       	ld	r21, Z
    3724:	95 2b       	or	r25, r21
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:372
      else
        *mosiPort &= ~mosiPinMask;
    3726:	90 83       	st	Z, r25
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:373
      *clkPort |= clkPinMask;  // Clock high
    3728:	e0 91 4a 03 	lds	r30, 0x034A	; 0x80034a <display+0x2b>
    372c:	f0 91 4b 03 	lds	r31, 0x034B	; 0x80034b <display+0x2c>
    3730:	90 81       	ld	r25, Z
    3732:	50 91 51 03 	lds	r21, 0x0351	; 0x800351 <display+0x32>
    3736:	95 2b       	or	r25, r21
    3738:	90 83       	st	Z, r25
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:374
      *clkPort &= ~clkPinMask; // Clock low
    373a:	e0 91 4a 03 	lds	r30, 0x034A	; 0x80034a <display+0x2b>
    373e:	f0 91 4b 03 	lds	r31, 0x034B	; 0x80034b <display+0x2c>
    3742:	50 81       	ld	r21, Z
    3744:	90 91 51 03 	lds	r25, 0x0351	; 0x800351 <display+0x32>
    3748:	90 95       	com	r25
    374a:	95 23       	and	r25, r21
    374c:	90 83       	st	Z, r25
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:367
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    (void)spi->transfer(d);
  } else {
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    374e:	46 95       	lsr	r20
    3750:	21 50       	subi	r18, 0x01	; 1
    3752:	31 09       	sbc	r19, r1
    3754:	e9 f6       	brne	.-70     	; 0x3710 <displayDial()+0x4b2>
    3756:	c9 cf       	rjmp	.-110    	; 0x36ea <displayDial()+0x48c>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:372
#ifdef HAVE_PORTREG
      if (d & bit)
        *mosiPort |= mosiPinMask;
      else
        *mosiPort &= ~mosiPinMask;
    3758:	50 81       	ld	r21, Z
    375a:	90 95       	com	r25
    375c:	95 23       	and	r25, r21
    375e:	e3 cf       	rjmp	.-58     	; 0x3726 <displayDial()+0x4c8>
display():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:1047
  } else { // SPI
    SSD1306_MODE_DATA
    while (count--)
      SPIwrite(*ptr++);
  }
  TRANSACTION_END
    3760:	e0 91 4e 03 	lds	r30, 0x034E	; 0x80034e <display+0x2f>
    3764:	f0 91 4f 03 	lds	r31, 0x034F	; 0x80034f <display+0x30>
    3768:	80 81       	ld	r24, Z
    376a:	90 91 53 03 	lds	r25, 0x0353	; 0x800353 <display+0x34>
    376e:	89 2b       	or	r24, r25
    3770:	80 83       	st	Z, r24
    3772:	97 cf       	rjmp	.-210    	; 0x36a2 <displayDial()+0x444>

00003774 <__vector_16>:
__vector_16():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    3774:	1f 92       	push	r1
    3776:	0f 92       	push	r0
    3778:	0f b6       	in	r0, 0x3f	; 63
    377a:	0f 92       	push	r0
    377c:	11 24       	eor	r1, r1
    377e:	2f 93       	push	r18
    3780:	3f 93       	push	r19
    3782:	8f 93       	push	r24
    3784:	9f 93       	push	r25
    3786:	af 93       	push	r26
    3788:	bf 93       	push	r27
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
    378a:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <timer0_millis>
    378e:	90 91 ac 02 	lds	r25, 0x02AC	; 0x8002ac <timer0_millis+0x1>
    3792:	a0 91 ad 02 	lds	r26, 0x02AD	; 0x8002ad <timer0_millis+0x2>
    3796:	b0 91 ae 02 	lds	r27, 0x02AE	; 0x8002ae <timer0_millis+0x3>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
    379a:	30 91 aa 02 	lds	r19, 0x02AA	; 0x8002aa <timer0_fract>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
    379e:	23 e0       	ldi	r18, 0x03	; 3
    37a0:	23 0f       	add	r18, r19
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
    37a2:	2d 37       	cpi	r18, 0x7D	; 125
    37a4:	68 f1       	brcs	.+90     	; 0x3800 <__vector_16+0x8c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
    37a6:	26 e8       	ldi	r18, 0x86	; 134
    37a8:	23 0f       	add	r18, r19
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
    37aa:	02 96       	adiw	r24, 0x02	; 2
    37ac:	a1 1d       	adc	r26, r1
    37ae:	b1 1d       	adc	r27, r1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
    37b0:	20 93 aa 02 	sts	0x02AA, r18	; 0x8002aa <timer0_fract>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
    37b4:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <timer0_millis>
    37b8:	90 93 ac 02 	sts	0x02AC, r25	; 0x8002ac <timer0_millis+0x1>
    37bc:	a0 93 ad 02 	sts	0x02AD, r26	; 0x8002ad <timer0_millis+0x2>
    37c0:	b0 93 ae 02 	sts	0x02AE, r27	; 0x8002ae <timer0_millis+0x3>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
    37c4:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <timer0_overflow_count>
    37c8:	90 91 b0 02 	lds	r25, 0x02B0	; 0x8002b0 <timer0_overflow_count+0x1>
    37cc:	a0 91 b1 02 	lds	r26, 0x02B1	; 0x8002b1 <timer0_overflow_count+0x2>
    37d0:	b0 91 b2 02 	lds	r27, 0x02B2	; 0x8002b2 <timer0_overflow_count+0x3>
    37d4:	01 96       	adiw	r24, 0x01	; 1
    37d6:	a1 1d       	adc	r26, r1
    37d8:	b1 1d       	adc	r27, r1
    37da:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <timer0_overflow_count>
    37de:	90 93 b0 02 	sts	0x02B0, r25	; 0x8002b0 <timer0_overflow_count+0x1>
    37e2:	a0 93 b1 02 	sts	0x02B1, r26	; 0x8002b1 <timer0_overflow_count+0x2>
    37e6:	b0 93 b2 02 	sts	0x02B2, r27	; 0x8002b2 <timer0_overflow_count+0x3>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring.c:213
#endif
}
    37ea:	bf 91       	pop	r27
    37ec:	af 91       	pop	r26
    37ee:	9f 91       	pop	r25
    37f0:	8f 91       	pop	r24
    37f2:	3f 91       	pop	r19
    37f4:	2f 91       	pop	r18
    37f6:	0f 90       	pop	r0
    37f8:	0f be       	out	0x3f, r0	; 63
    37fa:	0f 90       	pop	r0
    37fc:	1f 90       	pop	r1
    37fe:	18 95       	reti
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
    3800:	01 96       	adiw	r24, 0x01	; 1
    3802:	a1 1d       	adc	r26, r1
    3804:	b1 1d       	adc	r27, r1
    3806:	d4 cf       	rjmp	.-88     	; 0x37b0 <__vector_16+0x3c>

00003808 <__vector_2>:
__vector_2():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/WInterrupts.c:489
|| defined(__AVR_ATmega48PB__)  || defined(__AVR_ATmega88__)  || defined(__AVR_ATmega88P__)  \
|| defined(__AVR_ATmega88PB__)  || defined(__AVR_ATmega168__) || defined(__AVR_ATmega168P__) \
|| defined(__AVR_ATmega168PB__) || defined(__AVR_ATmega328__) || defined(__AVR_ATmega328P__) \
|| defined(__AVR_ATmega328PB__)
  IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
  IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    3808:	1f 92       	push	r1
    380a:	0f 92       	push	r0
    380c:	0f b6       	in	r0, 0x3f	; 63
    380e:	0f 92       	push	r0
    3810:	11 24       	eor	r1, r1
    3812:	2f 93       	push	r18
    3814:	3f 93       	push	r19
    3816:	4f 93       	push	r20
    3818:	5f 93       	push	r21
    381a:	6f 93       	push	r22
    381c:	7f 93       	push	r23
    381e:	8f 93       	push	r24
    3820:	9f 93       	push	r25
    3822:	af 93       	push	r26
    3824:	bf 93       	push	r27
    3826:	ef 93       	push	r30
    3828:	ff 93       	push	r31
    382a:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_start+0x2>
    382e:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <__data_start+0x3>
    3832:	09 95       	icall
    3834:	ff 91       	pop	r31
    3836:	ef 91       	pop	r30
    3838:	bf 91       	pop	r27
    383a:	af 91       	pop	r26
    383c:	9f 91       	pop	r25
    383e:	8f 91       	pop	r24
    3840:	7f 91       	pop	r23
    3842:	6f 91       	pop	r22
    3844:	5f 91       	pop	r21
    3846:	4f 91       	pop	r20
    3848:	3f 91       	pop	r19
    384a:	2f 91       	pop	r18
    384c:	0f 90       	pop	r0
    384e:	0f be       	out	0x3f, r0	; 63
    3850:	0f 90       	pop	r0
    3852:	1f 90       	pop	r1
    3854:	18 95       	reti

00003856 <__vector_1>:
__vector_1():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/WInterrupts.c:488
#elif defined(__AVR_ATmega8__)  || defined(__AVR_ATmega48__)  || defined(__AVR_ATmega48P__)  \
|| defined(__AVR_ATmega48PB__)  || defined(__AVR_ATmega88__)  || defined(__AVR_ATmega88P__)  \
|| defined(__AVR_ATmega88PB__)  || defined(__AVR_ATmega168__) || defined(__AVR_ATmega168P__) \
|| defined(__AVR_ATmega168PB__) || defined(__AVR_ATmega328__) || defined(__AVR_ATmega328P__) \
|| defined(__AVR_ATmega328PB__)
  IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    3856:	1f 92       	push	r1
    3858:	0f 92       	push	r0
    385a:	0f b6       	in	r0, 0x3f	; 63
    385c:	0f 92       	push	r0
    385e:	11 24       	eor	r1, r1
    3860:	2f 93       	push	r18
    3862:	3f 93       	push	r19
    3864:	4f 93       	push	r20
    3866:	5f 93       	push	r21
    3868:	6f 93       	push	r22
    386a:	7f 93       	push	r23
    386c:	8f 93       	push	r24
    386e:	9f 93       	push	r25
    3870:	af 93       	push	r26
    3872:	bf 93       	push	r27
    3874:	ef 93       	push	r30
    3876:	ff 93       	push	r31
    3878:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
    387c:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
    3880:	09 95       	icall
    3882:	ff 91       	pop	r31
    3884:	ef 91       	pop	r30
    3886:	bf 91       	pop	r27
    3888:	af 91       	pop	r26
    388a:	9f 91       	pop	r25
    388c:	8f 91       	pop	r24
    388e:	7f 91       	pop	r23
    3890:	6f 91       	pop	r22
    3892:	5f 91       	pop	r21
    3894:	4f 91       	pop	r20
    3896:	3f 91       	pop	r19
    3898:	2f 91       	pop	r18
    389a:	0f 90       	pop	r0
    389c:	0f be       	out	0x3f, r0	; 63
    389e:	0f 90       	pop	r0
    38a0:	1f 90       	pop	r1
    38a2:	18 95       	reti

000038a4 <__vector_24>:
__vector_24():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:534
  }
  return(flag);
}

ISR(TWI_vect)
{
    38a4:	1f 92       	push	r1
    38a6:	0f 92       	push	r0
    38a8:	0f b6       	in	r0, 0x3f	; 63
    38aa:	0f 92       	push	r0
    38ac:	11 24       	eor	r1, r1
    38ae:	2f 93       	push	r18
    38b0:	3f 93       	push	r19
    38b2:	4f 93       	push	r20
    38b4:	5f 93       	push	r21
    38b6:	6f 93       	push	r22
    38b8:	7f 93       	push	r23
    38ba:	8f 93       	push	r24
    38bc:	9f 93       	push	r25
    38be:	af 93       	push	r26
    38c0:	bf 93       	push	r27
    38c2:	ef 93       	push	r30
    38c4:	ff 93       	push	r31
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:535
  switch(TW_STATUS){
    38c6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    38ca:	88 7f       	andi	r24, 0xF8	; 248
    38cc:	80 36       	cpi	r24, 0x60	; 96
    38ce:	09 f4       	brne	.+2      	; 0x38d2 <__vector_24+0x2e>
    38d0:	4a c0       	rjmp	.+148    	; 0x3966 <__vector_24+0xc2>
    38d2:	f0 f5       	brcc	.+124    	; 0x3950 <__vector_24+0xac>
    38d4:	88 32       	cpi	r24, 0x28	; 40
    38d6:	09 f4       	brne	.+2      	; 0x38da <__vector_24+0x36>
    38d8:	a7 c0       	rjmp	.+334    	; 0x3a28 <__vector_24+0x184>
    38da:	18 f5       	brcc	.+70     	; 0x3922 <__vector_24+0x7e>
    38dc:	80 31       	cpi	r24, 0x10	; 16
    38de:	09 f4       	brne	.+2      	; 0x38e2 <__vector_24+0x3e>
    38e0:	9b c0       	rjmp	.+310    	; 0x3a18 <__vector_24+0x174>
    38e2:	b8 f4       	brcc	.+46     	; 0x3912 <__vector_24+0x6e>
    38e4:	88 23       	and	r24, r24
    38e6:	09 f4       	brne	.+2      	; 0x38ea <__vector_24+0x46>
    38e8:	05 c1       	rjmp	.+522    	; 0x3af4 <__vector_24+0x250>
    38ea:	88 30       	cpi	r24, 0x08	; 8
    38ec:	09 f4       	brne	.+2      	; 0x38f0 <__vector_24+0x4c>
    38ee:	94 c0       	rjmp	.+296    	; 0x3a18 <__vector_24+0x174>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:696
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    38f0:	ff 91       	pop	r31
    38f2:	ef 91       	pop	r30
    38f4:	bf 91       	pop	r27
    38f6:	af 91       	pop	r26
    38f8:	9f 91       	pop	r25
    38fa:	8f 91       	pop	r24
    38fc:	7f 91       	pop	r23
    38fe:	6f 91       	pop	r22
    3900:	5f 91       	pop	r21
    3902:	4f 91       	pop	r20
    3904:	3f 91       	pop	r19
    3906:	2f 91       	pop	r18
    3908:	0f 90       	pop	r0
    390a:	0f be       	out	0x3f, r0	; 63
    390c:	0f 90       	pop	r0
    390e:	1f 90       	pop	r1
    3910:	18 95       	reti
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    3912:	88 31       	cpi	r24, 0x18	; 24
    3914:	09 f4       	brne	.+2      	; 0x3918 <__vector_24+0x74>
    3916:	88 c0       	rjmp	.+272    	; 0x3a28 <__vector_24+0x184>
    3918:	80 32       	cpi	r24, 0x20	; 32
    391a:	51 f7       	brne	.-44     	; 0x38f0 <__vector_24+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:570
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    391c:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <twi_error>
    3920:	14 c0       	rjmp	.+40     	; 0x394a <__vector_24+0xa6>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    3922:	80 34       	cpi	r24, 0x40	; 64
    3924:	09 f4       	brne	.+2      	; 0x3928 <__vector_24+0x84>
    3926:	a5 c0       	rjmp	.+330    	; 0x3a72 <__vector_24+0x1ce>
    3928:	40 f4       	brcc	.+16     	; 0x393a <__vector_24+0x96>
    392a:	80 33       	cpi	r24, 0x30	; 48
    392c:	b9 f3       	breq	.-18     	; 0x391c <__vector_24+0x78>
    392e:	88 33       	cpi	r24, 0x38	; 56
    3930:	f9 f6       	brne	.-66     	; 0x38f0 <__vector_24+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:574
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    3932:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <twi_error>
twi_reply():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3936:	85 ec       	ldi	r24, 0xC5	; 197
    3938:	bc c0       	rjmp	.+376    	; 0x3ab2 <__vector_24+0x20e>
__vector_24():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    393a:	80 35       	cpi	r24, 0x50	; 80
    393c:	09 f4       	brne	.+2      	; 0x3940 <__vector_24+0x9c>
    393e:	89 c0       	rjmp	.+274    	; 0x3a52 <__vector_24+0x1ae>
    3940:	88 35       	cpi	r24, 0x58	; 88
    3942:	09 f4       	brne	.+2      	; 0x3946 <__vector_24+0xa2>
    3944:	9e c0       	rjmp	.+316    	; 0x3a82 <__vector_24+0x1de>
    3946:	88 34       	cpi	r24, 0x48	; 72
    3948:	99 f6       	brne	.-90     	; 0x38f0 <__vector_24+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:693
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
    394a:	0e 94 5d 13 	call	0x26ba	; 0x26ba <twi_stop>
    394e:	d0 cf       	rjmp	.-96     	; 0x38f0 <__vector_24+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    3950:	88 39       	cpi	r24, 0x98	; 152
    3952:	09 f4       	brne	.+2      	; 0x3956 <__vector_24+0xb2>
    3954:	94 c0       	rjmp	.+296    	; 0x3a7e <__vector_24+0x1da>
    3956:	38 f5       	brcc	.+78     	; 0x39a6 <__vector_24+0x102>
    3958:	88 37       	cpi	r24, 0x78	; 120
    395a:	29 f0       	breq	.+10     	; 0x3966 <__vector_24+0xc2>
    395c:	50 f4       	brcc	.+20     	; 0x3972 <__vector_24+0xce>
    395e:	88 36       	cpi	r24, 0x68	; 104
    3960:	11 f0       	breq	.+4      	; 0x3966 <__vector_24+0xc2>
    3962:	80 37       	cpi	r24, 0x70	; 112
    3964:	29 f6       	brne	.-118    	; 0x38f0 <__vector_24+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:616
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    3966:	83 e0       	ldi	r24, 0x03	; 3
    3968:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <twi_state>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:618
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    396c:	10 92 a4 02 	sts	0x02A4, r1	; 0x8002a4 <twi_rxBufferIndex>
    3970:	57 c0       	rjmp	.+174    	; 0x3a20 <__vector_24+0x17c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    3972:	88 38       	cpi	r24, 0x88	; 136
    3974:	09 f4       	brne	.+2      	; 0x3978 <__vector_24+0xd4>
    3976:	83 c0       	rjmp	.+262    	; 0x3a7e <__vector_24+0x1da>
    3978:	80 39       	cpi	r24, 0x90	; 144
    397a:	19 f0       	breq	.+6      	; 0x3982 <__vector_24+0xde>
    397c:	80 38       	cpi	r24, 0x80	; 128
    397e:	09 f0       	breq	.+2      	; 0x3982 <__vector_24+0xde>
    3980:	b7 cf       	rjmp	.-146    	; 0x38f0 <__vector_24+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:624
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    3982:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <twi_rxBufferIndex>
    3986:	80 32       	cpi	r24, 0x20	; 32
    3988:	08 f0       	brcs	.+2      	; 0x398c <__vector_24+0xe8>
    398a:	79 c0       	rjmp	.+242    	; 0x3a7e <__vector_24+0x1da>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:626
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    398c:	e0 91 a4 02 	lds	r30, 0x02A4	; 0x8002a4 <twi_rxBufferIndex>
    3990:	81 e0       	ldi	r24, 0x01	; 1
    3992:	8e 0f       	add	r24, r30
    3994:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <twi_rxBufferIndex>
    3998:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    399c:	f0 e0       	ldi	r31, 0x00	; 0
    399e:	ec 57       	subi	r30, 0x7C	; 124
    39a0:	fd 4f       	sbci	r31, 0xFD	; 253
    39a2:	80 83       	st	Z, r24
    39a4:	3d c0       	rjmp	.+122    	; 0x3a20 <__vector_24+0x17c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    39a6:	80 3b       	cpi	r24, 0xB0	; 176
    39a8:	39 f0       	breq	.+14     	; 0x39b8 <__vector_24+0x114>
    39aa:	e0 f4       	brcc	.+56     	; 0x39e4 <__vector_24+0x140>
    39ac:	80 3a       	cpi	r24, 0xA0	; 160
    39ae:	09 f4       	brne	.+2      	; 0x39b2 <__vector_24+0x10e>
    39b0:	85 c0       	rjmp	.+266    	; 0x3abc <__vector_24+0x218>
    39b2:	88 3a       	cpi	r24, 0xA8	; 168
    39b4:	09 f0       	breq	.+2      	; 0x39b8 <__vector_24+0x114>
    39b6:	9c cf       	rjmp	.-200    	; 0x38f0 <__vector_24+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:655

    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    39b8:	84 e0       	ldi	r24, 0x04	; 4
    39ba:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <twi_state>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:657
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    39be:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <twi_txBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:659
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    39c2:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <twi_txBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:662
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    39c6:	e0 91 a8 02 	lds	r30, 0x02A8	; 0x8002a8 <twi_onSlaveTransmit>
    39ca:	f0 91 a9 02 	lds	r31, 0x02A9	; 0x8002a9 <twi_onSlaveTransmit+0x1>
    39ce:	09 95       	icall
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:664
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    39d0:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <twi_txBufferLength>
    39d4:	81 11       	cpse	r24, r1
    39d6:	0f c0       	rjmp	.+30     	; 0x39f6 <__vector_24+0x152>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:665
        twi_txBufferLength = 1;
    39d8:	81 e0       	ldi	r24, 0x01	; 1
    39da:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <twi_txBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:666
        twi_txBuffer[0] = 0x00;
    39de:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <twi_txBuffer>
    39e2:	09 c0       	rjmp	.+18     	; 0x39f6 <__vector_24+0x152>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    39e4:	80 3c       	cpi	r24, 0xC0	; 192
    39e6:	09 f4       	brne	.+2      	; 0x39ea <__vector_24+0x146>
    39e8:	a6 cf       	rjmp	.-180    	; 0x3936 <__vector_24+0x92>
    39ea:	88 3c       	cpi	r24, 0xC8	; 200
    39ec:	09 f4       	brne	.+2      	; 0x39f0 <__vector_24+0x14c>
    39ee:	a3 cf       	rjmp	.-186    	; 0x3936 <__vector_24+0x92>
    39f0:	88 3b       	cpi	r24, 0xB8	; 184
    39f2:	09 f0       	breq	.+2      	; 0x39f6 <__vector_24+0x152>
    39f4:	7d cf       	rjmp	.-262    	; 0x38f0 <__vector_24+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:672
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    39f6:	e0 91 83 02 	lds	r30, 0x0283	; 0x800283 <twi_txBufferIndex>
    39fa:	81 e0       	ldi	r24, 0x01	; 1
    39fc:	8e 0f       	add	r24, r30
    39fe:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <twi_txBufferIndex>
    3a02:	f0 e0       	ldi	r31, 0x00	; 0
    3a04:	ee 59       	subi	r30, 0x9E	; 158
    3a06:	fd 4f       	sbci	r31, 0xFD	; 253
    3a08:	80 81       	ld	r24, Z
    3a0a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:674
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    3a0e:	90 91 83 02 	lds	r25, 0x0283	; 0x800283 <twi_txBufferIndex>
    3a12:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <twi_txBufferLength>
    3a16:	31 c0       	rjmp	.+98     	; 0x3a7a <__vector_24+0x1d6>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:540
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    3a18:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <twi_slarw>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:550
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    3a1c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
twi_reply():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3a20:	85 ec       	ldi	r24, 0xC5	; 197
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:423
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3a22:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    3a26:	64 cf       	rjmp	.-312    	; 0x38f0 <__vector_24+0x4c>
__vector_24():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:548

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3a28:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <twi_masterBufferIndex>
    3a2c:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <twi_masterBufferLength>
    3a30:	98 17       	cp	r25, r24
    3a32:	b8 f5       	brcc	.+110    	; 0x3aa2 <__vector_24+0x1fe>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:550
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    3a34:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <twi_masterBuffer>
    3a38:	90 91 db 02 	lds	r25, 0x02DB	; 0x8002db <twi_masterBuffer+0x1>
    3a3c:	e0 91 d9 02 	lds	r30, 0x02D9	; 0x8002d9 <twi_masterBufferIndex>
    3a40:	21 e0       	ldi	r18, 0x01	; 1
    3a42:	2e 0f       	add	r18, r30
    3a44:	20 93 d9 02 	sts	0x02D9, r18	; 0x8002d9 <twi_masterBufferIndex>
    3a48:	e8 0f       	add	r30, r24
    3a4a:	f9 2f       	mov	r31, r25
    3a4c:	f1 1d       	adc	r31, r1
    3a4e:	80 81       	ld	r24, Z
    3a50:	e5 cf       	rjmp	.-54     	; 0x3a1c <__vector_24+0x178>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:581
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3a52:	20 91 da 02 	lds	r18, 0x02DA	; 0x8002da <twi_masterBuffer>
    3a56:	30 91 db 02 	lds	r19, 0x02DB	; 0x8002db <twi_masterBuffer+0x1>
    3a5a:	e0 91 d9 02 	lds	r30, 0x02D9	; 0x8002d9 <twi_masterBufferIndex>
    3a5e:	81 e0       	ldi	r24, 0x01	; 1
    3a60:	8e 0f       	add	r24, r30
    3a62:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <twi_masterBufferIndex>
    3a66:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    3a6a:	e2 0f       	add	r30, r18
    3a6c:	f3 2f       	mov	r31, r19
    3a6e:	f1 1d       	adc	r31, r1
    3a70:	80 83       	st	Z, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:585
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3a72:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <twi_masterBufferIndex>
    3a76:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <twi_masterBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:674
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    3a7a:	98 17       	cp	r25, r24
    3a7c:	88 f2       	brcs	.-94     	; 0x3a20 <__vector_24+0x17c>
twi_reply():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:423
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3a7e:	85 e8       	ldi	r24, 0x85	; 133
    3a80:	d0 cf       	rjmp	.-96     	; 0x3a22 <__vector_24+0x17e>
__vector_24():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:593
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3a82:	20 91 da 02 	lds	r18, 0x02DA	; 0x8002da <twi_masterBuffer>
    3a86:	30 91 db 02 	lds	r19, 0x02DB	; 0x8002db <twi_masterBuffer+0x1>
    3a8a:	e0 91 d9 02 	lds	r30, 0x02D9	; 0x8002d9 <twi_masterBufferIndex>
    3a8e:	81 e0       	ldi	r24, 0x01	; 1
    3a90:	8e 0f       	add	r24, r30
    3a92:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <twi_masterBufferIndex>
    3a96:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    3a9a:	e2 0f       	add	r30, r18
    3a9c:	f3 2f       	mov	r31, r19
    3a9e:	f1 1d       	adc	r31, r1
    3aa0:	80 83       	st	Z, r24
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:594
  if (twi_sendStop)
    3aa2:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <twi_sendStop>
    3aa6:	81 11       	cpse	r24, r1
    3aa8:	50 cf       	rjmp	.-352    	; 0x394a <__vector_24+0xa6>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:597
          twi_stop();
  else {
    twi_inRepStart = true;  // we're going to send the START
    3aaa:	81 e0       	ldi	r24, 0x01	; 1
    3aac:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <twi_inRepStart>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:601
    // don't enable the interrupt. We'll generate the start, but we
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    3ab0:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3ab2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
__vector_24():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:685
    case TW_ST_DATA_NACK: // received nack, we are done
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    3ab6:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <twi_state>
    3aba:	1a cf       	rjmp	.-460    	; 0x38f0 <__vector_24+0x4c>
twi_releaseBus():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:474
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    3abc:	85 ec       	ldi	r24, 0xC5	; 197
    3abe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:477

  // update twi state
  twi_state = TWI_READY;
    3ac2:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <twi_state>
__vector_24():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:637
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    3ac6:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <twi_rxBufferIndex>
    3aca:	80 32       	cpi	r24, 0x20	; 32
    3acc:	30 f4       	brcc	.+12     	; 0x3ada <__vector_24+0x236>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:638
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    3ace:	e0 91 a4 02 	lds	r30, 0x02A4	; 0x8002a4 <twi_rxBufferIndex>
    3ad2:	f0 e0       	ldi	r31, 0x00	; 0
    3ad4:	ec 57       	subi	r30, 0x7C	; 124
    3ad6:	fd 4f       	sbci	r31, 0xFD	; 253
    3ad8:	10 82       	st	Z, r1
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:641
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    3ada:	60 91 a4 02 	lds	r22, 0x02A4	; 0x8002a4 <twi_rxBufferIndex>
    3ade:	70 e0       	ldi	r23, 0x00	; 0
    3ae0:	e0 91 a6 02 	lds	r30, 0x02A6	; 0x8002a6 <twi_onSlaveReceive>
    3ae4:	f0 91 a7 02 	lds	r31, 0x02A7	; 0x8002a7 <twi_onSlaveReceive+0x1>
    3ae8:	84 e8       	ldi	r24, 0x84	; 132
    3aea:	92 e0       	ldi	r25, 0x02	; 2
    3aec:	09 95       	icall
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:643
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    3aee:	10 92 a4 02 	sts	0x02A4, r1	; 0x8002a4 <twi_rxBufferIndex>
    3af2:	fe ce       	rjmp	.-516    	; 0x38f0 <__vector_24+0x4c>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:692

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    3af4:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <twi_error>
    3af8:	28 cf       	rjmp	.-432    	; 0x394a <__vector_24+0xa6>

00003afa <global constructors keyed to 65535_0_SI4844_01_OLED_SLIDE_SWITCH.ino.cpp.o.3912>:
_GLOBAL__I_65535_0_SI4844_01_OLED_SLIDE_SWITCH.ino.cpp.o.3912():
    3afa:	cf 93       	push	r28
    3afc:	df 93       	push	r29
    3afe:	c3 e1       	ldi	r28, 0x13	; 19
    3b00:	d3 e0       	ldi	r29, 0x03	; 3
    3b02:	1b 82       	std	Y+3, r1	; 0x03
    3b04:	1a 82       	std	Y+2, r1	; 0x02
    3b06:	88 ee       	ldi	r24, 0xE8	; 232
    3b08:	93 e0       	ldi	r25, 0x03	; 3
    3b0a:	a0 e0       	ldi	r26, 0x00	; 0
    3b0c:	b0 e0       	ldi	r27, 0x00	; 0
    3b0e:	8c 83       	std	Y+4, r24	; 0x04
    3b10:	9d 83       	std	Y+5, r25	; 0x05
    3b12:	ae 83       	std	Y+6, r26	; 0x06
    3b14:	bf 83       	std	Y+7, r27	; 0x07
    3b16:	88 e1       	ldi	r24, 0x18	; 24
    3b18:	91 e0       	ldi	r25, 0x01	; 1
    3b1a:	99 83       	std	Y+1, r25	; 0x01
    3b1c:	88 83       	st	Y, r24
    3b1e:	63 e7       	ldi	r22, 0x73	; 115
    3b20:	71 e0       	ldi	r23, 0x01	; 1
    3b22:	8f e5       	ldi	r24, 0x5F	; 95
    3b24:	93 e0       	ldi	r25, 0x03	; 3
    3b26:	0e 94 bd 18 	call	0x317a	; 0x317a <String::String(char const*)>
    3b2a:	67 e7       	ldi	r22, 0x77	; 119
    3b2c:	71 e0       	ldi	r23, 0x01	; 1
    3b2e:	85 e6       	ldi	r24, 0x65	; 101
    3b30:	93 e0       	ldi	r25, 0x03	; 3
    3b32:	0e 94 bd 18 	call	0x317a	; 0x317a <String::String(char const*)>
    3b36:	6b e7       	ldi	r22, 0x7B	; 123
    3b38:	71 e0       	ldi	r23, 0x01	; 1
    3b3a:	8b e6       	ldi	r24, 0x6B	; 107
    3b3c:	93 e0       	ldi	r25, 0x03	; 3
    3b3e:	0e 94 bd 18 	call	0x317a	; 0x317a <String::String(char const*)>
    3b42:	6f e7       	ldi	r22, 0x7F	; 127
    3b44:	71 e0       	ldi	r23, 0x01	; 1
    3b46:	81 e7       	ldi	r24, 0x71	; 113
    3b48:	93 e0       	ldi	r25, 0x03	; 3
    3b4a:	0e 94 bd 18 	call	0x317a	; 0x317a <String::String(char const*)>
    3b4e:	63 e8       	ldi	r22, 0x83	; 131
    3b50:	71 e0       	ldi	r23, 0x01	; 1
    3b52:	87 e7       	ldi	r24, 0x77	; 119
    3b54:	93 e0       	ldi	r25, 0x03	; 3
    3b56:	0e 94 bd 18 	call	0x317a	; 0x317a <String::String(char const*)>
    3b5a:	67 e8       	ldi	r22, 0x87	; 135
    3b5c:	71 e0       	ldi	r23, 0x01	; 1
    3b5e:	8d e7       	ldi	r24, 0x7D	; 125
    3b60:	93 e0       	ldi	r25, 0x03	; 3
    3b62:	0e 94 bd 18 	call	0x317a	; 0x317a <String::String(char const*)>
    3b66:	6b e8       	ldi	r22, 0x8B	; 139
    3b68:	71 e0       	ldi	r23, 0x01	; 1
    3b6a:	83 e8       	ldi	r24, 0x83	; 131
    3b6c:	93 e0       	ldi	r25, 0x03	; 3
    3b6e:	0e 94 bd 18 	call	0x317a	; 0x317a <String::String(char const*)>
    3b72:	6f e8       	ldi	r22, 0x8F	; 143
    3b74:	71 e0       	ldi	r23, 0x01	; 1
    3b76:	89 e8       	ldi	r24, 0x89	; 137
    3b78:	93 e0       	ldi	r25, 0x03	; 3
    3b7a:	0e 94 bd 18 	call	0x317a	; 0x317a <String::String(char const*)>
    3b7e:	63 e9       	ldi	r22, 0x93	; 147
    3b80:	71 e0       	ldi	r23, 0x01	; 1
    3b82:	8f e8       	ldi	r24, 0x8F	; 143
    3b84:	93 e0       	ldi	r25, 0x03	; 3
    3b86:	0e 94 bd 18 	call	0x317a	; 0x317a <String::String(char const*)>
    3b8a:	67 e9       	ldi	r22, 0x97	; 151
    3b8c:	71 e0       	ldi	r23, 0x01	; 1
    3b8e:	85 e9       	ldi	r24, 0x95	; 149
    3b90:	93 e0       	ldi	r25, 0x03	; 3
    3b92:	0e 94 bd 18 	call	0x317a	; 0x317a <String::String(char const*)>
    3b96:	6c e9       	ldi	r22, 0x9C	; 156
    3b98:	71 e0       	ldi	r23, 0x01	; 1
    3b9a:	8b e9       	ldi	r24, 0x9B	; 155
    3b9c:	93 e0       	ldi	r25, 0x03	; 3
    3b9e:	0e 94 bd 18 	call	0x317a	; 0x317a <String::String(char const*)>
    3ba2:	61 ea       	ldi	r22, 0xA1	; 161
    3ba4:	71 e0       	ldi	r23, 0x01	; 1
    3ba6:	81 ea       	ldi	r24, 0xA1	; 161
    3ba8:	93 e0       	ldi	r25, 0x03	; 3
    3baa:	0e 94 bd 18 	call	0x317a	; 0x317a <String::String(char const*)>
    3bae:	66 ea       	ldi	r22, 0xA6	; 166
    3bb0:	71 e0       	ldi	r23, 0x01	; 1
    3bb2:	87 ea       	ldi	r24, 0xA7	; 167
    3bb4:	93 e0       	ldi	r25, 0x03	; 3
    3bb6:	0e 94 bd 18 	call	0x317a	; 0x317a <String::String(char const*)>
    3bba:	6b ea       	ldi	r22, 0xAB	; 171
    3bbc:	71 e0       	ldi	r23, 0x01	; 1
    3bbe:	8d ea       	ldi	r24, 0xAD	; 173
    3bc0:	93 e0       	ldi	r25, 0x03	; 3
    3bc2:	0e 94 bd 18 	call	0x317a	; 0x317a <String::String(char const*)>
    3bc6:	60 eb       	ldi	r22, 0xB0	; 176
    3bc8:	71 e0       	ldi	r23, 0x01	; 1
    3bca:	83 eb       	ldi	r24, 0xB3	; 179
    3bcc:	93 e0       	ldi	r25, 0x03	; 3
    3bce:	0e 94 bd 18 	call	0x317a	; 0x317a <String::String(char const*)>
    3bd2:	65 eb       	ldi	r22, 0xB5	; 181
    3bd4:	71 e0       	ldi	r23, 0x01	; 1
    3bd6:	89 eb       	ldi	r24, 0xB9	; 185
    3bd8:	93 e0       	ldi	r25, 0x03	; 3
    3bda:	0e 94 bd 18 	call	0x317a	; 0x317a <String::String(char const*)>
    3bde:	6a eb       	ldi	r22, 0xBA	; 186
    3be0:	71 e0       	ldi	r23, 0x01	; 1
    3be2:	8f eb       	ldi	r24, 0xBF	; 191
    3be4:	93 e0       	ldi	r25, 0x03	; 3
    3be6:	0e 94 bd 18 	call	0x317a	; 0x317a <String::String(char const*)>
    3bea:	6f eb       	ldi	r22, 0xBF	; 191
    3bec:	71 e0       	ldi	r23, 0x01	; 1
    3bee:	85 ec       	ldi	r24, 0xC5	; 197
    3bf0:	93 e0       	ldi	r25, 0x03	; 3
    3bf2:	0e 94 bd 18 	call	0x317a	; 0x317a <String::String(char const*)>
    3bf6:	64 ec       	ldi	r22, 0xC4	; 196
    3bf8:	71 e0       	ldi	r23, 0x01	; 1
    3bfa:	8b ec       	ldi	r24, 0xCB	; 203
    3bfc:	93 e0       	ldi	r25, 0x03	; 3
    3bfe:	0e 94 bd 18 	call	0x317a	; 0x317a <String::String(char const*)>
    3c02:	69 ec       	ldi	r22, 0xC9	; 201
    3c04:	71 e0       	ldi	r23, 0x01	; 1
    3c06:	81 ed       	ldi	r24, 0xD1	; 209
    3c08:	93 e0       	ldi	r25, 0x03	; 3
    3c0a:	0e 94 bd 18 	call	0x317a	; 0x317a <String::String(char const*)>
    3c0e:	6e ec       	ldi	r22, 0xCE	; 206
    3c10:	71 e0       	ldi	r23, 0x01	; 1
    3c12:	87 ed       	ldi	r24, 0xD7	; 215
    3c14:	93 e0       	ldi	r25, 0x03	; 3
    3c16:	0e 94 bd 18 	call	0x317a	; 0x317a <String::String(char const*)>
    3c1a:	62 ed       	ldi	r22, 0xD2	; 210
    3c1c:	71 e0       	ldi	r23, 0x01	; 1
    3c1e:	8d ed       	ldi	r24, 0xDD	; 221
    3c20:	93 e0       	ldi	r25, 0x03	; 3
    3c22:	0e 94 bd 18 	call	0x317a	; 0x317a <String::String(char const*)>
    3c26:	66 ed       	ldi	r22, 0xD6	; 214
    3c28:	71 e0       	ldi	r23, 0x01	; 1
    3c2a:	83 ee       	ldi	r24, 0xE3	; 227
    3c2c:	93 e0       	ldi	r25, 0x03	; 3
    3c2e:	0e 94 bd 18 	call	0x317a	; 0x317a <String::String(char const*)>
    3c32:	6a ed       	ldi	r22, 0xDA	; 218
    3c34:	71 e0       	ldi	r23, 0x01	; 1
    3c36:	89 ee       	ldi	r24, 0xE9	; 233
    3c38:	93 e0       	ldi	r25, 0x03	; 3
    3c3a:	0e 94 bd 18 	call	0x317a	; 0x317a <String::String(char const*)>
    3c3e:	6e ed       	ldi	r22, 0xDE	; 222
    3c40:	71 e0       	ldi	r23, 0x01	; 1
    3c42:	8f ee       	ldi	r24, 0xEF	; 239
    3c44:	93 e0       	ldi	r25, 0x03	; 3
    3c46:	0e 94 bd 18 	call	0x317a	; 0x317a <String::String(char const*)>
    3c4a:	62 ee       	ldi	r22, 0xE2	; 226
    3c4c:	71 e0       	ldi	r23, 0x01	; 1
    3c4e:	85 ef       	ldi	r24, 0xF5	; 245
    3c50:	93 e0       	ldi	r25, 0x03	; 3
    3c52:	0e 94 bd 18 	call	0x317a	; 0x317a <String::String(char const*)>
    3c56:	66 ee       	ldi	r22, 0xE6	; 230
    3c58:	71 e0       	ldi	r23, 0x01	; 1
    3c5a:	8b ef       	ldi	r24, 0xFB	; 251
    3c5c:	93 e0       	ldi	r25, 0x03	; 3
    3c5e:	0e 94 bd 18 	call	0x317a	; 0x317a <String::String(char const*)>
    3c62:	6a ee       	ldi	r22, 0xEA	; 234
    3c64:	71 e0       	ldi	r23, 0x01	; 1
    3c66:	81 e0       	ldi	r24, 0x01	; 1
    3c68:	94 e0       	ldi	r25, 0x04	; 4
    3c6a:	0e 94 bd 18 	call	0x317a	; 0x317a <String::String(char const*)>
    3c6e:	6e ee       	ldi	r22, 0xEE	; 238
    3c70:	71 e0       	ldi	r23, 0x01	; 1
    3c72:	87 e0       	ldi	r24, 0x07	; 7
    3c74:	94 e0       	ldi	r25, 0x04	; 4
    3c76:	0e 94 bd 18 	call	0x317a	; 0x317a <String::String(char const*)>
    3c7a:	62 ef       	ldi	r22, 0xF2	; 242
    3c7c:	71 e0       	ldi	r23, 0x01	; 1
    3c7e:	8d e0       	ldi	r24, 0x0D	; 13
    3c80:	94 e0       	ldi	r25, 0x04	; 4
    3c82:	0e 94 bd 18 	call	0x317a	; 0x317a <String::String(char const*)>
    3c86:	67 ef       	ldi	r22, 0xF7	; 247
    3c88:	71 e0       	ldi	r23, 0x01	; 1
    3c8a:	83 e1       	ldi	r24, 0x13	; 19
    3c8c:	94 e0       	ldi	r25, 0x04	; 4
    3c8e:	0e 94 bd 18 	call	0x317a	; 0x317a <String::String(char const*)>
    3c92:	6b ef       	ldi	r22, 0xFB	; 251
    3c94:	71 e0       	ldi	r23, 0x01	; 1
    3c96:	89 e1       	ldi	r24, 0x19	; 25
    3c98:	94 e0       	ldi	r25, 0x04	; 4
    3c9a:	0e 94 bd 18 	call	0x317a	; 0x317a <String::String(char const*)>
    3c9e:	6f ef       	ldi	r22, 0xFF	; 255
    3ca0:	71 e0       	ldi	r23, 0x01	; 1
    3ca2:	8f e1       	ldi	r24, 0x1F	; 31
    3ca4:	94 e0       	ldi	r25, 0x04	; 4
    3ca6:	0e 94 bd 18 	call	0x317a	; 0x317a <String::String(char const*)>
    3caa:	63 e0       	ldi	r22, 0x03	; 3
    3cac:	72 e0       	ldi	r23, 0x02	; 2
    3cae:	85 e2       	ldi	r24, 0x25	; 37
    3cb0:	94 e0       	ldi	r25, 0x04	; 4
    3cb2:	0e 94 bd 18 	call	0x317a	; 0x317a <String::String(char const*)>
    3cb6:	67 e0       	ldi	r22, 0x07	; 7
    3cb8:	72 e0       	ldi	r23, 0x02	; 2
    3cba:	8b e2       	ldi	r24, 0x2B	; 43
    3cbc:	94 e0       	ldi	r25, 0x04	; 4
    3cbe:	0e 94 bd 18 	call	0x317a	; 0x317a <String::String(char const*)>
    3cc2:	6c e0       	ldi	r22, 0x0C	; 12
    3cc4:	72 e0       	ldi	r23, 0x02	; 2
    3cc6:	81 e3       	ldi	r24, 0x31	; 49
    3cc8:	94 e0       	ldi	r25, 0x04	; 4
    3cca:	0e 94 bd 18 	call	0x317a	; 0x317a <String::String(char const*)>
    3cce:	61 e1       	ldi	r22, 0x11	; 17
    3cd0:	72 e0       	ldi	r23, 0x02	; 2
    3cd2:	87 e3       	ldi	r24, 0x37	; 55
    3cd4:	94 e0       	ldi	r25, 0x04	; 4
    3cd6:	0e 94 bd 18 	call	0x317a	; 0x317a <String::String(char const*)>
    3cda:	66 e1       	ldi	r22, 0x16	; 22
    3cdc:	72 e0       	ldi	r23, 0x02	; 2
    3cde:	8d e3       	ldi	r24, 0x3D	; 61
    3ce0:	94 e0       	ldi	r25, 0x04	; 4
    3ce2:	0e 94 bd 18 	call	0x317a	; 0x317a <String::String(char const*)>
    3ce6:	6b e1       	ldi	r22, 0x1B	; 27
    3ce8:	72 e0       	ldi	r23, 0x02	; 2
    3cea:	83 e4       	ldi	r24, 0x43	; 67
    3cec:	94 e0       	ldi	r25, 0x04	; 4
    3cee:	0e 94 bd 18 	call	0x317a	; 0x317a <String::String(char const*)>
    3cf2:	60 e2       	ldi	r22, 0x20	; 32
    3cf4:	72 e0       	ldi	r23, 0x02	; 2
    3cf6:	89 e4       	ldi	r24, 0x49	; 73
    3cf8:	94 e0       	ldi	r25, 0x04	; 4
    3cfa:	0e 94 bd 18 	call	0x317a	; 0x317a <String::String(char const*)>
    3cfe:	65 e2       	ldi	r22, 0x25	; 37
    3d00:	72 e0       	ldi	r23, 0x02	; 2
    3d02:	8f e4       	ldi	r24, 0x4F	; 79
    3d04:	94 e0       	ldi	r25, 0x04	; 4
    3d06:	0e 94 bd 18 	call	0x317a	; 0x317a <String::String(char const*)>
    3d0a:	ef e1       	ldi	r30, 0x1F	; 31
    3d0c:	f3 e0       	ldi	r31, 0x03	; 3
    3d0e:	13 82       	std	Z+3, r1	; 0x03
    3d10:	12 82       	std	Z+2, r1	; 0x02
    3d12:	20 e8       	ldi	r18, 0x80	; 128
    3d14:	30 e0       	ldi	r19, 0x00	; 0
    3d16:	35 83       	std	Z+5, r19	; 0x05
    3d18:	24 83       	std	Z+4, r18	; 0x04
    3d1a:	80 e2       	ldi	r24, 0x20	; 32
    3d1c:	90 e0       	ldi	r25, 0x00	; 0
    3d1e:	97 83       	std	Z+7, r25	; 0x07
    3d20:	86 83       	std	Z+6, r24	; 0x06
    3d22:	31 87       	std	Z+9, r19	; 0x09
    3d24:	20 87       	std	Z+8, r18	; 0x08
    3d26:	93 87       	std	Z+11, r25	; 0x0b
    3d28:	82 87       	std	Z+10, r24	; 0x0a
    3d2a:	16 8a       	std	Z+22, r1	; 0x16
    3d2c:	15 86       	std	Z+13, r1	; 0x0d
    3d2e:	14 86       	std	Z+12, r1	; 0x0c
    3d30:	17 86       	std	Z+15, r1	; 0x0f
    3d32:	16 86       	std	Z+14, r1	; 0x0e
    3d34:	91 e0       	ldi	r25, 0x01	; 1
    3d36:	95 8b       	std	Z+21, r25	; 0x15
    3d38:	94 8b       	std	Z+20, r25	; 0x14
    3d3a:	2f ef       	ldi	r18, 0xFF	; 255
    3d3c:	3f ef       	ldi	r19, 0xFF	; 255
    3d3e:	33 8b       	std	Z+19, r19	; 0x13
    3d40:	22 8b       	std	Z+18, r18	; 0x12
    3d42:	31 8b       	std	Z+17, r19	; 0x11
    3d44:	20 8b       	std	Z+16, r18	; 0x10
    3d46:	97 8b       	std	Z+23, r25	; 0x17
    3d48:	10 8e       	std	Z+24, r1	; 0x18
    3d4a:	12 8e       	std	Z+26, r1	; 0x1a
    3d4c:	11 8e       	std	Z+25, r1	; 0x19
    3d4e:	2a e2       	ldi	r18, 0x2A	; 42
    3d50:	31 e0       	ldi	r19, 0x01	; 1
    3d52:	31 83       	std	Z+1, r19	; 0x01
    3d54:	20 83       	st	Z, r18
    3d56:	14 8e       	std	Z+28, r1	; 0x1c
    3d58:	13 8e       	std	Z+27, r1	; 0x1b
    3d5a:	d6 8f       	std	Z+30, r29	; 0x1e
    3d5c:	c5 8f       	std	Z+29, r28	; 0x1d
    3d5e:	10 a2       	std	Z+32, r1	; 0x20
    3d60:	17 8e       	std	Z+31, r1	; 0x1f
    3d62:	8f ef       	ldi	r24, 0xFF	; 255
    3d64:	84 a3       	std	Z+36, r24	; 0x24
    3d66:	85 a3       	std	Z+37, r24	; 0x25
    3d68:	86 a3       	std	Z+38, r24	; 0x26
    3d6a:	87 a3       	std	Z+39, r24	; 0x27
    3d6c:	80 a7       	std	Z+40, r24	; 0x28
    3d6e:	40 e8       	ldi	r20, 0x80	; 128
    3d70:	5a e1       	ldi	r21, 0x1A	; 26
    3d72:	66 e0       	ldi	r22, 0x06	; 6
    3d74:	70 e0       	ldi	r23, 0x00	; 0
    3d76:	45 ab       	std	Z+53, r20	; 0x35
    3d78:	56 ab       	std	Z+54, r21	; 0x36
    3d7a:	67 ab       	std	Z+55, r22	; 0x37
    3d7c:	70 af       	std	Z+56, r23	; 0x38
    3d7e:	40 ea       	ldi	r20, 0xA0	; 160
    3d80:	56 e8       	ldi	r21, 0x86	; 134
    3d82:	61 e0       	ldi	r22, 0x01	; 1
    3d84:	70 e0       	ldi	r23, 0x00	; 0
    3d86:	41 af       	std	Z+57, r20	; 0x39
    3d88:	52 af       	std	Z+58, r21	; 0x3a
    3d8a:	63 af       	std	Z+59, r22	; 0x3b
    3d8c:	74 af       	std	Z+60, r23	; 0x3c
    3d8e:	80 e5       	ldi	r24, 0x50	; 80
    3d90:	86 af       	std	Z+62, r24	; 0x3e
    3d92:	17 ae       	std	Z+63, r1	; 0x3f
    3d94:	c3 ee       	ldi	r28, 0xE3	; 227
    3d96:	d2 e0       	ldi	r29, 0x02	; 2
    3d98:	1a 8a       	std	Y+18, r1	; 0x12
    3d9a:	9b 8b       	std	Y+19, r25	; 0x13
    3d9c:	1c 8a       	std	Y+20, r1	; 0x14
    3d9e:	80 e5       	ldi	r24, 0x50	; 80
    3da0:	93 ec       	ldi	r25, 0xC3	; 195
    3da2:	a0 e0       	ldi	r26, 0x00	; 0
    3da4:	b0 e0       	ldi	r27, 0x00	; 0
    3da6:	8d 8b       	std	Y+21, r24	; 0x15
    3da8:	9e 8b       	std	Y+22, r25	; 0x16
    3daa:	af 8b       	std	Y+23, r26	; 0x17
    3dac:	b8 8f       	std	Y+24, r27	; 0x18
    3dae:	19 8e       	std	Y+25, r1	; 0x19
    3db0:	1b 8e       	std	Y+27, r1	; 0x1b
    3db2:	1a 8e       	std	Y+26, r1	; 0x1a
    3db4:	86 e0       	ldi	r24, 0x06	; 6
    3db6:	ea e0       	ldi	r30, 0x0A	; 10
    3db8:	f1 e0       	ldi	r31, 0x01	; 1
    3dba:	af ef       	ldi	r26, 0xFF	; 255
    3dbc:	b2 e0       	ldi	r27, 0x02	; 2
    3dbe:	01 90       	ld	r0, Z+
    3dc0:	0d 92       	st	X+, r0
    3dc2:	8a 95       	dec	r24
    3dc4:	e1 f7       	brne	.-8      	; 0x3dbe <global constructors keyed to 65535_0_SI4844_01_OLED_SLIDE_SWITCH.ino.cpp.o.3912+0x2c4>
    3dc6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__malloc_margin+0x8>
    3dca:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__malloc_margin+0x9>
    3dce:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <__malloc_margin+0xa>
    3dd2:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <__malloc_margin+0xb>
    3dd6:	8a a3       	std	Y+34, r24	; 0x22
    3dd8:	9b a3       	std	Y+35, r25	; 0x23
    3dda:	ac a3       	std	Y+36, r26	; 0x24
    3ddc:	bd a3       	std	Y+37, r27	; 0x25
    3dde:	8e e1       	ldi	r24, 0x1E	; 30
    3de0:	8e a7       	std	Y+46, r24	; 0x2e
    3de2:	84 e0       	ldi	r24, 0x04	; 4
    3de4:	8f a7       	std	Y+47, r24	; 0x2f
    3de6:	df 91       	pop	r29
    3de8:	cf 91       	pop	r28
    3dea:	08 95       	ret

00003dec <main>:
init():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    3dec:	78 94       	sei
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    3dee:	84 b5       	in	r24, 0x24	; 36
    3df0:	83 60       	ori	r24, 0x03	; 3
    3df2:	84 bd       	out	0x24, r24	; 36
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    3df4:	85 b5       	in	r24, 0x25	; 37
    3df6:	83 60       	ori	r24, 0x03	; 3
    3df8:	85 bd       	out	0x25, r24	; 37
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    3dfa:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
    3dfe:	81 60       	ori	r24, 0x01	; 1
    3e00:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    3e04:	82 e0       	ldi	r24, 0x02	; 2
    3e06:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    3e0a:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    3e0e:	81 60       	ori	r24, 0x01	; 1
    3e10:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    3e14:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    3e18:	81 60       	ori	r24, 0x01	; 1
    3e1a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    3e1e:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
    3e22:	84 60       	ori	r24, 0x04	; 4
    3e24:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    3e28:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    3e2c:	81 60       	ori	r24, 0x01	; 1
    3e2e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
    3e32:	87 e8       	ldi	r24, 0x87	; 135
    3e34:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    3e38:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
setup():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:84
int8_t newBand;


void setup() {

  pinMode(TUNE_LED, OUTPUT);
    3e3c:	61 e0       	ldi	r22, 0x01	; 1
    3e3e:	8a e0       	ldi	r24, 0x0A	; 10
    3e40:	0e 94 42 0a 	call	0x1484	; 0x1484 <pinMode>
begin():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:499
    @note   MUST call this function before any drawing or updates!
*/
bool Adafruit_SSD1306::begin(uint8_t vcs, uint8_t addr, bool reset,
                             bool periphBegin) {

  if ((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
    3e44:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <display+0x1f>
    3e48:	90 91 3f 03 	lds	r25, 0x033F	; 0x80033f <display+0x20>
    3e4c:	89 2b       	or	r24, r25
    3e4e:	11 f1       	breq	.+68     	; 0x3e94 <main+0xa8>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:502
    return false;

  clearDisplay();
    3e50:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <Adafruit_SSD1306::clearDisplay() [clone .constprop.23]>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:505

#ifndef SSD1306_NO_SPLASH
  if (HEIGHT > 32) {
    3e54:	20 91 25 03 	lds	r18, 0x0325	; 0x800325 <display+0x6>
    3e58:	30 91 26 03 	lds	r19, 0x0326	; 0x800326 <display+0x7>
    3e5c:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <display+0x4>
    3e60:	90 91 24 03 	lds	r25, 0x0324	; 0x800324 <display+0x5>
    3e64:	21 32       	cpi	r18, 0x21	; 33
    3e66:	31 05       	cpc	r19, r1
    3e68:	0c f0       	brlt	.+2      	; 0x3e6c <main+0x80>
    3e6a:	ea c0       	rjmp	.+468    	; 0x4040 <main+0x254>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:509
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
               splash1_data, splash1_width, splash1_height, 1);
  } else {
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
    3e6c:	b9 01       	movw	r22, r18
    3e6e:	60 52       	subi	r22, 0x20	; 32
    3e70:	71 09       	sbc	r23, r1
    3e72:	77 ff       	sbrs	r23, 7
    3e74:	02 c0       	rjmp	.+4      	; 0x3e7a <main+0x8e>
    3e76:	6f 5f       	subi	r22, 0xFF	; 255
    3e78:	7f 4f       	sbci	r23, 0xFF	; 255
    3e7a:	75 95       	asr	r23
    3e7c:	67 95       	ror	r22
    3e7e:	83 57       	subi	r24, 0x73	; 115
    3e80:	91 09       	sbc	r25, r1
    3e82:	97 fd       	sbrc	r25, 7
    3e84:	01 96       	adiw	r24, 0x01	; 1
    3e86:	00 e2       	ldi	r16, 0x20	; 32
    3e88:	10 e0       	ldi	r17, 0x00	; 0
    3e8a:	23 e7       	ldi	r18, 0x73	; 115
    3e8c:	30 e0       	ldi	r19, 0x00	; 0
    3e8e:	44 e4       	ldi	r20, 0x44	; 68
    3e90:	5d e0       	ldi	r21, 0x0D	; 13
    3e92:	e9 c0       	rjmp	.+466    	; 0x4066 <main+0x27a>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:499
    @note   MUST call this function before any drawing or updates!
*/
bool Adafruit_SSD1306::begin(uint8_t vcs, uint8_t addr, bool reset,
                             bool periphBegin) {

  if ((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
    3e94:	20 91 25 03 	lds	r18, 0x0325	; 0x800325 <display+0x6>
    3e98:	30 91 26 03 	lds	r19, 0x0326	; 0x800326 <display+0x7>
    3e9c:	c9 01       	movw	r24, r18
    3e9e:	07 96       	adiw	r24, 0x07	; 7
    3ea0:	97 fd       	sbrc	r25, 7
    3ea2:	07 96       	adiw	r24, 0x07	; 7
    3ea4:	b3 e0       	ldi	r27, 0x03	; 3
    3ea6:	95 95       	asr	r25
    3ea8:	87 95       	ror	r24
    3eaa:	ba 95       	dec	r27
    3eac:	e1 f7       	brne	.-8      	; 0x3ea6 <main+0xba>
    3eae:	20 91 23 03 	lds	r18, 0x0323	; 0x800323 <display+0x4>
    3eb2:	30 91 24 03 	lds	r19, 0x0324	; 0x800324 <display+0x5>
    3eb6:	ac 01       	movw	r20, r24
    3eb8:	42 9f       	mul	r20, r18
    3eba:	c0 01       	movw	r24, r0
    3ebc:	43 9f       	mul	r20, r19
    3ebe:	90 0d       	add	r25, r0
    3ec0:	52 9f       	mul	r21, r18
    3ec2:	90 0d       	add	r25, r0
    3ec4:	11 24       	eor	r1, r1
    3ec6:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <malloc>
    3eca:	90 93 3f 03 	sts	0x033F, r25	; 0x80033f <display+0x20>
    3ece:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <display+0x1f>
    3ed2:	89 2b       	or	r24, r25
    3ed4:	09 f0       	breq	.+2      	; 0x3ed8 <main+0xec>
    3ed6:	bc cf       	rjmp	.-136    	; 0x3e50 <main+0x64>
_ZN12Adafruit_GFX12setTextColorEj():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_GFX_Library/Adafruit_GFX.h:144
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
    3ed8:	81 e0       	ldi	r24, 0x01	; 1
    3eda:	90 e0       	ldi	r25, 0x00	; 0
    3edc:	90 93 32 03 	sts	0x0332, r25	; 0x800332 <display+0x13>
    3ee0:	80 93 31 03 	sts	0x0331, r24	; 0x800331 <display+0x12>
    3ee4:	90 93 30 03 	sts	0x0330, r25	; 0x800330 <display+0x11>
    3ee8:	80 93 2f 03 	sts	0x032F, r24	; 0x80032f <display+0x10>
setup():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:92

  // display.display();
  display.setTextColor(SSD1306_WHITE);


  display.clearDisplay();
    3eec:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <Adafruit_SSD1306::clearDisplay() [clone .constprop.23]>
setupSlideSwitch():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:192
 * @param highClockSpeed high I2C clock speed to be used by the system (optional - default 50000 - 50kHz).
 */
void SI4844::setupSlideSwitch(uint16_t resetPin, int interruptPin, uint32_t highClockSpeed )
{
    // UNDER CONSTRUCTION
    this->resetPin = resetPin;
    3ef0:	8c e0       	ldi	r24, 0x0C	; 12
    3ef2:	90 e0       	ldi	r25, 0x00	; 0
    3ef4:	90 93 f2 02 	sts	0x02F2, r25	; 0x8002f2 <rx+0xf>
    3ef8:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <rx+0xe>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:193
    this->interruptPin = interruptPin;
    3efc:	82 e0       	ldi	r24, 0x02	; 2
    3efe:	90 e0       	ldi	r25, 0x00	; 0
    3f00:	90 93 f4 02 	sts	0x02F4, r25	; 0x8002f4 <rx+0x11>
    3f04:	80 93 f3 02 	sts	0x02F3, r24	; 0x8002f3 <rx+0x10>
_ZN6SI484413setClockSpeedEj():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.h:315
  /**
   * @ingroup BF
   * @brief Sets high clock speed to be used on I2C bus
   * @param clock (10000 = 10kHz; 50000 = 50kHz; 100000 = 100kHz ... )
   */
  inline void setClockSpeed(uint16_t clock) { this->clockSpeed = clock; }; 
    3f08:	80 e5       	ldi	r24, 0x50	; 80
    3f0a:	93 ec       	ldi	r25, 0xC3	; 195
    3f0c:	a0 e0       	ldi	r26, 0x00	; 0
    3f0e:	b0 e0       	ldi	r27, 0x00	; 0
    3f10:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <rx+0x15>
    3f14:	90 93 f9 02 	sts	0x02F9, r25	; 0x8002f9 <rx+0x16>
    3f18:	a0 93 fa 02 	sts	0x02FA, r26	; 0x8002fa <rx+0x17>
    3f1c:	b0 93 fb 02 	sts	0x02FB, r27	; 0x8002fb <rx+0x18>
setupSlideSwitch():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:200
    setClockSpeed(highClockSpeed);

    // Arduino interrupt setup.
    // if interruptPin parameter is < 0, it means the interrupt is being controlled by the user of this library
    if (interruptPin != -1 ) {
        pinMode(interruptPin, INPUT);
    3f20:	60 e0       	ldi	r22, 0x00	; 0
    3f22:	82 e0       	ldi	r24, 0x02	; 2
    3f24:	0e 94 42 0a 	call	0x1484	; 0x1484 <pinMode>
attachInterrupt():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/WInterrupts.c:66

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode)
{
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS)
  {
    intFunc[interruptNum] = userFunc;
    3f28:	82 ed       	ldi	r24, 0xD2	; 210
    3f2a:	9a e0       	ldi	r25, 0x0A	; 10
    3f2c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    3f30:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/WInterrupts.c:231
      #elif defined(__AVR_ATmega48__) || defined(__AVR_ATmega48P__)  || defined(__AVR_ATmega48PB__)  \
      || defined(__AVR_ATmega88__)    || defined(__AVR_ATmega88P__)  || defined(__AVR_ATmega88PB__)  \
      || defined(__AVR_ATmega168__)   || defined(__AVR_ATmega168P__) || defined(__AVR_ATmega168PB__) \
      || defined(__AVR_ATmega328__)   || defined(__AVR_ATmega328P__) || defined(__AVR_ATmega328PB__)
        case 0:
          EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
    3f34:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    3f38:	83 60       	ori	r24, 0x03	; 3
    3f3a:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/WInterrupts.c:232
          EIMSK |= (1 << INT0);
    3f3e:	e8 9a       	sbi	0x1d, 0	; 29
setupSlideSwitch():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:204
        attachInterrupt(digitalPinToInterrupt(interruptPin), interrupt_handler, RISING);
    }

    pinMode(resetPin, OUTPUT);
    3f40:	61 e0       	ldi	r22, 0x01	; 1
    3f42:	8c e0       	ldi	r24, 0x0C	; 12
    3f44:	0e 94 42 0a 	call	0x1484	; 0x1484 <pinMode>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:205
    digitalWrite(resetPin, HIGH);
    3f48:	61 e0       	ldi	r22, 0x01	; 1
    3f4a:	8c e0       	ldi	r24, 0x0C	; 12
    3f4c:	0e 94 f6 09 	call	0x13ec	; 0x13ec <digitalWrite>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:206
    delay(1);    
    3f50:	61 e0       	ldi	r22, 0x01	; 1
    3f52:	70 e0       	ldi	r23, 0x00	; 0
    3f54:	80 e0       	ldi	r24, 0x00	; 0
    3f56:	90 e0       	ldi	r25, 0x00	; 0
    3f58:	0e 94 a0 0a 	call	0x1540	; 0x1540 <delay>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:207
    data_from_device = false;    
    3f5c:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <_ZL16data_from_device.lto_priv.60>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:212
    
    // Step 1: Reset and Prepare the Device
    //      1. The system controller resets the ATDD device and releases the  RSTb  pin.
    //      2. The system controller waits until the first  IRQ  is received, indicating that the ATDD device is ready to receive commands.   
    this->reset(); // Step 1 - Reset and Prepare the Device
    3f60:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <SI4844::reset() [clone .constprop.14]>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:216

    // Step 2: Obtain Device Status
    //      3. The system controller sends the  ATDD_GET_STATUS  command to retrieve the ATDD device status.    
    this->getStatus();
    3f64:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <SI4844::getStatus() [clone .constprop.12]>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:217
    if ( device_status.refined.BCFG0 != 0) {
    3f68:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <rx>
    3f6c:	80 ff       	sbrs	r24, 0
    3f6e:	03 c0       	rjmp	.+6      	; 0x3f76 <main+0x18a>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:218
        system_error = 51;  // The hardware is configured to "MCU detects the band" and you are trying "ATDD device detects the band"
    3f70:	83 e3       	ldi	r24, 0x33	; 51
    3f72:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <rx+0x19>
powerUp():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:408
 * @details Moves the SI4844 device from power down to power up 
 * @see Si48XX ATDD PROGRAMMING GUIDE; AN610; page 45
 */
void SI4844::powerUp(void)
{
    data_from_device = false;    
    3f76:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <_ZL16data_from_device.lto_priv.60>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:410

    this->currentBand = 0;
    3f7a:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <rx+0x12>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:414

    si4844_arg_band_index rxBandSetup; 

    rxBandSetup.refined.XOSCEN = this->xoscen;
    3f7e:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <rx+0x13>
    3f82:	c0 e0       	ldi	r28, 0x00	; 0
    3f84:	80 fb       	bst	r24, 0
    3f86:	c7 f9       	bld	r28, 7
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:415
    rxBandSetup.refined.XOWAIT = this->xowait;
    3f88:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <rx+0x14>
    3f8c:	80 fb       	bst	r24, 0
    3f8e:	c6 f9       	bld	r28, 6
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:416
    rxBandSetup.refined.BANDIDX = this->currentBand;
    3f90:	c0 7c       	andi	r28, 0xC0	; 192
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:418

    waitToSend();
    3f92:	0e 94 da 16 	call	0x2db4	; 0x2db4 <SI4844::waitToSend() [clone .constprop.22]>
beginTransmission():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:206
    3f96:	81 e1       	ldi	r24, 0x11	; 17
    3f98:	0e 94 4b 09 	call	0x1296	; 0x1296 <TwoWire::beginTransmission(unsigned char) [clone .constprop.48]>
powerUp():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:421

    Wire.beginTransmission(SI4844_ADDRESS);
    Wire.write(ATDD_POWER_UP);
    3f9c:	81 ee       	ldi	r24, 0xE1	; 225
    3f9e:	90 e0       	ldi	r25, 0x00	; 0
    3fa0:	0e 94 13 14 	call	0x2826	; 0x2826 <TwoWire::write(int) [clone .constprop.33]>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:422
    Wire.write(rxBandSetup.raw);
    3fa4:	6c 2f       	mov	r22, r28
    3fa6:	83 e1       	ldi	r24, 0x13	; 19
    3fa8:	93 e0       	ldi	r25, 0x03	; 3
    3faa:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <TwoWire::write(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:423
    Wire.endTransmission();
    3fae:	83 e1       	ldi	r24, 0x13	; 19
    3fb0:	93 e0       	ldi	r25, 0x03	; 3
    3fb2:	0e 94 18 14 	call	0x2830	; 0x2830 <TwoWire::endTransmission()>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:425

    delayMicroseconds(2500);
    3fb6:	84 ec       	ldi	r24, 0xC4	; 196
    3fb8:	99 e0       	ldi	r25, 0x09	; 9
    3fba:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <delayMicroseconds>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:426
    this->waitInterrupt();
    3fbe:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <SI4844::waitInterrupt() [clone .isra.2]>
setupSlideSwitch():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:230
    this->powerUp();

    // Step 5 and Step 6: Retrieve Updated Status and  real Frequency Detection
    // 6. The system controller sends the  ATDD_GET_STATUS  command to obtain the latest status.
    do { 
        delay(1);
    3fc2:	61 e0       	ldi	r22, 0x01	; 1
    3fc4:	70 e0       	ldi	r23, 0x00	; 0
    3fc6:	80 e0       	ldi	r24, 0x00	; 0
    3fc8:	90 e0       	ldi	r25, 0x00	; 0
    3fca:	0e 94 a0 0a 	call	0x1540	; 0x1540 <delay>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:231
        this->getStatus();
    3fce:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <SI4844::getStatus() [clone .constprop.12]>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:232
    } while (device_status.refined.INFORDY == 0);   
    3fd2:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <rx>
    3fd6:	84 ff       	sbrs	r24, 4
    3fd8:	f4 cf       	rjmp	.-24     	; 0x3fc2 <main+0x1d6>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:236


    // Step 6: Set to the real band selected by the user via Slide Switch; Frequency Detection; etc
    this->setBandSlideSwitch();
    3fda:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <SI4844::setBandSlideSwitch() [clone .constprop.13]>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:238

    this->setVolume(this->volume);
    3fde:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <rx+0x2e>
setVolume():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:829
 * @see Table 4, Si48XX ATDD PROGRAMMING GUIDE; AN610; page 11
 * @param byte volumeLevel (domain: 0 to 63) 
 */
void SI4844::setVolume(byte volumeLavel)
{
    if (volumeLavel > 63)
    3fe2:	80 34       	cpi	r24, 0x40	; 64
    3fe4:	10 f4       	brcc	.+4      	; 0x3fea <main+0x1fe>
    3fe6:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <SI4844::setVolume(unsigned char) [clone .part.5] [clone .constprop.20]>
    3fea:	8a e3       	ldi	r24, 0x3A	; 58
    3fec:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <SI4844::setVolume(unsigned char) [clone .part.5] [clone .constprop.20]>
setup():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:101
  // rx.setCrystalOscillatorStabilizationWaitTime(1);
  rx.setupSlideSwitch(RESET_PIN, INTERRUPT_PIN);

  // You must calibrate the default volume
  rx.setVolume(58);
  delay(100);
    3ff0:	64 e6       	ldi	r22, 0x64	; 100
    3ff2:	70 e0       	ldi	r23, 0x00	; 0
    3ff4:	80 e0       	ldi	r24, 0x00	; 0
    3ff6:	90 e0       	ldi	r25, 0x00	; 0
    3ff8:	0e 94 a0 0a 	call	0x1540	; 0x1540 <delay>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:102
  displayDial();
    3ffc:	0e 94 2f 19 	call	0x325e	; 0x325e <displayDial()>
main():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/main.cpp:47
  
  setup();
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    4000:	c0 e0       	ldi	r28, 0x00	; 0
    4002:	d0 e0       	ldi	r29, 0x00	; 0
hasStatusChanged():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1199
 *
 *  @return true or false  
 */
bool SI4844::hasStatusChanged(void)
{
    return data_from_device;
    4004:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <_ZL16data_from_device.lto_priv.60>
loop():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:171
}


void loop() {

  if (rx.hasStatusChanged()) {
    4008:	88 23       	and	r24, r24
    400a:	79 f0       	breq	.+30     	; 0x402a <main+0x23e>
hasBandChanged():
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1210
 * @details When the Slide Switch is moved by the user, the system have to process it
 *
 *  @return True if the user moved the Slide Switch
 */
bool SI4844::hasBandChanged(void) {
    this->getAllReceiverInfo();
    400c:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <SI4844::getAllReceiverInfo() [clone .constprop.31]>
/Users/rcaratti/Documents/Arduino/libraries/PU2CLR_SI4844/src/SI4844.cpp:1211
    return ( all_receiver_status.refined.BANDIDX != this->currentBand);
    4010:	20 91 e5 02 	lds	r18, 0x02E5	; 0x8002e5 <rx+0x2>
    4014:	2f 73       	andi	r18, 0x3F	; 63
    4016:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <rx+0x12>
    401a:	90 e0       	ldi	r25, 0x00	; 0
loop():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:172
    if (rx.hasBandChanged()) {
    401c:	28 17       	cp	r18, r24
    401e:	19 06       	cpc	r1, r25
    4020:	11 f0       	breq	.+4      	; 0x4026 <main+0x23a>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:173
      rx.setBandSlideSwitch();
    4022:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <SI4844::setBandSlideSwitch() [clone .constprop.13]>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:176
    }

    displayDial();  
    4026:	0e 94 2f 19 	call	0x325e	; 0x325e <displayDial()>
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:179
  }

  delay(50);
    402a:	62 e3       	ldi	r22, 0x32	; 50
    402c:	70 e0       	ldi	r23, 0x00	; 0
    402e:	80 e0       	ldi	r24, 0x00	; 0
    4030:	90 e0       	ldi	r25, 0x00	; 0
    4032:	0e 94 a0 0a 	call	0x1540	; 0x1540 <delay>
main():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/cores/MCUdude_corefiles/main.cpp:47
    4036:	20 97       	sbiw	r28, 0x00	; 0
    4038:	29 f3       	breq	.-54     	; 0x4004 <main+0x218>
    403a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    403e:	e2 cf       	rjmp	.-60     	; 0x4004 <main+0x218>
begin():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:506

  clearDisplay();

#ifndef SSD1306_NO_SPLASH
  if (HEIGHT > 32) {
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
    4040:	b9 01       	movw	r22, r18
    4042:	60 54       	subi	r22, 0x40	; 64
    4044:	71 09       	sbc	r23, r1
    4046:	77 ff       	sbrs	r23, 7
    4048:	02 c0       	rjmp	.+4      	; 0x404e <main+0x262>
    404a:	6f 5f       	subi	r22, 0xFF	; 255
    404c:	7f 4f       	sbci	r23, 0xFF	; 255
    404e:	75 95       	asr	r23
    4050:	67 95       	ror	r22
    4052:	82 55       	subi	r24, 0x52	; 82
    4054:	91 09       	sbc	r25, r1
    4056:	97 fd       	sbrc	r25, 7
    4058:	01 96       	adiw	r24, 0x01	; 1
    405a:	00 e4       	ldi	r16, 0x40	; 64
    405c:	10 e0       	ldi	r17, 0x00	; 0
    405e:	22 e5       	ldi	r18, 0x52	; 82
    4060:	30 e0       	ldi	r19, 0x00	; 0
    4062:	44 e2       	ldi	r20, 0x24	; 36
    4064:	5f e0       	ldi	r21, 0x0F	; 15
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:509
               splash1_data, splash1_width, splash1_height, 1);
  } else {
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
    4066:	95 95       	asr	r25
    4068:	87 95       	ror	r24
    406a:	0e 94 4e 12 	call	0x249c	; 0x249c <Adafruit_GFX::drawBitmap(int, int, unsigned char const*, int, int, unsigned int) [clone .constprop.4]>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:514
               splash2_data, splash2_width, splash2_height, 1);
  }
#endif

  vccstate = vcs;
    406e:	82 e0       	ldi	r24, 0x02	; 2
    4070:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <display+0x22>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:517

  // Setup pin directions
  if (wire) { // Using I2C
    4074:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <display+0x1d>
    4078:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <display+0x1e>
    407c:	89 2b       	or	r24, r25
    407e:	09 f4       	brne	.+2      	; 0x4082 <main+0x296>
    4080:	b1 c0       	rjmp	.+354    	; 0x41e4 <main+0x3f8>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:520
    // If I2C address is unspecified, use default
    // (0x3C for 32-pixel-tall displays, 0x3D for all others).
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
    4082:	8c e3       	ldi	r24, 0x3C	; 60
    4084:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <display+0x21>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:61

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
    4088:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <TwoWire::rxBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:62
  rxBufferLength = 0;
    408c:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <TwoWire::rxBufferLength>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:64

  txBufferIndex = 0;
    4090:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <TwoWire::txBufferIndex>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/Wire.cpp:65
  txBufferLength = 0;
    4094:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <TwoWire::txBufferLength>
twi_init():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:84
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
    4098:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <twi_state>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:85
  twi_sendStop = true; // default value
    409c:	81 e0       	ldi	r24, 0x01	; 1
    409e:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <twi_sendStop>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:86
  twi_inRepStart = false;
    40a2:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <twi_inRepStart>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:89

  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
    40a6:	61 e0       	ldi	r22, 0x01	; 1
    40a8:	82 e1       	ldi	r24, 0x12	; 18
    40aa:	0e 94 f6 09 	call	0x13ec	; 0x13ec <digitalWrite>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:90
  digitalWrite(SCL, 1);
    40ae:	61 e0       	ldi	r22, 0x01	; 1
    40b0:	83 e1       	ldi	r24, 0x13	; 19
    40b2:	0e 94 f6 09 	call	0x13ec	; 0x13ec <digitalWrite>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:93

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
    40b6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    40ba:	8e 7f       	andi	r24, 0xFE	; 254
    40bc:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:94
  cbi(TWSR, TWPS1);
    40c0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    40c4:	8d 7f       	andi	r24, 0xFD	; 253
    40c6:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:95
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
    40ca:	88 e4       	ldi	r24, 0x48	; 72
    40cc:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:103
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    40d0:	85 e4       	ldi	r24, 0x45	; 69
    40d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
twi_attachSlaveTxEvent():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:408
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
    40d6:	86 ed       	ldi	r24, 0xD6	; 214
    40d8:	9a e0       	ldi	r25, 0x0A	; 10
    40da:	90 93 a9 02 	sts	0x02A9, r25	; 0x8002a9 <twi_onSlaveTransmit+0x1>
    40de:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <twi_onSlaveTransmit>
twi_attachSlaveRxEvent():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:397
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
  twi_onSlaveReceive = function;
    40e2:	87 ed       	ldi	r24, 0xD7	; 215
    40e4:	9a e0       	ldi	r25, 0x0A	; 10
    40e6:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <twi_onSlaveReceive+0x1>
    40ea:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <twi_onSlaveReceive>
begin():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:557
#endif
    }
  }

  // Reset SSD1306 if requested and reset pin specified in constructor
  if (reset && (rstPin >= 0)) {
    40ee:	80 91 47 03 	lds	r24, 0x0347	; 0x800347 <display+0x28>
    40f2:	87 fd       	sbrc	r24, 7
    40f4:	1e c0       	rjmp	.+60     	; 0x4132 <main+0x346>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:558
    pinMode(rstPin, OUTPUT);
    40f6:	61 e0       	ldi	r22, 0x01	; 1
    40f8:	0e 94 42 0a 	call	0x1484	; 0x1484 <pinMode>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:559
    digitalWrite(rstPin, HIGH);
    40fc:	61 e0       	ldi	r22, 0x01	; 1
    40fe:	80 91 47 03 	lds	r24, 0x0347	; 0x800347 <display+0x28>
    4102:	0e 94 f6 09 	call	0x13ec	; 0x13ec <digitalWrite>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:560
    delay(1);                   // VDD goes high at start, pause for 1 ms
    4106:	61 e0       	ldi	r22, 0x01	; 1
    4108:	70 e0       	ldi	r23, 0x00	; 0
    410a:	80 e0       	ldi	r24, 0x00	; 0
    410c:	90 e0       	ldi	r25, 0x00	; 0
    410e:	0e 94 a0 0a 	call	0x1540	; 0x1540 <delay>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:561
    digitalWrite(rstPin, LOW);  // Bring reset low
    4112:	60 e0       	ldi	r22, 0x00	; 0
    4114:	80 91 47 03 	lds	r24, 0x0347	; 0x800347 <display+0x28>
    4118:	0e 94 f6 09 	call	0x13ec	; 0x13ec <digitalWrite>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:562
    delay(10);                  // Wait 10 ms
    411c:	6a e0       	ldi	r22, 0x0A	; 10
    411e:	70 e0       	ldi	r23, 0x00	; 0
    4120:	80 e0       	ldi	r24, 0x00	; 0
    4122:	90 e0       	ldi	r25, 0x00	; 0
    4124:	0e 94 a0 0a 	call	0x1540	; 0x1540 <delay>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:563
    digitalWrite(rstPin, HIGH); // Bring out of reset
    4128:	61 e0       	ldi	r22, 0x01	; 1
    412a:	80 91 47 03 	lds	r24, 0x0347	; 0x800347 <display+0x28>
    412e:	0e 94 f6 09 	call	0x13ec	; 0x13ec <digitalWrite>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:566
  }

  TRANSACTION_START
    4132:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <display+0x1d>
    4136:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <display+0x1e>
    413a:	89 2b       	or	r24, r25
    413c:	09 f4       	brne	.+2      	; 0x4140 <main+0x354>
    413e:	11 c1       	rjmp	.+546    	; 0x4362 <main+0x576>
twi_setFrequency():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:142
 * Input    Clock frequency
 * Output   none
 */
void twi_setFrequency(uint32_t frequency)
{
  TWBR = ((F_CPU / frequency) - 16) / 2;
    4140:	20 91 54 03 	lds	r18, 0x0354	; 0x800354 <display+0x35>
    4144:	30 91 55 03 	lds	r19, 0x0355	; 0x800355 <display+0x36>
    4148:	40 91 56 03 	lds	r20, 0x0356	; 0x800356 <display+0x37>
    414c:	50 91 57 03 	lds	r21, 0x0357	; 0x800357 <display+0x38>
    4150:	60 e0       	ldi	r22, 0x00	; 0
    4152:	74 e2       	ldi	r23, 0x24	; 36
    4154:	84 ef       	ldi	r24, 0xF4	; 244
    4156:	90 e0       	ldi	r25, 0x00	; 0
    4158:	0e 94 b0 22 	call	0x4560	; 0x4560 <__udivmodsi4>
    415c:	20 51       	subi	r18, 0x10	; 16
    415e:	31 09       	sbc	r19, r1
    4160:	41 09       	sbc	r20, r1
    4162:	51 09       	sbc	r21, r1
    4164:	56 95       	lsr	r21
    4166:	47 95       	ror	r20
    4168:	37 95       	ror	r19
    416a:	27 95       	ror	r18
    416c:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
begin():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:573
  // Init sequence
  static const uint8_t PROGMEM init1[] = {SSD1306_DISPLAYOFF,         // 0xAE
                                          SSD1306_SETDISPLAYCLOCKDIV, // 0xD5
                                          0x80, // the suggested ratio 0x80
                                          SSD1306_SETMULTIPLEX}; // 0xA8
  ssd1306_commandList(init1, sizeof(init1));
    4170:	64 e0       	ldi	r22, 0x04	; 4
    4172:	80 e4       	ldi	r24, 0x40	; 64
    4174:	9d e0       	ldi	r25, 0x0D	; 13
    4176:	0e 94 70 14 	call	0x28e0	; 0x28e0 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char) [clone .constprop.47]>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:574
  ssd1306_command1(HEIGHT - 1);
    417a:	60 91 25 03 	lds	r22, 0x0325	; 0x800325 <display+0x6>
    417e:	61 50       	subi	r22, 0x01	; 1
    4180:	8f e1       	ldi	r24, 0x1F	; 31
    4182:	93 e0       	ldi	r25, 0x03	; 3
    4184:	0e 94 18 15 	call	0x2a30	; 0x2a30 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:580

  static const uint8_t PROGMEM init2[] = {SSD1306_SETDISPLAYOFFSET, // 0xD3
                                          0x0,                      // no offset
                                          SSD1306_SETSTARTLINE | 0x0, // line #0
                                          SSD1306_CHARGEPUMP};        // 0x8D
  ssd1306_commandList(init2, sizeof(init2));
    4188:	64 e0       	ldi	r22, 0x04	; 4
    418a:	8c e3       	ldi	r24, 0x3C	; 60
    418c:	9d e0       	ldi	r25, 0x0D	; 13
    418e:	0e 94 70 14 	call	0x28e0	; 0x28e0 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char) [clone .constprop.47]>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:582

  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
    4192:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <display+0x22>
main():
    4196:	64 e1       	ldi	r22, 0x14	; 20
begin():
    4198:	81 30       	cpi	r24, 0x01	; 1
    419a:	09 f4       	brne	.+2      	; 0x419e <main+0x3b2>
main():
    419c:	60 e1       	ldi	r22, 0x10	; 16
begin():
    419e:	8f e1       	ldi	r24, 0x1F	; 31
    41a0:	93 e0       	ldi	r25, 0x03	; 3
    41a2:	0e 94 18 15 	call	0x2a30	; 0x2a30 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:588

  static const uint8_t PROGMEM init3[] = {SSD1306_MEMORYMODE, // 0x20
                                          0x00, // 0x0 act like ks0108
                                          SSD1306_SEGREMAP | 0x1,
                                          SSD1306_COMSCANDEC};
  ssd1306_commandList(init3, sizeof(init3));
    41a6:	64 e0       	ldi	r22, 0x04	; 4
    41a8:	88 e3       	ldi	r24, 0x38	; 56
    41aa:	9d e0       	ldi	r25, 0x0D	; 13
    41ac:	0e 94 70 14 	call	0x28e0	; 0x28e0 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char) [clone .constprop.47]>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:591

  uint8_t comPins = 0x02;
  contrast = 0x8F;
    41b0:	8f e8       	ldi	r24, 0x8F	; 143
    41b2:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <display+0x3d>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:593

  if ((WIDTH == 128) && (HEIGHT == 32)) {
    41b6:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <display+0x4>
    41ba:	90 91 24 03 	lds	r25, 0x0324	; 0x800324 <display+0x5>
    41be:	80 38       	cpi	r24, 0x80	; 128
    41c0:	91 05       	cpc	r25, r1
    41c2:	09 f0       	breq	.+2      	; 0x41c6 <main+0x3da>
    41c4:	31 c1       	rjmp	.+610    	; 0x4428 <main+0x63c>
    41c6:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <display+0x6>
    41ca:	90 91 26 03 	lds	r25, 0x0326	; 0x800326 <display+0x7>
    41ce:	80 34       	cpi	r24, 0x40	; 64
    41d0:	91 05       	cpc	r25, r1
    41d2:	09 f0       	breq	.+2      	; 0x41d6 <main+0x3ea>
    41d4:	39 c1       	rjmp	.+626    	; 0x4448 <main+0x65c>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:598
    comPins = 0x02;
    contrast = 0x8F;
  } else if ((WIDTH == 128) && (HEIGHT == 64)) {
    comPins = 0x12;
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF;
    41d6:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <display+0x22>
    41da:	81 30       	cpi	r24, 0x01	; 1
    41dc:	09 f4       	brne	.+2      	; 0x41e0 <main+0x3f4>
    41de:	d8 c0       	rjmp	.+432    	; 0x4390 <main+0x5a4>
main():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:604
  } else if ((WIDTH == 96) && (HEIGHT == 16)) {
    comPins = 0x2; // ada x12
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF;
  } else if ((WIDTH == 64) && (HEIGHT == 32)) {
    comPins = 0x12; // ada x12
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xCF;
    41e0:	8f ec       	ldi	r24, 0xCF	; 207
    41e2:	d7 c0       	rjmp	.+430    	; 0x4392 <main+0x5a6>
begin():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:528
    // can accept different SDA/SCL pins, or if two SSD1306 instances
    // with different addresses -- only a single begin() is needed).
    if (periphBegin)
      wire->begin();
  } else { // Using one of the SPI modes, either soft or hardware
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
    41e4:	61 e0       	ldi	r22, 0x01	; 1
    41e6:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <display+0x26>
    41ea:	0e 94 42 0a 	call	0x1484	; 0x1484 <pinMode>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:529
    pinMode(csPin, OUTPUT); // Same for chip select
    41ee:	61 e0       	ldi	r22, 0x01	; 1
    41f0:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <display+0x27>
    41f4:	0e 94 42 0a 	call	0x1484	; 0x1484 <pinMode>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:531
#ifdef HAVE_PORTREG
    dcPort = (PortReg *)portOutputRegister(digitalPinToPort(dcPin));
    41f8:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <display+0x26>
    41fc:	08 2e       	mov	r0, r24
    41fe:	00 0c       	add	r0, r0
    4200:	99 0b       	sbc	r25, r25
    4202:	fc 01       	movw	r30, r24
    4204:	e8 50       	subi	r30, 0x08	; 8
    4206:	fe 4e       	sbci	r31, 0xEE	; 238
    4208:	e4 91       	lpm	r30, Z
    420a:	f0 e0       	ldi	r31, 0x00	; 0
    420c:	ee 0f       	add	r30, r30
    420e:	ff 1f       	adc	r31, r31
    4210:	e2 51       	subi	r30, 0x12	; 18
    4212:	fe 4e       	sbci	r31, 0xEE	; 238
    4214:	25 91       	lpm	r18, Z+
    4216:	34 91       	lpm	r19, Z
    4218:	30 93 4d 03 	sts	0x034D, r19	; 0x80034d <display+0x2e>
    421c:	20 93 4c 03 	sts	0x034C, r18	; 0x80034c <display+0x2d>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:532
    dcPinMask = digitalPinToBitMask(dcPin);
    4220:	fc 01       	movw	r30, r24
    4222:	e1 5f       	subi	r30, 0xF1	; 241
    4224:	fd 4e       	sbci	r31, 0xED	; 237
    4226:	e4 91       	lpm	r30, Z
    4228:	e0 93 52 03 	sts	0x0352, r30	; 0x800352 <display+0x33>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:533
    csPort = (PortReg *)portOutputRegister(digitalPinToPort(csPin));
    422c:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <display+0x27>
    4230:	08 2e       	mov	r0, r24
    4232:	00 0c       	add	r0, r0
    4234:	99 0b       	sbc	r25, r25
    4236:	fc 01       	movw	r30, r24
    4238:	e8 50       	subi	r30, 0x08	; 8
    423a:	fe 4e       	sbci	r31, 0xEE	; 238
    423c:	e4 91       	lpm	r30, Z
    423e:	f0 e0       	ldi	r31, 0x00	; 0
    4240:	ee 0f       	add	r30, r30
    4242:	ff 1f       	adc	r31, r31
    4244:	e2 51       	subi	r30, 0x12	; 18
    4246:	fe 4e       	sbci	r31, 0xEE	; 238
    4248:	a5 91       	lpm	r26, Z+
    424a:	b4 91       	lpm	r27, Z
    424c:	b0 93 4f 03 	sts	0x034F, r27	; 0x80034f <display+0x30>
    4250:	a0 93 4e 03 	sts	0x034E, r26	; 0x80034e <display+0x2f>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:534
    csPinMask = digitalPinToBitMask(csPin);
    4254:	fc 01       	movw	r30, r24
    4256:	e1 5f       	subi	r30, 0xF1	; 241
    4258:	fd 4e       	sbci	r31, 0xED	; 237
    425a:	e4 91       	lpm	r30, Z
    425c:	e0 93 53 03 	sts	0x0353, r30	; 0x800353 <display+0x34>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:536
#endif
    SSD1306_DESELECT
    4260:	8c 91       	ld	r24, X
    4262:	e8 2b       	or	r30, r24
    4264:	ec 93       	st	X, r30
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:537
    if (spi) { // Hardware SPI
    4266:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <display+0x1b>
    426a:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <display+0x1c>
    426e:	89 2b       	or	r24, r25
    4270:	09 f4       	brne	.+2      	; 0x4274 <main+0x488>
    4272:	34 c0       	rjmp	.+104    	; 0x42dc <main+0x4f0>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/SPI/src/SPI.cpp:28
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
  uint8_t sreg = SREG;
    4274:	cf b7       	in	r28, 0x3f	; 63
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/SPI/src/SPI.cpp:29
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    4276:	f8 94       	cli
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/SPI/src/SPI.cpp:30
  if (!initialized) {
    4278:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <SPIClass::initialized>
    427c:	81 11       	cpse	r24, r1
    427e:	27 c0       	rjmp	.+78     	; 0x42ce <main+0x4e2>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/SPI/src/SPI.cpp:32
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    4280:	e2 e0       	ldi	r30, 0x02	; 2
    4282:	f2 e1       	ldi	r31, 0x12	; 18
    4284:	84 91       	lpm	r24, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/SPI/src/SPI.cpp:33
    uint8_t bit = digitalPinToBitMask(SS);
    4286:	e9 e1       	ldi	r30, 0x19	; 25
    4288:	f2 e1       	ldi	r31, 0x12	; 18
    428a:	94 91       	lpm	r25, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/SPI/src/SPI.cpp:34
    volatile uint8_t *reg = portModeRegister(port);
    428c:	e8 2f       	mov	r30, r24
    428e:	f0 e0       	ldi	r31, 0x00	; 0
    4290:	ee 0f       	add	r30, r30
    4292:	ff 1f       	adc	r31, r31
    4294:	ec 51       	subi	r30, 0x1C	; 28
    4296:	fe 4e       	sbci	r31, 0xEE	; 238
    4298:	a5 91       	lpm	r26, Z+
    429a:	b4 91       	lpm	r27, Z
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/SPI/src/SPI.cpp:38

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    429c:	ec 91       	ld	r30, X
    429e:	e9 23       	and	r30, r25
    42a0:	21 f4       	brne	.+8      	; 0x42aa <main+0x4be>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/SPI/src/SPI.cpp:39
      digitalWrite(SS, HIGH);
    42a2:	61 e0       	ldi	r22, 0x01	; 1
    42a4:	8a e0       	ldi	r24, 0x0A	; 10
    42a6:	0e 94 f6 09 	call	0x13ec	; 0x13ec <digitalWrite>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/SPI/src/SPI.cpp:45
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    42aa:	61 e0       	ldi	r22, 0x01	; 1
    42ac:	8a e0       	ldi	r24, 0x0A	; 10
    42ae:	0e 94 42 0a 	call	0x1484	; 0x1484 <pinMode>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/SPI/src/SPI.cpp:50

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    42b2:	8c b5       	in	r24, 0x2c	; 44
    42b4:	80 61       	ori	r24, 0x10	; 16
    42b6:	8c bd       	out	0x2c, r24	; 44
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/SPI/src/SPI.cpp:51
    SPCR |= _BV(SPE);
    42b8:	8c b5       	in	r24, 0x2c	; 44
    42ba:	80 64       	ori	r24, 0x40	; 64
    42bc:	8c bd       	out	0x2c, r24	; 44
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/SPI/src/SPI.cpp:59
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    42be:	61 e0       	ldi	r22, 0x01	; 1
    42c0:	8d e0       	ldi	r24, 0x0D	; 13
    42c2:	0e 94 42 0a 	call	0x1484	; 0x1484 <pinMode>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/SPI/src/SPI.cpp:60
    pinMode(MOSI, OUTPUT);
    42c6:	61 e0       	ldi	r22, 0x01	; 1
    42c8:	8b e0       	ldi	r24, 0x0B	; 11
    42ca:	0e 94 42 0a 	call	0x1484	; 0x1484 <pinMode>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/SPI/src/SPI.cpp:62
  }
  initialized++; // reference count
    42ce:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <SPIClass::initialized>
    42d2:	8f 5f       	subi	r24, 0xFF	; 255
    42d4:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <SPIClass::initialized>
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/SPI/src/SPI.cpp:63
  SREG = sreg;
    42d8:	cf bf       	out	0x3f, r28	; 63
    42da:	09 cf       	rjmp	.-494    	; 0x40ee <main+0x302>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:542
      // SPI peripheral begin same as wire check above.
      if (periphBegin)
        spi->begin();
    } else {                    // Soft SPI
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
    42dc:	61 e0       	ldi	r22, 0x01	; 1
    42de:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <display+0x24>
    42e2:	0e 94 42 0a 	call	0x1484	; 0x1484 <pinMode>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:543
      pinMode(clkPin, OUTPUT);
    42e6:	61 e0       	ldi	r22, 0x01	; 1
    42e8:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <display+0x25>
    42ec:	0e 94 42 0a 	call	0x1484	; 0x1484 <pinMode>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:545
#ifdef HAVE_PORTREG
      mosiPort = (PortReg *)portOutputRegister(digitalPinToPort(mosiPin));
    42f0:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <display+0x24>
    42f4:	08 2e       	mov	r0, r24
    42f6:	00 0c       	add	r0, r0
    42f8:	99 0b       	sbc	r25, r25
    42fa:	fc 01       	movw	r30, r24
    42fc:	e8 50       	subi	r30, 0x08	; 8
    42fe:	fe 4e       	sbci	r31, 0xEE	; 238
    4300:	e4 91       	lpm	r30, Z
    4302:	f0 e0       	ldi	r31, 0x00	; 0
    4304:	ee 0f       	add	r30, r30
    4306:	ff 1f       	adc	r31, r31
    4308:	e2 51       	subi	r30, 0x12	; 18
    430a:	fe 4e       	sbci	r31, 0xEE	; 238
    430c:	25 91       	lpm	r18, Z+
    430e:	34 91       	lpm	r19, Z
    4310:	30 93 49 03 	sts	0x0349, r19	; 0x800349 <display+0x2a>
    4314:	20 93 48 03 	sts	0x0348, r18	; 0x800348 <display+0x29>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:546
      mosiPinMask = digitalPinToBitMask(mosiPin);
    4318:	fc 01       	movw	r30, r24
    431a:	e1 5f       	subi	r30, 0xF1	; 241
    431c:	fd 4e       	sbci	r31, 0xED	; 237
    431e:	e4 91       	lpm	r30, Z
    4320:	e0 93 50 03 	sts	0x0350, r30	; 0x800350 <display+0x31>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:547
      clkPort = (PortReg *)portOutputRegister(digitalPinToPort(clkPin));
    4324:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <display+0x25>
    4328:	08 2e       	mov	r0, r24
    432a:	00 0c       	add	r0, r0
    432c:	99 0b       	sbc	r25, r25
    432e:	fc 01       	movw	r30, r24
    4330:	e8 50       	subi	r30, 0x08	; 8
    4332:	fe 4e       	sbci	r31, 0xEE	; 238
    4334:	e4 91       	lpm	r30, Z
    4336:	f0 e0       	ldi	r31, 0x00	; 0
    4338:	ee 0f       	add	r30, r30
    433a:	ff 1f       	adc	r31, r31
    433c:	e2 51       	subi	r30, 0x12	; 18
    433e:	fe 4e       	sbci	r31, 0xEE	; 238
    4340:	a5 91       	lpm	r26, Z+
    4342:	b4 91       	lpm	r27, Z
    4344:	b0 93 4b 03 	sts	0x034B, r27	; 0x80034b <display+0x2c>
    4348:	a0 93 4a 03 	sts	0x034A, r26	; 0x80034a <display+0x2b>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:548
      clkPinMask = digitalPinToBitMask(clkPin);
    434c:	fc 01       	movw	r30, r24
    434e:	e1 5f       	subi	r30, 0xF1	; 241
    4350:	fd 4e       	sbci	r31, 0xED	; 237
    4352:	e4 91       	lpm	r30, Z
    4354:	e0 93 51 03 	sts	0x0351, r30	; 0x800351 <display+0x32>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:549
      *clkPort &= ~clkPinMask; // Clock low
    4358:	8c 91       	ld	r24, X
    435a:	e0 95       	com	r30
    435c:	e8 23       	and	r30, r24
    435e:	ec 93       	st	X, r30
    4360:	c6 ce       	rjmp	.-628    	; 0x40ee <main+0x302>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:566
    digitalWrite(rstPin, LOW);  // Bring reset low
    delay(10);                  // Wait 10 ms
    digitalWrite(rstPin, HIGH); // Bring out of reset
  }

  TRANSACTION_START
    4362:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <display+0x1b>
    4366:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <display+0x1c>
    436a:	89 2b       	or	r24, r25
    436c:	31 f0       	breq	.+12     	; 0x437a <main+0x58e>
    436e:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <display+0x3e>
    4372:	90 91 5e 03 	lds	r25, 0x035E	; 0x80035e <display+0x3f>
    4376:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <SPIClass::beginTransaction(SPISettings)>
    437a:	e0 91 4e 03 	lds	r30, 0x034E	; 0x80034e <display+0x2f>
    437e:	f0 91 4f 03 	lds	r31, 0x034F	; 0x80034f <display+0x30>
    4382:	90 81       	ld	r25, Z
    4384:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <display+0x34>
    4388:	80 95       	com	r24
    438a:	89 23       	and	r24, r25
    438c:	80 83       	st	Z, r24
    438e:	f0 ce       	rjmp	.-544    	; 0x4170 <main+0x384>
main():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:598
  if ((WIDTH == 128) && (HEIGHT == 32)) {
    comPins = 0x02;
    contrast = 0x8F;
  } else if ((WIDTH == 128) && (HEIGHT == 64)) {
    comPins = 0x12;
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF;
    4390:	8f e9       	ldi	r24, 0x9F	; 159
begin():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:604
  } else if ((WIDTH == 96) && (HEIGHT == 16)) {
    comPins = 0x2; // ada x12
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF;
  } else if ((WIDTH == 64) && (HEIGHT == 32)) {
    comPins = 0x12; // ada x12
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xCF;
    4392:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <display+0x3d>
main():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:603
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF;
  } else if ((WIDTH == 96) && (HEIGHT == 16)) {
    comPins = 0x2; // ada x12
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF;
  } else if ((WIDTH == 64) && (HEIGHT == 32)) {
    comPins = 0x12; // ada x12
    4396:	c2 e1       	ldi	r28, 0x12	; 18
begin():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:609
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xCF;
  } else {
    // Other screen varieties -- TBD
  }

  ssd1306_command1(SSD1306_SETCOMPINS);
    4398:	6a ed       	ldi	r22, 0xDA	; 218
    439a:	8f e1       	ldi	r24, 0x1F	; 31
    439c:	93 e0       	ldi	r25, 0x03	; 3
    439e:	0e 94 18 15 	call	0x2a30	; 0x2a30 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:610
  ssd1306_command1(comPins);
    43a2:	6c 2f       	mov	r22, r28
    43a4:	8f e1       	ldi	r24, 0x1F	; 31
    43a6:	93 e0       	ldi	r25, 0x03	; 3
    43a8:	0e 94 18 15 	call	0x2a30	; 0x2a30 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:611
  ssd1306_command1(SSD1306_SETCONTRAST);
    43ac:	61 e8       	ldi	r22, 0x81	; 129
    43ae:	8f e1       	ldi	r24, 0x1F	; 31
    43b0:	93 e0       	ldi	r25, 0x03	; 3
    43b2:	0e 94 18 15 	call	0x2a30	; 0x2a30 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:612
  ssd1306_command1(contrast);
    43b6:	60 91 5c 03 	lds	r22, 0x035C	; 0x80035c <display+0x3d>
    43ba:	8f e1       	ldi	r24, 0x1F	; 31
    43bc:	93 e0       	ldi	r25, 0x03	; 3
    43be:	0e 94 18 15 	call	0x2a30	; 0x2a30 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:614

  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
    43c2:	69 ed       	ldi	r22, 0xD9	; 217
    43c4:	8f e1       	ldi	r24, 0x1F	; 31
    43c6:	93 e0       	ldi	r25, 0x03	; 3
    43c8:	0e 94 18 15 	call	0x2a30	; 0x2a30 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:615
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
    43cc:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <display+0x22>
main():
    43d0:	61 ef       	ldi	r22, 0xF1	; 241
begin():
    43d2:	81 30       	cpi	r24, 0x01	; 1
    43d4:	09 f4       	brne	.+2      	; 0x43d8 <main+0x5ec>
main():
    43d6:	62 e2       	ldi	r22, 0x22	; 34
begin():
    43d8:	8f e1       	ldi	r24, 0x1F	; 31
    43da:	93 e0       	ldi	r25, 0x03	; 3
    43dc:	0e 94 18 15 	call	0x2a30	; 0x2a30 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:623
      0x40,
      SSD1306_DISPLAYALLON_RESUME, // 0xA4
      SSD1306_NORMALDISPLAY,       // 0xA6
      SSD1306_DEACTIVATE_SCROLL,
      SSD1306_DISPLAYON}; // Main screen turn on
  ssd1306_commandList(init5, sizeof(init5));
    43e0:	66 e0       	ldi	r22, 0x06	; 6
    43e2:	82 e3       	ldi	r24, 0x32	; 50
    43e4:	9d e0       	ldi	r25, 0x0D	; 13
    43e6:	0e 94 70 14 	call	0x28e0	; 0x28e0 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char) [clone .constprop.47]>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:625

  TRANSACTION_END
    43ea:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <display+0x1d>
    43ee:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <display+0x1e>
    43f2:	89 2b       	or	r24, r25
    43f4:	e9 f1       	breq	.+122    	; 0x4470 <main+0x684>
twi_setFrequency():
/Users/rcaratti/Library/Arduino15/packages/MiniCore/hardware/avr/3.1.1/libraries/Wire/src/utility/twi.c:142
    43f6:	20 91 58 03 	lds	r18, 0x0358	; 0x800358 <display+0x39>
    43fa:	30 91 59 03 	lds	r19, 0x0359	; 0x800359 <display+0x3a>
    43fe:	40 91 5a 03 	lds	r20, 0x035A	; 0x80035a <display+0x3b>
    4402:	50 91 5b 03 	lds	r21, 0x035B	; 0x80035b <display+0x3c>
    4406:	60 e0       	ldi	r22, 0x00	; 0
    4408:	74 e2       	ldi	r23, 0x24	; 36
    440a:	84 ef       	ldi	r24, 0xF4	; 244
    440c:	90 e0       	ldi	r25, 0x00	; 0
    440e:	0e 94 b0 22 	call	0x4560	; 0x4560 <__udivmodsi4>
    4412:	20 51       	subi	r18, 0x10	; 16
    4414:	31 09       	sbc	r19, r1
    4416:	41 09       	sbc	r20, r1
    4418:	51 09       	sbc	r21, r1
    441a:	56 95       	lsr	r21
    441c:	47 95       	ror	r20
    441e:	37 95       	ror	r19
    4420:	27 95       	ror	r18
    4422:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    4426:	58 cd       	rjmp	.-1360   	; 0x3ed8 <main+0xec>
begin():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:599
    comPins = 0x02;
    contrast = 0x8F;
  } else if ((WIDTH == 128) && (HEIGHT == 64)) {
    comPins = 0x12;
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF;
  } else if ((WIDTH == 96) && (HEIGHT == 16)) {
    4428:	80 36       	cpi	r24, 0x60	; 96
    442a:	91 05       	cpc	r25, r1
    442c:	89 f4       	brne	.+34     	; 0x4450 <main+0x664>
    442e:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <display+0x6>
    4432:	90 91 26 03 	lds	r25, 0x0326	; 0x800326 <display+0x7>
    4436:	40 97       	sbiw	r24, 0x10	; 16
    4438:	39 f4       	brne	.+14     	; 0x4448 <main+0x65c>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:601
    comPins = 0x2; // ada x12
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF;
    443a:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <display+0x22>
    443e:	81 30       	cpi	r24, 0x01	; 1
    4440:	29 f0       	breq	.+10     	; 0x444c <main+0x660>
main():
    4442:	8f ea       	ldi	r24, 0xAF	; 175
begin():
    4444:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <display+0x3d>
main():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:594

  uint8_t comPins = 0x02;
  contrast = 0x8F;

  if ((WIDTH == 128) && (HEIGHT == 32)) {
    comPins = 0x02;
    4448:	c2 e0       	ldi	r28, 0x02	; 2
    444a:	a6 cf       	rjmp	.-180    	; 0x4398 <main+0x5ac>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:601
  } else if ((WIDTH == 128) && (HEIGHT == 64)) {
    comPins = 0x12;
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF;
  } else if ((WIDTH == 96) && (HEIGHT == 16)) {
    comPins = 0x2; // ada x12
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF;
    444c:	80 e1       	ldi	r24, 0x10	; 16
    444e:	fa cf       	rjmp	.-12     	; 0x4444 <main+0x658>
begin():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:602
  } else if ((WIDTH == 64) && (HEIGHT == 32)) {
    4450:	80 34       	cpi	r24, 0x40	; 64
    4452:	91 05       	cpc	r25, r1
    4454:	c9 f7       	brne	.-14     	; 0x4448 <main+0x65c>
    4456:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <display+0x6>
    445a:	90 91 26 03 	lds	r25, 0x0326	; 0x800326 <display+0x7>
    445e:	80 97       	sbiw	r24, 0x20	; 32
    4460:	99 f7       	brne	.-26     	; 0x4448 <main+0x65c>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:604
    comPins = 0x12; // ada x12
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xCF;
    4462:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <display+0x22>
    4466:	81 30       	cpi	r24, 0x01	; 1
    4468:	09 f0       	breq	.+2      	; 0x446c <main+0x680>
    446a:	ba ce       	rjmp	.-652    	; 0x41e0 <main+0x3f4>
main():
    446c:	80 e1       	ldi	r24, 0x10	; 16
    446e:	91 cf       	rjmp	.-222    	; 0x4392 <main+0x5a6>
begin():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:625
      SSD1306_NORMALDISPLAY,       // 0xA6
      SSD1306_DEACTIVATE_SCROLL,
      SSD1306_DISPLAYON}; // Main screen turn on
  ssd1306_commandList(init5, sizeof(init5));

  TRANSACTION_END
    4470:	e0 91 4e 03 	lds	r30, 0x034E	; 0x80034e <display+0x2f>
    4474:	f0 91 4f 03 	lds	r31, 0x034F	; 0x80034f <display+0x30>
    4478:	80 81       	ld	r24, Z
    447a:	90 91 53 03 	lds	r25, 0x0353	; 0x800353 <display+0x34>
    447e:	89 2b       	or	r24, r25
    4480:	80 83       	st	Z, r24
    4482:	2a cd       	rjmp	.-1452   	; 0x3ed8 <main+0xec>

00004484 <_GLOBAL__sub_D_tabBand>:
_GLOBAL__sub_D_tabBand():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:180
}
    4484:	cf 93       	push	r28
    4486:	df 93       	push	r29
__base_dtor ():
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:342
      rstPin(rst_pin) {}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
    4488:	8a e2       	ldi	r24, 0x2A	; 42
    448a:	91 e0       	ldi	r25, 0x01	; 1
    448c:	90 93 20 03 	sts	0x0320, r25	; 0x800320 <display+0x1>
    4490:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <display>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:343
  if (buffer) {
    4494:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <display+0x1f>
    4498:	90 91 3f 03 	lds	r25, 0x033F	; 0x80033f <display+0x20>
    449c:	00 97       	sbiw	r24, 0x00	; 0
    449e:	11 f0       	breq	.+4      	; 0x44a4 <_GLOBAL__sub_D_tabBand+0x20>
/Users/rcaratti/Documents/Arduino/libraries/Adafruit_SSD1306/Adafruit_SSD1306.cpp:344
    free(buffer);
    44a0:	0e 94 7c 23 	call	0x46f8	; 0x46f8 <free>
_GLOBAL__sub_D_tabBand():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:65

/*
   Pre-defined Band Table - See the SI48XX ATDD - PROGRAMMING GUIDE page 17.
*/

String tabBand[] = { "FM1", "FM2", "FM3", "FM4", "FM5", "FM6", "FM7", "FM8", "FM9", "FM10", "FM11", "FM12", "FM13", "FM14", "FM15", "FM16", "FM17", "FM18", "FM19", "FM20",
    44a4:	c5 e5       	ldi	r28, 0x55	; 85
    44a6:	d4 e0       	ldi	r29, 0x04	; 4
__static_initialization_and_destruction_0():
    44a8:	26 97       	sbiw	r28, 0x06	; 6
    44aa:	ce 01       	movw	r24, r28
    44ac:	0e 94 8d 18 	call	0x311a	; 0x311a <String::~String()>
    44b0:	83 e0       	ldi	r24, 0x03	; 3
    44b2:	cf 35       	cpi	r28, 0x5F	; 95
    44b4:	d8 07       	cpc	r29, r24
    44b6:	c1 f7       	brne	.-16     	; 0x44a8 <_GLOBAL__sub_D_tabBand+0x24>
_GLOBAL__sub_D_tabBand():
/Users/rcaratti/Desenvolvimento/eu/Arduino/DSP/si4844/SI4844/examples/SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH/SI4844_01_OLED_SLIDE_SWITCH.ino:180

    displayDial();  
  }

  delay(50);
}
    44b8:	df 91       	pop	r29
    44ba:	cf 91       	pop	r28
    44bc:	08 95       	ret

000044be <__muluhisi3>:
__muluhisi3():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    44be:	0e 94 a1 22 	call	0x4542	; 0x4542 <__umulhisi3>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    44c2:	a5 9f       	mul	r26, r21
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    44c4:	90 0d       	add	r25, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    44c6:	b4 9f       	mul	r27, r20
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    44c8:	90 0d       	add	r25, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    44ca:	a4 9f       	mul	r26, r20
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    44cc:	80 0d       	add	r24, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    44ce:	91 1d       	adc	r25, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    44d0:	11 24       	eor	r1, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    44d2:	08 95       	ret

000044d4 <__prologue_saves__>:
__prologue_saves__():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2169
    44d4:	2f 92       	push	r2
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2170
    44d6:	3f 92       	push	r3
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2171
    44d8:	4f 92       	push	r4
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2172
    44da:	5f 92       	push	r5
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2173
    44dc:	6f 92       	push	r6
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2174
    44de:	7f 92       	push	r7
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2175
    44e0:	8f 92       	push	r8
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2176
    44e2:	9f 92       	push	r9
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2177
    44e4:	af 92       	push	r10
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2178
    44e6:	bf 92       	push	r11
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2179
    44e8:	cf 92       	push	r12
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2180
    44ea:	df 92       	push	r13
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2181
    44ec:	ef 92       	push	r14
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2182
    44ee:	ff 92       	push	r15
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2183
    44f0:	0f 93       	push	r16
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2184
    44f2:	1f 93       	push	r17
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2185
    44f4:	cf 93       	push	r28
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2186
    44f6:	df 93       	push	r29
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2200
    44f8:	cd b7       	in	r28, 0x3d	; 61
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2201
    44fa:	de b7       	in	r29, 0x3e	; 62
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2202
    44fc:	ca 1b       	sub	r28, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2203
    44fe:	db 0b       	sbc	r29, r27
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2204
    4500:	0f b6       	in	r0, 0x3f	; 63
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2205
    4502:	f8 94       	cli
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2206
    4504:	de bf       	out	0x3e, r29	; 62
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2207
    4506:	0f be       	out	0x3f, r0	; 63
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2208
    4508:	cd bf       	out	0x3d, r28	; 61
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2211
    450a:	09 94       	ijmp

0000450c <__epilogue_restores__>:
__epilogue_restores__():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2222
    450c:	2a 88       	ldd	r2, Y+18	; 0x12
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2223
    450e:	39 88       	ldd	r3, Y+17	; 0x11
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2224
    4510:	48 88       	ldd	r4, Y+16	; 0x10
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2225
    4512:	5f 84       	ldd	r5, Y+15	; 0x0f
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2226
    4514:	6e 84       	ldd	r6, Y+14	; 0x0e
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2227
    4516:	7d 84       	ldd	r7, Y+13	; 0x0d
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2228
    4518:	8c 84       	ldd	r8, Y+12	; 0x0c
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2229
    451a:	9b 84       	ldd	r9, Y+11	; 0x0b
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2230
    451c:	aa 84       	ldd	r10, Y+10	; 0x0a
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2231
    451e:	b9 84       	ldd	r11, Y+9	; 0x09
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2232
    4520:	c8 84       	ldd	r12, Y+8	; 0x08
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2233
    4522:	df 80       	ldd	r13, Y+7	; 0x07
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2234
    4524:	ee 80       	ldd	r14, Y+6	; 0x06
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2235
    4526:	fd 80       	ldd	r15, Y+5	; 0x05
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2236
    4528:	0c 81       	ldd	r16, Y+4	; 0x04
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2237
    452a:	1b 81       	ldd	r17, Y+3	; 0x03
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2238
    452c:	aa 81       	ldd	r26, Y+2	; 0x02
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2252
    452e:	b9 81       	ldd	r27, Y+1	; 0x01
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2253
    4530:	ce 0f       	add	r28, r30
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2254
    4532:	d1 1d       	adc	r29, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2255
    4534:	0f b6       	in	r0, 0x3f	; 63
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2256
    4536:	f8 94       	cli
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2257
    4538:	de bf       	out	0x3e, r29	; 62
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2258
    453a:	0f be       	out	0x3f, r0	; 63
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2259
    453c:	cd bf       	out	0x3d, r28	; 61
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2260
    453e:	ed 01       	movw	r28, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2263
    4540:	08 95       	ret

00004542 <__umulhisi3>:
__umulhisi3():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    4542:	a2 9f       	mul	r26, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    4544:	b0 01       	movw	r22, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    4546:	b3 9f       	mul	r27, r19
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    4548:	c0 01       	movw	r24, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    454a:	a3 9f       	mul	r26, r19
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    454c:	70 0d       	add	r23, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    454e:	81 1d       	adc	r24, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    4550:	11 24       	eor	r1, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    4552:	91 1d       	adc	r25, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    4554:	b2 9f       	mul	r27, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    4556:	70 0d       	add	r23, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    4558:	81 1d       	adc	r24, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    455a:	11 24       	eor	r1, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    455c:	91 1d       	adc	r25, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    455e:	08 95       	ret

00004560 <__udivmodsi4>:
__udivmodsi4():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    4560:	a1 e2       	ldi	r26, 0x21	; 33
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    4562:	1a 2e       	mov	r1, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    4564:	aa 1b       	sub	r26, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    4566:	bb 1b       	sub	r27, r27
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    4568:	fd 01       	movw	r30, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    456a:	0d c0       	rjmp	.+26     	; 0x4586 <__udivmodsi4_ep>

0000456c <__udivmodsi4_loop>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    456c:	aa 1f       	adc	r26, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    456e:	bb 1f       	adc	r27, r27
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    4570:	ee 1f       	adc	r30, r30
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    4572:	ff 1f       	adc	r31, r31
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    4574:	a2 17       	cp	r26, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    4576:	b3 07       	cpc	r27, r19
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    4578:	e4 07       	cpc	r30, r20
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    457a:	f5 07       	cpc	r31, r21
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    457c:	20 f0       	brcs	.+8      	; 0x4586 <__udivmodsi4_ep>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    457e:	a2 1b       	sub	r26, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    4580:	b3 0b       	sbc	r27, r19
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    4582:	e4 0b       	sbc	r30, r20
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    4584:	f5 0b       	sbc	r31, r21

00004586 <__udivmodsi4_ep>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    4586:	66 1f       	adc	r22, r22
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    4588:	77 1f       	adc	r23, r23
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    458a:	88 1f       	adc	r24, r24
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    458c:	99 1f       	adc	r25, r25
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    458e:	1a 94       	dec	r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    4590:	69 f7       	brne	.-38     	; 0x456c <__udivmodsi4_loop>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    4592:	60 95       	com	r22
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    4594:	70 95       	com	r23
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    4596:	80 95       	com	r24
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    4598:	90 95       	com	r25
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    459a:	9b 01       	movw	r18, r22
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    459c:	ac 01       	movw	r20, r24
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    459e:	bd 01       	movw	r22, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    45a0:	cf 01       	movw	r24, r30
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    45a2:	08 95       	ret

000045a4 <__mulshisi3>:
__mulshisi3():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:603
    45a4:	b7 ff       	sbrs	r27, 7
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:605
    45a6:	0c 94 5f 22 	jmp	0x44be	; 0x44be <__muluhisi3>

000045aa <__mulohisi3>:
__mulohisi3():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:613
    45aa:	0e 94 5f 22 	call	0x44be	; 0x44be <__muluhisi3>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:615
    45ae:	82 1b       	sub	r24, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:616
    45b0:	93 0b       	sbc	r25, r19
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:617
    45b2:	08 95       	ret

000045b4 <__tablejump2__>:
__tablejump2__():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    45b4:	ee 0f       	add	r30, r30
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    45b6:	ff 1f       	adc	r31, r31
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    45b8:	05 90       	lpm	r0, Z+
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    45ba:	f4 91       	lpm	r31, Z
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    45bc:	e0 2d       	mov	r30, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    45be:	09 94       	ijmp

000045c0 <malloc>:
malloc():
    45c0:	0f 93       	push	r16
    45c2:	1f 93       	push	r17
    45c4:	cf 93       	push	r28
    45c6:	df 93       	push	r29
    45c8:	82 30       	cpi	r24, 0x02	; 2
    45ca:	91 05       	cpc	r25, r1
    45cc:	10 f4       	brcc	.+4      	; 0x45d2 <malloc+0x12>
    45ce:	82 e0       	ldi	r24, 0x02	; 2
    45d0:	90 e0       	ldi	r25, 0x00	; 0
    45d2:	e0 91 57 04 	lds	r30, 0x0457	; 0x800457 <__flp>
    45d6:	f0 91 58 04 	lds	r31, 0x0458	; 0x800458 <__flp+0x1>
    45da:	30 e0       	ldi	r19, 0x00	; 0
    45dc:	20 e0       	ldi	r18, 0x00	; 0
    45de:	b0 e0       	ldi	r27, 0x00	; 0
    45e0:	a0 e0       	ldi	r26, 0x00	; 0
    45e2:	30 97       	sbiw	r30, 0x00	; 0
    45e4:	99 f4       	brne	.+38     	; 0x460c <malloc+0x4c>
    45e6:	21 15       	cp	r18, r1
    45e8:	31 05       	cpc	r19, r1
    45ea:	09 f4       	brne	.+2      	; 0x45ee <malloc+0x2e>
    45ec:	4a c0       	rjmp	.+148    	; 0x4682 <malloc+0xc2>
    45ee:	28 1b       	sub	r18, r24
    45f0:	39 0b       	sbc	r19, r25
    45f2:	24 30       	cpi	r18, 0x04	; 4
    45f4:	31 05       	cpc	r19, r1
    45f6:	d8 f5       	brcc	.+118    	; 0x466e <malloc+0xae>
    45f8:	8a 81       	ldd	r24, Y+2	; 0x02
    45fa:	9b 81       	ldd	r25, Y+3	; 0x03
    45fc:	61 15       	cp	r22, r1
    45fe:	71 05       	cpc	r23, r1
    4600:	89 f1       	breq	.+98     	; 0x4664 <malloc+0xa4>
    4602:	fb 01       	movw	r30, r22
    4604:	93 83       	std	Z+3, r25	; 0x03
    4606:	82 83       	std	Z+2, r24	; 0x02
    4608:	fe 01       	movw	r30, r28
    460a:	11 c0       	rjmp	.+34     	; 0x462e <malloc+0x6e>
    460c:	40 81       	ld	r20, Z
    460e:	51 81       	ldd	r21, Z+1	; 0x01
    4610:	02 81       	ldd	r16, Z+2	; 0x02
    4612:	13 81       	ldd	r17, Z+3	; 0x03
    4614:	48 17       	cp	r20, r24
    4616:	59 07       	cpc	r21, r25
    4618:	e0 f0       	brcs	.+56     	; 0x4652 <malloc+0x92>
    461a:	48 17       	cp	r20, r24
    461c:	59 07       	cpc	r21, r25
    461e:	99 f4       	brne	.+38     	; 0x4646 <malloc+0x86>
    4620:	10 97       	sbiw	r26, 0x00	; 0
    4622:	61 f0       	breq	.+24     	; 0x463c <malloc+0x7c>
    4624:	12 96       	adiw	r26, 0x02	; 2
    4626:	0c 93       	st	X, r16
    4628:	12 97       	sbiw	r26, 0x02	; 2
    462a:	13 96       	adiw	r26, 0x03	; 3
    462c:	1c 93       	st	X, r17
    462e:	32 96       	adiw	r30, 0x02	; 2
    4630:	cf 01       	movw	r24, r30
    4632:	df 91       	pop	r29
    4634:	cf 91       	pop	r28
    4636:	1f 91       	pop	r17
    4638:	0f 91       	pop	r16
    463a:	08 95       	ret
    463c:	00 93 57 04 	sts	0x0457, r16	; 0x800457 <__flp>
    4640:	10 93 58 04 	sts	0x0458, r17	; 0x800458 <__flp+0x1>
    4644:	f4 cf       	rjmp	.-24     	; 0x462e <malloc+0x6e>
    4646:	21 15       	cp	r18, r1
    4648:	31 05       	cpc	r19, r1
    464a:	51 f0       	breq	.+20     	; 0x4660 <malloc+0xa0>
    464c:	42 17       	cp	r20, r18
    464e:	53 07       	cpc	r21, r19
    4650:	38 f0       	brcs	.+14     	; 0x4660 <malloc+0xa0>
    4652:	a9 01       	movw	r20, r18
    4654:	db 01       	movw	r26, r22
    4656:	9a 01       	movw	r18, r20
    4658:	bd 01       	movw	r22, r26
    465a:	df 01       	movw	r26, r30
    465c:	f8 01       	movw	r30, r16
    465e:	c1 cf       	rjmp	.-126    	; 0x45e2 <malloc+0x22>
    4660:	ef 01       	movw	r28, r30
    4662:	f9 cf       	rjmp	.-14     	; 0x4656 <malloc+0x96>
    4664:	90 93 58 04 	sts	0x0458, r25	; 0x800458 <__flp+0x1>
    4668:	80 93 57 04 	sts	0x0457, r24	; 0x800457 <__flp>
    466c:	cd cf       	rjmp	.-102    	; 0x4608 <malloc+0x48>
    466e:	fe 01       	movw	r30, r28
    4670:	e2 0f       	add	r30, r18
    4672:	f3 1f       	adc	r31, r19
    4674:	81 93       	st	Z+, r24
    4676:	91 93       	st	Z+, r25
    4678:	22 50       	subi	r18, 0x02	; 2
    467a:	31 09       	sbc	r19, r1
    467c:	39 83       	std	Y+1, r19	; 0x01
    467e:	28 83       	st	Y, r18
    4680:	d7 cf       	rjmp	.-82     	; 0x4630 <malloc+0x70>
    4682:	20 91 55 04 	lds	r18, 0x0455	; 0x800455 <__brkval>
    4686:	30 91 56 04 	lds	r19, 0x0456	; 0x800456 <__brkval+0x1>
    468a:	23 2b       	or	r18, r19
    468c:	41 f4       	brne	.+16     	; 0x469e <malloc+0xde>
    468e:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__malloc_heap_start>
    4692:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__malloc_heap_start+0x1>
    4696:	30 93 56 04 	sts	0x0456, r19	; 0x800456 <__brkval+0x1>
    469a:	20 93 55 04 	sts	0x0455, r18	; 0x800455 <__brkval>
    469e:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__malloc_heap_end>
    46a2:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__malloc_heap_end+0x1>
    46a6:	21 15       	cp	r18, r1
    46a8:	31 05       	cpc	r19, r1
    46aa:	41 f4       	brne	.+16     	; 0x46bc <malloc+0xfc>
    46ac:	2d b7       	in	r18, 0x3d	; 61
    46ae:	3e b7       	in	r19, 0x3e	; 62
    46b0:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <__malloc_margin>
    46b4:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <__malloc_margin+0x1>
    46b8:	24 1b       	sub	r18, r20
    46ba:	35 0b       	sbc	r19, r21
    46bc:	e0 91 55 04 	lds	r30, 0x0455	; 0x800455 <__brkval>
    46c0:	f0 91 56 04 	lds	r31, 0x0456	; 0x800456 <__brkval+0x1>
    46c4:	e2 17       	cp	r30, r18
    46c6:	f3 07       	cpc	r31, r19
    46c8:	a0 f4       	brcc	.+40     	; 0x46f2 <malloc+0x132>
    46ca:	2e 1b       	sub	r18, r30
    46cc:	3f 0b       	sbc	r19, r31
    46ce:	28 17       	cp	r18, r24
    46d0:	39 07       	cpc	r19, r25
    46d2:	78 f0       	brcs	.+30     	; 0x46f2 <malloc+0x132>
    46d4:	ac 01       	movw	r20, r24
    46d6:	4e 5f       	subi	r20, 0xFE	; 254
    46d8:	5f 4f       	sbci	r21, 0xFF	; 255
    46da:	24 17       	cp	r18, r20
    46dc:	35 07       	cpc	r19, r21
    46de:	48 f0       	brcs	.+18     	; 0x46f2 <malloc+0x132>
    46e0:	4e 0f       	add	r20, r30
    46e2:	5f 1f       	adc	r21, r31
    46e4:	50 93 56 04 	sts	0x0456, r21	; 0x800456 <__brkval+0x1>
    46e8:	40 93 55 04 	sts	0x0455, r20	; 0x800455 <__brkval>
    46ec:	81 93       	st	Z+, r24
    46ee:	91 93       	st	Z+, r25
    46f0:	9f cf       	rjmp	.-194    	; 0x4630 <malloc+0x70>
    46f2:	f0 e0       	ldi	r31, 0x00	; 0
    46f4:	e0 e0       	ldi	r30, 0x00	; 0
    46f6:	9c cf       	rjmp	.-200    	; 0x4630 <malloc+0x70>

000046f8 <free>:
free():
    46f8:	cf 93       	push	r28
    46fa:	df 93       	push	r29
    46fc:	00 97       	sbiw	r24, 0x00	; 0
    46fe:	e9 f0       	breq	.+58     	; 0x473a <free+0x42>
    4700:	fc 01       	movw	r30, r24
    4702:	32 97       	sbiw	r30, 0x02	; 2
    4704:	13 82       	std	Z+3, r1	; 0x03
    4706:	12 82       	std	Z+2, r1	; 0x02
    4708:	a0 91 57 04 	lds	r26, 0x0457	; 0x800457 <__flp>
    470c:	b0 91 58 04 	lds	r27, 0x0458	; 0x800458 <__flp+0x1>
    4710:	ed 01       	movw	r28, r26
    4712:	30 e0       	ldi	r19, 0x00	; 0
    4714:	20 e0       	ldi	r18, 0x00	; 0
    4716:	10 97       	sbiw	r26, 0x00	; 0
    4718:	a1 f4       	brne	.+40     	; 0x4742 <free+0x4a>
    471a:	20 81       	ld	r18, Z
    471c:	31 81       	ldd	r19, Z+1	; 0x01
    471e:	82 0f       	add	r24, r18
    4720:	93 1f       	adc	r25, r19
    4722:	20 91 55 04 	lds	r18, 0x0455	; 0x800455 <__brkval>
    4726:	30 91 56 04 	lds	r19, 0x0456	; 0x800456 <__brkval+0x1>
    472a:	28 17       	cp	r18, r24
    472c:	39 07       	cpc	r19, r25
    472e:	09 f0       	breq	.+2      	; 0x4732 <free+0x3a>
    4730:	61 c0       	rjmp	.+194    	; 0x47f4 <free+0xfc>
    4732:	f0 93 56 04 	sts	0x0456, r31	; 0x800456 <__brkval+0x1>
    4736:	e0 93 55 04 	sts	0x0455, r30	; 0x800455 <__brkval>
    473a:	df 91       	pop	r29
    473c:	cf 91       	pop	r28
    473e:	08 95       	ret
    4740:	ea 01       	movw	r28, r20
    4742:	ce 17       	cp	r28, r30
    4744:	df 07       	cpc	r29, r31
    4746:	e8 f5       	brcc	.+122    	; 0x47c2 <free+0xca>
    4748:	4a 81       	ldd	r20, Y+2	; 0x02
    474a:	5b 81       	ldd	r21, Y+3	; 0x03
    474c:	9e 01       	movw	r18, r28
    474e:	41 15       	cp	r20, r1
    4750:	51 05       	cpc	r21, r1
    4752:	b1 f7       	brne	.-20     	; 0x4740 <free+0x48>
    4754:	e9 01       	movw	r28, r18
    4756:	fb 83       	std	Y+3, r31	; 0x03
    4758:	ea 83       	std	Y+2, r30	; 0x02
    475a:	49 91       	ld	r20, Y+
    475c:	59 91       	ld	r21, Y+
    475e:	c4 0f       	add	r28, r20
    4760:	d5 1f       	adc	r29, r21
    4762:	ec 17       	cp	r30, r28
    4764:	fd 07       	cpc	r31, r29
    4766:	61 f4       	brne	.+24     	; 0x4780 <free+0x88>
    4768:	80 81       	ld	r24, Z
    476a:	91 81       	ldd	r25, Z+1	; 0x01
    476c:	02 96       	adiw	r24, 0x02	; 2
    476e:	84 0f       	add	r24, r20
    4770:	95 1f       	adc	r25, r21
    4772:	e9 01       	movw	r28, r18
    4774:	99 83       	std	Y+1, r25	; 0x01
    4776:	88 83       	st	Y, r24
    4778:	82 81       	ldd	r24, Z+2	; 0x02
    477a:	93 81       	ldd	r25, Z+3	; 0x03
    477c:	9b 83       	std	Y+3, r25	; 0x03
    477e:	8a 83       	std	Y+2, r24	; 0x02
    4780:	f0 e0       	ldi	r31, 0x00	; 0
    4782:	e0 e0       	ldi	r30, 0x00	; 0
    4784:	12 96       	adiw	r26, 0x02	; 2
    4786:	8d 91       	ld	r24, X+
    4788:	9c 91       	ld	r25, X
    478a:	13 97       	sbiw	r26, 0x03	; 3
    478c:	00 97       	sbiw	r24, 0x00	; 0
    478e:	b9 f5       	brne	.+110    	; 0x47fe <free+0x106>
    4790:	2d 91       	ld	r18, X+
    4792:	3c 91       	ld	r19, X
    4794:	11 97       	sbiw	r26, 0x01	; 1
    4796:	cd 01       	movw	r24, r26
    4798:	02 96       	adiw	r24, 0x02	; 2
    479a:	82 0f       	add	r24, r18
    479c:	93 1f       	adc	r25, r19
    479e:	20 91 55 04 	lds	r18, 0x0455	; 0x800455 <__brkval>
    47a2:	30 91 56 04 	lds	r19, 0x0456	; 0x800456 <__brkval+0x1>
    47a6:	28 17       	cp	r18, r24
    47a8:	39 07       	cpc	r19, r25
    47aa:	39 f6       	brne	.-114    	; 0x473a <free+0x42>
    47ac:	30 97       	sbiw	r30, 0x00	; 0
    47ae:	51 f5       	brne	.+84     	; 0x4804 <free+0x10c>
    47b0:	10 92 58 04 	sts	0x0458, r1	; 0x800458 <__flp+0x1>
    47b4:	10 92 57 04 	sts	0x0457, r1	; 0x800457 <__flp>
    47b8:	b0 93 56 04 	sts	0x0456, r27	; 0x800456 <__brkval+0x1>
    47bc:	a0 93 55 04 	sts	0x0455, r26	; 0x800455 <__brkval>
    47c0:	bc cf       	rjmp	.-136    	; 0x473a <free+0x42>
    47c2:	d3 83       	std	Z+3, r29	; 0x03
    47c4:	c2 83       	std	Z+2, r28	; 0x02
    47c6:	40 81       	ld	r20, Z
    47c8:	51 81       	ldd	r21, Z+1	; 0x01
    47ca:	84 0f       	add	r24, r20
    47cc:	95 1f       	adc	r25, r21
    47ce:	c8 17       	cp	r28, r24
    47d0:	d9 07       	cpc	r29, r25
    47d2:	61 f4       	brne	.+24     	; 0x47ec <free+0xf4>
    47d4:	4e 5f       	subi	r20, 0xFE	; 254
    47d6:	5f 4f       	sbci	r21, 0xFF	; 255
    47d8:	88 81       	ld	r24, Y
    47da:	99 81       	ldd	r25, Y+1	; 0x01
    47dc:	48 0f       	add	r20, r24
    47de:	59 1f       	adc	r21, r25
    47e0:	51 83       	std	Z+1, r21	; 0x01
    47e2:	40 83       	st	Z, r20
    47e4:	8a 81       	ldd	r24, Y+2	; 0x02
    47e6:	9b 81       	ldd	r25, Y+3	; 0x03
    47e8:	93 83       	std	Z+3, r25	; 0x03
    47ea:	82 83       	std	Z+2, r24	; 0x02
    47ec:	21 15       	cp	r18, r1
    47ee:	31 05       	cpc	r19, r1
    47f0:	09 f0       	breq	.+2      	; 0x47f4 <free+0xfc>
    47f2:	b0 cf       	rjmp	.-160    	; 0x4754 <free+0x5c>
    47f4:	f0 93 58 04 	sts	0x0458, r31	; 0x800458 <__flp+0x1>
    47f8:	e0 93 57 04 	sts	0x0457, r30	; 0x800457 <__flp>
    47fc:	9e cf       	rjmp	.-196    	; 0x473a <free+0x42>
    47fe:	fd 01       	movw	r30, r26
    4800:	dc 01       	movw	r26, r24
    4802:	c0 cf       	rjmp	.-128    	; 0x4784 <free+0x8c>
    4804:	13 82       	std	Z+3, r1	; 0x03
    4806:	12 82       	std	Z+2, r1	; 0x02
    4808:	d7 cf       	rjmp	.-82     	; 0x47b8 <free+0xc0>

0000480a <realloc>:
realloc():
    480a:	b0 e0       	ldi	r27, 0x00	; 0
    480c:	a0 e0       	ldi	r26, 0x00	; 0
    480e:	eb e0       	ldi	r30, 0x0B	; 11
    4810:	f4 e2       	ldi	r31, 0x24	; 36
    4812:	0c 94 6c 22 	jmp	0x44d8	; 0x44d8 <__prologue_saves__+0x4>
    4816:	8c 01       	movw	r16, r24
    4818:	00 97       	sbiw	r24, 0x00	; 0
    481a:	51 f4       	brne	.+20     	; 0x4830 <realloc+0x26>
    481c:	cb 01       	movw	r24, r22
    481e:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <malloc>
    4822:	8c 01       	movw	r16, r24
    4824:	c8 01       	movw	r24, r16
    4826:	cd b7       	in	r28, 0x3d	; 61
    4828:	de b7       	in	r29, 0x3e	; 62
    482a:	e0 e1       	ldi	r30, 0x10	; 16
    482c:	0c 94 88 22 	jmp	0x4510	; 0x4510 <__epilogue_restores__+0x4>
    4830:	fc 01       	movw	r30, r24
    4832:	e6 0f       	add	r30, r22
    4834:	f7 1f       	adc	r31, r23
    4836:	9c 01       	movw	r18, r24
    4838:	22 50       	subi	r18, 0x02	; 2
    483a:	31 09       	sbc	r19, r1
    483c:	e2 17       	cp	r30, r18
    483e:	f3 07       	cpc	r31, r19
    4840:	08 f4       	brcc	.+2      	; 0x4844 <realloc+0x3a>
    4842:	9d c0       	rjmp	.+314    	; 0x497e <realloc+0x174>
    4844:	d9 01       	movw	r26, r18
    4846:	cd 91       	ld	r28, X+
    4848:	dc 91       	ld	r29, X
    484a:	11 97       	sbiw	r26, 0x01	; 1
    484c:	c6 17       	cp	r28, r22
    484e:	d7 07       	cpc	r29, r23
    4850:	98 f0       	brcs	.+38     	; 0x4878 <realloc+0x6e>
    4852:	c5 30       	cpi	r28, 0x05	; 5
    4854:	d1 05       	cpc	r29, r1
    4856:	30 f3       	brcs	.-52     	; 0x4824 <realloc+0x1a>
    4858:	ce 01       	movw	r24, r28
    485a:	04 97       	sbiw	r24, 0x04	; 4
    485c:	86 17       	cp	r24, r22
    485e:	97 07       	cpc	r25, r23
    4860:	08 f3       	brcs	.-62     	; 0x4824 <realloc+0x1a>
    4862:	c6 1b       	sub	r28, r22
    4864:	d7 0b       	sbc	r29, r23
    4866:	22 97       	sbiw	r28, 0x02	; 2
    4868:	c1 93       	st	Z+, r28
    486a:	d1 93       	st	Z+, r29
    486c:	6d 93       	st	X+, r22
    486e:	7c 93       	st	X, r23
    4870:	cf 01       	movw	r24, r30
    4872:	0e 94 7c 23 	call	0x46f8	; 0x46f8 <free>
    4876:	d6 cf       	rjmp	.-84     	; 0x4824 <realloc+0x1a>
    4878:	5b 01       	movw	r10, r22
    487a:	ac 1a       	sub	r10, r28
    487c:	bd 0a       	sbc	r11, r29
    487e:	4c 01       	movw	r8, r24
    4880:	8c 0e       	add	r8, r28
    4882:	9d 1e       	adc	r9, r29
    4884:	a0 91 57 04 	lds	r26, 0x0457	; 0x800457 <__flp>
    4888:	b0 91 58 04 	lds	r27, 0x0458	; 0x800458 <__flp+0x1>
    488c:	51 2c       	mov	r5, r1
    488e:	41 2c       	mov	r4, r1
    4890:	f1 2c       	mov	r15, r1
    4892:	e1 2c       	mov	r14, r1
    4894:	10 97       	sbiw	r26, 0x00	; 0
    4896:	31 f5       	brne	.+76     	; 0x48e4 <realloc+0xda>
    4898:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <__brkval>
    489c:	90 91 56 04 	lds	r25, 0x0456	; 0x800456 <__brkval+0x1>
    48a0:	88 15       	cp	r24, r8
    48a2:	99 05       	cpc	r25, r9
    48a4:	09 f0       	breq	.+2      	; 0x48a8 <realloc+0x9e>
    48a6:	5c c0       	rjmp	.+184    	; 0x4960 <realloc+0x156>
    48a8:	46 16       	cp	r4, r22
    48aa:	57 06       	cpc	r5, r23
    48ac:	08 f0       	brcs	.+2      	; 0x48b0 <realloc+0xa6>
    48ae:	58 c0       	rjmp	.+176    	; 0x4960 <realloc+0x156>
    48b0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__malloc_heap_end>
    48b4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__malloc_heap_end+0x1>
    48b8:	00 97       	sbiw	r24, 0x00	; 0
    48ba:	41 f4       	brne	.+16     	; 0x48cc <realloc+0xc2>
    48bc:	8d b7       	in	r24, 0x3d	; 61
    48be:	9e b7       	in	r25, 0x3e	; 62
    48c0:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <__malloc_margin>
    48c4:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <__malloc_margin+0x1>
    48c8:	84 1b       	sub	r24, r20
    48ca:	95 0b       	sbc	r25, r21
    48cc:	e8 17       	cp	r30, r24
    48ce:	f9 07       	cpc	r31, r25
    48d0:	08 f0       	brcs	.+2      	; 0x48d4 <realloc+0xca>
    48d2:	55 c0       	rjmp	.+170    	; 0x497e <realloc+0x174>
    48d4:	f0 93 56 04 	sts	0x0456, r31	; 0x800456 <__brkval+0x1>
    48d8:	e0 93 55 04 	sts	0x0455, r30	; 0x800455 <__brkval>
    48dc:	f9 01       	movw	r30, r18
    48de:	71 83       	std	Z+1, r23	; 0x01
    48e0:	60 83       	st	Z, r22
    48e2:	a0 cf       	rjmp	.-192    	; 0x4824 <realloc+0x1a>
    48e4:	8d 91       	ld	r24, X+
    48e6:	9c 91       	ld	r25, X
    48e8:	11 97       	sbiw	r26, 0x01	; 1
    48ea:	12 96       	adiw	r26, 0x02	; 2
    48ec:	6c 90       	ld	r6, X
    48ee:	12 97       	sbiw	r26, 0x02	; 2
    48f0:	13 96       	adiw	r26, 0x03	; 3
    48f2:	7c 90       	ld	r7, X
    48f4:	13 97       	sbiw	r26, 0x03	; 3
    48f6:	a8 15       	cp	r26, r8
    48f8:	b9 05       	cpc	r27, r9
    48fa:	59 f5       	brne	.+86     	; 0x4952 <realloc+0x148>
    48fc:	6c 01       	movw	r12, r24
    48fe:	42 e0       	ldi	r20, 0x02	; 2
    4900:	c4 0e       	add	r12, r20
    4902:	d1 1c       	adc	r13, r1
    4904:	ca 14       	cp	r12, r10
    4906:	db 04       	cpc	r13, r11
    4908:	20 f1       	brcs	.+72     	; 0x4952 <realloc+0x148>
    490a:	ac 01       	movw	r20, r24
    490c:	4a 19       	sub	r20, r10
    490e:	5b 09       	sbc	r21, r11
    4910:	da 01       	movw	r26, r20
    4912:	12 96       	adiw	r26, 0x02	; 2
    4914:	15 97       	sbiw	r26, 0x05	; 5
    4916:	80 f0       	brcs	.+32     	; 0x4938 <realloc+0x12e>
    4918:	62 82       	std	Z+2, r6	; 0x02
    491a:	73 82       	std	Z+3, r7	; 0x03
    491c:	51 83       	std	Z+1, r21	; 0x01
    491e:	40 83       	st	Z, r20
    4920:	d9 01       	movw	r26, r18
    4922:	6d 93       	st	X+, r22
    4924:	7c 93       	st	X, r23
    4926:	e1 14       	cp	r14, r1
    4928:	f1 04       	cpc	r15, r1
    492a:	71 f0       	breq	.+28     	; 0x4948 <realloc+0x13e>
    492c:	d7 01       	movw	r26, r14
    492e:	13 96       	adiw	r26, 0x03	; 3
    4930:	fc 93       	st	X, r31
    4932:	ee 93       	st	-X, r30
    4934:	12 97       	sbiw	r26, 0x02	; 2
    4936:	76 cf       	rjmp	.-276    	; 0x4824 <realloc+0x1a>
    4938:	22 96       	adiw	r28, 0x02	; 2
    493a:	8c 0f       	add	r24, r28
    493c:	9d 1f       	adc	r25, r29
    493e:	f9 01       	movw	r30, r18
    4940:	91 83       	std	Z+1, r25	; 0x01
    4942:	80 83       	st	Z, r24
    4944:	f3 01       	movw	r30, r6
    4946:	ef cf       	rjmp	.-34     	; 0x4926 <realloc+0x11c>
    4948:	f0 93 58 04 	sts	0x0458, r31	; 0x800458 <__flp+0x1>
    494c:	e0 93 57 04 	sts	0x0457, r30	; 0x800457 <__flp>
    4950:	69 cf       	rjmp	.-302    	; 0x4824 <realloc+0x1a>
    4952:	48 16       	cp	r4, r24
    4954:	59 06       	cpc	r5, r25
    4956:	08 f4       	brcc	.+2      	; 0x495a <realloc+0x150>
    4958:	2c 01       	movw	r4, r24
    495a:	7d 01       	movw	r14, r26
    495c:	d3 01       	movw	r26, r6
    495e:	9a cf       	rjmp	.-204    	; 0x4894 <realloc+0x8a>
    4960:	cb 01       	movw	r24, r22
    4962:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <malloc>
    4966:	7c 01       	movw	r14, r24
    4968:	00 97       	sbiw	r24, 0x00	; 0
    496a:	49 f0       	breq	.+18     	; 0x497e <realloc+0x174>
    496c:	ae 01       	movw	r20, r28
    496e:	b8 01       	movw	r22, r16
    4970:	0e 94 c7 24 	call	0x498e	; 0x498e <memcpy>
    4974:	c8 01       	movw	r24, r16
    4976:	0e 94 7c 23 	call	0x46f8	; 0x46f8 <free>
    497a:	87 01       	movw	r16, r14
    497c:	53 cf       	rjmp	.-346    	; 0x4824 <realloc+0x1a>
    497e:	10 e0       	ldi	r17, 0x00	; 0
    4980:	00 e0       	ldi	r16, 0x00	; 0
    4982:	50 cf       	rjmp	.-352    	; 0x4824 <realloc+0x1a>

00004984 <abort>:
abort():
    4984:	81 e0       	ldi	r24, 0x01	; 1
    4986:	90 e0       	ldi	r25, 0x00	; 0
    4988:	f8 94       	cli
    498a:	0c 94 de 24 	jmp	0x49bc	; 0x49bc <__do_global_dtors>

0000498e <memcpy>:
memcpy():
    498e:	fb 01       	movw	r30, r22
    4990:	dc 01       	movw	r26, r24
    4992:	02 c0       	rjmp	.+4      	; 0x4998 <memcpy+0xa>
    4994:	01 90       	ld	r0, Z+
    4996:	0d 92       	st	X+, r0
    4998:	41 50       	subi	r20, 0x01	; 1
    499a:	50 40       	sbci	r21, 0x00	; 0
    499c:	d8 f7       	brcc	.-10     	; 0x4994 <memcpy+0x6>
    499e:	08 95       	ret

000049a0 <memset>:
memset():
    49a0:	dc 01       	movw	r26, r24
    49a2:	01 c0       	rjmp	.+2      	; 0x49a6 <memset+0x6>
    49a4:	6d 93       	st	X+, r22
    49a6:	41 50       	subi	r20, 0x01	; 1
    49a8:	50 40       	sbci	r21, 0x00	; 0
    49aa:	e0 f7       	brcc	.-8      	; 0x49a4 <memset+0x4>
    49ac:	08 95       	ret

000049ae <strcpy>:
strcpy():
    49ae:	fb 01       	movw	r30, r22
    49b0:	dc 01       	movw	r26, r24
    49b2:	01 90       	ld	r0, Z+
    49b4:	0d 92       	st	X+, r0
    49b6:	00 20       	and	r0, r0
    49b8:	e1 f7       	brne	.-8      	; 0x49b2 <strcpy+0x4>
    49ba:	08 95       	ret

000049bc <__do_global_dtors>:
__do_global_dtors():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    49bc:	19 e0       	ldi	r17, 0x09	; 9
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    49be:	c0 e2       	ldi	r28, 0x20	; 32
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    49c0:	d9 e0       	ldi	r29, 0x09	; 9
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    49c2:	04 c0       	rjmp	.+8      	; 0x49cc <__do_global_dtors+0x10>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    49c4:	fe 01       	movw	r30, r28
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    49c6:	0e 94 da 22 	call	0x45b4	; 0x45b4 <__tablejump2__>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    49ca:	21 96       	adiw	r28, 0x01	; 1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    49cc:	c1 32       	cpi	r28, 0x21	; 33
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    49ce:	d1 07       	cpc	r29, r17
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    49d0:	c9 f7       	brne	.-14     	; 0x49c4 <__do_global_dtors+0x8>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    49d2:	f8 94       	cli

000049d4 <__stop_program>:
__stop_program():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    49d4:	ff cf       	rjmp	.-2      	; 0x49d4 <__stop_program>
